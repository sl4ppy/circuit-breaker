{"version":3,"file":"index-302b37c8.js","sources":["../../src/utils/Logger.ts","../../src/core/GameState.ts","../../src/utils/FontManager.ts","../../src/core/GameLoop.ts","../../src/utils/Debug.ts","../../src/rendering/SpriteAtlas.ts","../../src/rendering/Renderer.ts","../../src/physics/PhysicsEngine.ts","../../src/core/TiltingBar.ts","../../src/input/InputManager.ts","../../src/core/Level.ts","../../src/audio/AudioManager.ts","../../src/ui/Button.ts","../../src/ui/Slider.ts","../../src/ui/SettingsMenu.ts","../../src/ui/SaveLoadMenu.ts","../../src/ui/AchievementNotification.ts","../../src/ui/StatsMenu.ts","../../src/core/StorageManager.ts","../../src/core/AchievementManager.ts","../../src/core/StatsManager.ts","../../src/core/PowerUpManager.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["// Circuit Breaker - Centralized Logging System\n// Structured logging with levels and production filtering\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  data?: unknown;\n  context?: string;\n}\n\nexport class Logger {\n  private static instance: Logger;\n  private logLevel: LogLevel = LogLevel.INFO;\n  private logs: LogEntry[] = [];\n  private maxLogs: number = 1000;\n  private isProduction: boolean = false;\n\n  private constructor() {\n    this.isProduction = process.env.NODE_ENV === 'production';\n    if (this.isProduction) {\n      this.logLevel = LogLevel.WARN; // Only show warnings and errors in production\n    }\n  }\n\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  /**\n   * Set the minimum log level\n   */\n  public setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  /**\n   * Log a debug message\n   */\n  public debug(message: string, data?: unknown, context?: string): void {\n    this.log(LogLevel.DEBUG, message, data, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  public info(message: string, data?: unknown, context?: string): void {\n    this.log(LogLevel.INFO, message, data, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  public warn(message: string, data?: unknown, context?: string): void {\n    this.log(LogLevel.WARN, message, data, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  public error(message: string, data?: unknown, context?: string): void {\n    this.log(LogLevel.ERROR, message, data, context);\n  }\n\n  /**\n   * Internal logging method\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    data?: unknown,\n    context?: string,\n  ): void {\n    if (level < this.logLevel) return;\n\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data,\n      context,\n    };\n\n    this.logs.push(entry);\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n\n    // Output to console with appropriate method\n    const logMessage = this.formatMessage(entry);\n\n    // Use console methods directly since this is the Logger class itself\n    switch (level) {\n    case LogLevel.DEBUG:\n      // eslint-disable-next-line no-console\n      console.debug(logMessage, data || '');\n      break;\n    case LogLevel.INFO:\n      // eslint-disable-next-line no-console\n      console.info(logMessage, data || '');\n      break;\n    case LogLevel.WARN:\n      // eslint-disable-next-line no-console\n      console.warn(logMessage, data || '');\n      break;\n    case LogLevel.ERROR:\n      // eslint-disable-next-line no-console\n      console.error(logMessage, data || '');\n      break;\n    }\n  }\n\n  /**\n   * Format log message with timestamp and context\n   */\n  private formatMessage(entry: LogEntry): string {\n    const levelStr = LogLevel[entry.level];\n    const contextStr = entry.context ? `[${entry.context}]` : '';\n    return `[${entry.timestamp}] ${levelStr}${contextStr}: ${entry.message}`;\n  }\n\n  /**\n   * Get all logs\n   */\n  public getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Clear all logs\n   */\n  public clearLogs(): void {\n    this.logs = [];\n  }\n\n  /**\n   * Export logs for debugging\n   */\n  public exportLogs(): string {\n    return JSON.stringify(this.logs, null, 2);\n  }\n\n  /**\n   * Get logs by level\n   */\n  public getLogsByLevel(level: LogLevel): LogEntry[] {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  /**\n   * Get recent logs (last N entries)\n   */\n  public getRecentLogs(count: number): LogEntry[] {\n    return this.logs.slice(-count);\n  }\n}\n\n// Export singleton instance\nexport const logger = Logger.getInstance();\n","// Circuit Breaker - Game State Management\n// Handles different game states and transitions\n\nimport { logger } from '../utils/Logger';\n\nexport enum GameStateType {\n  MENU = 'menu',\n  ATTRACT_MODE = 'attract_mode', // Auto-play demo mode\n  PLAYING = 'playing',\n  PAUSED = 'paused',\n  CONFIRM_MENU = 'confirm_menu', // Confirmation dialog for returning to menu\n  SETTINGS = 'settings', // Settings menu overlay\n  SAVE_LOAD = 'save_load', // Save/load menu overlay\n  STATS = 'stats', // Stats menu overlay\n  LEVEL_COMPLETE = 'level_complete',\n  GAME_OVER = 'game_over',\n  LOADING = 'loading',\n}\n\nexport interface GameStateData {\n  currentLevel: number;\n  score: number;\n  lives: number;\n  isPaused: boolean;\n  isGameOver: boolean;\n  debugMode: boolean;\n  // Power-up related state\n  activePowerUps: string[];\n  powerUpEffects: {\n    timeScale?: number;\n    magneticForce?: number;\n    shieldActive?: boolean;\n    barSpeedMultiplier?: number;\n    scanActive?: boolean;\n  };\n}\n\nexport class GameState {\n  private currentState: GameStateType = GameStateType.MENU;\n  private stateData: GameStateData = {\n    currentLevel: 1,\n    score: 0,\n    lives: 3,\n    isPaused: false,\n    isGameOver: false,\n    debugMode: false,\n    // Power-up related state\n    activePowerUps: [],\n    powerUpEffects: {},\n  };\n\n  constructor() {\n    logger.info('üìä GameState initialized', null, 'GameState');\n  }\n\n  /**\n   * Get current game state\n   */\n  public getCurrentState(): GameStateType {\n    return this.currentState;\n  }\n\n  /**\n   * Set game state\n   */\n  public setState(newState: GameStateType): void {\n    const previousState = this.currentState;\n    this.currentState = newState;\n    logger.info(`üîÑ Game state changed: ${previousState} ‚Üí ${newState}`, null, 'GameState');\n  }\n\n  /**\n   * Get state data\n   */\n  public getStateData(): GameStateData {\n    return { ...this.stateData };\n  }\n\n  /**\n   * Update state data\n   */\n  public updateStateData(updates: Partial<GameStateData>): void {\n    this.stateData = { ...this.stateData, ...updates };\n  }\n\n  /**\n   * Check if current state is a specific type\n   */\n  public isState(state: GameStateType): boolean {\n    return this.currentState === state;\n  }\n\n  /**\n   * Check if game is in playing state\n   */\n  public isPlaying(): boolean {\n    return this.currentState === GameStateType.PLAYING;\n  }\n\n  /**\n   * Check if game is paused\n   */\n  public isPaused(): boolean {\n    return this.currentState === GameStateType.PAUSED;\n  }\n\n  /**\n   * Check if game is over\n   */\n  public isGameOver(): boolean {\n    return this.currentState === GameStateType.GAME_OVER;\n  }\n\n  /**\n   * Check if confirmation dialog is showing\n   */\n  public isConfirmingMenu(): boolean {\n    return this.currentState === GameStateType.CONFIRM_MENU;\n  }\n\n  /**\n   * Check if in attract mode\n   */\n  public isAttractMode(): boolean {\n    return this.currentState === GameStateType.ATTRACT_MODE;\n  }\n\n  /**\n   * Check if in loading state\n   */\n  public isLoading(): boolean {\n    return this.currentState === GameStateType.LOADING;\n  }\n\n  /**\n   * Check if in settings state\n   */\n  public isSettings(): boolean {\n    return this.currentState === GameStateType.SETTINGS;\n  }\n\n  /**\n   * Check if in save/load state\n   */\n  public isSaveLoad(): boolean {\n    return this.currentState === GameStateType.SAVE_LOAD;\n  }\n\n  /**\n   * Check if in stats state\n   */\n  public isStats(): boolean {\n    return this.currentState === GameStateType.STATS;\n  }\n\n  /**\n   * Check if debug mode is enabled\n   */\n  public isDebugMode(): boolean {\n    return this.stateData.debugMode;\n  }\n\n  /**\n   * Toggle debug mode\n   */\n  public toggleDebugMode(): void {\n    this.stateData.debugMode = !this.stateData.debugMode;\n    logger.info(\n      `üêõ Debug mode ${this.stateData.debugMode ? 'enabled' : 'disabled'}`,\n      null,\n      'GameState',\n    );\n  }\n\n  /**\n   * Set debug mode\n   */\n  public setDebugMode(enabled: boolean): void {\n    this.stateData.debugMode = enabled;\n    logger.info(`üêõ Debug mode ${enabled ? 'enabled' : 'disabled'}`, null, 'GameState');\n  }\n\n  /**\n   * Reset game state to initial values\n   */\n  public reset(): void {\n    this.currentState = GameStateType.MENU;\n    this.stateData = {\n      currentLevel: 1,\n      score: 0,\n      lives: 3,\n      isPaused: false,\n      isGameOver: false,\n      debugMode: false,\n      // Power-up related state\n      activePowerUps: [],\n      powerUpEffects: {},\n    };\n    logger.info('üîÑ Game state reset', null, 'GameState');\n  }\n}\n","// Circuit Breaker - Font Manager\n// Centralized font management for Canvas rendering\n\nimport { logger } from './Logger';\n\nexport class FontManager {\n  private static instance: FontManager;\n  private fontsLoaded: boolean = false;\n\n  // Font definitions with fallbacks\n  private fonts = {\n    primary: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace',\n    display: 'Cyberpunks, Interceptor, \"Courier New\", monospace',\n    mono: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace',\n  };\n\n  private constructor() {\n    this.loadFonts();\n  }\n\n  public static getInstance(): FontManager {\n    if (!FontManager.instance) {\n      FontManager.instance = new FontManager();\n    }\n    return FontManager.instance;\n  }\n\n  /**\n   * Load custom fonts and check if they're available\n   */\n  private async loadFonts(): Promise<void> {\n    try {\n      // Check if fonts are available using CSS Font Loading API\n      if ('fonts' in document) {\n        // Create font faces with better error handling\n        const fontPromises: Promise<FontFace>[] = [];\n\n        // Load Cyberpunks font family (using relative paths for GitHub Pages compatibility)\n        try {\n          const cyberpunksRegular = new FontFace(\n            'Cyberpunks',\n            'url(\"./assets/fonts/Cyberpunks.otf\")',\n          );\n          const cyberpunksItalic = new FontFace(\n            'Cyberpunks',\n            'url(\"./assets/fonts/Cyberpunks Italic.otf\")',\n            { style: 'italic' },\n          );\n          fontPromises.push(cyberpunksRegular.load(), cyberpunksItalic.load());\n        } catch (e) {\n          logger.warn('‚ö†Ô∏è Cyberpunks font creation failed:', e, 'FontManager');\n        }\n\n        // Load Interceptor font family (using relative paths for GitHub Pages compatibility)\n        try {\n          const interceptorRegular = new FontFace(\n            'Interceptor',\n            'url(\"./assets/fonts/Interceptor.otf\")',\n          );\n          const interceptorItalic = new FontFace(\n            'Interceptor',\n            'url(\"./assets/fonts/Interceptor Italic.otf\")',\n            { style: 'italic' },\n          );\n          const interceptorBold = new FontFace(\n            'Interceptor',\n            'url(\"./assets/fonts/Interceptor Bold.otf\")',\n            { weight: 'bold' },\n          );\n          const interceptorBoldItalic = new FontFace(\n            'Interceptor',\n            'url(\"./assets/fonts/Interceptor Bold Italic.otf\")',\n            { weight: 'bold', style: 'italic' },\n          );\n          fontPromises.push(\n            interceptorRegular.load(),\n            interceptorItalic.load(),\n            interceptorBold.load(),\n            interceptorBoldItalic.load(),\n          );\n        } catch (e) {\n          logger.warn('‚ö†Ô∏è Interceptor font creation failed:', e, 'FontManager');\n        }\n\n        if (fontPromises.length > 0) {\n          // Load fonts with individual error handling\n          const results = await Promise.allSettled(fontPromises);\n\n          let loadedCount = 0;\n          results.forEach((result, index) => {\n            if (result.status === 'fulfilled') {\n              try {\n                document.fonts.add(result.value);\n                loadedCount++;\n              } catch (e) {\n                logger.warn(`‚ö†Ô∏è Failed to add font ${index} to document:`, e, 'FontManager');\n              }\n            } else {\n              logger.warn(`‚ö†Ô∏è Font ${index} failed to load:`, result.reason, 'FontManager');\n            }\n          });\n\n          if (loadedCount > 0) {\n            this.fontsLoaded = true;\n            logger.info(\n              `üé® Loaded ${loadedCount}/${fontPromises.length} custom fonts successfully`,\n              null,\n              'FontManager',\n            );\n          } else {\n            this.fontsLoaded = false;\n            logger.warn('‚ö†Ô∏è No custom fonts loaded, using fallbacks', null, 'FontManager');\n          }\n        } else {\n          this.fontsLoaded = false;\n          logger.warn('‚ö†Ô∏è No fonts could be created, using fallbacks', null, 'FontManager');\n        }\n      } else {\n        this.fontsLoaded = false;\n        logger.warn('‚ö†Ô∏è Font Loading API not available, using fallbacks', null, 'FontManager');\n      }\n    } catch (error) {\n      logger.warn('‚ö†Ô∏è Font loading completely failed, using fallbacks:', error, 'FontManager');\n      this.fontsLoaded = false;\n    }\n  }\n\n  /**\n   * Get font string for Canvas context\n   */\n  public getFont(\n    type: 'primary' | 'display' | 'mono',\n    size: number,\n    weight: 'normal' | 'bold' = 'normal',\n  ): string {\n    const fontFamily = this.fonts[type];\n    return `${weight} ${size}px ${fontFamily}`;\n  }\n\n  /**\n   * Set font on Canvas context\n   */\n  public setFont(\n    ctx: CanvasRenderingContext2D,\n    type: 'primary' | 'display' | 'mono',\n    size: number,\n    weight: 'normal' | 'bold' = 'normal',\n  ): void {\n    ctx.font = this.getFont(type, size, weight);\n  }\n\n  /**\n   * Check if custom fonts are loaded\n   */\n  public areFontsLoaded(): boolean {\n    return this.fontsLoaded;\n  }\n\n  /**\n   * Preload fonts (call this early in initialization)\n   */\n  public async preloadFonts(): Promise<void> {\n    if (!this.fontsLoaded) {\n      await this.loadFonts();\n    }\n  }\n\n  /**\n   * Get available font types\n   */\n  public getFontTypes(): string[] {\n    return Object.keys(this.fonts);\n  }\n\n  /**\n   * Check if specific font family is available\n   */\n  public isFontAvailable(fontFamily: string): boolean {\n    if (!('fonts' in document)) return false;\n    return document.fonts.check(`12px ${fontFamily}`);\n  }\n}\n\n// Export singleton instance\nexport const fontManager = FontManager.getInstance();\n","// Circuit Breaker - Game Loop\n// Handles the main game loop with fixed timestep and performance optimization\n\nimport { GameState, GameStateType } from './GameState';\nimport { Renderer } from '../rendering/Renderer';\nimport { PhysicsEngine } from '../physics/PhysicsEngine';\nimport { Game } from './Game';\nimport { fontManager } from '../utils/FontManager';\nimport { logger } from '../utils/Logger';\n\nexport class GameLoop {\n  private animationId: number | null = null;\n  private lastTime: number = 0;\n  private accumulator: number = 0;\n  private readonly timestep: number = 1000 / 60; // 60 FPS\n  private isRunning: boolean = false;\n  private isPaused: boolean = false;\n  private renderer: Renderer | null = null;\n  private physicsEngine: PhysicsEngine | null = null;\n  private game: Game | null = null;\n  \n  // FPS tracking\n  private fpsUpdateTime: number = 0;\n  private frameCount: number = 0;\n  private currentFPS: number = 60;\n  private readonly FPS_UPDATE_INTERVAL: number = 1000; // Update FPS every second\n\n  constructor() {\n    logger.info('üîÑ GameLoop initialized', null, 'GameLoop');\n  }\n\n  /**\n   * Start the game loop\n   */\n  public start(\n    gameState: GameState,\n    renderer?: Renderer,\n    physicsEngine?: PhysicsEngine,\n    game?: Game,\n  ): void {\n    if (this.isRunning) {\n      logger.warn('‚ö†Ô∏è Game loop is already running');\n      return;\n    }\n\n    this.renderer = renderer || null;\n    this.physicsEngine = physicsEngine || null;\n    this.game = game || null;\n\n    this.isRunning = true;\n    this.isPaused = false;\n    this.lastTime = performance.now();\n    this.accumulator = 0;\n\n    logger.info('‚ñ∂Ô∏è Game loop started', null, 'GameLoop');\n    this.gameLoop(gameState);\n  }\n\n  /**\n   * Main game loop with fixed timestep\n   */\n  private gameLoop(gameState: GameState): void {\n    if (!this.isRunning) return;\n\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.lastTime = currentTime;\n\n    // Update FPS tracking\n    this.updateFPSTracking(currentTime);\n\n    // Apply power-up time scaling to the entire game loop\n    let scaledDeltaTime = deltaTime;\n    if (this.game && this.game.getPowerUpManager) {\n      const powerUpEffects = this.game.getPowerUpManager().getPowerUpEffects();\n      if (powerUpEffects.timeScale) {\n        scaledDeltaTime = deltaTime * powerUpEffects.timeScale;\n        console.log(`‚è∞ GameLoop: timeScale=${powerUpEffects.timeScale}, deltaTime=${deltaTime}ms -> ${scaledDeltaTime}ms`);\n      }\n    }\n\n    // Accumulate time with scaling\n    this.accumulator += scaledDeltaTime;\n\n    // Update with fixed timestep\n    while (this.accumulator >= this.timestep) {\n      if (!this.isPaused) {\n        this.update(gameState, this.timestep);\n      }\n      this.accumulator -= this.timestep;\n    }\n\n    // Render\n    this.render(gameState);\n\n    // Continue loop\n    this.animationId = requestAnimationFrame(() => this.gameLoop(gameState));\n  }\n\n  /**\n   * Update game logic\n   */\n  private update(_gameState: GameState, deltaTime: number): void {\n    // Update game logic if available\n    if (this.game && this.game.update) {\n      this.game.update(deltaTime);\n    }\n\n    // Update physics if available\n    if (this.physicsEngine) {\n      this.physicsEngine.update(deltaTime);\n    }\n  }\n\n  /**\n   * Render the game\n   */\n  private render(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    // Clear canvas\n    this.renderer.clear();\n\n    // Render game based on state\n    if (gameState.isLoading()) {\n      this.renderLoading(gameState);\n    } else if (gameState.isPlaying()) {\n      this.renderGameplay(gameState);\n      this.renderAchievementNotification();\n    } else if (gameState.isAttractMode()) {\n      this.renderAttractMode(gameState);\n    } else if (gameState.isState(GameStateType.SETTINGS)) {\n      // Draw the appropriate background for the settings overlay\n      const game = this.game;\n      const ctx = this.renderer.getContext();\n      if (!ctx || !game || typeof game['settingsMenu'] === 'undefined' || !game['settingsMenu']) return;\n      // Use the public isFromPauseMenu getter\n      if (game['settingsMenu'].isFromPauseMenu) {\n        this.renderPaused();\n      } else {\n        this.renderMenu(gameState);\n      }\n      // Draw the settings menu overlay on top\n      game['settingsMenu'].draw(ctx);\n    } else if (gameState.isState(GameStateType.SAVE_LOAD)) {\n      // Draw the appropriate background for the save/load overlay\n      const game = this.game;\n      const ctx = this.renderer.getContext();\n      if (!ctx || !game || typeof game['saveLoadMenu'] === 'undefined' || !game['saveLoadMenu']) return;\n      \n      // Always draw menu background for save/load menu\n      this.renderMenu(gameState);\n      \n      // Draw the save/load menu overlay on top\n      game['saveLoadMenu'].render(ctx);\n    } else if (gameState.isState(GameStateType.STATS)) {\n      // Draw the appropriate background for the stats overlay\n      const game = this.game;\n      const ctx = this.renderer.getContext();\n      if (!ctx || !game || typeof game['statsMenu'] === 'undefined' || !game['statsMenu']) return;\n      \n      // Always draw menu background for stats menu\n      this.renderMenu(gameState);\n      \n      // Draw the stats menu overlay on top\n      game['statsMenu'].render(ctx);\n    } else if (gameState.isState(GameStateType.MENU)) {\n      this.renderMenu(gameState);\n    } else if (gameState.isState(GameStateType.PAUSED)) {\n      this.renderPaused();\n    } else if (gameState.isState(GameStateType.CONFIRM_MENU)) {\n      this.renderConfirmDialog(gameState);\n    } else if (gameState.isState(GameStateType.GAME_OVER)) {\n      this.renderGameOver(gameState);\n    }\n  }\n\n  /**\n   * Render gameplay\n   */\n  private renderGameplay(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw background\n    this.renderer.drawBackground();\n\n    // Draw all physics objects except balls first\n    if (this.physicsEngine) {\n      for (const obj of this.physicsEngine.getObjects()) {\n        // Skip balls - we'll draw them last\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\n          continue;\n        }\n\n        // Render other objects as simple circles\n        ctx.beginPath();\n        const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 };\n        const radius = obj.radius || 10;\n        ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n\n        // Different colors for different object types\n        if (obj.isStatic) {\n          ctx.fillStyle = '#ff0066'; // Red for static obstacles\n          ctx.shadowColor = '#ff0066';\n        } else {\n          ctx.fillStyle = '#00ffff'; // Cyan for dynamic objects\n          ctx.shadowColor = '#00ffff';\n        }\n\n        ctx.shadowBlur = 16;\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        ctx.closePath();\n\n        // Debug info for non-ball objects - only show if debug mode is enabled\n        if (\n          gameState.isDebugMode() &&\n          this.physicsEngine.getDebug &&\n          this.physicsEngine.getDebug()\n        ) {\n          // Draw velocity vectors for debugging\n          if (!obj.isStatic && obj.velocity) {\n            const velScale = 3; // Reduced scale for performance\n            ctx.beginPath();\n            ctx.moveTo(pos.x, pos.y);\n            ctx.lineTo(\n              pos.x + obj.velocity.x * velScale,\n              pos.y + obj.velocity.y * velScale,\n            );\n            ctx.strokeStyle = '#ffff00';\n            ctx.lineWidth = 1;\n            ctx.stroke();\n            ctx.closePath();\n          }\n\n          // Draw minimal object info\n          ctx.fillStyle = '#ffffff';\n          ctx.font = '8px Courier New';\n          ctx.textAlign = 'center';\n          ctx.fillText(obj.id, pos.x, pos.y - radius - 5);\n        }\n      }\n\n      // Only draw debug info when debug mode is enabled\n      if (\n        gameState.isDebugMode() &&\n        this.physicsEngine.getDebug &&\n        this.physicsEngine.getDebug()\n      ) {\n        // Draw collision manifolds for debugging\n        if (this.physicsEngine.getCollisionManifolds) {\n          const manifolds = this.physicsEngine.getCollisionManifolds();\n          for (const manifold of manifolds) {\n            // Draw collision point\n            ctx.beginPath();\n            ctx.arc(\n              manifold.contactPoint.x,\n              manifold.contactPoint.y,\n              2,\n              0,\n              Math.PI * 2,\n            );\n            ctx.fillStyle = '#ff0000';\n            ctx.fill();\n            ctx.closePath();\n          }\n        }\n\n        // Draw constraints for debugging\n        if (this.physicsEngine.getConstraints) {\n          const constraints = this.physicsEngine.getConstraints();\n          for (const constraint of constraints) {\n            if (constraint.type === 'distance' && constraint.objectB) {\n              // Draw distance constraint as a line\n              ctx.beginPath();\n              ctx.moveTo(\n                constraint.objectA.position.x,\n                constraint.objectA.position.y,\n              );\n              ctx.lineTo(\n                constraint.objectB.position.x,\n                constraint.objectB.position.y,\n              );\n              ctx.strokeStyle = '#00ff00';\n              ctx.lineWidth = 1;\n              ctx.setLineDash([3, 3]);\n              ctx.stroke();\n              ctx.setLineDash([]);\n              ctx.closePath();\n            }\n          }\n        }\n      }\n    }\n\n    // Draw placeholder text - only in debug mode\n    if (gameState.isDebugMode()) {\n      ctx.fillStyle = '#00ffff';\n      ctx.font = '20px Courier New';\n      ctx.textAlign = 'center';\n      ctx.fillText('Circuit Breaker', 180, 40);\n      ctx.font = '12px Courier New';\n      ctx.fillText('Robust Physics System Active', 180, 60);\n    }\n\n    // Call game's render method for additional elements (holes, UI, etc.)\n    if (this.game && this.game.renderGameplay) {\n      this.game.renderGameplay();\n    }\n\n    // Draw balls LAST so they appear on top of everything\n    if (this.physicsEngine) {\n      for (const obj of this.physicsEngine.getObjects()) {\n        // Only render balls\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\n          if (this.renderer) {\n            // Get animation state from game if available\n            const animationState =\n              this.game && this.game.getHoleAnimationState\n                ? this.game.getHoleAnimationState() || undefined\n                : undefined;\n            this.renderer.drawChromeBall(obj, animationState);\n          }\n\n          // Debug info for balls - only show if debug mode is enabled\n          if (\n            gameState.isDebugMode() &&\n            this.physicsEngine.getDebug &&\n            this.physicsEngine.getDebug()\n          ) {\n            const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 };\n            const radius = obj.radius || 10;\n\n            // Draw velocity vectors for debugging\n            if (!obj.isStatic && obj.velocity) {\n              const velScale = 3; // Reduced scale for performance\n              ctx.beginPath();\n              ctx.moveTo(pos.x, pos.y);\n              ctx.lineTo(\n                pos.x + obj.velocity.x * velScale,\n                pos.y + obj.velocity.y * velScale,\n              );\n              ctx.strokeStyle = '#ffff00';\n              ctx.lineWidth = 1;\n              ctx.stroke();\n              ctx.closePath();\n            }\n\n            // Draw minimal object info\n            ctx.fillStyle = '#ffffff';\n            ctx.font = '8px Courier New';\n            ctx.textAlign = 'center';\n            ctx.fillText(obj.id, pos.x, pos.y - radius - 5);\n          }\n        }\n      }\n    }\n\n    // Enhanced debug info - only show if debug mode is enabled\n    if (gameState.isDebugMode() && this.physicsEngine) {\n      const objects = this.physicsEngine.getObjects();\n      const dynamicObjects = objects.filter(obj => !obj.isStatic).length;\n      const staticObjects = objects.filter(obj => obj.isStatic).length;\n\n      ctx.font = '10px Courier New';\n      ctx.textAlign = 'left';\n      ctx.fillStyle = '#00ffff';\n      ctx.fillText(\n        `Objects: ${dynamicObjects} dynamic, ${staticObjects} static`,\n        10,\n        610,\n      );\n      ctx.fillText(`Gravity: ${this.physicsEngine.getGravity()}`, 10, 625);\n\n      // Show collision count\n      if (this.physicsEngine.getCollisionManifolds) {\n        const collisionCount =\n          this.physicsEngine.getCollisionManifolds().length;\n        ctx.fillText(`Collisions: ${collisionCount}`, 200, 610);\n      }\n\n      // Show physics performance info\n      ctx.fillText('Physics: Optimized Verlet (1 substep)', 10, 595);\n    }\n  }\n\n  /**\n   * Render loading screen\n   */\n  private renderLoading(_gameState: GameState): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw background\n    this.renderer.drawBackground();\n\n    // Get loading progress from game instance\n    const loadingProgress =\n      this.game && this.game.getLoadingProgress\n        ? this.game.getLoadingProgress()\n        : 0;\n    const loadingStatus =\n      this.game && this.game.getLoadingStatus\n        ? this.game.getLoadingStatus()\n        : 'Initializing...';\n    const isLoadingComplete =\n      this.game && this.game.isLoadingComplete\n        ? this.game.isLoadingComplete()\n        : false;\n\n    // Draw main title with neon glow\n    ctx.save();\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\n    ctx.shadowBlur = 20;\n    ctx.fillStyle = '#b600f9'; // Neon Purple\n    fontManager.setFont(ctx, 'display', 72, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('CIRCUIT', 180, 120);\n    ctx.fillText('BREAKER', 180, 180);\n    ctx.restore();\n\n    // Draw loading text with pulse effect\n    const time = Date.now();\n    const pulseAlpha = 0.6 + 0.4 * Math.sin(time / 600);\n    ctx.save();\n    ctx.globalAlpha = pulseAlpha;\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\n    fontManager.setFont(ctx, 'primary', 18, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('LOADING...', 180, 260);\n    ctx.restore();\n\n    // Draw progress bar background\n    const barWidth = 300;\n    const barHeight = 20;\n    const barX = (360 - barWidth) / 2;\n    const barY = 300;\n\n    ctx.fillStyle = '#222222';\n    ctx.fillRect(barX, barY, barWidth, barHeight);\n\n    // Draw progress bar border\n    ctx.strokeStyle = '#00f0ff';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(barX, barY, barWidth, barHeight);\n\n    // Draw progress bar fill\n    const progressWidth = (loadingProgress / 100) * (barWidth - 4);\n    if (progressWidth > 0) {\n      ctx.fillStyle = '#00f0ff';\n      ctx.fillRect(barX + 2, barY + 2, progressWidth, barHeight - 4);\n    }\n\n    // Draw progress percentage\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 14);\n    ctx.textAlign = 'center';\n    ctx.fillText(`${Math.round(loadingProgress)}%`, 180, 345);\n\n    // Draw loading status with different styling when complete\n    if (isLoadingComplete) {\n      // Pulsing \"Press any key\" message when complete\n      const pulseAlpha = 0.6 + 0.4 * Math.sin(time / 400);\n      ctx.save();\n      ctx.globalAlpha = pulseAlpha;\n      ctx.shadowColor = '#00ff99'; // Acid Green\n      ctx.shadowBlur = 10;\n      ctx.fillStyle = '#00ff99'; // Acid Green\n      fontManager.setFont(ctx, 'primary', 14, 'bold');\n      ctx.textAlign = 'center';\n      ctx.fillText(loadingStatus, 180, 370);\n      ctx.restore();\n    } else {\n      // Normal status text while loading\n      ctx.fillStyle = '#888888';\n      fontManager.setFont(ctx, 'primary', 12);\n      ctx.textAlign = 'center';\n      ctx.fillText(loadingStatus, 180, 370);\n\n      // Draw spinning loading indicator only while loading\n      const spinnerSize = 30;\n      const spinnerX = 180;\n      const spinnerY = 400;\n      const rotation = (time / 100) % (Math.PI * 2);\n\n      ctx.save();\n      ctx.translate(spinnerX, spinnerY);\n      ctx.rotate(rotation);\n      ctx.strokeStyle = '#00f0ff';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(0, 0, spinnerSize / 2, 0, Math.PI * 1.5);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    // Draw version info\n    ctx.fillStyle = '#444444';\n    fontManager.setFont(ctx, 'primary', 8);\n    ctx.fillText('Circuit Breaker v0.6.0', 180, 590);\n    ctx.fillText('Created by Chris Van Doren in July of 2025', 180, 605);\n  }\n\n  /**\n   * Render attract mode\n   */\n  private renderAttractMode(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    // Render the gameplay (same as playing state)\n    this.renderGameplay(gameState);\n\n    // Add attract mode overlay\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw semi-transparent overlay\n    ctx.save();\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, 360, 640);\n\n    // Draw attract mode title with pulse effect\n    const time = Date.now();\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 800);\n    ctx.globalAlpha = pulseAlpha;\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\n    ctx.shadowBlur = 15;\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\n    fontManager.setFont(ctx, 'display', 48, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('ATTRACT MODE', 180, 80);\n    ctx.restore();\n\n    // Draw demo text\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 14);\n    ctx.textAlign = 'center';\n    ctx.fillText('CIRCUIT BREAKER DEMO', 180, 120);\n    ctx.fillText('Press any key to return to menu', 180, 140);\n\n    // Draw controls reminder\n    ctx.fillStyle = '#888888';\n    fontManager.setFont(ctx, 'primary', 10);\n    ctx.fillText('A/Z - Left Side Up/Down', 180, 580);\n    ctx.fillText('‚Üë/‚Üì - Right Side Up/Down', 180, 595);\n    ctx.fillText('SPACE - Start/Place Ball', 180, 610);\n    ctx.fillText('D - Toggle Debug Mode', 180, 625);\n\n    ctx.restore();\n  }\n\n  /**\n   * Render menu\n   */\n  private renderMenu(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw background\n    this.renderer.drawBackground();\n\n    // Draw subtle grid pattern\n    ctx.strokeStyle = '#003366';\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.3;\n\n    // Vertical lines\n    for (let x = 0; x <= 360; x += 20) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, 640);\n      ctx.stroke();\n    }\n\n    // Horizontal lines\n    for (let y = 0; y <= 640; y += 20) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(360, y);\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n\n    // Draw main title with neon glow\n    ctx.save();\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\n    ctx.shadowBlur = 20;\n    ctx.fillStyle = '#b600f9'; // Neon Purple\n    fontManager.setFont(ctx, 'display', 72, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('CIRCUIT', 180, 120);\n    ctx.fillText('BREAKER', 180, 180);\n    ctx.restore();\n\n    // Draw subtitle\n    ctx.fillStyle = '#b600f9'; // Neon Purple\n    fontManager.setFont(ctx, 'primary', 16);\n    ctx.textAlign = 'center';\n    ctx.fillText('NEON CYBERPUNK PINBALL', 180, 280);\n\n    // Draw description\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 12);\n    ctx.fillText('Navigate the ball through cyber holes', 180, 320);\n    ctx.fillText('to reach all goals and break the circuit', 180, 340);\n\n    // Draw start instruction with pulse effect\n    const time = Date.now();\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 500);\n    ctx.save();\n    ctx.globalAlpha = pulseAlpha;\n    ctx.shadowColor = '#00ff99'; // Acid Green\n    ctx.shadowBlur = 10;\n    ctx.fillStyle = '#00ff99'; // Acid Green\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\n    ctx.fillText('CLICK OR PRESS SPACE TO START', 180, 420);\n    ctx.restore();\n\n    // Draw controls\n    ctx.fillStyle = '#888888';\n    fontManager.setFont(ctx, 'primary', 10);\n    ctx.fillText('CONTROLS:', 180, 480);\n    ctx.fillText('A/Z - Left Side Up/Down', 180, 500);\n    ctx.fillText('‚Üë/‚Üì - Right Side Up/Down', 180, 520);\n    ctx.fillText('SPACE - Start/Place Ball', 180, 540);\n    ctx.fillText('S - Settings Menu', 180, 555);\n    ctx.fillText('L - Save/Load Menu', 180, 570);\n    ctx.fillText('T - Statistics Menu', 180, 585);\n    ctx.fillText('D - Toggle Debug Mode', 180, 600);\n\n    // Draw debug mode status\n    const debugStatus = gameState.isDebugMode() ? 'ON' : 'OFF';\n    const debugColor = gameState.isDebugMode() ? '#00ff99' : '#b600f9'; // Acid Green or Neon Purple\n    ctx.fillStyle = debugColor;\n    fontManager.setFont(ctx, 'primary', 12);\n    ctx.fillText(`DEBUG MODE: ${debugStatus}`, 180, 460);\n\n    // Draw version info\n    ctx.fillStyle = '#444444';\n    fontManager.setFont(ctx, 'primary', 8);\n    ctx.fillText('Circuit Breaker v0.6.0', 180, 615);\n    ctx.fillText('Created by Chris Van Doren in July of 2025', 180, 630);\n  }\n\n  /**\n   * Render paused state\n   */\n  private renderPaused(): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw paused overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.fillRect(0, 0, 360, 640);\n\n    // Draw paused title\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\n    fontManager.setFont(ctx, 'display', 24, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('PAUSED', 180, 280);\n\n    // Draw instructions\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 14);\n    ctx.fillText('Press ESC to resume', 180, 320);\n    ctx.fillText('Press S for Settings', 180, 340);\n    ctx.fillText('Press Y to return to menu', 180, 360);\n  }\n\n  /**\n   * Render confirmation dialog\n   */\n  private renderConfirmDialog(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // First render the current gameplay in the background (dimmed)\n    this.renderGameplay(gameState);\n\n    // Draw semi-transparent overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, 0, 360, 640);\n\n    // Draw dialog box background\n    const dialogWidth = 280;\n    const dialogHeight = 160;\n    const dialogX = (360 - dialogWidth) / 2;\n    const dialogY = (640 - dialogHeight) / 2;\n\n    // Draw dialog background with neon border\n    ctx.fillStyle = '#1a1a1a';\n    ctx.fillRect(dialogX, dialogY, dialogWidth, dialogHeight);\n\n    ctx.strokeStyle = '#b600f9'; // Neon Purple border\n    ctx.lineWidth = 3;\n    ctx.shadowColor = '#b600f9';\n    ctx.shadowBlur = 10;\n    ctx.strokeRect(dialogX, dialogY, dialogWidth, dialogHeight);\n    ctx.shadowBlur = 0;\n\n    // Draw dialog title\n    ctx.fillStyle = '#b600f9'; // Neon Purple\n    fontManager.setFont(ctx, 'primary', 18, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('RETURN TO MENU?', 180, dialogY + 40);\n\n    // Draw confirmation message\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 12);\n    ctx.fillText('Your progress will be lost.', 180, dialogY + 70);\n    ctx.fillText('Are you sure?', 180, dialogY + 90);\n\n    // Draw buttons with glow effects\n    const buttonY = dialogY + 120;\n\n    // YES button (Electric Blue)\n    ctx.fillStyle = '#00f0ff';\n    ctx.shadowColor = '#00f0ff';\n    ctx.shadowBlur = 8;\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\n    ctx.fillText('[Y] YES', 130, buttonY);\n\n    // NO button (Acid Green)\n    ctx.fillStyle = '#00ff99';\n    ctx.shadowColor = '#00ff99';\n    ctx.shadowBlur = 8;\n    ctx.fillText('[N] NO', 230, buttonY);\n\n    ctx.shadowBlur = 0;\n\n    // Draw instruction text\n    ctx.fillStyle = '#888888';\n    fontManager.setFont(ctx, 'primary', 10);\n    ctx.fillText('Press Y to confirm, N or ESC to cancel', 180, dialogY + 145);\n  }\n\n  /**\n   * Render achievement notification overlay\n   */\n  private renderAchievementNotification(): void {\n    const game = this.game;\n    const ctx = this.renderer?.getContext();\n    if (!ctx || !game || typeof game['achievementNotification'] === 'undefined' || !game['achievementNotification']) return;\n    \n    game['achievementNotification'].render(ctx);\n  }\n\n  /**\n   * Render game over state\n   */\n  private renderGameOver(gameState: GameState): void {\n    if (!this.renderer) return;\n\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Draw dark background\n    this.renderer.drawBackground();\n\n    // Draw red alert grid\n    ctx.strokeStyle = '#330000';\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.3;\n\n    // Vertical lines\n    for (let x = 0; x <= 360; x += 30) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, 640);\n      ctx.stroke();\n    }\n\n    // Horizontal lines\n    for (let y = 0; y <= 640; y += 30) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(360, y);\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n\n    // Draw GAME OVER with red glow\n    ctx.save();\n    ctx.shadowColor = '#b600f9'; // Neon Purple\n    ctx.shadowBlur = 25;\n    ctx.fillStyle = '#b600f9'; // Neon Purple\n    fontManager.setFont(ctx, 'display', 28, 'bold');\n    ctx.textAlign = 'center';\n    ctx.fillText('GAME OVER', 180, 200);\n    ctx.restore();\n\n    // Draw circuit broken subtitle\n    ctx.fillStyle = '#ff6666';\n    fontManager.setFont(ctx, 'primary', 14);\n    ctx.textAlign = 'center';\n    ctx.fillText('CIRCUIT BREAKER MALFUNCTION', 180, 230);\n\n    // Get and display score\n    const stateData = gameState.getStateData();\n    ctx.fillStyle = '#ffffff';\n    fontManager.setFont(ctx, 'primary', 16);\n    ctx.fillText(`FINAL SCORE: ${stateData.score}`, 180, 280);\n    ctx.fillText(`LEVEL REACHED: ${stateData.currentLevel}`, 180, 310);\n\n    // Draw restart instruction with pulse effect\n    const time = Date.now();\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 400);\n    ctx.save();\n    ctx.globalAlpha = pulseAlpha;\n    ctx.shadowColor = '#00ff99'; // Acid Green\n    ctx.shadowBlur = 10;\n    ctx.fillStyle = '#00ff99'; // Acid Green\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\n    ctx.fillText('CLICK OR PRESS SPACE TO RETURN TO MENU', 180, 400);\n    ctx.restore();\n\n    // Draw system message\n    ctx.fillStyle = '#666666';\n    fontManager.setFont(ctx, 'primary', 10);\n    ctx.fillText('SYSTEM: Preparing for circuit restart...', 180, 480);\n  }\n\n  /**\n   * Pause the game loop\n   */\n  public pause(): void {\n    this.isPaused = true;\n    logger.info('‚è∏Ô∏è Game loop paused', null, 'GameLoop');\n  }\n\n  /**\n   * Resume the game loop\n   */\n  public resume(): void {\n    this.isPaused = false;\n    logger.info('‚ñ∂Ô∏è Game loop resumed', null, 'GameLoop');\n  }\n\n  /**\n   * Stop the game loop\n   */\n  public stop(): void {\n    this.isRunning = false;\n    if (this.animationId !== null) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    logger.info('‚èπÔ∏è Game loop stopped', null, 'GameLoop');\n  }\n\n  /**\n   * Check if game loop is running\n   */\n  public isGameLoopRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Check if game loop is paused\n   */\n  public isGameLoopPaused(): boolean {\n    return this.isPaused;\n  }\n\n  /**\n   * Update FPS tracking\n   */\n  private updateFPSTracking(currentTime: number): void {\n    this.frameCount++;\n    \n    if (currentTime - this.fpsUpdateTime >= this.FPS_UPDATE_INTERVAL) {\n      this.currentFPS = Math.round((this.frameCount * 1000) / (currentTime - this.fpsUpdateTime));\n      this.frameCount = 0;\n      this.fpsUpdateTime = currentTime;\n      \n      // Record FPS event if game is available\n      if (this.game && this.game['statsManager']) {\n        this.game['statsManager'].recordEvent({\n          type: 'fps_update',\n          timestamp: Date.now(),\n          data: { fps: this.currentFPS },\n        });\n      }\n    }\n  }\n\n  /**\n   * Get current FPS\n   */\n  public getFPS(): number {\n    return this.currentFPS;\n  }\n}\n","// Circuit Breaker - Debug Utilities\n// Development and debugging tools\n\nimport { logger } from './Logger';\n\nexport class Debug {\n  private static isEnabled: boolean = true;\n  private static logs: string[] = [];\n  private static maxLogs: number = 100;\n\n  /**\n   * Enable or disable debug mode\n   */\n  public static setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n  }\n\n  /**\n   * Log a debug message\n   */\n  public static log(message: string, ...args: unknown[]): void {\n    if (!this.isEnabled) return;\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ${message}`;\n\n    logger.info(logMessage, args.length > 0 ? args : null, 'Debug');\n    this.addToLogs(logMessage);\n  }\n\n  /**\n   * Log a warning message\n   */\n  public static warn(message: string, ...args: unknown[]): void {\n    if (!this.isEnabled) return;\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] WARNING: ${message}`;\n\n    logger.warn(logMessage, args.length > 0 ? args : null, 'Debug');\n    this.addToLogs(logMessage);\n  }\n\n  /**\n   * Log an error message\n   */\n  public static error(message: string, ...args: unknown[]): void {\n    if (!this.isEnabled) return;\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ERROR: ${message}`;\n\n    logger.error(logMessage, args.length > 0 ? args : null, 'Debug');\n    this.addToLogs(logMessage);\n  }\n\n  /**\n   * Add message to internal logs\n   */\n  private static addToLogs(message: string): void {\n    this.logs.push(message);\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n  }\n\n  /**\n   * Get all debug logs\n   */\n  public static getLogs(): string[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Clear all debug logs\n   */\n  public static clearLogs(): void {\n    this.logs = [];\n  }\n\n  /**\n   * Measure performance of a function\n   */\n  public static measurePerformance<T>(name: string, fn: () => T): T {\n    if (!this.isEnabled) return fn();\n\n    const start = performance.now();\n    const result = fn();\n    const end = performance.now();\n\n    this.log(`Performance [${name}]: ${(end - start).toFixed(2)}ms`);\n    return result;\n  }\n\n  /**\n   * Create a performance timer\n   */\n  public static createTimer(name: string): () => void {\n    const start = performance.now();\n    return () => {\n      const end = performance.now();\n      this.log(`Timer [${name}]: ${(end - start).toFixed(2)}ms`);\n    };\n  }\n\n  /**\n   * Assert a condition\n   */\n  public static assert(condition: boolean, message: string): void {\n    if (!this.isEnabled) return;\n\n    if (!condition) {\n      this.error(`Assertion failed: ${message}`);\n      throw new Error(`Assertion failed: ${message}`);\n    }\n  }\n\n  /**\n   * Get memory usage info\n   */\n  public static getMemoryInfo(): Record<string, unknown> {\n    if (!this.isEnabled) return {};\n\n    // Note: This is limited in browsers, but useful for debugging\n    return {\n      logsCount: this.logs.length,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Export debug info\n   */\n  public static exportDebugInfo(): Record<string, unknown> {\n    return {\n      enabled: this.isEnabled,\n      logs: this.getLogs(),\n      memory: this.getMemoryInfo(),\n    };\n  }\n}\n","// Circuit Breaker - Sprite Atlas Manager\n// Efficient sprite loading and management using texture atlases\n\nimport { Debug } from '../utils/Debug';\n\nexport interface SpriteFrame {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport interface AtlasData {\n  frames: { [key: string]: SpriteFrame };\n  meta: {\n    image: string;\n    size: { w: number; h: number };\n    scale: number;\n  };\n}\n\nexport class SpriteAtlas {\n  private static instance: SpriteAtlas;\n  private atlases: Map<string, { image: HTMLImageElement; data: AtlasData }> = new Map();\n  private isLoaded: boolean = false;\n  private offscreenCanvases: Map<string, HTMLCanvasElement> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): SpriteAtlas {\n    if (!SpriteAtlas.instance) {\n      SpriteAtlas.instance = new SpriteAtlas();\n    }\n    return SpriteAtlas.instance;\n  }\n\n  /**\n   * Load the sprite atlas image and JSON data\n   */\n  public async load(): Promise<void> {\n    try {\n      Debug.log('üöÄ Starting sprite atlas loading process...');\n      \n      // Load main atlas\n      await this.loadAtlas('main', './assets/sprites/atlas_01.json', './assets/sprites/atlas_01.png');\n      \n      // Load power-up atlas\n      await this.loadAtlas('powerup', './assets/sprites/powerup_atlas_01.json', './assets/sprites/powerup_atlas_01.png');\n\n      this.isLoaded = true;\n      \n      let totalSprites = 0;\n      this.atlases.forEach((atlas, name) => {\n        const spriteCount = Object.keys(atlas.data.frames).length;\n        totalSprites += spriteCount;\n        Debug.log(`üìä Atlas '${name}' contains ${spriteCount} sprites`);\n      });\n      \n      Debug.log(\n        'üé® All sprite atlases loaded successfully with',\n        totalSprites,\n        'total sprites',\n      );\n    } catch (error) {\n      Debug.log('‚ùå Failed to load sprite atlases:', error);\n      this.isLoaded = false;\n    }\n  }\n\n  /**\n   * Load a specific atlas\n   */\n  private async loadAtlas(name: string, jsonPath: string, imagePath: string): Promise<void> {\n    Debug.log(`üîÑ Loading ${name} atlas from ${jsonPath} and ${imagePath}`);\n    \n    // Load atlas JSON data\n    const jsonResponse = await fetch(jsonPath);\n    if (!jsonResponse.ok) {\n      throw new Error(`Failed to load ${name} atlas JSON: ${jsonResponse.status}`);\n    }\n    const atlasData = await jsonResponse.json();\n    Debug.log(`üìÑ ${name} atlas JSON loaded with ${Object.keys(atlasData.frames).length} sprites`);\n\n    // Load atlas image\n    const atlasImage = new Image();\n    atlasImage.src = imagePath;\n\n    await new Promise<void>((resolve, reject) => {\n      atlasImage.onload = () => {\n        Debug.log(`üñºÔ∏è ${name} atlas image loaded successfully`);\n        resolve();\n      };\n      atlasImage.onerror = (error) => {\n        Debug.log(`‚ùå Failed to load ${name} atlas image:`, error);\n        reject(error);\n      };\n    });\n\n    this.atlases.set(name, { image: atlasImage, data: atlasData });\n    \n    Debug.log(\n      `üé® ${name} atlas loaded with`,\n      Object.keys(atlasData.frames).length,\n      'sprites:',\n      Object.keys(atlasData.frames).join(', ')\n    );\n  }\n\n  /**\n   * Get a sprite frame definition by name\n   */\n  public getFrame(spriteName: string): { frame: SpriteFrame; atlas: string } | null {\n    // Search through all atlases\n    for (const [atlasName, atlas] of this.atlases) {\n      if (atlas.data.frames[spriteName]) {\n        Debug.log(`‚úÖ Found sprite ${spriteName} in atlas ${atlasName}`);\n        return { frame: atlas.data.frames[spriteName], atlas: atlasName };\n      }\n    }\n    Debug.log(`‚ùå Sprite ${spriteName} not found in any atlas`);\n    return null;\n  }\n\n  /**\n   * Draw a sprite from the atlas to a canvas context\n   */\n  public drawSprite(\n    ctx: CanvasRenderingContext2D,\n    spriteName: string,\n    x: number,\n    y: number,\n    scale: number = 1,\n  ): boolean {\n    if (!this.isLoaded) {\n      Debug.log(`‚ö†Ô∏è Cannot draw sprite ${spriteName}: atlases not loaded`);\n      return false;\n    }\n\n    const frameData = this.getFrame(spriteName);\n    if (!frameData) {\n      Debug.log(`‚ö†Ô∏è Sprite not found: ${spriteName}`);\n      return false;\n    }\n\n    const atlas = this.atlases.get(frameData.atlas);\n    if (!atlas) {\n      Debug.log(`‚ö†Ô∏è Atlas not found: ${frameData.atlas}`);\n      return false;\n    }\n\n    ctx.drawImage(\n      atlas.image,\n      frameData.frame.x,\n      frameData.frame.y,\n      frameData.frame.w,\n      frameData.frame.h,\n      x,\n      y,\n      frameData.frame.w * scale,\n      frameData.frame.h * scale,\n    );\n\n    return true;\n  }\n\n  /**\n   * Get a cached canvas with a specific sprite pre-rendered\n   * Useful for sprites that are used frequently\n   */\n  public getSpriteCanvas(\n    spriteName: string,\n    scale: number = 1,\n  ): HTMLCanvasElement | null {\n    const cacheKey = `${spriteName}_${scale}`;\n\n    if (this.offscreenCanvases.has(cacheKey)) {\n      const cachedCanvas = this.offscreenCanvases.get(cacheKey);\n      if (cachedCanvas) {\n        return cachedCanvas;\n      }\n    }\n\n    if (!this.isLoaded) {\n      return null;\n    }\n\n    const frameData = this.getFrame(spriteName);\n    if (!frameData) return null;\n\n    const atlas = this.atlases.get(frameData.atlas);\n    if (!atlas) return null;\n\n    // Create offscreen canvas\n    const canvas = document.createElement('canvas');\n    canvas.width = frameData.frame.w * scale;\n    canvas.height = frameData.frame.h * scale;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return null;\n\n    // Draw sprite to offscreen canvas\n    ctx.drawImage(\n      atlas.image,\n      frameData.frame.x,\n      frameData.frame.y,\n      frameData.frame.w,\n      frameData.frame.h,\n      0,\n      0,\n      frameData.frame.w * scale,\n      frameData.frame.h * scale,\n    );\n\n    // Cache and return\n    this.offscreenCanvases.set(cacheKey, canvas);\n    return canvas;\n  }\n\n  /**\n   * Get all available sprite names\n   */\n  public getSpriteNames(): string[] {\n    const allSprites: string[] = [];\n    this.atlases.forEach((atlas) => {\n      allSprites.push(...Object.keys(atlas.data.frames));\n    });\n    return allSprites;\n  }\n\n  /**\n   * Check if atlas is loaded\n   */\n  public isAtlasLoaded(): boolean {\n    return this.isLoaded;\n  }\n\n  /**\n   * Get atlas dimensions for a specific atlas\n   */\n  public getAtlasDimensions(atlasName: string = 'main'): { width: number; height: number } | null {\n    const atlas = this.atlases.get(atlasName);\n    if (!atlas) return null;\n    return {\n      width: atlas.data.meta.size.w,\n      height: atlas.data.meta.size.h,\n    };\n  }\n\n  /**\n   * Clear sprite cache\n   */\n  public clearCache(): void {\n    this.offscreenCanvases.clear();\n  }\n}\n\n// Export singleton instance\nexport const spriteAtlas = SpriteAtlas.getInstance();\n","// Circuit Breaker - Renderer\n// Handles canvas drawing and visual effects\n\nimport { Debug } from '../utils/Debug';\nimport { spriteAtlas } from './SpriteAtlas';\nimport { TiltingBar } from '../core/TiltingBar';\nimport { Hole } from '../core/Level';\n\nexport class Renderer {\n  private canvas: HTMLCanvasElement | null = null;\n  private ctx: CanvasRenderingContext2D | null = null;\n  private width: number = 800;\n  private height: number = 600;\n\n  // Sprite images\n  private backgroundSprite: HTMLImageElement | null = null;\n  private spritesLoaded: boolean = false;\n  \n  // Tinting support\n  private currentTint: string | null = null;\n\n  constructor() {\n    Debug.log('üé® Renderer initialized');\n  }\n\n  /**\n   * Load sprite images and atlas\n   */\n  public async loadSprites(): Promise<void> {\n    try {\n      // Load background sprite (using relative paths for GitHub Pages compatibility)\n      this.backgroundSprite = new Image();\n      this.backgroundSprite.src =\n        './assets/sprites/playfield_background_02.png';\n\n      // Load sprite atlas\n      const atlasPromise = spriteAtlas.load();\n\n      // Wait for background and atlas to load with individual error handling\n      const spritePromises = [\n        new Promise<string>((resolve, reject) => {\n          if (this.backgroundSprite) {\n            this.backgroundSprite.onload = () => resolve('background');\n            this.backgroundSprite.onerror = e =>\n              reject({ sprite: 'background', error: e });\n          } else {\n            reject({ sprite: 'background', error: new Error('Background sprite not initialized') });\n          }\n        }),\n        atlasPromise\n          .then(() => 'atlas')\n          .catch(e => Promise.reject({ sprite: 'atlas', error: e })),\n      ];\n\n      const results = await Promise.allSettled(spritePromises);\n\n      let loadedCount = 0;\n      results.forEach((result, _index) => {\n        if (result.status === 'fulfilled') {\n          loadedCount++;\n          Debug.log(`‚úÖ ${result.value} loaded successfully`);\n        } else {\n          const { sprite, error } = result.reason;\n          Debug.log(`‚ùå Failed to load ${sprite}:`, error);\n        }\n      });\n\n      // Consider sprites loaded if at least one loads (background is optional, atlas provides balls)\n      this.spritesLoaded = loadedCount > 0;\n\n      if (loadedCount === 2) {\n        Debug.log('üé® All sprites and atlas loaded successfully');\n      } else if (loadedCount === 1) {\n        Debug.log(\n          '‚ö†Ô∏è Some sprites loaded, game will use fallbacks where needed',\n        );\n      } else {\n        Debug.log('‚ùå No sprites loaded, game will use fallbacks');\n      }\n    } catch (error) {\n      Debug.log('‚ùå Sprite loading system failed:', error);\n      this.spritesLoaded = false;\n    }\n  }\n\n  /**\n   * Initialize the renderer with a canvas, set up high-DPI scaling and integer scaling for sharp rendering.\n   * @param canvas The HTMLCanvasElement to use for rendering.\n   */\n  public init(canvas: HTMLCanvasElement): void {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n\n    if (!this.ctx) {\n      throw new Error('Failed to get 2D context from canvas');\n    }\n\n    // Device pixel ratio handling for sharp rendering\n    const dpr = window.devicePixelRatio || 1;\n    const displayWidth = 540; // 75% of 720\n    const displayHeight = 960; // 75% of 1280\n    // Set CSS size (visual size on page)\n    canvas.style.width = displayWidth + 'px';\n    canvas.style.height = displayHeight + 'px';\n    // Set internal buffer size for high-DPI\n    canvas.width = displayWidth * dpr;\n    canvas.height = displayHeight * dpr;\n    // Scale context for high-DPI\n    this.ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    // Scale all drawing by 1.5x\n    this.ctx.scale(1.5, 1.5);\n\n    this.width = canvas.width;\n    this.height = canvas.height;\n\n    Debug.log(`Renderer initialized with canvas: ${this.width}x${this.height} (dpr: ${dpr}, scale: 1.5x)`);\n  }\n\n  /**\n   * Clear the canvas.\n   */\n  public clear(): void {\n    if (!this.ctx) return;\n\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Draw the playfield background (neon cityscape or fallback color).\n   */\n  public drawBackground(): void {\n    if (!this.ctx) return;\n\n    if (this.backgroundSprite && this.spritesLoaded) {\n      // Draw the background image scaled to fit the playfield (360x640)\n      this.ctx.drawImage(this.backgroundSprite, 0, 0, 360, 640);\n    } else {\n      // Fallback to solid color background if image not loaded\n      this.ctx.fillStyle = '#1a1a1a';\n      this.ctx.fillRect(0, 0, 360, 640);\n    }\n  }\n\n  /**\n   * Render the game (main entry point for all drawing).\n   */\n  public render(): void {\n    if (!this.ctx) return;\n\n    // TODO: Implement rendering\n    // - Clear canvas\n    // - Draw background\n    // - Draw game objects\n    // - Draw UI elements\n    // - Apply visual effects\n  }\n\n  /**\n   * Draw a tilting bar with neon cyberpunk styling using tiled sprites.\n   * @param bar The TiltingBar instance to draw.\n   */\n  public drawTiltingBar(bar: TiltingBar): void {\n    if (!this.ctx) return;\n    \n    const endpoints = bar.getEndpoints();\n\n    // Save context\n    this.ctx.save();\n\n    // Draw glow effect FIRST (behind the sprites)\n    this.ctx.shadowColor = bar.glowColor;\n    this.ctx.shadowBlur = 20;\n    this.ctx.lineWidth = bar.thickness + 4;\n    this.ctx.strokeStyle = bar.glowColor;\n    this.ctx.globalAlpha = 0.3;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y);\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y);\n    this.ctx.stroke();\n\n    // Reset shadow effects for sprite rendering\n    this.ctx.shadowBlur = 0;\n    this.ctx.shadowColor = 'transparent';\n    this.ctx.globalAlpha = 1;\n\n    // Use sprite atlas if available, otherwise fallback to line rendering\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\n          if (this.spritesLoaded && atlasLoaded) {\n        const barFrame = spriteAtlas.getFrame('bar_normal');\n\n        if (barFrame) {\n        // Calculate bar properties\n        const barLength = Math.sqrt(\n          Math.pow(endpoints.end.x - endpoints.start.x, 2) +\n            Math.pow(endpoints.end.y - endpoints.start.y, 2),\n        );\n        const barAngle = Math.atan2(\n          endpoints.end.y - endpoints.start.y,\n          endpoints.end.x - endpoints.start.x,\n        );\n\n        // Calculate scaling and tiling\n        const spriteScale = bar.thickness / barFrame.frame.h; // Scale to match bar thickness\n        const scaledSpriteWidth = barFrame.frame.w * spriteScale;\n        const tilesNeeded = Math.ceil(barLength / scaledSpriteWidth);\n\n        // Calculate the center point of the actual bar (between endpoints)\n        const barCenterX = (endpoints.start.x + endpoints.end.x) / 2;\n        const barCenterY = (endpoints.start.y + endpoints.end.y) / 2;\n\n        // Set up transformation matrix for rotation and positioning\n        this.ctx.translate(barCenterX, barCenterY);\n        this.ctx.rotate(barAngle);\n\n        // Tile the bar sprite along the length\n        for (let i = 0; i < tilesNeeded; i++) {\n          const tileX = i * scaledSpriteWidth - barLength / 2;\n          const tileY = -bar.thickness / 2;\n\n          // Clip the last tile if it extends beyond the bar length\n          const remainingLength = barLength - i * scaledSpriteWidth;\n          const tileWidth = Math.min(scaledSpriteWidth, remainingLength);\n\n          if (tileWidth > 0) {\n            // Save context for potential clipping\n            this.ctx.save();\n\n            // Clip if this is a partial tile\n            if (tileWidth < scaledSpriteWidth) {\n              this.ctx.beginPath();\n              this.ctx.rect(tileX, tileY, tileWidth, bar.thickness);\n              this.ctx.clip();\n            }\n\n            // Draw the sprite tile\n            spriteAtlas.drawSprite(\n              this.ctx,\n              'bar_normal',\n              tileX,\n              tileY,\n              spriteScale,\n            );\n\n            this.ctx.restore();\n          }\n        }\n\n        // Reset transformation for pivot point\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        // Fallback to line rendering if sprite not found\n        this.renderBarFallback(endpoints, bar);\n      }\n    } else {\n      // Fallback to line rendering if atlas not loaded\n      this.renderBarFallback(endpoints, bar);\n    }\n\n    // Draw center pivot point (always rendered)\n    this.ctx.fillStyle = bar.color;\n    this.ctx.beginPath();\n    this.ctx.arc(bar.position.x, bar.position.y, 6, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    // Restore context\n    this.ctx.restore();\n  }\n\n  /**\n   * Fallback bar rendering using lines\n   */\n  private renderBarFallback(endpoints: { start: { x: number; y: number }; end: { x: number; y: number } }, bar: TiltingBar): void {\n    if (!this.ctx) return;\n\n    this.ctx.lineWidth = bar.thickness;\n    this.ctx.strokeStyle = bar.color;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y);\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y);\n    this.ctx.stroke();\n  }\n\n  /**\n   * Draw an obstacle with neon cyberpunk styling\n   */\n  public drawObstacle(obstacle: { position: { x: number; y: number }; size: { x: number; y: number }; type?: string; isActive?: boolean }): void {\n    if (!this.ctx) return;\n\n    this.ctx.save();\n\n    const centerX = obstacle.position.x + obstacle.size.x / 2;\n    const centerY = obstacle.position.y + obstacle.size.y / 2;\n\n    switch (obstacle.type) {\n    case 'electrical_hazard':\n      // Draw electrical hazard with sparking effect\n      this.ctx.shadowColor = '#b600f9'; // Neon Purple\n      this.ctx.shadowBlur = obstacle.isActive ? 15 : 5;\n      this.ctx.fillStyle = obstacle.isActive ? '#b600f9' : '#660066'; // Neon Purple\n      this.ctx.strokeStyle = '#d466ff'; // Lighter purple\n      this.ctx.lineWidth = 2;\n\n      // Draw main hazard rectangle\n      this.ctx.fillRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      this.ctx.strokeRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n\n      // Draw sparks if active\n      if (obstacle.isActive) {\n        this.drawElectricalSparks(centerX, centerY, obstacle.size.x);\n      }\n\n      // Draw warning symbol\n      this.ctx.fillStyle = '#00ff99'; // Acid Green\n      this.ctx.font = '12px monospace';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('‚ö°', centerX, centerY + 4);\n      break;\n\n    case 'barrier':\n      // Draw solid barrier\n      this.ctx.shadowColor = '#00f0ff'; // Electric Blue\n      this.ctx.shadowBlur = 10;\n      this.ctx.fillStyle = '#006677'; // Darker blue\n      this.ctx.strokeStyle = '#00f0ff'; // Electric Blue\n      this.ctx.lineWidth = 2;\n\n      this.ctx.fillRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      this.ctx.strokeRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      break;\n\n    case 'hole':\n      // Draw hole/pit\n      this.ctx.shadowColor = '#b600f9'; // Neon Purple\n      this.ctx.shadowBlur = 8;\n      this.ctx.fillStyle = '#220000'; // Dark red\n      this.ctx.strokeStyle = '#b600f9'; // Neon Purple\n      this.ctx.lineWidth = 2;\n\n      this.ctx.fillRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      this.ctx.strokeRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      break;\n\n    default:\n      // Draw generic obstacle\n      this.ctx.strokeStyle = '#ffffff';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.size.x,\n        obstacle.size.y,\n      );\n      break;\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw electrical sparks effect\n   */\n  private drawElectricalSparks(\n    centerX: number,\n    centerY: number,\n    size: number,\n  ): void {\n    if (!this.ctx) return;\n\n    this.ctx.save();\n    this.ctx.strokeStyle = '#ffffff';\n    this.ctx.lineWidth = 1;\n    this.ctx.globalAlpha = 0.8;\n\n    // Draw random spark lines\n    for (let i = 0; i < 5; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const length = Math.random() * size * 0.5;\n      const startX = centerX + Math.cos(angle) * 5;\n      const startY = centerY + Math.sin(angle) * 5;\n      const endX = startX + Math.cos(angle) * length;\n      const endY = startY + Math.sin(angle) * length;\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(endX, endY);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw target port with neon cyberpunk styling\n   */\n  public drawTargetPort(port: { position: { x: number; y: number }; radius: number; color: string; isCompleted?: boolean }): void {\n    if (!this.ctx) return;\n\n    this.ctx.save();\n\n    const centerX = port.position.x;\n    const centerY = port.position.y;\n\n    // Draw outer glow\n    this.ctx.shadowColor = port.color;\n    this.ctx.shadowBlur = 20;\n    this.ctx.fillStyle = port.color;\n    this.ctx.globalAlpha = 0.3;\n\n    this.ctx.beginPath();\n    this.ctx.arc(centerX, centerY, port.radius + 10, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    this.ctx.globalAlpha = 1;\n    this.ctx.shadowBlur = 0;\n\n    // Draw port circle\n    this.ctx.fillStyle = port.isCompleted ? '#333333' : port.color;\n    this.ctx.beginPath();\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    // Draw port outline\n    this.ctx.strokeStyle = port.isCompleted ? '#666666' : port.color;\n    this.ctx.lineWidth = 3;\n    this.ctx.beginPath();\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2);\n    this.ctx.stroke();\n\n    // Draw port symbol\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.font = '16px monospace';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(port.isCompleted ? '‚úì' : '‚óã', centerX, centerY + 6);\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw a hole using sprite atlas or fallback to neon cyberpunk styling\n   */\n  public drawHole(\n    hole: Hole,\n    isCompleted: boolean = false,\n    debugMode: boolean = false,\n  ): void {\n    if (!this.ctx) return;\n\n    this.ctx.save();\n\n    const centerX = hole.position.x;\n    const centerY = hole.position.y;\n    const isGoalHole = hole.isGoal;\n    const isPowerUpHole = hole.powerUpType !== undefined;\n    const isSaucerActive = hole.saucerState?.isActive || false;\n\n    // Make holes 20% bigger for better visibility\n    const enlargedRadius = hole.radius * 1.2;\n\n    // Choose colors based on hole type\n    let activeColor: string;\n    let darkColor: string;\n    let darkerColor: string;\n\n    if (isGoalHole) {\n      activeColor = '#ff6600'; // Neon Orange for goals\n      darkColor = '#441100';\n      darkerColor = '#220000';\n    } else if (isPowerUpHole) {\n      // Power-up hole colors based on type\n      const powerUpColors = {\n        'SLOW_MO_SURGE': { active: '#00ffff', dark: '#004444', darker: '#002222' }, // Cyan\n        'MAGNETIC_GUIDE': { active: '#ff00ff', dark: '#440044', darker: '#220022' }, // Magenta\n        'CIRCUIT_PATCH': { active: '#00ff00', dark: '#004400', darker: '#002200' }, // Green\n        'OVERCLOCK_BOOST': { active: '#ff6600', dark: '#441100', darker: '#220000' }, // Orange\n        'SCAN_REVEAL': { active: '#ffff00', dark: '#444400', darker: '#222200' }, // Yellow\n      };\n      const colors = powerUpColors[hole.powerUpType as unknown as keyof typeof powerUpColors] || powerUpColors['SLOW_MO_SURGE'];\n      activeColor = colors.active;\n      darkColor = colors.dark;\n      darkerColor = colors.darker;\n    } else {\n      activeColor = '#00ff99'; // Acid Green for regular holes\n      darkColor = '#004400';\n      darkerColor = '#002200';\n    }\n\n    // Use sprite atlas if available, otherwise fallback to procedural rendering\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\n    Debug.log(`üîç Checking hole sprite: spritesLoaded=${this.spritesLoaded}, atlasLoaded=${atlasLoaded}`);\n    if (this.spritesLoaded && atlasLoaded) {\n      // Choose sprite based on hole type\n      let spriteName: string;\n      if (isGoalHole) {\n        spriteName = 'ball_whole_powerup';\n      } else if (isPowerUpHole) {\n        // Use specific power-up sprites from the power-up atlas\n        const powerUpSprites = {\n          'SLOW_MO_SURGE': 'hourglass',\n          'MAGNETIC_GUIDE': 'magnet',\n          'CIRCUIT_PATCH': 'chip',\n          'OVERCLOCK_BOOST': 'cross',\n          'SCAN_REVEAL': 'eye',\n        };\n        spriteName = powerUpSprites[hole.powerUpType as unknown as keyof typeof powerUpSprites] || 'hourglass';\n      } else {\n        spriteName = 'ball_whole_normal';\n      }\n      const frameData = spriteAtlas.getFrame(spriteName);\n\n      if (frameData) {\n        Debug.log(`üéØ Drawing sprite: ${spriteName} from atlas: ${frameData.atlas}`);\n        // Calculate scaling to fit the enlarged hole radius\n        const targetSize = enlargedRadius * 2;\n        const spriteScale = targetSize / Math.max(frameData.frame.w, frameData.frame.h);\n\n        // Draw outer glow first (behind sprite) - only in debug mode\n        if (debugMode) {\n          this.ctx.strokeStyle = activeColor;\n          this.ctx.lineWidth = 3;\n          this.ctx.globalAlpha = 0.5;\n\n          this.ctx.beginPath();\n          this.ctx.arc(centerX, centerY, enlargedRadius + 5, 0, Math.PI * 2);\n          this.ctx.stroke();\n\n          this.ctx.globalAlpha = 1;\n        }\n\n        // Draw hole sprite\n        if (isCompleted) {\n          // Dimmed for completed holes\n          this.ctx.globalAlpha = 0.6;\n        }\n\n        spriteAtlas.drawSprite(\n          this.ctx,\n          spriteName,\n          centerX - (frameData.frame.w * spriteScale) / 2, // Center horizontally\n          centerY - (frameData.frame.h * spriteScale) / 2, // Center vertically\n          spriteScale,\n        );\n\n        this.ctx.globalAlpha = 1;\n\n        // Add completion indicator if needed\n        if (isCompleted) {\n          // Draw completion overlay\n          this.ctx.fillStyle = activeColor;\n          this.ctx.globalAlpha = 0.3;\n          this.ctx.beginPath();\n          this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\n          this.ctx.fill();\n\n          this.ctx.globalAlpha = 1;\n\n          // Draw checkmark\n          this.ctx.fillStyle = activeColor;\n          this.ctx.font = '12px monospace';\n          this.ctx.textAlign = 'center';\n          this.ctx.fillText('‚úì', centerX, centerY + 4);\n        }\n\n        // Power-up holes now use sprites instead of text icons\n      } else {\n        // Fallback to procedural rendering if sprite not found\n        Debug.log(`‚ö†Ô∏è Sprite not found: ${spriteName}, using fallback rendering`);\n        this.renderHoleFallback(\n          hole,\n          isCompleted,\n          centerX,\n          centerY,\n          isGoalHole,\n          activeColor,\n          darkColor,\n          darkerColor,\n          debugMode,\n          enlargedRadius,\n        );\n      }\n\n              // Draw saucer effects if active\n        if (isSaucerActive && isPowerUpHole) {\n          this.drawSaucerEffects(centerX, centerY, enlargedRadius, activeColor, hole);\n        }\n      } else {\n        // Fallback to procedural rendering if atlas not loaded\n        this.renderHoleFallback(\n          hole,\n          isCompleted,\n          centerX,\n          centerY,\n          isGoalHole,\n          activeColor,\n          darkColor,\n          darkerColor,\n          debugMode,\n          enlargedRadius,\n        );\n\n        // Draw saucer effects if active\n        if (isSaucerActive && isPowerUpHole) {\n          this.drawSaucerEffects(centerX, centerY, enlargedRadius, activeColor, hole);\n        }\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Fallback hole rendering using procedural graphics\n   */\n  private renderHoleFallback(\n    hole: Hole,\n    isCompleted: boolean,\n    centerX: number,\n    centerY: number,\n    isGoalHole: boolean,\n    activeColor: string,\n    darkColor: string,\n    darkerColor: string,\n    debugMode: boolean,\n    enlargedRadius: number,\n  ): void {\n    if (!this.ctx) return;\n\n    // Draw outer glow - only in debug mode\n    if (debugMode) {\n      this.ctx.strokeStyle = activeColor;\n      this.ctx.lineWidth = 3;\n      this.ctx.globalAlpha = 0.5;\n\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius + 5, 0, Math.PI * 2);\n      this.ctx.stroke();\n\n      this.ctx.globalAlpha = 1;\n    }\n\n    // Draw hole interior\n    if (isCompleted) {\n      // Completed hole - show success state\n      this.ctx.shadowColor = activeColor;\n      this.ctx.shadowBlur = 15;\n      this.ctx.fillStyle = darkerColor;\n\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // Draw completion indicator\n      this.ctx.fillStyle = darkerColor;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius / 2, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // Draw colored outline\n      this.ctx.strokeStyle = activeColor;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\n      this.ctx.stroke();\n\n      // Draw checkmark\n      this.ctx.fillStyle = activeColor;\n      this.ctx.font = '12px monospace';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('‚úì', centerX, centerY + 4);\n    } else {\n      // Active hole - show glowing state\n      this.ctx.shadowColor = activeColor;\n      this.ctx.shadowBlur = isGoalHole ? 15 : 10; // Stronger glow for goal holes\n      this.ctx.fillStyle = activeColor;\n      this.ctx.globalAlpha = isGoalHole ? 0.8 : 0.6; // Brighter for goal holes\n\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      this.ctx.globalAlpha = 1;\n\n      // Draw inner dark area\n      this.ctx.fillStyle = darkColor;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius / 2, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // Draw colored outline\n      this.ctx.strokeStyle = activeColor;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\n      this.ctx.stroke();\n\n      // Draw symbol - different for goal vs regular holes\n      this.ctx.fillStyle = '#ffffff';\n      this.ctx.font = '10px monospace';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(isGoalHole ? 'üéØ' : '‚óè', centerX, centerY + 3);\n\n      // Add power-up icon if this is a power-up hole\n      if (hole.powerUpType) {\n        const powerUpIcons = {\n          'SLOW_MO_SURGE': '‚è∞',\n          'MAGNETIC_GUIDE': 'üß≤',\n          'CIRCUIT_PATCH': 'üõ°Ô∏è',\n          'OVERCLOCK_BOOST': '‚ö°',\n          'SCAN_REVEAL': 'üîç',\n        };\n        \n        const icon = powerUpIcons[hole.powerUpType as unknown as keyof typeof powerUpIcons] || '?';\n        \n        // Draw icon with glow effect\n        this.ctx.shadowColor = activeColor;\n        this.ctx.shadowBlur = 8;\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = '14px Interceptor';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(icon, centerX, centerY + 5);\n        \n        // Reset shadow\n        this.ctx.shadowBlur = 0;\n      }\n    }\n  }\n\n  /**\n   * Draw saucer effects for power-up holes\n   */\n  private drawSaucerEffects(centerX: number, centerY: number, radius: number, color: string, hole: Hole): void {\n    if (!this.ctx || !hole.saucerState) return;\n\n    this.ctx.save();\n\n    const saucerState = hole.saucerState;\n    const time = Date.now() * 0.01;\n\n    // Different effects based on phase\n    if (saucerState.phase === 'sinking') {\n      // Sinking phase - pulsing glow with downward motion\n      const pulseIntensity = 0.7 + 0.3 * Math.sin(time * 4);\n      this.ctx.shadowColor = color;\n      this.ctx.shadowBlur = 25 * pulseIntensity;\n      this.ctx.globalAlpha = 0.8 * pulseIntensity;\n\n      // Draw sinking animation rings\n      const sinkProgress = saucerState.sinkDepth;\n      for (let i = 0; i < 3; i++) {\n        const ringRadius = radius + 4 + i * 4;\n        const ringAlpha = 0.6 * (1 - i * 0.3) * (1 - sinkProgress * 0.5);\n        this.ctx.globalAlpha = ringAlpha;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(centerX, centerY + sinkProgress * 4, ringRadius, 0, Math.PI * 2);\n        this.ctx.stroke();\n      }\n\n      // Draw \"SINKING\" text\n      this.ctx.fillStyle = color;\n      this.ctx.font = '8px Interceptor';\n      this.ctx.textAlign = 'center';\n      this.ctx.globalAlpha = 0.9;\n      this.ctx.fillText('SINKING', centerX, centerY + radius + 20);\n\n    } else if (saucerState.phase === 'waiting') {\n      // Waiting phase - steady glow with pulsing\n      const pulseIntensity = 0.6 + 0.2 * Math.sin(time * 2);\n      this.ctx.shadowColor = color;\n      this.ctx.shadowBlur = 20 * pulseIntensity;\n      this.ctx.globalAlpha = 0.7 * pulseIntensity;\n\n      // Draw steady rings\n      this.ctx.strokeStyle = color;\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius + 8, 0, Math.PI * 2);\n      this.ctx.stroke();\n\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius + 4, 0, Math.PI * 2);\n      this.ctx.stroke();\n\n      // Draw spinning effect\n      const spinAngle = time * 1.5;\n      const spinRadius = radius + 6;\n      \n      this.ctx.strokeStyle = color;\n      this.ctx.lineWidth = 1;\n      this.ctx.globalAlpha = 0.8;\n      \n      for (let i = 0; i < 4; i++) {\n        const angle = spinAngle + (i * Math.PI / 2);\n        const x1 = centerX + Math.cos(angle) * spinRadius;\n        const y1 = centerY + Math.sin(angle) * spinRadius;\n        const x2 = centerX + Math.cos(angle) * (spinRadius + 6);\n        const y2 = centerY + Math.sin(angle) * (spinRadius + 6);\n        \n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n      }\n\n      // Draw \"WAITING\" text\n      this.ctx.fillStyle = color;\n      this.ctx.font = '8px Interceptor';\n      this.ctx.textAlign = 'center';\n      this.ctx.globalAlpha = 0.9;\n      this.ctx.fillText('WAITING', centerX, centerY + radius + 20);\n\n    } else if (saucerState.phase === 'ejecting') {\n      // Ejecting phase - intense glow with upward motion\n      const ejectProgress = Math.min((Date.now() - saucerState.startTime) / 200, 1);\n      const pulseIntensity = 0.8 + 0.4 * Math.sin(time * 6);\n      this.ctx.shadowColor = color;\n      this.ctx.shadowBlur = 30 * pulseIntensity;\n      this.ctx.globalAlpha = 0.9 * pulseIntensity;\n\n      // Draw ejection rings moving upward\n      for (let i = 0; i < 3; i++) {\n        const ringRadius = radius + 2 + i * 3;\n        const ringY = centerY - ejectProgress * 10 * (i + 1);\n        const ringAlpha = 0.7 * (1 - i * 0.3) * (1 - ejectProgress * 0.3);\n        this.ctx.globalAlpha = ringAlpha;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(centerX, ringY, ringRadius, 0, Math.PI * 2);\n        this.ctx.stroke();\n      }\n\n      // Draw \"EJECTING\" text\n      this.ctx.fillStyle = color;\n      this.ctx.font = '8px Interceptor';\n      this.ctx.textAlign = 'center';\n      this.ctx.globalAlpha = 0.9;\n      this.ctx.fillText('EJECTING', centerX, centerY + radius + 20);\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw danger zone with neon cyberpunk styling\n   */\n  public drawDangerZone(zone: { position: { x: number; y: number }; radius: number; width?: number; height?: number; isActive?: boolean }): void {\n    if (!this.ctx) return;\n\n    this.ctx.save();\n\n    const centerX = zone.position.x + (zone.width || zone.radius * 2) / 2;\n    const centerY = zone.position.y + (zone.height || zone.radius * 2) / 2;\n\n    // Draw pulsing danger zone\n    this.ctx.shadowColor = '#b600f9'; // Neon Purple\n    this.ctx.shadowBlur = 20;\n    this.ctx.fillStyle = '#220000'; // Dark red\n    this.ctx.globalAlpha = 0.7;\n\n    this.ctx.fillRect(\n      zone.position.x,\n      zone.position.y,\n      zone.width || zone.radius * 2,\n      zone.height || zone.radius * 2,\n    );\n\n    this.ctx.globalAlpha = 1;\n\n    // Draw border\n    this.ctx.strokeStyle = '#b600f9'; // Neon Purple\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeRect(\n      zone.position.x,\n      zone.position.y,\n      zone.width || zone.radius * 2,\n      zone.height || zone.radius * 2,\n    );\n\n    // Draw warning symbol\n    this.ctx.fillStyle = '#000000';\n    this.ctx.font = '20px monospace';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('‚ö†', centerX, centerY + 8);\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw a ball using sprite image or fallback to chrome rendering\n   */\n  public drawChromeBall(\n    ball: { position: { x: number; y: number }; radius: number },\n    animationState?: { scale: number; opacity: number },\n  ): void {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n\n    const x = ball.position.x;\n    const y = ball.position.y;\n    const radius = ball.radius;\n    const scale = animationState?.scale || 1;\n    const opacity = animationState?.opacity || 1;\n\n    // Set global opacity for animation\n    this.ctx.globalAlpha = opacity;\n\n    // Use sprite atlas if loaded, otherwise fallback to procedural rendering\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\n    if (this.spritesLoaded && atlasLoaded) {\n      // Draw sprite-based ball from atlas\n      const targetSize = radius * 2 * scale;\n      const spriteFrame = spriteAtlas.getFrame('ball_normal');\n\n      if (spriteFrame) {\n        // Calculate scale to fit the ball size (64x64 sprite to ball diameter)\n        const spriteScale = targetSize / spriteFrame.frame.w;\n\n        // Draw shadow behind sprite\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.beginPath();\n        this.ctx.arc(\n          x + radius * scale * 0.1,\n          y + radius * scale * 0.1,\n          radius * scale,\n          0,\n          Math.PI * 2,\n        );\n        this.ctx.fill();\n\n        // Draw the ball sprite from atlas, centered on ball position\n        spriteAtlas.drawSprite(\n          this.ctx,\n          'ball_normal',\n          x - targetSize / 2, // Center horizontally\n          y - targetSize / 2, // Center vertically\n          spriteScale, // Scale factor to match ball size\n        );\n      } else {\n        // Fallback if sprite not found - render procedurally inline\n        const scaledRadius = radius * scale;\n\n        // Create main ball gradient (chrome base)\n        const mainGradient = this.ctx.createRadialGradient(\n          x - scaledRadius * 0.3,\n          y - scaledRadius * 0.3,\n          0,\n          x,\n          y,\n          scaledRadius,\n        );\n        mainGradient.addColorStop(0, '#ffffff'); // Bright highlight\n        mainGradient.addColorStop(0.1, '#e6e6e6'); // Light chrome\n        mainGradient.addColorStop(0.3, '#cccccc'); // Medium chrome\n        mainGradient.addColorStop(0.6, '#999999'); // Dark chrome\n        mainGradient.addColorStop(0.8, '#666666'); // Darker chrome\n        mainGradient.addColorStop(1, '#333333'); // Shadow edge\n\n        // Draw main ball shadow (behind ball)\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.beginPath();\n        this.ctx.arc(\n          x + scaledRadius * 0.1,\n          y + scaledRadius * 0.1,\n          scaledRadius,\n          0,\n          Math.PI * 2,\n        );\n        this.ctx.fill();\n\n        // Draw main chrome ball\n        this.ctx.fillStyle = mainGradient;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, scaledRadius, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // Add bright highlight\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 1)';\n        this.ctx.beginPath();\n        this.ctx.arc(\n          x - scaledRadius * 0.35,\n          y - scaledRadius * 0.35,\n          scaledRadius * 0.08,\n          0,\n          Math.PI * 2,\n        );\n        this.ctx.fill();\n      }\n    } else {\n      // Fallback to procedural chrome rendering\n      const scaledRadius = radius * scale;\n\n      // Create main ball gradient (chrome base)\n      const mainGradient = this.ctx.createRadialGradient(\n        x - scaledRadius * 0.3,\n        y - scaledRadius * 0.3,\n        0,\n        x,\n        y,\n        scaledRadius,\n      );\n      mainGradient.addColorStop(0, '#ffffff'); // Bright highlight\n      mainGradient.addColorStop(0.1, '#e6e6e6'); // Light chrome\n      mainGradient.addColorStop(0.3, '#cccccc'); // Medium chrome\n      mainGradient.addColorStop(0.6, '#999999'); // Dark chrome\n      mainGradient.addColorStop(0.8, '#666666'); // Darker chrome\n      mainGradient.addColorStop(1, '#333333'); // Shadow edge\n\n      // Draw main ball shadow (behind ball)\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x + scaledRadius * 0.1,\n        y + scaledRadius * 0.1,\n        scaledRadius,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n\n      // Draw main chrome ball\n      this.ctx.fillStyle = mainGradient;\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, scaledRadius, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // Create secondary reflection gradient\n      const reflectionGradient = this.ctx.createRadialGradient(\n        x - scaledRadius * 0.4,\n        y - scaledRadius * 0.4,\n        0,\n        x - scaledRadius * 0.2,\n        y - scaledRadius * 0.2,\n        scaledRadius * 0.6,\n      );\n      reflectionGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');\n      reflectionGradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.3)');\n      reflectionGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n\n      // Draw secondary reflection\n      this.ctx.fillStyle = reflectionGradient;\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x - scaledRadius * 0.2,\n        y - scaledRadius * 0.2,\n        scaledRadius * 0.6,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n\n      // Create primary highlight\n      const highlightGradient = this.ctx.createRadialGradient(\n        x - scaledRadius * 0.3,\n        y - scaledRadius * 0.3,\n        0,\n        x - scaledRadius * 0.3,\n        y - scaledRadius * 0.3,\n        scaledRadius * 0.4,\n      );\n      highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.8)');\n      highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n\n      // Draw primary highlight\n      this.ctx.fillStyle = highlightGradient;\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x - scaledRadius * 0.3,\n        y - scaledRadius * 0.3,\n        scaledRadius * 0.4,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n\n      // Add small specular highlights\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x - scaledRadius * 0.4,\n        y - scaledRadius * 0.4,\n        scaledRadius * 0.15,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n\n      // Add tiny bright spot\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 1)';\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x - scaledRadius * 0.35,\n        y - scaledRadius * 0.35,\n        scaledRadius * 0.08,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n\n      // Add environment reflection (cyberpunk colors)\n      const envGradient = this.ctx.createRadialGradient(\n        x + scaledRadius * 0.3,\n        y + scaledRadius * 0.2,\n        0,\n        x + scaledRadius * 0.3,\n        y + scaledRadius * 0.2,\n        scaledRadius * 0.5,\n      );\n      envGradient.addColorStop(0, 'rgba(0, 255, 255, 0.2)'); // Cyan reflection\n      envGradient.addColorStop(0.3, 'rgba(255, 0, 102, 0.1)'); // Pink reflection\n      envGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n\n      this.ctx.fillStyle = envGradient;\n      this.ctx.beginPath();\n      this.ctx.arc(\n        x + scaledRadius * 0.3,\n        y + scaledRadius * 0.2,\n        scaledRadius * 0.5,\n        0,\n        Math.PI * 2,\n      );\n      this.ctx.fill();\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw a sprite from the atlas with optional scaling and positioning\n   */\n  public drawAtlasSprite(\n    spriteName: string,\n    x: number,\n    y: number,\n    scale: number = 1,\n    centered: boolean = true,\n  ): boolean {\n    if (!this.ctx || !spriteAtlas.isAtlasLoaded()) return false;\n\n    const frameData = spriteAtlas.getFrame(spriteName);\n    if (!frameData) return false;\n\n    const drawX = centered ? x - (frameData.frame.w * scale) / 2 : x;\n    const drawY = centered ? y - (frameData.frame.h * scale) / 2 : y;\n\n    // Apply tint if set\n    if (this.currentTint) {\n      this.ctx.save();\n      this.ctx.globalCompositeOperation = 'multiply';\n      this.ctx.fillStyle = this.currentTint;\n      this.ctx.globalAlpha = 0.3;\n    }\n\n    const result = spriteAtlas.drawSprite(this.ctx, spriteName, drawX, drawY, scale);\n\n    // Restore context if tint was applied\n    if (this.currentTint) {\n      this.ctx.restore();\n    }\n\n    return result;\n  }\n\n  /**\n   * Set tint color for sprites\n   */\n  public setTint(color: string): void {\n    this.currentTint = color;\n  }\n\n  /**\n   * Clear tint color\n   */\n  public clearTint(): void {\n    this.currentTint = null;\n  }\n\n  /**\n   * Draw a flipper using atlas sprites\n   */\n  public drawFlipper(flipper: { position: { x: number; y: number } }, isLeft: boolean): void {\n    if (!this.ctx) return;\n\n    const spriteName = isLeft ? 'flipper_left_down' : 'flipper_right_down';\n    this.drawAtlasSprite(spriteName, flipper.position.x, flipper.position.y, 2);\n  }\n\n  /**\n   * Draw a bumper using atlas sprites with animation\n   */\n  public drawBumper(bumper: { position: { x: number; y: number } }, isActive: boolean = false): void {\n    if (!this.ctx) return;\n\n    const spriteName = isActive ? 'round_bumper_active' : 'round_bumper_idle';\n    this.drawAtlasSprite(spriteName, bumper.position.x, bumper.position.y, 1.5);\n  }\n\n  /**\n   * Draw a spinner with rotation animation\n   */\n  public drawSpinner(spinner: { position: { x: number; y: number } }, animationFrame: number = 1): void {\n    if (!this.ctx) return;\n\n    // Cycle through spinner animation frames (1-4)\n    const frame = Math.max(1, Math.min(4, animationFrame));\n    const spriteName = `spinner_${frame}`;\n    this.drawAtlasSprite(spriteName, spinner.position.x, spinner.position.y, 2);\n  }\n\n  /**\n   * Get canvas context\n   */\n  public getContext(): CanvasRenderingContext2D | null {\n    return this.ctx;\n  }\n\n  /**\n   * Get canvas dimensions\n   */\n  public getDimensions(): { width: number; height: number } {\n    return { width: this.width, height: this.height };\n  }\n\n  /**\n   * Resize the renderer\n   */\n  public resize(width: number, height: number): void {\n    if (!this.canvas) return;\n\n    this.width = width;\n    this.height = height;\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    Debug.log(`Renderer resized to: ${width}x${height}`);\n  }\n}\n","// Circuit Breaker - Advanced Physics Engine\n// Robust Verlet integration with constraint solving and accurate collision detection\n\nimport { Debug } from '../utils/Debug';\nimport { TiltingBar } from '../core/TiltingBar';\n\nexport interface PhysicsObject {\n  id: string;\n  position: { x: number; y: number };\n  previousPosition: { x: number; y: number };\n  acceleration: { x: number; y: number };\n  velocity: { x: number; y: number };\n  radius: number;\n  mass: number;\n  inverseMass: number; // 1/mass for performance\n  restitution: number; // Bounciness (0-1)\n  friction: number; // Surface friction (0-1)\n  isStatic: boolean;\n  constraints: Constraint[];\n\n  // For backward compatibility\n  x?: number;\n  y?: number;\n  vx?: number;\n  vy?: number;\n  type?: 'dynamic' | 'static';\n  rotation?: number;\n  width?: number;\n  height?: number;\n\n  // Rolling physics state\n  isRollingOnBar?: boolean;\n}\n\nexport interface Constraint {\n  type: 'distance' | 'position' | 'angle';\n  objectA: PhysicsObject;\n  objectB?: PhysicsObject;\n  targetDistance?: number;\n  targetPosition?: { x: number; y: number };\n  targetAngle?: number;\n  stiffness: number;\n  restLength?: number;\n}\n\nexport interface CollisionManifold {\n  objectA: PhysicsObject;\n  objectB: PhysicsObject;\n  normal: { x: number; y: number };\n  penetration: number;\n  contactPoint: { x: number; y: number };\n}\n\ninterface SpatialCell {\n  objects: PhysicsObject[];\n}\n\nexport class PhysicsEngine {\n  private gravity: { x: number; y: number } = { x: 0, y: 400 };\n  private airResistance: number = 0.999;\n  private objects: PhysicsObject[] = [];\n  private constraints: Constraint[] = [];\n  private spatialGrid: Map<string, SpatialCell> = new Map();\n  private gridSize: number = 60;\n  private tiltingBar: TiltingBar | null = null;\n  private bounds = { width: 360, height: 640 };\n\n  // Simulation parameters (optimized for performance)\n  private deltaTime: number = 1 / 60;\n\n  // Performance tracking\n  private debug: boolean = false;\n  private collisionManifolds: CollisionManifold[] = [];\n\n  // Audio callback for collision sounds\n  private audioCallback: ((velocity: number, type: string) => void) | null =\n    null;\n\n  // Audio cooldown timers to prevent rapid-fire collision sounds (in milliseconds)\n  private audioTimeouts: Map<string, number> = new Map();\n  private readonly AUDIO_COOLDOWN_MS = 150; // 150ms cooldown between same collision type sounds\n\n  constructor() {\n    Debug.log('‚ö° Advanced PhysicsEngine initialized with Verlet integration');\n  }\n\n  /**\n   * Set the tilting bar reference for collision detection\n   */\n  public setTiltingBar(bar: TiltingBar): void {\n    this.tiltingBar = bar;\n  }\n\n  /**\n   * Set audio callback for collision sounds\n   */\n  public setAudioCallback(\n    callback: (velocity: number, type: string) => void,\n  ): void {\n    this.audioCallback = callback;\n  }\n\n  /**\n   * Play audio with cooldown to prevent rapid-fire sounds\n   */\n  private playAudioWithCooldown(\n    velocity: number,\n    type: string,\n    objectId: string,\n  ): void {\n    if (!this.audioCallback) return;\n\n    const now = Date.now();\n    const cooldownKey = `${objectId}_${type}`;\n    const lastAudioTime = this.audioTimeouts.get(cooldownKey) || 0;\n\n    // Only play if enough time has passed since last audio of this type for this object\n    if (now - lastAudioTime >= this.AUDIO_COOLDOWN_MS) {\n      this.audioCallback(velocity, type);\n      this.audioTimeouts.set(cooldownKey, now);\n    }\n  }\n\n  /**\n   * Create a physics object with proper initialization\n   */\n  public createObject(config: {\n    id: string;\n    x: number;\n    y: number;\n    radius: number;\n    mass?: number;\n    restitution?: number;\n    friction?: number;\n    isStatic?: boolean;\n  }): PhysicsObject {\n    const mass = config.mass || 1;\n    const obj: PhysicsObject = {\n      id: config.id,\n      position: { x: config.x, y: config.y },\n      previousPosition: { x: config.x, y: config.y },\n      acceleration: { x: 0, y: 0 },\n      velocity: { x: 0, y: 0 },\n      radius: config.radius,\n      mass: mass,\n      inverseMass: config.isStatic ? 0 : 1 / mass,\n      restitution: config.restitution || 0.7,\n      friction: config.friction || 0.3,\n      isStatic: config.isStatic || false,\n      constraints: [],\n      // Backward compatibility\n      x: config.x,\n      y: config.y,\n      vx: 0,\n      vy: 0,\n    };\n\n    return obj;\n  }\n\n  /**\n   * Add a physics object to the simulation\n   */\n  public addObject(obj: PhysicsObject): void {\n    // Ensure proper initialization if not created with createObject\n    if (!obj.previousPosition) {\n      obj.previousPosition = {\n        x: obj.position?.x || obj.x || 0,\n        y: obj.position?.y || obj.y || 0,\n      };\n    }\n    if (!obj.acceleration) {\n      obj.acceleration = { x: 0, y: 0 };\n    }\n    if (!obj.velocity) {\n      obj.velocity = { x: 0, y: 0 };\n    }\n    if (!obj.inverseMass) {\n      obj.inverseMass = obj.isStatic ? 0 : 1 / (obj.mass || 1);\n    }\n    if (!obj.constraints) {\n      obj.constraints = [];\n    }\n\n    this.objects.push(obj);\n    this.updateSpatialGrid();\n    Debug.log(`Added physics object: ${obj.id}`);\n  }\n\n  /**\n   * Remove a physics object by id\n   */\n  public removeObject(id: string): void {\n    this.objects = this.objects.filter(obj => obj.id !== id);\n    this.updateSpatialGrid();\n    Debug.log(`Removed physics object: ${id}`);\n  }\n\n  /**\n   * Add a constraint between objects\n   */\n  public addConstraint(constraint: Constraint): void {\n    this.constraints.push(constraint);\n    Debug.log(`Added constraint: ${constraint.type}`);\n  }\n\n  /**\n   * Main physics update (optimized for performance)\n   */\n  public update(frameTime: number): void {\n    // Convert milliseconds to seconds and apply time scaling\n    const dt = frameTime / 1000; // Convert to seconds\n    this.simulateStep(dt);\n\n    // Update backward compatibility properties\n    this.updateBackwardCompatibility();\n  }\n\n  /**\n   * Single physics simulation step (optimized)\n   */\n  private simulateStep(dt: number): void {\n    // Clear collision manifolds and rolling flags\n    this.collisionManifolds = [];\n    for (const obj of this.objects) {\n      obj.isRollingOnBar = false;\n    }\n\n    // Update spatial grid only when needed\n    if (this.objects.length > 0) {\n      this.updateSpatialGrid();\n    }\n\n    // Integrate positions using simplified Verlet integration\n    this.integratePositions(dt);\n\n    // Single iteration of constraints and collisions for performance\n    this.solveConstraints();\n    this.detectAndResolveCollisions();\n\n    // Handle tilting bar collisions and rolling physics\n    this.handleTiltingBarCollisions();\n\n    // Handle boundary collisions\n    this.handleBoundaryCollisions();\n\n    // Update velocities from position changes\n    this.updateVelocities(dt);\n  }\n\n  /**\n   * Simplified Verlet integration for position updates\n   */\n  private integratePositions(dt: number): void {\n    for (const obj of this.objects) {\n      if (obj.isStatic) continue;\n\n      // Check if ball is held (e.g., in a saucer)\n      if (this.isBallHeld(obj.id)) {\n        // Get target position for held ball\n        const targetPos = this.getHeldBallTarget(obj.id);\n        if (targetPos) {\n          // Smoothly move ball to target position\n          const smoothingFactor = 0.1; // Smooth movement\n          obj.position.x += (targetPos.x - obj.position.x) * smoothingFactor;\n          obj.position.y += (targetPos.y - obj.position.y) * smoothingFactor;\n        }\n        \n        // Keep ball in place by maintaining consistent previous position\n        // This prevents jittery movement when physics tries to move the ball\n        obj.previousPosition.x = obj.position.x;\n        obj.previousPosition.y = obj.position.y;\n        continue;\n      }\n\n      // Calculate current velocity\n      const velX = obj.position.x - obj.previousPosition.x;\n      const velY = obj.position.y - obj.previousPosition.y;\n\n      // Store current position as previous\n      obj.previousPosition.x = obj.position.x;\n      obj.previousPosition.y = obj.position.y;\n\n      // Update position with velocity and gravity\n      const gravityX = this.gravity.x * dt * dt;\n      const gravityY = this.gravity.y * dt * dt;\n      obj.position.x += velX * this.airResistance + gravityX;\n      obj.position.y += velY * this.airResistance + gravityY;\n    }\n  }\n\n  /**\n   * Update velocities from position changes\n   */\n  private updateVelocities(dt: number): void {\n    for (const obj of this.objects) {\n      if (obj.isStatic) continue;\n\n      obj.velocity.x = (obj.position.x - obj.previousPosition.x) / dt;\n      obj.velocity.y = (obj.position.y - obj.previousPosition.y) / dt;\n    }\n  }\n\n  /**\n   * Solve all constraints\n   */\n  private solveConstraints(): void {\n    for (const constraint of this.constraints) {\n      this.solveConstraint(constraint);\n    }\n  }\n\n  /**\n   * Solve individual constraint\n   */\n  private solveConstraint(constraint: Constraint): void {\n    switch (constraint.type) {\n    case 'distance':\n      this.solveDistanceConstraint(constraint);\n      break;\n    case 'position':\n      this.solvePositionConstraint(constraint);\n      break;\n    case 'angle':\n      this.solveAngleConstraint(constraint);\n      break;\n    }\n  }\n\n  /**\n   * Solve distance constraint between two objects\n   */\n  private solveDistanceConstraint(constraint: Constraint): void {\n    if (!constraint.objectB || !constraint.targetDistance) return;\n\n    const objA = constraint.objectA;\n    const objB = constraint.objectB;\n\n    const dx = objB.position.x - objA.position.x;\n    const dy = objB.position.y - objA.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (distance === 0) return;\n\n    const difference = constraint.targetDistance - distance;\n    const percent = difference / distance / 2;\n    const offsetX = dx * percent * constraint.stiffness;\n    const offsetY = dy * percent * constraint.stiffness;\n\n    if (!objA.isStatic) {\n      objA.position.x -= offsetX * objA.inverseMass;\n      objA.position.y -= offsetY * objA.inverseMass;\n    }\n\n    if (!objB.isStatic) {\n      objB.position.x += offsetX * objB.inverseMass;\n      objB.position.y += offsetY * objB.inverseMass;\n    }\n  }\n\n  /**\n   * Solve position constraint (pin object to position)\n   */\n  private solvePositionConstraint(constraint: Constraint): void {\n    if (!constraint.targetPosition) return;\n\n    const obj = constraint.objectA;\n    if (obj.isStatic) return;\n\n    const dx = constraint.targetPosition.x - obj.position.x;\n    const dy = constraint.targetPosition.y - obj.position.y;\n\n    obj.position.x += dx * constraint.stiffness;\n    obj.position.y += dy * constraint.stiffness;\n  }\n\n  /**\n   * Solve angle constraint (maintain angle between objects)\n   */\n  private solveAngleConstraint(_constraint: Constraint): void {\n    // Implementation for angle constraints if needed\n    // This is more complex and depends on specific requirements\n  }\n\n  /**\n   * Detect and resolve collisions between objects (optimized)\n   */\n  private detectAndResolveCollisions(): void {\n    // Only check collisions if we have multiple objects\n    if (this.objects.length < 2) return;\n\n    for (let i = 0; i < this.objects.length; i++) {\n      const obj = this.objects[i];\n      if (obj.isStatic) continue;\n\n      // Check only against objects after this one to avoid duplicate checks\n      for (let j = i + 1; j < this.objects.length; j++) {\n        const otherObj = this.objects[j];\n\n        // Quick distance check before expensive collision detection\n        const dx = otherObj.position.x - obj.position.x;\n        const dy = otherObj.position.y - obj.position.y;\n        const maxDistance = obj.radius + otherObj.radius + 5; // Small buffer\n\n        if (dx * dx + dy * dy < maxDistance * maxDistance) {\n          const manifold = this.detectCollision(obj, otherObj);\n          if (manifold) {\n            this.collisionManifolds.push(manifold);\n            this.resolveCollisionSimple(manifold);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect collision between two objects\n   */\n  private detectCollision(\n    objA: PhysicsObject,\n    objB: PhysicsObject,\n  ): CollisionManifold | null {\n    const dx = objB.position.x - objA.position.x;\n    const dy = objB.position.y - objA.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const minDistance = objA.radius + objB.radius;\n\n    if (distance < minDistance) {\n      const penetration = minDistance - distance;\n      const normal =\n        distance > 0 ? { x: dx / distance, y: dy / distance } : { x: 1, y: 0 };\n\n      return {\n        objectA: objA,\n        objectB: objB,\n        normal: normal,\n        penetration: penetration,\n        contactPoint: {\n          x: objA.position.x + normal.x * objA.radius,\n          y: objA.position.y + normal.y * objA.radius,\n        },\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Resolve collision using impulse-based method\n   */\n  // private resolveCollision(manifold: CollisionManifold): void {\n  //   const objA = manifold.objectA;\n  //   const objB = manifold.objectB;\n\n  //   // Position correction to prevent sinking\n  //   const correction =\n  //     (manifold.penetration / (objA.inverseMass + objB.inverseMass)) * 0.8;\n  //   objA.position.x -= manifold.normal.x * correction * objA.inverseMass;\n  //   objA.position.y -= manifold.normal.y * correction * objA.inverseMass;\n  //   objB.position.x += manifold.normal.x * correction * objB.inverseMass;\n  //   objB.position.y += manifold.normal.y * correction * objB.inverseMass;\n\n  //   // Velocity correction\n  //   const relativeVelocity = {\n  //     x: objB.velocity.x - objA.velocity.x,\n  //     y: objB.velocity.y - objA.velocity.y,\n  //   };\n\n  //   const velocityAlongNormal =\n  //     relativeVelocity.x * manifold.normal.x +\n  //     relativeVelocity.y * manifold.normal.y;\n\n  //   if (velocityAlongNormal > 0) return; // Objects separating\n\n  //   const restitution = Math.min(objA.restitution, objB.restitution);\n  //   const impulseScalar =\n  //     (-(1 + restitution) * velocityAlongNormal) /\n  //     (objA.inverseMass + objB.inverseMass);\n\n  //   const impulse = {\n  //       x: impulseScalar * manifold.normal.x,\n  //       y: impulseScalar * manifold.normal.y,\n  //   };\n\n  //   // Apply impulse to velocities (which affects next frame's position)\n  //   if (!objA.isStatic) {\n  //     objA.previousPosition.x -= impulse.x * objA.inverseMass;\n  //     objA.previousPosition.y -= impulse.y * objA.inverseMass;\n  //   }\n\n  //   if (!objB.isStatic) {\n  //     objB.previousPosition.x += impulse.x * objB.inverseMass;\n  //     objB.previousPosition.y += impulse.y * objB.inverseMass;\n  //   }\n  // }\n\n  /**\n   * Simplified collision resolution for better performance\n   */\n  private resolveCollisionSimple(manifold: CollisionManifold): void {\n    const objA = manifold.objectA;\n    const objB = manifold.objectB;\n\n    // Simple position separation\n    const separationX = manifold.normal.x * manifold.penetration * 0.5;\n    const separationY = manifold.normal.y * manifold.penetration * 0.5;\n\n    if (!objA.isStatic) {\n      objA.position.x -= separationX;\n      objA.position.y -= separationY;\n    }\n\n    if (!objB.isStatic) {\n      objB.position.x += separationX;\n      objB.position.y += separationY;\n    }\n\n    // Simple velocity reflection\n    const relativeVelocity = {\n      x: objB.velocity.x - objA.velocity.x,\n      y: objB.velocity.y - objA.velocity.y,\n    };\n\n    const velocityAlongNormal =\n      relativeVelocity.x * manifold.normal.x +\n      relativeVelocity.y * manifold.normal.y;\n\n    if (velocityAlongNormal > 0) return; // Objects separating\n\n    const restitution = Math.min(objA.restitution, objB.restitution) * 0.8; // Reduced for stability\n    const impulse = velocityAlongNormal * restitution;\n\n    if (!objA.isStatic) {\n      objA.previousPosition.x += manifold.normal.x * impulse * 0.5;\n      objA.previousPosition.y += manifold.normal.y * impulse * 0.5;\n    }\n\n    if (!objB.isStatic) {\n      objB.previousPosition.x -= manifold.normal.x * impulse * 0.5;\n      objB.previousPosition.y -= manifold.normal.y * impulse * 0.5;\n    }\n  }\n\n  /**\n   * Handle tilting bar collisions with realistic rolling physics\n   */\n  private handleTiltingBarCollisions(): void {\n    if (!this.tiltingBar) return;\n\n    for (const obj of this.objects) {\n      if (obj.isStatic) continue;\n\n      // Skip balls that are held (e.g., in saucers)\n      if (this.isBallHeld(obj.id)) continue;\n\n      const endpoints = this.tiltingBar.getEndpoints();\n      const closestPointOnCenterLine = this.getClosestPointOnLineSegment(\n        obj.position,\n        endpoints.start,\n        endpoints.end,\n      );\n      const distanceToCenterLine = Math.sqrt(\n        (obj.position.x - closestPointOnCenterLine.x) ** 2 +\n          (obj.position.y - closestPointOnCenterLine.y) ** 2,\n      );\n\n      // Account for bar thickness - collision happens when ball touches the bar surface\n      const barThickness = this.tiltingBar.thickness || 12;\n      const barSurfaceDistance = barThickness / 2;\n      const collisionDistance = obj.radius + barSurfaceDistance;\n\n      if (distanceToCenterLine < collisionDistance) {\n        // Calculate bar vectors\n        const barVec = {\n          x: endpoints.end.x - endpoints.start.x,\n          y: endpoints.end.y - endpoints.start.y,\n        };\n        const barLength = Math.sqrt(barVec.x * barVec.x + barVec.y * barVec.y);\n        const barTangent = { x: barVec.x / barLength, y: barVec.y / barLength }; // Along the bar\n        const barNormal = { x: -barVec.y / barLength, y: barVec.x / barLength }; // Perpendicular to bar\n\n        // Ensure normal points away from bar (upward)\n        if (barNormal.y > 0) {\n          barNormal.x = -barNormal.x;\n          barNormal.y = -barNormal.y;\n        }\n\n        // Calculate the actual collision point on the bar surface\n        const barSurfacePoint = {\n          x: closestPointOnCenterLine.x + barNormal.x * barSurfaceDistance,\n          y: closestPointOnCenterLine.y + barNormal.y * barSurfaceDistance,\n        };\n\n        // Position correction - place ball exactly at collision distance from bar surface\n        obj.position.x = barSurfacePoint.x + barNormal.x * obj.radius;\n        obj.position.y = barSurfacePoint.y + barNormal.y * obj.radius;\n\n        // Current velocity\n        const velocity = {\n          x: obj.position.x - obj.previousPosition.x,\n          y: obj.position.y - obj.previousPosition.y,\n        };\n\n        const velocityAlongNormal =\n          velocity.x * barNormal.x + velocity.y * barNormal.y;\n        const velocityAlongTangent =\n          velocity.x * barTangent.x + velocity.y * barTangent.y;\n\n        // Check if ball is moving into the bar (collision) or resting on it\n        if (velocityAlongNormal < -0.5) {\n          // High-speed collision - reflect velocity\n          const restitution = obj.restitution * 0.8; // Reduced bounce on bar\n          const friction = this.tiltingBar.friction || 0.3;\n\n          const reflectedVelocity = {\n            x: velocity.x - 2 * velocityAlongNormal * barNormal.x,\n            y: velocity.y - 2 * velocityAlongNormal * barNormal.y,\n          };\n\n          // Apply restitution and friction\n          reflectedVelocity.x *= restitution * (1 - friction);\n          reflectedVelocity.y *= restitution;\n\n          // Update previous position to reflect new velocity\n          obj.previousPosition.x = obj.position.x - reflectedVelocity.x;\n          obj.previousPosition.y = obj.position.y - reflectedVelocity.y;\n\n          // Play bounce sound based on collision velocity (with cooldown)\n          const collisionVelocity = Math.sqrt(\n            velocity.x * velocity.x + velocity.y * velocity.y,\n          );\n          this.playAudioWithCooldown(collisionVelocity, 'bounce', obj.id);\n        } else {\n          // Ball is resting on or gently touching the bar - apply rolling physics\n          this.applyRollingPhysics(\n            obj,\n            barTangent,\n            barNormal,\n            velocityAlongTangent,\n            this.deltaTime,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Apply realistic rolling physics when ball is on the tilted bar\n   */\n  private applyRollingPhysics(\n    obj: PhysicsObject,\n    barTangent: { x: number; y: number },\n    _barNormal: { x: number; y: number },\n    currentTangentVelocity: number,\n    dt: number,\n  ): void {\n    // Calculate the component of gravity along the bar slope\n    const gravityAlongSlope =\n      this.gravity.x * barTangent.x + this.gravity.y * barTangent.y;\n\n    // Rolling resistance and friction\n    const rollingFriction = this.tiltingBar?.friction || 0.05;\n    const rollingResistance = 0.01; // Small resistance to rolling (reduced for smoother motion)\n\n    // Calculate acceleration along the slope\n    let slopeAcceleration = gravityAlongSlope;\n\n    // Apply rolling resistance (opposes motion)\n    if (Math.abs(currentTangentVelocity) > 0.5) {\n      const resistanceForce =\n        -Math.sign(currentTangentVelocity) *\n        rollingResistance *\n        Math.abs(this.gravity.y);\n      slopeAcceleration += resistanceForce;\n    }\n\n    // Apply friction if ball is moving along the slope\n    if (Math.abs(currentTangentVelocity) > 0.5) {\n      const frictionForce =\n        -Math.sign(currentTangentVelocity) *\n        rollingFriction *\n        Math.abs(this.gravity.y);\n      slopeAcceleration += frictionForce;\n    }\n\n    // Calculate new velocity along the slope\n    const newTangentVelocity = currentTangentVelocity + slopeAcceleration * dt;\n\n    // Apply the new velocity (only along the tangent, no normal component)\n    const newVelocity = {\n      x: newTangentVelocity * barTangent.x,\n      y: newTangentVelocity * barTangent.y,\n    };\n\n    // Update previous position to reflect rolling motion\n    obj.previousPosition.x = obj.position.x - newVelocity.x;\n    obj.previousPosition.y = obj.position.y - newVelocity.y;\n\n    // Update velocity for backward compatibility\n    obj.velocity.x = newVelocity.x;\n    obj.velocity.y = newVelocity.y;\n\n    // Mark that this object is currently rolling on the bar (for debugging/gameplay)\n    obj.isRollingOnBar = true;\n  }\n\n  /**\n   * Check if a ball is currently in contact with the tilting bar\n   */\n  public isBallOnBar(ballId: string): boolean {\n    const ball = this.objects.find(obj => obj.id === ballId);\n    if (!ball || !this.tiltingBar) return false;\n\n    const endpoints = this.tiltingBar.getEndpoints();\n    const closestPoint = this.getClosestPointOnLineSegment(\n      ball.position,\n      endpoints.start,\n      endpoints.end,\n    );\n    const distance = Math.sqrt(\n      (ball.position.x - closestPoint.x) ** 2 +\n        (ball.position.y - closestPoint.y) ** 2,\n    );\n\n    const barThickness = this.tiltingBar.thickness || 12;\n    const collisionDistance = ball.radius + barThickness / 2;\n\n    return distance <= collisionDistance + 2; // Small tolerance\n  }\n\n  /**\n   * Handle boundary collisions\n   */\n  private handleBoundaryCollisions(): void {\n    for (const obj of this.objects) {\n      if (obj.isStatic) continue;\n\n      // Skip balls that are held (e.g., in saucers)\n      if (this.isBallHeld(obj.id)) continue;\n\n      // Floor collision\n      if (obj.position.y + obj.radius > this.bounds.height) {\n        obj.position.y = this.bounds.height - obj.radius;\n\n        const velocity = {\n          x: obj.position.x - obj.previousPosition.x,\n          y: obj.position.y - obj.previousPosition.y,\n        };\n\n        if (velocity.y > 0) {\n          obj.previousPosition.y =\n            obj.position.y + velocity.y * obj.restitution;\n          obj.previousPosition.x = obj.position.x - velocity.x * 0.8; // Floor friction\n\n          // Removed audio for floor collision - no sound on boundary hits\n        }\n      }\n\n      // Left wall collision\n      if (obj.position.x - obj.radius < 0) {\n        obj.position.x = obj.radius;\n        const velocity = {\n          x: obj.position.x - obj.previousPosition.x,\n          y: obj.position.y - obj.previousPosition.y,\n        };\n        if (velocity.x < 0) {\n          obj.previousPosition.x =\n            obj.position.x + velocity.x * obj.restitution;\n\n          // Removed audio for wall collision - no sound on boundary hits\n        }\n      }\n\n      // Right wall collision\n      if (obj.position.x + obj.radius > this.bounds.width) {\n        obj.position.x = this.bounds.width - obj.radius;\n        const velocity = {\n          x: obj.position.x - obj.previousPosition.x,\n          y: obj.position.y - obj.previousPosition.y,\n        };\n        if (velocity.x > 0) {\n          obj.previousPosition.x =\n            obj.position.x + velocity.x * obj.restitution;\n\n          // Removed audio for wall collision - no sound on boundary hits\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a ball should be held in place (e.g., in a saucer)\n   */\n  public isBallHeld(_ballId: string): boolean {\n    // This will be called from the Game class to check saucer state\n    return false; // Default implementation - Game class will override this\n  }\n\n  /**\n   * Get the target position for a held ball (e.g., saucer center)\n   */\n  public getHeldBallTarget(_ballId: string): { x: number; y: number } | null {\n    // This will be called from the Game class to get saucer position\n    return null; // Default implementation - Game class will override this\n  }\n\n  /**\n   * Update backward compatibility properties\n   */\n  private updateBackwardCompatibility(): void {\n    for (const obj of this.objects) {\n      obj.x = obj.position.x;\n      obj.y = obj.position.y;\n      obj.vx = obj.velocity.x;\n      obj.vy = obj.velocity.y;\n    }\n  }\n\n  /**\n   * Update spatial partitioning grid (optimized)\n   */\n  private updateSpatialGrid(): void {\n    // Skip spatial grid for small number of objects\n    if (this.objects.length <= 3) return;\n\n    this.spatialGrid.clear();\n\n    for (const obj of this.objects) {\n      const cells = this.getObjectCells(obj);\n      for (const cellKey of cells) {\n        if (!this.spatialGrid.has(cellKey)) {\n          this.spatialGrid.set(cellKey, { objects: [] });\n        }\n        const cell = this.spatialGrid.get(cellKey);\n        if (cell) {\n          cell.objects.push(obj);\n        }\n      }\n    }\n  }\n\n  /**\n   * Get grid cells that an object occupies\n   */\n  private getObjectCells(obj: PhysicsObject): string[] {\n    const cells: string[] = [];\n    const radius = obj.radius;\n    const minX = Math.floor((obj.position.x - radius) / this.gridSize);\n    const maxX = Math.floor((obj.position.x + radius) / this.gridSize);\n    const minY = Math.floor((obj.position.y - radius) / this.gridSize);\n    const maxY = Math.floor((obj.position.y + radius) / this.gridSize);\n\n    for (let x = minX; x <= maxX; x++) {\n      for (let y = minY; y <= maxY; y++) {\n        cells.push(`${x},${y}`);\n      }\n    }\n    return cells;\n  }\n\n  /**\n   * Get objects in nearby cells for collision detection\n   */\n  // private getNearbyObjects(obj: PhysicsObject): PhysicsObject[] {\n  //   const nearby: PhysicsObject[] = [];\n  //   const cells = this.getObjectCells(obj);\n\n  //   for (const cellKey of cells) {\n  //     const cell = this.spatialGrid.get(cellKey);\n  //     if (cell) {\n  //       for (const otherObj of cell.objects) {\n  //         if (otherObj.id !== obj.id && !nearby.includes(otherObj)) {\n  //           nearby.push(otherObj);\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return nearby;\n  // }\n\n  /**\n   * Get closest point on line segment to a point\n   */\n  private getClosestPointOnLineSegment(\n    point: { x: number; y: number },\n    lineStart: { x: number; y: number },\n    lineEnd: { x: number; y: number },\n  ): { x: number; y: number } {\n    const dx = lineEnd.x - lineStart.x;\n    const dy = lineEnd.y - lineStart.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    if (length === 0) return lineStart;\n\n    const t = Math.max(\n      0,\n      Math.min(\n        1,\n        ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) /\n          (length * length),\n      ),\n    );\n\n    return {\n      x: lineStart.x + t * dx,\n      y: lineStart.y + t * dy,\n    };\n  }\n\n  // Public API methods\n  public getObjects(): PhysicsObject[] {\n    return this.objects;\n  }\n\n  public setGravity(x: number, y: number): void {\n    this.gravity.x = x;\n    this.gravity.y = y;\n    Debug.log(`Gravity set to: (${x}, ${y})`);\n  }\n\n  public setAirResistance(resistance: number): void {\n    this.airResistance = Math.max(0, Math.min(1, resistance));\n    Debug.log(`Air resistance set to: ${this.airResistance}`);\n  }\n\n  public setBounds(width: number, height: number): void {\n    this.bounds.width = width;\n    this.bounds.height = height;\n    Debug.log(`Physics bounds set to: ${width}x${height}`);\n  }\n\n  public setDebug(enabled: boolean): void {\n    this.debug = enabled;\n  }\n\n  public getDebug(): boolean {\n    return this.debug;\n  }\n\n  public getCollisionManifolds(): CollisionManifold[] {\n    return this.collisionManifolds;\n  }\n\n  public getConstraints(): Constraint[] {\n    return this.constraints;\n  }\n\n  // Legacy compatibility methods\n  public getFriction(): number {\n    return 0.98; // Return a default value for compatibility\n  }\n\n  public getBounceEnergy(): number {\n    return 0.7; // Return a default value for compatibility\n  }\n\n  public getGravity(): number {\n    return this.gravity.y; // Return Y gravity for compatibility\n  }\n\n  public setFriction(_friction: number): void {\n    Debug.log(\n      'Legacy friction setting ignored - use per-object friction instead',\n    );\n  }\n\n  public setBounceEnergy(_energy: number): void {\n    Debug.log(\n      'Legacy bounce energy setting ignored - use per-object restitution instead',\n    );\n  }\n}\n","import { Vector2 } from '../utils/MathUtils';\nimport { logger } from '../utils/Logger';\n\nexport interface TiltingBarConfig {\n  position: Vector2;\n  width: number;\n  height: number;\n  maxRotation: number; // Maximum rotation angle in radians\n  rotationSpeed: number; // How fast the bar rotates\n  friction: number; // Surface friction for ball interactions\n}\n\nexport class TiltingBar {\n  public position: Vector2;\n  public rotation: number = 0;\n  public targetRotation: number = 0;\n  public leftSideHeight: number = 590; // Absolute Y position for left side (start at bottom)\n  public rightSideHeight: number = 590; // Absolute Y position for right side (start at bottom)\n  public minSideHeight: number = 50; // Minimum height (top of screen area)\n  public maxSideHeight: number = 590; // Maximum height (bottom of screen)\n  public sideSpeed: number = 100; // Speed of side height changes\n  public width: number;\n  public height: number;\n  public maxRotation: number;\n  public rotationSpeed: number;\n  public friction: number;\n  private speedMultiplier: number = 1.0; // For power-up effects\n\n  // Visual properties\n  public color: string = '#00f0ff'; // Electric Blue\n  public glowColor: string = '#b600f9'; // Neon Purple\n  public thickness: number = 12; // Increased thickness for better collision\n\n  constructor(config: TiltingBarConfig) {\n    this.position = { ...config.position };\n    this.width = config.width;\n    this.height = config.height;\n    this.maxRotation = config.maxRotation;\n    this.rotationSpeed = config.rotationSpeed;\n    this.friction = config.friction;\n  }\n\n  /**\n   * Set the target rotation angle (will be clamped to maxRotation)\n   */\n  public setTargetRotation(angle: number): void {\n    this.targetRotation = Math.max(\n      -this.maxRotation,\n      Math.min(this.maxRotation, angle),\n    );\n  }\n\n  /**\n   * Move left side up or down based on input (1 = up, -1 = down, 0 = no movement)\n   */\n  public moveLeftSide(input: number): void {\n    if (input !== 0) {\n      this.leftSideHeight -= input * this.sideSpeed * this.speedMultiplier * (1 / 60); // Move up (negative) or down (positive)\n      this.leftSideHeight = Math.max(\n        this.minSideHeight,\n        Math.min(this.maxSideHeight, this.leftSideHeight),\n      );\n    }\n  }\n\n  /**\n   * Move right side up or down based on input (1 = up, -1 = down, 0 = no movement)\n   */\n  public moveRightSide(input: number): void {\n    if (input !== 0) {\n      this.rightSideHeight -= input * this.sideSpeed * this.speedMultiplier * (1 / 60); // Move up (negative) or down (positive)\n      this.rightSideHeight = Math.max(\n        this.minSideHeight,\n        Math.min(this.maxSideHeight, this.rightSideHeight),\n      );\n    }\n  }\n\n  /**\n   * Get the current tilt as a percentage (-1 to 1)\n   */\n  public getTiltPercentage(): number {\n    return this.rotation / this.maxRotation;\n  }\n\n  /**\n   * Update the bar's rotation based on current side heights\n   */\n  public update(_deltaTime: number): void {\n    // Calculate rotation based on height difference\n    const heightDifference = this.rightSideHeight - this.leftSideHeight;\n    const maxHeightRange = this.maxSideHeight - this.minSideHeight;\n    this.rotation = (heightDifference / maxHeightRange) * this.maxRotation;\n\n    // Also update targetRotation for compatibility\n    this.targetRotation = this.rotation;\n  }\n\n  /**\n   * Get the endpoints of the bar for collision detection\n   */\n  public getEndpoints(): { start: Vector2; end: Vector2 } {\n    const halfWidth = this.width / 2;\n\n    return {\n      start: {\n        x: this.position.x - halfWidth,\n        y: this.leftSideHeight,\n      },\n      end: {\n        x: this.position.x + halfWidth,\n        y: this.rightSideHeight,\n      },\n    };\n  }\n\n  /**\n   * Get the normal vector of the bar surface\n   */\n  public getNormal(): Vector2 {\n    const endpoints = this.getEndpoints();\n    const dx = endpoints.end.x - endpoints.start.x;\n    const dy = endpoints.end.y - endpoints.start.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    if (length === 0) return { x: 0, y: -1 }; // Default upward normal\n\n    // Normal perpendicular to the bar, pointing upward\n    return {\n      x: -dy / length,\n      y: dx / length,\n    };\n  }\n\n  /**\n   * Check if a point is near the bar (for collision detection)\n   */\n  public isPointNearBar(point: Vector2, radius: number): boolean {\n    const endpoints = this.getEndpoints();\n    const distance = this.distanceToLineSegment(\n      point,\n      endpoints.start,\n      endpoints.end,\n    );\n    const collisionThreshold = radius + this.thickness / 2 + 2; // Add small buffer for better detection\n    return distance <= collisionThreshold;\n  }\n\n  /**\n   * Calculate distance from point to line segment\n   */\n  private distanceToLineSegment(\n    point: Vector2,\n    start: Vector2,\n    end: Vector2,\n  ): number {\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    if (length === 0)\n      return Math.sqrt((point.x - start.x) ** 2 + (point.y - start.y) ** 2);\n\n    const t = Math.max(\n      0,\n      Math.min(\n        1,\n        ((point.x - start.x) * dx + (point.y - start.y) * dy) /\n          (length * length),\n      ),\n    );\n    const projection = {\n      x: start.x + t * dx,\n      y: start.y + t * dy,\n    };\n\n    return Math.sqrt(\n      (point.x - projection.x) ** 2 + (point.y - projection.y) ** 2,\n    );\n  }\n\n  /**\n   * Get collision response for a ball hitting the bar\n   */\n  public getCollisionResponse(\n    ballPosition: Vector2,\n    ballVelocity: Vector2,\n    ballRadius: number,\n  ): { velocity: Vector2; position: Vector2 } {\n    const endpoints = this.getEndpoints();\n    const normal = this.getNormal();\n\n    // Calculate penetration depth\n    const distanceToBar = this.distanceToLineSegment(\n      ballPosition,\n      endpoints.start,\n      endpoints.end,\n    );\n    const penetrationDepth = ballRadius + this.thickness / 2 - distanceToBar;\n\n    // Push ball out of the bar\n    const correctedPosition = {\n      x: ballPosition.x + normal.x * penetrationDepth,\n      y: ballPosition.y + normal.y * penetrationDepth,\n    };\n\n    // Reflect velocity along the normal (only if moving into the bar)\n    const dotProduct = ballVelocity.x * normal.x + ballVelocity.y * normal.y;\n\n    let newVelocity = ballVelocity;\n    if (dotProduct < 0) {\n      // Ball is moving into the bar\n      const reflection = {\n        x: ballVelocity.x - 2 * dotProduct * normal.x,\n        y: ballVelocity.y - 2 * dotProduct * normal.y,\n      };\n\n      // Apply friction and bounce energy\n      const frictionFactor = 1 - this.friction;\n      const bounceEnergy = 0.8; // Slight energy loss on bounce\n      newVelocity = {\n        x: reflection.x * frictionFactor * bounceEnergy,\n        y: reflection.y * bounceEnergy,\n      };\n    }\n\n    return {\n      velocity: newVelocity,\n      position: correctedPosition,\n    };\n  }\n\n  /**\n   * Set speed multiplier for power-up effects\n   */\n  public setSpeedMultiplier(multiplier: number): void {\n    this.speedMultiplier = multiplier;\n  }\n\n  /**\n   * Get current speed multiplier\n   */\n  public getSpeedMultiplier(): number {\n    return this.speedMultiplier;\n  }\n\n  /**\n   * Reset the tilting bar to its starting position (both sides at bottom)\n   */\n  public reset(): void {\n    this.leftSideHeight = this.maxSideHeight; // Reset to bottom position (590)\n    this.rightSideHeight = this.maxSideHeight; // Reset to bottom position (590)\n    this.rotation = 0; // Reset rotation to horizontal\n    this.targetRotation = 0; // Reset target rotation\n    this.speedMultiplier = 1.0; // Reset speed multiplier\n    logger.info('üîÑ Tilting bar reset to starting position', null, 'TiltingBar');\n  }\n}\n","import { logger } from '../utils/Logger';\n\nexport interface InputState {\n  keys: { [key: string]: boolean };\n  mouse: {\n    x: number;\n    y: number;\n    isDown: boolean;\n    button: number;\n  };\n  tiltInput: number; // -1 to 1 for bar tilt\n}\n\nexport class InputManager {\n  private inputState: InputState = {\n    keys: {},\n    mouse: {\n      x: 0,\n      y: 0,\n      isDown: false,\n      button: -1,\n    },\n    tiltInput: 0,\n  };\n\n  private previousKeys: { [key: string]: boolean } = {};\n  private canvas: HTMLCanvasElement | null = null;\n  private keyBindings = {\n    leftSideUp: ['KeyA'],\n    leftSideDown: ['KeyZ'],\n    rightSideUp: ['ArrowUp'],\n    rightSideDown: ['ArrowDown'],\n    start: ['Space'],\n    reset: ['KeyR'],\n    pause: ['KeyP', 'Escape'],\n  };\n\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize input manager with canvas reference\n   */\n  public init(canvas: HTMLCanvasElement): void {\n    this.canvas = canvas;\n    this.setupCanvasListeners();\n  }\n\n  /**\n   * Get current input state\n   */\n  public getInputState(): InputState {\n    return { ...this.inputState };\n  }\n\n  /**\n   * Get tilt input value (-1 to 1)\n   */\n  public getTiltInput(): number {\n    return this.inputState.tiltInput;\n  }\n\n  /**\n   * Get left side input (-1 to 1, where 1 is up, -1 is down)\n   */\n  public getLeftSideInput(): number {\n    let leftSideInput = 0;\n    if (this.isActionPressed('leftSideUp')) {\n      leftSideInput = 1;\n    }\n    if (this.isActionPressed('leftSideDown')) {\n      leftSideInput = -1;\n    }\n    return leftSideInput;\n  }\n\n  /**\n   * Get right side input (-1 to 1, where 1 is up, -1 is down)\n   */\n  public getRightSideInput(): number {\n    let rightSideInput = 0;\n    if (this.isActionPressed('rightSideUp')) {\n      rightSideInput = 1;\n    }\n    if (this.isActionPressed('rightSideDown')) {\n      rightSideInput = -1;\n    }\n    return rightSideInput;\n  }\n\n  /**\n   * Check if a specific action is pressed\n   */\n  public isActionPressed(action: keyof typeof this.keyBindings): boolean {\n    return this.keyBindings[action].some(key => this.inputState.keys[key]);\n  }\n\n  /**\n   * Check if a specific action was just pressed (not held)\n   */\n  public isActionJustPressed(action: keyof typeof this.keyBindings): boolean {\n    const isPressed = this.keyBindings[action].some(\n      key => this.inputState.keys[key] && !this.previousKeys[key],\n    );\n\n    // Debug logging for start key\n    if (action === 'start' && isPressed) {\n      logger.debug('üîë Start key (SPACE) just pressed!', null, 'InputManager');\n    }\n\n    return isPressed;\n  }\n\n  /**\n   * Check if a specific key was just pressed (not held) by key code\n   */\n  public isKeyJustPressed(keyCode: string): boolean {\n    return this.inputState.keys[keyCode] && !this.previousKeys[keyCode];\n  }\n\n  /**\n   * Get all keys that were just pressed this frame\n   */\n  public getJustPressedKeys(): string[] {\n    const justPressed: string[] = [];\n    for (const key in this.inputState.keys) {\n      if (this.inputState.keys[key] && !this.previousKeys[key]) {\n        justPressed.push(key);\n      }\n    }\n    return justPressed;\n  }\n\n  /**\n   * Check if mouse was just clicked (not held)\n   */\n  public isMouseJustPressed(): boolean {\n    return this.inputState.mouse.isDown && !this.previousMouseState;\n  }\n\n  /**\n   * Check if mouse was just released\n   */\n  public isMouseJustReleased(): boolean {\n    return !this.inputState.mouse.isDown && this.previousMouseState;\n  }\n\n  /**\n   * Get current mouse position\n   */\n  public getMousePosition(): { x: number; y: number } | null {\n    if (!this.canvas) return null;\n    \n    const rect = this.canvas.getBoundingClientRect();\n    return {\n      x: this.inputState.mouse.x - rect.left,\n      y: this.inputState.mouse.y - rect.top,\n    };\n  }\n\n  private previousMouseState: boolean = false;\n\n  /**\n   * Update input state (called each frame)\n   */\n  public update(): void {\n    // Calculate tilt input based on independent left/right side controls\n    let leftSideInput = 0;\n    let rightSideInput = 0;\n\n    // Left side controls (A raises, Z lowers)\n    if (this.isActionPressed('leftSideUp')) {\n      leftSideInput = 1;\n    }\n    if (this.isActionPressed('leftSideDown')) {\n      leftSideInput = -1;\n    }\n\n    // Right side controls (Up raises, Down lowers)\n    if (this.isActionPressed('rightSideUp')) {\n      rightSideInput = 1;\n    }\n    if (this.isActionPressed('rightSideDown')) {\n      rightSideInput = -1;\n    }\n\n    // Calculate overall tilt based on difference between sides\n    // Positive tilt = right side higher than left side\n    const tiltInput = (rightSideInput - leftSideInput) * 0.5;\n\n    // Add mouse tilt control if mouse is being used\n    if (this.canvas && this.inputState.mouse.isDown) {\n      const rect = this.canvas.getBoundingClientRect();\n      const centerX = rect.width / 2;\n      const mouseX = this.inputState.mouse.x - rect.left;\n      const mouseTilt = (mouseX - centerX) / centerX;\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, mouseTilt));\n    } else {\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, tiltInput));\n    }\n  }\n\n  /**\n   * Call this at the end of each frame to update previous key state\n   */\n  public endFrame(): void {\n    // Store previous key state for just-pressed detection\n    this.previousKeys = { ...this.inputState.keys };\n    // Store previous mouse state for just-pressed detection\n    this.previousMouseState = this.inputState.mouse.isDown;\n  }\n\n  /**\n   * Setup global event listeners\n   */\n  private setupEventListeners(): void {\n    // Keyboard events\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\n\n    // Prevent default behavior for game keys\n    document.addEventListener('keydown', e => {\n      const allKeys = Object.values(this.keyBindings).flat();\n      if (allKeys.includes(e.code)) {\n        e.preventDefault();\n      }\n    });\n  }\n\n  /**\n   * Setup canvas-specific event listeners\n   */\n  private setupCanvasListeners(): void {\n    if (!this.canvas) return;\n\n    // Mouse events\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener(\n      'mouseleave',\n      this.handleMouseLeave.bind(this),\n    );\n\n    // Touch events for mobile support\n    this.canvas.addEventListener(\n      'touchstart',\n      this.handleTouchStart.bind(this),\n    );\n    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this));\n    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this));\n  }\n\n  /**\n   * Handle keydown events\n   */\n  private handleKeyDown(event: KeyboardEvent): void {\n    this.inputState.keys[event.code] = true;\n  }\n\n  /**\n   * Handle keyup events\n   */\n  private handleKeyUp(event: KeyboardEvent): void {\n    this.inputState.keys[event.code] = false;\n  }\n\n  /**\n   * Handle mouse down events\n   */\n  private handleMouseDown(event: MouseEvent): void {\n    this.inputState.mouse.isDown = true;\n    this.inputState.mouse.button = event.button;\n    this.updateMousePosition(event);\n  }\n\n  /**\n   * Handle mouse up events\n   */\n  private handleMouseUp(_event: MouseEvent): void {\n    this.inputState.mouse.isDown = false;\n    this.inputState.mouse.button = -1;\n  }\n\n  /**\n   * Handle mouse move events\n   */\n  private handleMouseMove(event: MouseEvent): void {\n    this.updateMousePosition(event);\n  }\n\n  /**\n   * Handle mouse leave events\n   */\n  private handleMouseLeave(): void {\n    this.inputState.mouse.isDown = false;\n    this.inputState.mouse.button = -1;\n  }\n\n  /**\n   * Handle touch start events\n   */\n  private handleTouchStart(event: TouchEvent): void {\n    event.preventDefault();\n    if (event.touches.length > 0) {\n      this.inputState.mouse.isDown = true;\n      this.updateTouchPosition(event.touches[0]);\n    }\n  }\n\n  /**\n   * Handle touch end events\n   */\n  private handleTouchEnd(event: TouchEvent): void {\n    event.preventDefault();\n    this.inputState.mouse.isDown = false;\n  }\n\n  /**\n   * Handle touch move events\n   */\n  private handleTouchMove(event: TouchEvent): void {\n    event.preventDefault();\n    if (event.touches.length > 0) {\n      this.updateTouchPosition(event.touches[0]);\n    }\n  }\n\n  /**\n   * Update mouse position from mouse event\n   */\n  private updateMousePosition(event: MouseEvent): void {\n    this.inputState.mouse.x = event.clientX;\n    this.inputState.mouse.y = event.clientY;\n  }\n\n  /**\n   * Update mouse position from touch event\n   */\n  private updateTouchPosition(touch: Touch): void {\n    this.inputState.mouse.x = touch.clientX;\n    this.inputState.mouse.y = touch.clientY;\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  public dispose(): void {\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    document.removeEventListener('keyup', this.handleKeyUp.bind(this));\n\n    if (this.canvas) {\n      this.canvas.removeEventListener(\n        'mousedown',\n        this.handleMouseDown.bind(this),\n      );\n      this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this));\n      this.canvas.removeEventListener(\n        'mousemove',\n        this.handleMouseMove.bind(this),\n      );\n      this.canvas.removeEventListener(\n        'mouseleave',\n        this.handleMouseLeave.bind(this),\n      );\n      this.canvas.removeEventListener(\n        'touchstart',\n        this.handleTouchStart.bind(this),\n      );\n      this.canvas.removeEventListener(\n        'touchend',\n        this.handleTouchEnd.bind(this),\n      );\n      this.canvas.removeEventListener(\n        'touchmove',\n        this.handleTouchMove.bind(this),\n      );\n    }\n  }\n}\n","// Circuit Breaker - Level System\n// Hole-based navigation system where players guide the ball through holes to reach the goal\n\nimport { Vector2 } from '../utils/MathUtils';\nimport { logger } from '../utils/Logger';\n// Define PowerUpType locally to avoid import issues\nexport enum PowerUpType {\n  SLOW_MO_SURGE = 'slow_mo_surge',\n  MAGNETIC_GUIDE = 'magnetic_guide',\n  CIRCUIT_PATCH = 'circuit_patch',\n  OVERCLOCK_BOOST = 'overclock_boost',\n  SCAN_REVEAL = 'scan_reveal',\n}\n\nexport interface Hole {\n  id: string;\n  position: Vector2;\n  radius: number;\n  isGoal: boolean;\n  isActive: boolean;\n  powerUpType?: PowerUpType; // Optional power-up type for power-up holes\n  \n  // Saucer behavior for power-up holes\n  saucerState?: {\n    isActive: boolean;\n    ballId?: string;\n    startTime: number;\n    phase: 'sinking' | 'waiting' | 'ejecting';\n    sinkDuration: number;\n    waitDuration: number;\n    kickDirection: { x: number; y: number };\n    kickForce: number;\n    sinkDepth: number; // How deep the ball sinks (0-1)\n  };\n  \n  // Track recently kicked balls to prevent re-entry\n  recentlyKickedBalls?: Set<string>;\n}\n\nexport interface LevelData {\n  id: number;\n  name: string;\n  description: string;\n  holes: Hole[];\n  goalHoles: Hole[]; // Changed from single goalHole to multiple goalHoles\n  ballStartPosition: Vector2;\n  difficulty: number;\n  bonusMultiplier: number;\n  requiredGoals: number; // Number of goals that must be reached to complete level\n}\n\nexport class Level {\n  private levelData: LevelData;\n  private isCompleted: boolean = false;\n  private elapsedTime: number = 0;\n  private completedGoals: Set<string> = new Set(); // Track completed goal holes\n\n  constructor(levelData: LevelData) {\n    this.levelData = levelData;\n    logger.info(\n      `üìã Level ${levelData.id} loaded: ${levelData.name} (${levelData.goalHoles.length} goals)`,\n      null,\n      'Level',\n    );\n  }\n\n  /**\n   * Start the level timer\n   */\n  public start(): void {\n    this.elapsedTime = 0;\n    this.isCompleted = false;\n    logger.info(`üèÅ Level ${this.levelData.id} started`, null, 'Level');\n  }\n\n  /**\n   * Update level state\n   */\n  public update(deltaTime: number): void {\n    this.elapsedTime += deltaTime;\n\n    // Update hole glow effects\n    this.levelData.holes.forEach(hole => {\n      if (hole.isGoal) {\n        // Goal hole pulses with a bright glow\n        hole.isActive = true;\n      } else {\n        // Regular holes are always active\n        hole.isActive = true;\n      }\n    });\n  }\n\n  /**\n   * Check if ball falls into any hole\n   */\n  public checkHoleCollision(\n    ballPosition: Vector2,\n    _ballRadius: number,\n    ballId?: string,\n  ): Hole | null {\n    for (const hole of this.levelData.holes) {\n      if (!hole.isActive) continue;\n\n      // Skip completed goal holes - balls can no longer fall into them\n      if (hole.isGoal && this.completedGoals.has(hole.id)) {\n        continue;\n      }\n\n      // Skip holes that are currently in saucer mode\n      if (hole.saucerState?.isActive) {\n        continue;\n      }\n\n      // Skip holes if this ball was recently kicked from them\n      if (ballId && hole.recentlyKickedBalls?.has(ballId)) {\n        continue;\n      }\n\n      const dx = ballPosition.x - hole.position.x;\n      const dy = ballPosition.y - hole.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Ball falls into hole only when ball center crosses into hole boundary\n      if (distance <= hole.radius) {\n        logger.info(`üï≥Ô∏è Ball fell into hole: ${hole.id}`, null, 'Level');\n        return hole;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if ball reaches the goal hole\n   */\n  public checkGoalReached(ballPosition: Vector2, _ballRadius: number): boolean {\n    for (const goalHole of this.levelData.goalHoles) {\n      // Skip goal holes that are already completed\n      if (this.completedGoals.has(goalHole.id)) {\n        continue;\n      }\n\n      const dx = ballPosition.x - goalHole.position.x;\n      const dy = ballPosition.y - goalHole.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Ball reaches goal only when ball center crosses into goal hole boundary\n      if (distance <= goalHole.radius) {\n        logger.info(`üéØ Ball reached goal hole: ${goalHole.id}`, null, 'Level');\n        this.completedGoals.add(goalHole.id);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if ball falls off the screen (failure condition)\n   */\n  public checkBallFallOff(\n    ballPosition: Vector2,\n    screenBounds: Vector2,\n  ): boolean {\n    return ballPosition.y > screenBounds.y + 50; // 50px buffer below screen\n  }\n\n  /**\n   * Check if level is complete\n   */\n  public checkLevelComplete(): boolean {\n    // Level is complete when all required goals are reached\n    if (\n      !this.isCompleted &&\n      this.completedGoals.size >= this.levelData.requiredGoals\n    ) {\n      this.markComplete();\n      return true;\n    }\n    return this.isCompleted;\n  }\n\n  /**\n   * Get number of completed goals\n   */\n  public getCompletedGoals(): number {\n    return this.completedGoals.size;\n  }\n\n  /**\n   * Get required number of goals\n   */\n  public getRequiredGoals(): number {\n    return this.levelData.requiredGoals;\n  }\n\n  /**\n   * Check if all goals are completed\n   */\n  public areAllGoalsCompleted(): boolean {\n    return this.completedGoals.size >= this.levelData.requiredGoals;\n  }\n\n  /**\n   * Check if a specific goal hole has been completed\n   */\n  public isGoalCompleted(goalId: string): boolean {\n    return this.completedGoals.has(goalId);\n  }\n\n  /**\n   * Get goal hole at a specific position\n   */\n  public getGoalHoleAtPosition(ballPosition: Vector2): Hole | null {\n    for (const goalHole of this.levelData.goalHoles) {\n      const dx = ballPosition.x - goalHole.position.x;\n      const dy = ballPosition.y - goalHole.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance <= goalHole.radius) {\n        return goalHole;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Mark level as complete\n   */\n  public markComplete(): void {\n    if (!this.isCompleted) {\n      this.isCompleted = true;\n      logger.info(`üèÜ Level ${this.levelData.id} completed!`, null, 'Level');\n    }\n  }\n\n  /**\n   * Calculate level score based on time and completion\n   */\n  public calculateScore(): number {\n    const baseScore = 1000; // Base score for completing level\n\n    // Time bonus (faster completion = higher score)\n    const timeBonus = Math.max(0, (60000 - this.elapsedTime) / 100); // 60 seconds max bonus\n\n    return Math.floor((baseScore + timeBonus) * this.levelData.bonusMultiplier);\n  }\n\n  /**\n   * Get level progress (0-1)\n   */\n  public getProgress(): number {\n    // Progress based on ball's Y position (higher = more progress)\n    // This will be calculated by the game based on ball position\n    return this.isCompleted ? 1.0 : 0.0;\n  }\n\n  /**\n   * Get level data\n   */\n  public getLevelData(): LevelData {\n    return this.levelData;\n  }\n\n  /**\n   * Start saucer behavior for a power-up hole\n   */\n  public startSaucerBehavior(holeId: string, ballId: string, currentTime: number): void {\n    const hole = this.levelData.holes.find(h => h.id === holeId);\n    if (!hole || !hole.powerUpType) return;\n\n    // Calculate kick direction (upward and slightly random)\n    const kickAngle = Math.PI * 0.75 + (Math.random() - 0.5) * 0.5; // 135¬∞ ¬± 15¬∞\n    const kickDirection = {\n      x: Math.cos(kickAngle),\n      y: Math.sin(kickAngle)\n    };\n\n    hole.saucerState = {\n      isActive: true,\n      ballId: ballId,\n      startTime: currentTime,\n      phase: 'sinking',\n      sinkDuration: 500, // 0.5 seconds to sink\n      waitDuration: 2000 + Math.random() * 2000, // 2-4 seconds to wait\n      kickDirection: kickDirection,\n      kickForce: 200 + Math.random() * 150, // Lighter kick force (200-350)\n      sinkDepth: 0 // Start at surface\n    };\n\n    logger.info(`üõ∏ Started saucer behavior for hole: ${holeId}`, null, 'Level');\n  }\n\n  /**\n   * Get the target position for a ball in a saucer (with sink depth)\n   */\n  public getSaucerBallPosition(holeId: string): { x: number; y: number } | null {\n    const hole = this.levelData.holes.find(h => h.id === holeId);\n    if (!hole || !hole.saucerState?.isActive) return null;\n\n    const saucerState = hole.saucerState;\n    const sinkOffset = saucerState.sinkDepth * 8; // Sink up to 8 pixels deep\n\n    // Return position with sink depth applied\n    return {\n      x: hole.position.x,\n      y: hole.position.y + sinkOffset\n    };\n  }\n\n  /**\n   * Update saucer behavior and return kick data if ready\n   */\n  public updateSaucerBehavior(currentTime: number): { ballId: string; direction: { x: number; y: number }; force: number; holeId: string } | null {\n    for (const hole of this.levelData.holes) {\n      if (!hole.saucerState?.isActive) continue;\n\n      const elapsed = currentTime - hole.saucerState.startTime;\n      const saucerState = hole.saucerState;\n\n      if (saucerState.phase === 'sinking') {\n        // Ball is sinking into the saucer\n        const sinkProgress = Math.min(elapsed / saucerState.sinkDuration, 1);\n        saucerState.sinkDepth = sinkProgress;\n\n        if (sinkProgress >= 1) {\n          // Transition to waiting phase\n          saucerState.phase = 'waiting';\n          saucerState.startTime = currentTime; // Reset timer for waiting phase\n          logger.info(`‚è≥ Saucer waiting phase started for hole: ${hole.id}`, null, 'Level');\n        }\n      } else if (saucerState.phase === 'waiting') {\n        // Ball is waiting in the saucer\n        const waitElapsed = currentTime - saucerState.startTime;\n        if (waitElapsed >= saucerState.waitDuration) {\n          // Transition to ejecting phase\n          saucerState.phase = 'ejecting';\n          saucerState.startTime = currentTime; // Reset timer for ejecting phase\n          logger.info(`üöÄ Saucer ejecting phase started for hole: ${hole.id}`, null, 'Level');\n        }\n      } else if (saucerState.phase === 'ejecting') {\n        // Ball is being ejected\n        const ejectElapsed = currentTime - saucerState.startTime;\n        if (ejectElapsed >= 200) { // 0.2 seconds to complete ejection\n          // Saucer is ready to kick the ball\n          const kickData = {\n            ballId: saucerState.ballId!,\n            direction: saucerState.kickDirection,\n            force: saucerState.kickForce,\n            holeId: hole.id\n          };\n\n          // Remove the power-up saucer entirely from the playfield\n          hole.saucerState = undefined;\n          hole.isActive = false;\n          \n          // Track this ball as recently kicked to prevent re-entry\n          if (!hole.recentlyKickedBalls) {\n            hole.recentlyKickedBalls = new Set();\n          }\n          hole.recentlyKickedBalls.add(saucerState.ballId!);\n          \n          // Clear the recently kicked balls after a short delay (1 second)\n          setTimeout(() => {\n            if (hole.recentlyKickedBalls) {\n              hole.recentlyKickedBalls.delete(saucerState.ballId!);\n            }\n          }, 1000);\n          \n          logger.info(`üöÄ Saucer removed from playfield after ejecting ball from hole: ${hole.id}`, null, 'Level');\n          return kickData;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if a ball is currently in a saucer\n   */\n  public isBallInSaucer(ballId: string): boolean {\n    return this.levelData.holes.some(hole => \n      hole.saucerState?.isActive && hole.saucerState.ballId === ballId\n    );\n  }\n\n  /**\n   * Deactivate a specific hole (used for power-up holes after collection)\n   */\n  public deactivateHole(holeId: string): void {\n    const hole = this.levelData.holes.find(h => h.id === holeId);\n    if (hole) {\n      hole.isActive = false;\n      logger.info(`üö´ Deactivated hole: ${holeId}`, null, 'Level');\n    }\n  }\n\n  /**\n   * Reset level state\n   */\n  public reset(): void {\n    this.isCompleted = false;\n    this.elapsedTime = 0;\n    this.completedGoals.clear();\n\n    // Reset all holes\n    this.levelData.holes.forEach(hole => {\n      hole.isActive = true;\n    });\n\n    logger.info(`üîÑ Level ${this.levelData.id} reset`, null, 'Level');\n  }\n}\n\nexport class LevelManager {\n  private levels: Map<number, LevelData> = new Map();\n  private currentLevel: Level | null = null;\n  private unlockedLevels: Set<number> = new Set([1]); // Level 1 is unlocked by default\n\n  constructor() {\n    logger.info('üìö LevelManager initialized', null, 'LevelManager');\n    this.loadLevels();\n  }\n\n  /**\n   * Generate holes for a level with increasing density from bottom to top\n   */\n  private generateHoles(levelId: number): { holes: Hole[]; goalHoles: Hole[] } {\n    const holes: Hole[] = [];\n    const PLAYFIELD_WIDTH = 360;\n    const BALL_RADIUS = 14;\n    const HOLE_RADIUS = BALL_RADIUS; // Holes are exactly ball size\n    const BUFFER = 8; // Minimum spacing between holes\n\n    // Bar starts at Y=590, so holes should start at least 10px above that\n    const BAR_START_POSITION = 590;\n    const HOLE_START_Y = BAR_START_POSITION - 10; // Y=580\n    const TOP_BOUNDARY = 50; // Top of playfield\n    const GOAL_AREA_HEIGHT = 100; // Reserve top 100px for goal\n\n    // Power-up hole configurations - limit to 1-2 power-ups per level\n    const maxPowerUpsPerLevel = Math.min(2, Math.max(1, Math.floor(levelId / 2))); // 1 for level 1-2, 2 for level 3+\n    const powerUpHoleConfigs = [\n      { type: PowerUpType.SLOW_MO_SURGE, spawnChance: 0.15, color: '#00ffff' },\n      { type: PowerUpType.MAGNETIC_GUIDE, spawnChance: 0.12, color: '#ff00ff' },\n      { type: PowerUpType.CIRCUIT_PATCH, spawnChance: 0.08, color: '#00ff00' },\n      { type: PowerUpType.OVERCLOCK_BOOST, spawnChance: 0.10, color: '#ff6600' },\n      { type: PowerUpType.SCAN_REVEAL, spawnChance: 0.06, color: '#ffff00' },\n    ];\n\n    // Generate goal holes near the top (Y: 50-150)\n    const goalHoles: Hole[] = [];\n    const numGoals = levelId + 1; // Level 1 = 2 goals, Level 2 = 3 goals, etc.\n\n    for (let i = 0; i < numGoals; i++) {\n      let attempts = 0;\n      let validPosition = false;\n\n      while (!validPosition && attempts < 100) {\n        const goalX = 50 + Math.random() * (PLAYFIELD_WIDTH - 100);\n        const goalY = TOP_BOUNDARY + Math.random() * GOAL_AREA_HEIGHT;\n\n        // Check if position is valid (not too close to other goal holes)\n        validPosition = true;\n        for (const existingGoal of goalHoles) {\n          const dx = goalX - existingGoal.position.x;\n          const dy = goalY - existingGoal.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < HOLE_RADIUS * 3 + BUFFER) {\n            // More spacing for goal holes\n            validPosition = false;\n            break;\n          }\n        }\n\n        if (validPosition) {\n          goalHoles.push({\n            id: `goal-${levelId}-${i}`,\n            position: { x: goalX, y: goalY },\n            radius: HOLE_RADIUS,\n            isGoal: true,\n            isActive: true,\n          });\n        }\n\n        attempts++;\n      }\n    }\n\n    // Add goal holes to the holes array\n    holes.push(...goalHoles);\n\n    // Generate regular holes with INCREASING density toward the top\n    const sections = 10; // Divide playfield into sections\n    const playableHeight = HOLE_START_Y - (TOP_BOUNDARY + GOAL_AREA_HEIGHT); // Y=580 to Y=150\n    const sectionHeight = playableHeight / sections;\n\n    // Difficulty scaling - sparse at bottom, dense at top\n    const baseDensity = 0.05 + (levelId - 1) * 0.01; // Very sparse at bottom\n    const maxDensity = 0.3 + (levelId - 1) * 0.08; // Dense at top\n\n    // Track power-up holes to limit them\n    let powerUpHolesCreated = 0;\n\n    for (let section = 0; section < sections; section++) {\n      // Section 0 is at bottom (Y=580), section 9 is near top (Y=150)\n      const sectionY = HOLE_START_Y - (section + 1) * sectionHeight;\n\n      // Density increases as we go toward the top (higher section number = higher density)\n      const sectionDensity = baseDensity + (section / sections) * maxDensity;\n      const holesInSection = Math.floor(sectionDensity * 12); // 12 holes max per section\n\n      for (let i = 0; i < holesInSection; i++) {\n        let attempts = 0;\n        let validPosition = false;\n\n        while (!validPosition && attempts < 50) {\n          const x =\n            HOLE_RADIUS + Math.random() * (PLAYFIELD_WIDTH - 2 * HOLE_RADIUS);\n          const y = sectionY + Math.random() * sectionHeight;\n\n          // Check if position is valid (not too close to other holes)\n          validPosition = true;\n          for (const existingHole of holes) {\n            const dx = x - existingHole.position.x;\n            const dy = y - existingHole.position.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < HOLE_RADIUS * 2 + BUFFER) {\n              validPosition = false;\n              break;\n            }\n          }\n\n          if (validPosition) {\n            // Determine if this hole should be a power-up hole\n            let powerUpType: PowerUpType | undefined = undefined;\n            \n            // Only create power-up holes if we haven't reached the limit\n            if (powerUpHolesCreated < maxPowerUpsPerLevel) {\n              // Check each power-up type for this hole\n              for (const config of powerUpHoleConfigs) {\n                if (Math.random() < config.spawnChance) {\n                  powerUpType = config.type;\n                  powerUpHolesCreated++;\n                  break; // Only one power-up per hole\n                }\n              }\n            }\n            \n            holes.push({\n              id: `hole-${levelId}-${section}-${i}`,\n              position: { x, y },\n              radius: HOLE_RADIUS,\n              isGoal: false,\n              isActive: true,\n              powerUpType: powerUpType,\n            });\n          }\n\n          attempts++;\n        }\n      }\n    }\n\n    logger.info(\n      `üï≥Ô∏è Generated ${holes.length} holes for level ${levelId} (${powerUpHolesCreated} power-up holes, sparse at bottom, dense at top)`,\n      null,\n      'Level',\n    );\n\n    return { holes, goalHoles };\n  }\n\n  /**\n   * Load all level definitions\n   */\n  private loadLevels(): void {\n    // Generate 5 levels with increasing difficulty\n    for (let levelId = 1; levelId <= 5; levelId++) {\n      const { holes, goalHoles } = this.generateHoles(levelId);\n\n      const levelData: LevelData = {\n        id: levelId,\n        name: `Circuit Level ${levelId}`,\n        description: `Navigate through the holes to reach the goal circuit. Difficulty: ${levelId}/5`,\n        holes,\n        goalHoles,\n        ballStartPosition: { x: 343, y: 584 }, // On the tilting bar (bar starts at Y=590, ball should be slightly above)\n        difficulty: levelId,\n        bonusMultiplier: 1.0 + (levelId - 1) * 0.2,\n        requiredGoals: goalHoles.length,\n      };\n\n      this.levels.set(levelId, levelData);\n    }\n\n    logger.info(`üìö Loaded ${this.levels.size} levels`, null, 'LevelManager');\n  }\n\n  /**\n   * Load a specific level\n   */\n  public loadLevel(levelId: number): Level | null {\n    const levelData = this.levels.get(levelId);\n    if (!levelData) {\n      logger.warn(`‚ö†Ô∏è Level ${levelId} not found`, null, 'Level');\n      return null;\n    }\n\n    if (!this.isLevelUnlocked(levelId)) {\n      logger.warn(`üîí Level ${levelId} is locked`, null, 'Level');\n      return null;\n    }\n\n    this.currentLevel = new Level(levelData);\n    return this.currentLevel;\n  }\n\n  /**\n   * Check if level is unlocked\n   */\n  public isLevelUnlocked(levelId: number): boolean {\n    return this.unlockedLevels.has(levelId);\n  }\n\n  /**\n   * Unlock a level\n   */\n  public unlockLevel(levelId: number): void {\n    if (!this.unlockedLevels.has(levelId)) {\n      this.unlockedLevels.add(levelId);\n      logger.info(`üîì Level ${levelId} unlocked`, null, 'Level');\n    }\n  }\n\n  /**\n   * Get current level\n   */\n  public getCurrentLevel(): Level | null {\n    return this.currentLevel;\n  }\n\n  /**\n   * Get available levels\n   */\n  public getAvailableLevels(): number[] {\n    return Array.from(this.levels.keys());\n  }\n\n  /**\n   * Get unlocked levels\n   */\n  public getUnlockedLevels(): number[] {\n    return Array.from(this.unlockedLevels);\n  }\n\n  /**\n   * Get level data\n   */\n  public getLevelData(levelId: number): LevelData | null {\n    return this.levels.get(levelId) || null;\n  }\n}\n","// Circuit Breaker - Audio Manager\n// Handles sound effects, background music, and audio processing using Web Audio API\n\nimport { logger } from '../utils/Logger';\n\n// Type definitions for browser compatibility\ninterface WebkitAudioContext extends AudioContext {}\ninterface AudioContextConstructor {\n  new (): AudioContext | WebkitAudioContext;\n}\n\ndeclare global {\n  interface Window {\n    webkitAudioContext?: AudioContextConstructor;\n  }\n}\n\nexport interface AudioConfig {\n  masterVolume: number;\n  sfxVolume: number;\n  musicVolume: number;\n  enabled: boolean;\n}\n\nexport interface SoundEffect {\n  id: string;\n  buffer: AudioBuffer | null;\n  volume: number;\n  loop: boolean;\n  pitch: number;\n}\n\nexport class AudioManager {\n  private audioContext: AudioContext | null = null;\n  private masterGain: GainNode | null = null;\n  private sfxGain: GainNode | null = null;\n  private musicGain: GainNode | null = null;\n  private config: AudioConfig = {\n    masterVolume: 0.7,\n    sfxVolume: 0.8,\n    musicVolume: 0.4,\n    enabled: true,\n  };\n\n  private soundEffects: Map<string, SoundEffect> = new Map();\n  private loadedSounds: Map<string, AudioBuffer> = new Map();\n  private currentMusic: AudioBufferSourceNode | null = null;\n  private currentMusicGain: GainNode | null = null;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    logger.info('üîä AudioManager initialized', null, 'AudioManager');\n  }\n\n  /**\n   * Initialize the audio system\n   */\n  public async init(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      // Create audio context\n      const AudioContextConstructor = (window.AudioContext ||\n        window.webkitAudioContext) as AudioContextConstructor;\n      this.audioContext = new AudioContextConstructor();\n\n      // Create gain nodes for volume control\n      this.masterGain = this.audioContext.createGain();\n      this.sfxGain = this.audioContext.createGain();\n      this.musicGain = this.audioContext.createGain();\n\n      // Connect gain nodes\n      this.sfxGain.connect(this.masterGain);\n      this.musicGain.connect(this.masterGain);\n      this.masterGain.connect(this.audioContext.destination);\n\n      // Set initial volumes\n      this.masterGain.gain.value = this.config.masterVolume;\n      this.sfxGain.gain.value = this.config.sfxVolume;\n      this.musicGain.gain.value = this.config.musicVolume;\n\n      // Create procedural sound effects\n      await this.createProceduralSounds();\n\n      this.isInitialized = true;\n      logger.info('‚úÖ Audio system initialized', null, 'AudioManager');\n    } catch (error) {\n      logger.error('‚ùå Failed to initialize audio system:', error, 'AudioManager');\n      this.config.enabled = false;\n    }\n  }\n\n  /**\n   * Create procedural sound effects using Web Audio API\n   */\n  private async createProceduralSounds(): Promise<void> {\n    if (!this.audioContext) return;\n\n    // Ball bounce sound - realistic metallic ping\n    const bounceBuffer = this.createBounceSound();\n    this.soundEffects.set('bounce', {\n      id: 'bounce',\n      buffer: bounceBuffer,\n      volume: 0.6,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Ball rolling sound - continuous rumble\n    const rollBuffer = this.createRollingSound();\n    this.soundEffects.set('roll', {\n      id: 'roll',\n      buffer: rollBuffer,\n      volume: 0.3,\n      loop: true,\n      pitch: 1.0,\n    });\n\n    // Electrical zap sound - sharp electronic buzz\n    const zapBuffer = this.createElectricalZap();\n    this.soundEffects.set('zap', {\n      id: 'zap',\n      buffer: zapBuffer,\n      volume: 0.7,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Target port activation - satisfying chime\n    const targetBuffer = this.createTargetSound();\n    this.soundEffects.set('target', {\n      id: 'target',\n      buffer: targetBuffer,\n      volume: 0.8,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Level complete - triumphant fanfare\n    const completeBuffer = this.createLevelCompleteSound();\n    this.soundEffects.set('level_complete', {\n      id: 'level_complete',\n      buffer: completeBuffer,\n      volume: 0.9,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // UI click sound - subtle beep\n    const clickBuffer = this.createUIClickSound();\n    this.soundEffects.set('ui_click', {\n      id: 'ui_click',\n      buffer: clickBuffer,\n      volume: 0.5,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // UI hover sound - soft beep\n    const hoverBuffer = this.createUIHoverSound();\n    this.soundEffects.set('ui_hover', {\n      id: 'ui_hover',\n      buffer: hoverBuffer,\n      volume: 0.3,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // UI slide sound - smooth transition\n    const slideBuffer = this.createUISlideSound();\n    this.soundEffects.set('ui_slide', {\n      id: 'ui_slide',\n      buffer: slideBuffer,\n      volume: 0.4,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Game over sound - dramatic failure\n    const gameOverBuffer = this.createGameOverSound();\n    this.soundEffects.set('game_over', {\n      id: 'game_over',\n      buffer: gameOverBuffer,\n      volume: 0.8,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Power-up collect sound - satisfying chime\n    const powerupCollectBuffer = this.createPowerupCollectSound();\n    this.soundEffects.set('powerup_collect', {\n      id: 'powerup_collect',\n      buffer: powerupCollectBuffer,\n      volume: 0.7,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Power-up activate sound - electronic buzz\n    const powerupActivateBuffer = this.createPowerupActivateSound();\n    this.soundEffects.set('powerup_activate', {\n      id: 'powerup_activate',\n      buffer: powerupActivateBuffer,\n      volume: 0.6,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Shield break sound - glass shatter\n    const shieldBreakBuffer = this.createShieldBreakSound();\n    this.soundEffects.set('shield_break', {\n      id: 'shield_break',\n      buffer: shieldBreakBuffer,\n      volume: 0.8,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    // Shield activate sound - protective hum\n    const shieldActivateBuffer = this.createShieldActivateSound();\n    this.soundEffects.set('shield_activate', {\n      id: 'shield_activate',\n      buffer: shieldActivateBuffer,\n      volume: 0.6,\n      loop: false,\n      pitch: 1.0,\n    });\n\n    logger.info(\n      `üéµ Created ${this.soundEffects.size} procedural sound effects`,\n      null,\n      'AudioManager',\n    );\n  }\n\n  /**\n   * Create realistic ball bounce sound\n   */\n  private createBounceSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.2; // 200ms\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 8); // Quick decay\n\n      // Metallic ping with harmonics\n      const fundamental = Math.sin(2 * Math.PI * 800 * t) * 0.5;\n      const harmonic2 = Math.sin(2 * Math.PI * 1600 * t) * 0.3;\n      const harmonic3 = Math.sin(2 * Math.PI * 2400 * t) * 0.2;\n\n      // Add some noise for realism\n      const noise = (Math.random() - 0.5) * 0.1;\n\n      data[i] = (fundamental + harmonic2 + harmonic3 + noise) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create ball rolling sound\n   */\n  private createRollingSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 1.0; // 1 second loop\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n\n      // Low frequency rumble with random variations\n      const rumble = Math.sin(2 * Math.PI * 60 * t) * 0.3;\n      const highFreq = Math.sin(2 * Math.PI * 200 * t) * 0.1;\n      const noise = (Math.random() - 0.5) * 0.2;\n\n      data[i] = rumble + highFreq + noise;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create electrical zap sound\n   */\n  private createElectricalZap(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.3;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 6);\n\n      // Sharp, buzzing electrical sound\n      const buzz = Math.sin(2 * Math.PI * 1200 * t) * 0.4;\n      const crackle = Math.sin(2 * Math.PI * 3000 * t) * 0.3;\n      const noise = (Math.random() - 0.5) * 0.5;\n\n      data[i] = (buzz + crackle + noise) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create target port activation sound\n   */\n  private createTargetSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.5;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 4);\n\n      // Pleasant chime sound\n      const chime1 = Math.sin(2 * Math.PI * 523 * t) * 0.5; // C5\n      const chime2 = Math.sin(2 * Math.PI * 659 * t) * 0.3; // E5\n      const chime3 = Math.sin(2 * Math.PI * 784 * t) * 0.2; // G5\n\n      data[i] = (chime1 + chime2 + chime3) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create level complete sound\n   */\n  private createLevelCompleteSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 1.0;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    // Simple ascending melody\n    const notes = [523, 659, 784, 1047]; // C5, E5, G5, C6\n    const noteLength = length / notes.length;\n\n    for (let i = 0; i < length; i++) {\n      const noteIndex = Math.floor(i / noteLength);\n      const t = (i % noteLength) / sampleRate;\n      const envelope = Math.exp(-t * 2);\n\n      const freq = notes[noteIndex] || notes[notes.length - 1];\n      const tone = Math.sin(2 * Math.PI * freq * t) * envelope * 0.5;\n\n      data[i] = tone;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create UI click sound\n   */\n  private createUIClickSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.1;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 20);\n\n      const click = Math.sin(2 * Math.PI * 1000 * t) * envelope * 0.3;\n      data[i] = click;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create UI hover sound\n   */\n  private createUIHoverSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.05;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 30);\n\n      const hover = Math.sin(2 * Math.PI * 800 * t) * envelope * 0.2;\n      data[i] = hover;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create UI slide sound\n   */\n  private createUISlideSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.15;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 8);\n\n      // Smooth sliding sound with slight frequency variation\n      const freq = 600 + Math.sin(t * 10) * 100;\n      const slide = Math.sin(2 * Math.PI * freq * t) * envelope * 0.25;\n      data[i] = slide;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create game over sound\n   */\n  private createGameOverSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 1.5;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 2);\n\n      // Dramatic descending tone with noise\n      const freq = 400 - t * 200; // Descending frequency\n      const tone = Math.sin(2 * Math.PI * Math.max(50, freq) * t) * 0.4;\n      const noise = (Math.random() - 0.5) * 0.3;\n      const distortion = Math.sin(2 * Math.PI * 100 * t) * 0.2;\n\n      data[i] = (tone + noise + distortion) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create power-up collect sound\n   */\n  private createPowerupCollectSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.4;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 5);\n\n      // Pleasant ascending chime\n      const freq = 800 + t * 400; // Ascending frequency\n      const chime1 = Math.sin(2 * Math.PI * freq * t) * 0.4;\n      const chime2 = Math.sin(2 * Math.PI * (freq * 1.5) * t) * 0.2;\n      const sparkle = Math.sin(2 * Math.PI * 2000 * t) * 0.1;\n\n      data[i] = (chime1 + chime2 + sparkle) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create power-up activate sound\n   */\n  private createPowerupActivateSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.3;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 8);\n\n      // Electronic activation buzz\n      const buzz = Math.sin(2 * Math.PI * 600 * t) * 0.3;\n      const crackle = Math.sin(2 * Math.PI * 1800 * t) * 0.2;\n      const noise = (Math.random() - 0.5) * 0.2;\n\n      data[i] = (buzz + crackle + noise) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create shield break sound\n   */\n  private createShieldBreakSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.5;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 4);\n\n      // Glass shatter effect\n      const glass = Math.sin(2 * Math.PI * 1200 * t) * 0.3;\n      const shatter = Math.sin(2 * Math.PI * 800 * t) * 0.2;\n      const noise = (Math.random() - 0.5) * 0.4;\n      const echo = Math.sin(2 * Math.PI * 400 * t) * 0.1;\n\n      data[i] = (glass + shatter + noise + echo) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Create shield activate sound\n   */\n  private createShieldActivateSound(): AudioBuffer | null {\n    if (!this.audioContext) return null;\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.6;\n    const length = sampleRate * duration;\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < length; i++) {\n      const t = i / sampleRate;\n      const envelope = Math.exp(-t * 3);\n\n      // Protective shield hum\n      const hum = Math.sin(2 * Math.PI * 200 * t) * 0.3;\n      const resonance = Math.sin(2 * Math.PI * 400 * t) * 0.2;\n      const protection = Math.sin(2 * Math.PI * 100 * t) * 0.1;\n\n      data[i] = (hum + resonance + protection) * envelope;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Play a sound effect\n   */\n  public playSound(\n    soundId: string,\n    volume: number = 1.0,\n    pitch: number = 1.0,\n  ): void {\n    if (!this.config.enabled || !this.audioContext || !this.isInitialized)\n      return;\n\n    const sound = this.soundEffects.get(soundId);\n    if (!sound || !sound.buffer) {\n      logger.warn(`üîá Sound not found: ${soundId}`);\n      return;\n    }\n\n    try {\n      const source = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n\n      source.buffer = sound.buffer;\n      source.loop = sound.loop;\n      source.playbackRate.value = pitch;\n\n      gainNode.gain.value = sound.volume * volume;\n\n      source.connect(gainNode);\n      if (this.sfxGain) {\n        gainNode.connect(this.sfxGain);\n      }\n\n      source.start();\n\n      // Auto-cleanup for non-looping sounds\n      if (!sound.loop) {\n        source.addEventListener('ended', () => {\n          source.disconnect();\n          gainNode.disconnect();\n        });\n      }\n    } catch (error) {\n      logger.error(`‚ùå Error playing sound ${soundId}:`, error);\n    }\n  }\n\n  /**\n   * Play ball bounce sound with velocity-based pitch\n   */\n  public playBounceSound(velocity: number): void {\n    const normalizedVelocity = Math.min(velocity / 500, 1.0);\n    const volume = 0.3 + normalizedVelocity * 0.7;\n    const pitch = 0.8 + normalizedVelocity * 0.4;\n\n    this.playSound('bounce', volume, pitch);\n  }\n\n  /**\n   * Play rolling sound (continuous)\n   */\n  public playRollingSound(): void {\n    // Only play if not already playing\n    this.playSound('roll', 0.5);\n  }\n\n  /**\n   * Stop all sounds\n   */\n  public stopAllSounds(): void {\n    if (!this.audioContext) return;\n\n    try {\n      // Stop current music\n      if (this.currentMusic) {\n        this.currentMusic.stop();\n        this.currentMusic = null;\n      }\n\n      // Note: Individual sound effects will stop automatically\n      logger.info('üîá All sounds stopped');\n    } catch (error) {\n      logger.error('‚ùå Error stopping sounds:', error);\n    }\n  }\n\n  /**\n   * Set master volume\n   */\n  public setMasterVolume(volume: number): void {\n    this.config.masterVolume = Math.max(0, Math.min(1, volume));\n    if (this.masterGain) {\n      this.masterGain.gain.value = this.config.masterVolume;\n    }\n  }\n\n  /**\n   * Set sound effects volume\n   */\n  public setSFXVolume(volume: number): void {\n    this.config.sfxVolume = Math.max(0, Math.min(1, volume));\n    if (this.sfxGain) {\n      this.sfxGain.gain.value = this.config.sfxVolume;\n    }\n  }\n\n  /**\n   * Set music volume\n   */\n  public setMusicVolume(volume: number): void {\n    this.config.musicVolume = Math.max(0, Math.min(1, volume));\n    if (this.musicGain) {\n      this.musicGain.gain.value = this.config.musicVolume;\n    }\n  }\n\n  /**\n   * Enable/disable audio\n   */\n  public setEnabled(enabled: boolean): void {\n    this.config.enabled = enabled;\n    if (!enabled) {\n      this.stopAllSounds();\n    }\n  }\n\n  /**\n   * Get audio configuration\n   */\n  public getConfig(): AudioConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Resume audio context (required for user interaction)\n   */\n  public async resumeContext(): Promise<void> {\n    if (this.audioContext && this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n      logger.info('üîä Audio context resumed', null, 'AudioManager');\n    }\n  }\n\n  /**\n   * Check if audio context is suspended\n   */\n  public isContextSuspended(): boolean {\n    return this.audioContext?.state === 'suspended';\n  }\n\n  /**\n   * Check if audio is available\n   */\n  public isAvailable(): boolean {\n    return this.isInitialized && this.config.enabled;\n  }\n\n  /**\n   * Get the correct base URL for assets\n   */\n  private getBaseUrl(): string {\n    // For GitHub Pages deployment, use the base URL from the current location\n    const baseUrl = window.location.pathname.includes('/circuit-breaker/')\n      ? '/circuit-breaker/'\n      : '/';\n    return baseUrl;\n  }\n\n  /**\n   * Load an MP3 file from the public/assets/audio folder\n   */\n  public async loadMusic(filename: string): Promise<AudioBuffer | null> {\n    if (!this.audioContext) return null;\n\n    try {\n      const baseUrl = this.getBaseUrl();\n      const audioUrl = `${baseUrl}assets/audio/${filename}`;\n      logger.info(`üéµ Attempting to load audio from: ${audioUrl}`);\n\n      const response = await fetch(audioUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${filename}: ${response.status}`);\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n\n      // Cache the loaded music\n      this.loadedSounds.set(filename, audioBuffer);\n\n      logger.info(`üéµ Loaded music: ${filename}`);\n      return audioBuffer;\n    } catch (error) {\n      logger.error(`‚ùå Error loading music ${filename}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Play background music\n   */\n  public async playMusic(\n    filename: string,\n    loop: boolean = true,\n    volume: number = 1.0,\n  ): Promise<void> {\n    if (!this.config.enabled || !this.audioContext || !this.isInitialized)\n      return;\n\n    // Stop current music if playing\n    this.stopMusic();\n\n    try {\n      // Load music if not already cached\n      let audioBuffer = this.loadedSounds.get(filename);\n      if (!audioBuffer) {\n        const loadedBuffer = await this.loadMusic(filename);\n        if (!loadedBuffer) return;\n        audioBuffer = loadedBuffer;\n      }\n\n      // Create source and gain nodes\n      const source = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n\n      source.buffer = audioBuffer;\n      source.loop = loop;\n      gainNode.gain.value = volume;\n\n      // Connect nodes\n      source.connect(gainNode);\n      if (this.musicGain) {\n        gainNode.connect(this.musicGain);\n      }\n\n      // Store references for later control\n      this.currentMusic = source;\n      this.currentMusicGain = gainNode;\n\n      // Start playing\n      source.start();\n\n      // Handle music ending (for non-looping tracks)\n      if (!loop) {\n        source.addEventListener('ended', () => {\n          this.currentMusic = null;\n          this.currentMusicGain = null;\n        });\n      }\n\n      logger.info(`üéµ Playing music: ${filename} (loop: ${loop})`);\n    } catch (error) {\n      logger.error(`‚ùå Error playing music ${filename}:`, error);\n    }\n  }\n\n  /**\n   * Stop current background music\n   */\n  public stopMusic(): void {\n    if (this.currentMusic) {\n      try {\n        this.currentMusic.stop();\n        this.currentMusic.disconnect();\n        if (this.currentMusicGain) {\n          this.currentMusicGain.disconnect();\n        }\n      } catch (error) {\n        // Ignore errors when stopping already stopped music\n      }\n      this.currentMusic = null;\n      this.currentMusicGain = null;\n      logger.info('üîá Music stopped');\n    }\n  }\n\n  /**\n   * Fade out current music and optionally start new music\n   */\n  public async fadeToMusic(\n    newFilename: string | null = null,\n    fadeTime: number = 1.0,\n  ): Promise<void> {\n    if (!this.currentMusicGain || !this.audioContext) {\n      if (newFilename) {\n        await this.playMusic(newFilename);\n      }\n      return;\n    }\n\n    // Fade out current music\n    const fadeSteps = 60; // 60 steps for smooth fade\n    const fadeInterval = (fadeTime * 1000) / fadeSteps;\n    const volumeStep = this.currentMusicGain.gain.value / fadeSteps;\n\n    for (let i = 0; i < fadeSteps; i++) {\n      setTimeout(() => {\n        if (this.currentMusicGain) {\n          this.currentMusicGain.gain.value = Math.max(\n            0,\n            this.currentMusicGain.gain.value - volumeStep,\n          );\n        }\n      }, i * fadeInterval);\n    }\n\n    // Stop current music after fade\n    setTimeout(() => {\n      this.stopMusic();\n\n      // Start new music if specified\n      if (newFilename) {\n        this.playMusic(newFilename);\n      }\n    }, fadeTime * 1000);\n  }\n\n  /**\n   * Check if music is currently playing\n   */\n  public isMusicPlaying(): boolean {\n    return this.currentMusic !== null;\n  }\n}\n","import { AudioManager } from '../audio/AudioManager';\r\n\r\nexport interface ButtonConfig {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  label: string;\r\n  onClick: () => void;\r\n  audioManager: AudioManager;\r\n  soundKey?: string;\r\n  nineSlice?: HTMLImageElement | null;\r\n}\r\n\r\nexport class Button {\r\n  private config: ButtonConfig;\r\n  private isHovered = false;\r\n  private isPressed = false;\r\n\r\n  constructor(config: ButtonConfig) {\r\n    this.config = config;\r\n    // Register event listeners elsewhere (UI manager or main loop)\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    const { x, y, width, height, label, nineSlice } = this.config;\r\n    // Draw 9-slice background if provided, else fallback\r\n    if (nineSlice) {\r\n      // Placeholder: draw as simple rect for now, 9-slice logic to be added\r\n      ctx.drawImage(nineSlice, x, y, width, height);\r\n    } else {\r\n      ctx.save();\r\n      ctx.fillStyle = this.isPressed ? '#00f0ff' : this.isHovered ? '#b600f9' : '#222';\r\n      ctx.strokeStyle = '#00f0ff';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.roundRect(x, y, width, height, 8);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n    // Draw label\r\n    ctx.save();\r\n    ctx.fillStyle = '#fff';\r\n    ctx.font = '18px Interceptor, monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(label, x + width / 2, y + height / 2);\r\n    ctx.restore();\r\n  }\r\n\r\n  public handlePointerMove(px: number, py: number) {\r\n    const { x, y, width, height, audioManager } = this.config;\r\n    const wasHovered = this.isHovered;\r\n    this.isHovered = px >= x && px <= x + width && py >= y && py <= y + height;\r\n    if (this.isHovered && !wasHovered) {\r\n      audioManager.playSound(this.config.soundKey || 'ui_hover');\r\n    }\r\n  }\r\n\r\n  public handlePointerDown(_px: number, _py: number) {\r\n    if (this.isHovered) {\r\n      this.isPressed = true;\r\n    }\r\n  }\r\n\r\n  public handlePointerUp(_px: number, _py: number) {\r\n    if (this.isHovered && this.isPressed) {\r\n      this.config.audioManager.playSound(this.config.soundKey || 'ui_click');\r\n      this.config.onClick();\r\n    }\r\n    this.isPressed = false;\r\n  }\r\n\r\n  public setLabel(label: string): void {\r\n    this.config.label = label;\r\n  }\r\n} ","import { AudioManager } from '../audio/AudioManager';\r\n\r\nexport interface SliderConfig {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  min: number;\r\n  max: number;\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  audioManager: AudioManager;\r\n  soundKey?: string;\r\n  nineSlice?: HTMLImageElement | null;\r\n}\r\n\r\nexport class Slider {\r\n  private config: SliderConfig;\r\n  private isDragging = false;\r\n\r\n  constructor(config: SliderConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    const { x, y, width, min, max, value, nineSlice } = this.config;\r\n    // Draw 9-slice background if provided, else fallback\r\n    if (nineSlice) {\r\n      ctx.drawImage(nineSlice, x, y, width, 16);\r\n    } else {\r\n      ctx.save();\r\n      ctx.fillStyle = '#222';\r\n      ctx.strokeStyle = '#00f0ff';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.roundRect(x, y, width, 16, 8);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n    // Draw handle\r\n    const percent = (value - min) / (max - min);\r\n    const handleX = x + percent * width;\r\n    ctx.save();\r\n    ctx.fillStyle = '#b600f9';\r\n    ctx.beginPath();\r\n    ctx.arc(handleX, y + 8, 10, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n\r\n  public handlePointerDown(px: number, py: number) {\r\n    const { x, y, width } = this.config;\r\n    if (py >= y && py <= y + 16 && px >= x && px <= x + width) {\r\n      this.isDragging = true;\r\n      this.updateValueFromPointer(px);\r\n    }\r\n  }\r\n\r\n  public handlePointerMove(px: number, _py: number) {\r\n    if (this.isDragging) {\r\n      this.updateValueFromPointer(px);\r\n    }\r\n  }\r\n\r\n  public handlePointerUp(_px: number, _py: number) {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n      this.config.audioManager.playSound(this.config.soundKey || 'ui_click');\r\n    }\r\n  }\r\n\r\n  private updateValueFromPointer(px: number) {\r\n    const { x, width, min, max, onChange, audioManager } = this.config;\r\n    let percent = (px - x) / width;\r\n    percent = Math.max(0, Math.min(1, percent));\r\n    const newValue = min + percent * (max - min);\r\n    if (newValue !== this.config.value) {\r\n      this.config.value = newValue;\r\n      onChange(newValue);\r\n      audioManager.playSound(this.config.soundKey || 'ui_slide');\r\n    }\r\n  }\r\n\r\n  public setValue(value: number): void {\r\n    this.config.value = Math.max(this.config.min, Math.min(this.config.max, value));\r\n  }\r\n} ","import { Button } from './Button';\r\nimport { Slider } from './Slider';\r\nimport { AudioManager } from '../audio/AudioManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface SettingsMenuConfig {\r\n  audioManager: AudioManager;\r\n  onClose: () => void;\r\n  onBackToMenu?: () => void;\r\n  isFromPauseMenu?: boolean;\r\n}\r\n\r\nexport class SettingsMenu {\r\n  private config: SettingsMenuConfig;\r\n  private isVisible = false;\r\n  private buttons: Button[] = [];\r\n  private sliders: Slider[] = [];\r\n  private masterVolumeSlider!: Slider;\r\n  private musicVolumeSlider!: Slider;\r\n  private sfxVolumeSlider!: Slider;\r\n  private muteButton!: Button;\r\n  private closeButton!: Button;\r\n  private backToMenuButton?: Button;\r\n\r\n  constructor(config: SettingsMenuConfig) {\r\n    this.config = config;\r\n    this.createControls();\r\n  }\r\n\r\n  private createControls(): void {\r\n    const { audioManager, onClose, onBackToMenu, isFromPauseMenu } = this.config;\r\n\r\n    // Volume sliders\r\n    this.masterVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 200,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().masterVolume,\r\n      onChange: (value) => {\r\n        audioManager.setMasterVolume(value);\r\n        logger.debug(`Master volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    this.musicVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 250,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().musicVolume,\r\n      onChange: (value) => {\r\n        audioManager.setMusicVolume(value);\r\n        logger.debug(`Music volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    this.sfxVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 300,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().sfxVolume,\r\n      onChange: (value) => {\r\n        audioManager.setSFXVolume(value);\r\n        logger.debug(`SFX volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    // Mute button\r\n    this.muteButton = new Button({\r\n      x: 80,\r\n      y: 350,\r\n      width: 200,\r\n      height: 40,\r\n      label: audioManager.getConfig().enabled ? 'Mute Audio' : 'Unmute Audio',\r\n      onClick: () => {\r\n        const newEnabled = !audioManager.getConfig().enabled;\r\n        audioManager.setEnabled(newEnabled);\r\n        this.muteButton.setLabel(newEnabled ? 'Mute Audio' : 'Unmute Audio');\r\n        logger.debug(`Audio ${newEnabled ? 'enabled' : 'disabled'}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_click',\r\n    });\r\n\r\n    // Close button\r\n    this.closeButton = new Button({\r\n      x: 80,\r\n      y: 420,\r\n      width: 200,\r\n      height: 40,\r\n      label: 'Close',\r\n      onClick: onClose,\r\n      audioManager,\r\n      soundKey: 'ui_click',\r\n    });\r\n\r\n    // Back to menu button (only if from pause menu)\r\n    if (isFromPauseMenu && onBackToMenu) {\r\n      this.backToMenuButton = new Button({\r\n        x: 80,\r\n        y: 470,\r\n        width: 200,\r\n        height: 40,\r\n        label: 'Back to Menu',\r\n        onClick: onBackToMenu,\r\n        audioManager,\r\n        soundKey: 'ui_click',\r\n      });\r\n    }\r\n\r\n    // Collect all controls for event handling\r\n    this.sliders = [this.masterVolumeSlider, this.musicVolumeSlider, this.sfxVolumeSlider];\r\n    this.buttons = [this.muteButton, this.closeButton];\r\n    if (this.backToMenuButton) {\r\n      this.buttons.push(this.backToMenuButton);\r\n    }\r\n  }\r\n\r\n  public show(): void {\r\n    this.isVisible = true;\r\n    logger.info('Settings menu opened', null, 'SettingsMenu');\r\n  }\r\n\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    logger.info('Settings menu closed', null, 'SettingsMenu');\r\n  }\r\n\r\n  public isMenuVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Draw semi-transparent background\r\n    ctx.save();\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n    ctx.restore();\r\n\r\n    // Draw menu panel\r\n    ctx.save();\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.strokeStyle = '#00f0ff';\r\n    ctx.lineWidth = 3;\r\n    ctx.beginPath();\r\n    ctx.roundRect(50, 100, 260, 440, 12);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.restore();\r\n\r\n    // Draw title\r\n    ctx.save();\r\n    ctx.fillStyle = '#00f0ff';\r\n    ctx.font = '24px Cyberpunks, monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('SETTINGS', 180, 140);\r\n    ctx.restore();\r\n\r\n    // Draw labels\r\n    ctx.save();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px Interceptor, monospace';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Master Volume:', 80, 190);\r\n    ctx.fillText('Music Volume:', 80, 240);\r\n    ctx.fillText('SFX Volume:', 80, 290);\r\n    ctx.restore();\r\n\r\n    // Draw controls\r\n    this.sliders.forEach(slider => slider.draw(ctx));\r\n    this.buttons.forEach(button => button.draw(ctx));\r\n  }\r\n\r\n  public handlePointerMove(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerMove(x, y));\r\n  }\r\n\r\n  public handlePointerDown(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerDown(x, y));\r\n    this.sliders.forEach(slider => slider.handlePointerDown(x, y));\r\n  }\r\n\r\n  public handlePointerUp(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerUp(x, y));\r\n    this.sliders.forEach(slider => slider.handlePointerUp(x, y));\r\n  }\r\n\r\n  public updateVolumeDisplays(): void {\r\n    const config = this.config.audioManager.getConfig();\r\n    this.masterVolumeSlider.setValue(config.masterVolume);\r\n    this.musicVolumeSlider.setValue(config.musicVolume);\r\n    this.sfxVolumeSlider.setValue(config.sfxVolume);\r\n    this.muteButton.setLabel(config.enabled ? 'Mute Audio' : 'Unmute Audio');\r\n  }\r\n\r\n  public get isFromPauseMenu(): boolean {\r\n    return !!this.config.isFromPauseMenu;\r\n  }\r\n} ","// Circuit Breaker - Save/Load Menu Component\r\n// Handles save slot management and game progress display\r\n\r\nimport { SaveSlot, GameProgress } from '../core/StorageManager';\r\nimport { Achievement } from '../core/AchievementManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface SaveLoadMenuConfig {\r\n  onClose: () => void;\r\n  onLoadGame: (slotId: number) => void;\r\n  onNewGame: (slotId: number) => void;\r\n  onDeleteSlot: (slotId: number) => void;\r\n  getSaveSlots: () => SaveSlot[];\r\n  getCurrentProgress: () => GameProgress | null;\r\n  getAchievements: () => Achievement[];\r\n}\r\n\r\nexport class SaveLoadMenu {\r\n  private config: SaveLoadMenuConfig;\r\n  private selectedSlot: number = 0;\r\n  private isConfirmingDelete: boolean = false;\r\n  private deleteSlotId: number = -1;\r\n  private isVisible: boolean = false;\r\n\r\n  // UI state\r\n  private hoveredSlot: number = -1;\r\n  private scrollOffset: number = 0;\r\n  private message: string = '';\r\n  private messageTimer: number = 0;\r\n  private messageType: 'info' | 'success' | 'error' = 'info';\r\n\r\n  constructor(config: SaveLoadMenuConfig) {\r\n    this.config = config;\r\n    logger.info('üíæ SaveLoadMenu initialized', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Show the save/load menu\r\n   */\r\n  public show(): void {\r\n    this.isVisible = true;\r\n    this.selectedSlot = 0;\r\n    this.isConfirmingDelete = false;\r\n    this.deleteSlotId = -1;\r\n    this.hoveredSlot = -1;\r\n    this.scrollOffset = 0;\r\n    this.clearMessage();\r\n    logger.info('üíæ Save/Load menu opened', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Hide the save/load menu\r\n   */\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    logger.info('üíæ Save/Load menu closed', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Check if menu is visible\r\n   */\r\n  public isMenuVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer move events\r\n   */\r\n  public handlePointerMove(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Check slot hover\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slotEndY = slotStartY + slotHeight;\r\n\r\n      if (y >= slotStartY && y <= slotEndY && x >= 50 && x <= 310) {\r\n        this.hoveredSlot = i;\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.hoveredSlot = -1;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events\r\n   */\r\n  public handlePointerDown(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n\r\n    if (this.isConfirmingDelete) {\r\n      this.handleDeleteConfirmationClick(x, y);\r\n      return;\r\n    }\r\n\r\n    // Check slot selection\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slotEndY = slotStartY + slotHeight;\r\n\r\n      if (y >= slotStartY && y <= slotEndY && x >= 50 && x <= 310) {\r\n        this.selectedSlot = i;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Check button clicks\r\n    this.handleButtonClick(x, y);\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events\r\n   */\r\n  public handlePointerUp(_x: number, _y: number): void {\r\n    if (!this.isVisible) return;\r\n  }\r\n\r\n  /**\r\n   * Handle keyboard input\r\n   */\r\n  public handleKeyPress(key: string): boolean {\r\n    if (!this.isVisible) return false;\r\n\r\n    switch (key) {\r\n      case 'Escape':\r\n        if (this.isConfirmingDelete) {\r\n          this.cancelDelete();\r\n        } else {\r\n          this.config.onClose();\r\n        }\r\n        return true;\r\n\r\n      case 'Enter':\r\n        if (this.isConfirmingDelete) {\r\n          this.confirmDelete();\r\n        } else {\r\n          this.loadSelectedSlot();\r\n        }\r\n        return true;\r\n\r\n      case 'KeyN':\r\n        if (!this.isConfirmingDelete) {\r\n          this.newGameInSelectedSlot();\r\n        }\r\n        return true;\r\n\r\n      case 'KeyD':\r\n        if (!this.isConfirmingDelete) {\r\n          this.deleteSelectedSlot();\r\n        }\r\n        return true;\r\n\r\n      case 'ArrowUp':\r\n        this.selectedSlot = Math.max(0, this.selectedSlot - 1);\r\n        return true;\r\n\r\n      case 'ArrowDown':\r\n        this.selectedSlot = Math.min(2, this.selectedSlot + 1);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Render the save/load menu\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Semi-transparent background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Menu background\r\n    ctx.fillStyle = '#1a1a2e';\r\n    ctx.fillRect(20, 50, 320, 540);\r\n\r\n    // Title\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '24px \"Cyberpunks\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('SAVE/LOAD GAME', 180, 90);\r\n\r\n    if (this.isConfirmingDelete) {\r\n      this.renderDeleteConfirmation(ctx);\r\n    } else {\r\n      this.renderSaveSlots(ctx);\r\n      this.renderButtons(ctx);\r\n      this.renderProgressInfo(ctx);\r\n      this.renderMessage(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render save slots\r\n   */\r\n  private renderSaveSlots(ctx: CanvasRenderingContext2D): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slot = slots.find(s => s.id === i);\r\n      const isSelected = this.selectedSlot === i;\r\n      const isHovered = this.hoveredSlot === i;\r\n\r\n      // Slot background\r\n      if (isSelected) {\r\n        ctx.fillStyle = '#4a90e2';\r\n      } else if (isHovered) {\r\n        ctx.fillStyle = '#2a2a4e';\r\n      } else {\r\n        ctx.fillStyle = '#2a2a3e';\r\n      }\r\n      ctx.fillRect(50, slotStartY, 260, slotHeight);\r\n\r\n      // Slot border\r\n      ctx.strokeStyle = isSelected ? '#ffffff' : '#444444';\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeRect(50, slotStartY, 260, slotHeight);\r\n\r\n      if (slot) {\r\n        // Slot has data\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.font = '16px \"Interceptor\"';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText(`Save ${i + 1}`, 70, slotStartY + 25);\r\n\r\n        // Level and score info\r\n        ctx.fillStyle = '#cccccc';\r\n        ctx.font = '14px \"Interceptor\"';\r\n        ctx.fillText(`Level: ${slot.progress.currentLevel}`, 70, slotStartY + 45);\r\n        ctx.fillText(`Score: ${slot.progress.totalScore.toLocaleString()}`, 70, slotStartY + 65);\r\n\r\n        // Last played date\r\n        const date = new Date(slot.lastPlayed);\r\n        ctx.fillStyle = '#888888';\r\n        ctx.font = '12px \"Interceptor\"';\r\n        ctx.fillText(date.toLocaleDateString(), 200, slotStartY + 25);\r\n        ctx.fillText(date.toLocaleTimeString(), 200, slotStartY + 45);\r\n      } else {\r\n        // Empty slot\r\n        ctx.fillStyle = '#666666';\r\n        ctx.font = '16px \"Interceptor\"';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('Empty Slot', 180, slotStartY + 45);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render action buttons\r\n   */\r\n  private renderButtons(ctx: CanvasRenderingContext2D): void {\r\n    const buttonY = 450;\r\n    const buttonHeight = 40;\r\n    const buttonWidth = 80;\r\n\r\n    // Load button\r\n    ctx.fillStyle = '#4a90e2';\r\n    ctx.fillRect(60, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('LOAD', 100, buttonY + 25);\r\n\r\n    // New Game button\r\n    ctx.fillStyle = '#50c878';\r\n    ctx.fillRect(150, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('NEW', 190, buttonY + 25);\r\n\r\n    // Delete button\r\n    ctx.fillStyle = '#e74c3c';\r\n    ctx.fillRect(240, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('DELETE', 280, buttonY + 25);\r\n\r\n    // Instructions\r\n    ctx.fillStyle = '#888888';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Use arrow keys to navigate, Enter to select', 180, buttonY + 70);\r\n    ctx.fillText('ESC to close', 180, buttonY + 85);\r\n  }\r\n\r\n  /**\r\n   * Render progress information\r\n   */\r\n  private renderProgressInfo(ctx: CanvasRenderingContext2D): void {\r\n    const currentProgress = this.config.getCurrentProgress();\r\n    if (!currentProgress) return;\r\n\r\n    const infoY = 550;\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'left';\r\n\r\n    // Progress stats\r\n    ctx.fillText(`Total Play Time: ${this.formatPlayTime(currentProgress.playTime)}`, 60, infoY);\r\n    ctx.fillText(`Games Played: ${currentProgress.gamesPlayed}`, 60, infoY + 20);\r\n    ctx.fillText(`Goals Reached: ${currentProgress.totalGoalsReached}`, 60, infoY + 40);\r\n    ctx.fillText(`Balls Lost: ${currentProgress.totalBallsLost}`, 60, infoY + 60);\r\n\r\n    // Achievement progress\r\n    const achievements = this.config.getAchievements();\r\n    const unlockedCount = achievements.filter(a => a.unlocked).length;\r\n    ctx.fillText(`Achievements: ${unlockedCount}/${achievements.length}`, 200, infoY);\r\n  }\r\n\r\n  /**\r\n   * Render delete confirmation dialog\r\n   */\r\n  private renderDeleteConfirmation(ctx: CanvasRenderingContext2D): void {\r\n    // Confirmation background\r\n    ctx.fillStyle = '#2a2a3e';\r\n    ctx.fillRect(80, 200, 200, 150);\r\n\r\n    // Border\r\n    ctx.strokeStyle = '#e74c3c';\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(80, 200, 200, 150);\r\n\r\n    // Warning text\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('DELETE SAVE SLOT?', 180, 230);\r\n    ctx.fillText(`Save ${this.deleteSlotId + 1}`, 180, 250);\r\n\r\n    ctx.fillStyle = '#ff6b6b';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.fillText('This action cannot be undone!', 180, 270);\r\n\r\n    // Buttons\r\n    ctx.fillStyle = '#e74c3c';\r\n    ctx.fillRect(100, 280, 60, 30);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.fillText('YES', 130, 300);\r\n\r\n    ctx.fillStyle = '#4a90e2';\r\n    ctx.fillRect(200, 280, 60, 30);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.fillText('NO', 230, 300);\r\n  }\r\n\r\n  /**\r\n   * Handle button clicks\r\n   */\r\n  private handleButtonClick(x: number, y: number): void {\r\n    const buttonY = 450;\r\n    const buttonHeight = 40;\r\n    const buttonWidth = 80;\r\n\r\n    if (y >= buttonY && y <= buttonY + buttonHeight) {\r\n      // Load button\r\n      if (x >= 60 && x <= 60 + buttonWidth) {\r\n        this.loadSelectedSlot();\r\n      }\r\n      // New Game button\r\n      else if (x >= 150 && x <= 150 + buttonWidth) {\r\n        this.newGameInSelectedSlot();\r\n      }\r\n      // Delete button\r\n      else if (x >= 240 && x <= 240 + buttonWidth) {\r\n        this.deleteSelectedSlot();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle delete confirmation clicks\r\n   */\r\n  private handleDeleteConfirmationClick(x: number, y: number): void {\r\n    // Yes button\r\n    if (x >= 100 && x <= 160 && y >= 280 && y <= 310) {\r\n      this.confirmDelete();\r\n    }\r\n    // No button\r\n    else if (x >= 200 && x <= 260 && y >= 280 && y <= 310) {\r\n      this.cancelDelete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load the selected save slot\r\n   */\r\n  private loadSelectedSlot(): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slot = slots.find(s => s.id === this.selectedSlot);\r\n    \r\n    if (slot) {\r\n      logger.info(`üìÇ Loading save slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage(`Loading save slot ${this.selectedSlot + 1}...`, 'info', 1000);\r\n      setTimeout(() => {\r\n        this.config.onLoadGame(this.selectedSlot);\r\n        this.hide();\r\n      }, 1000);\r\n    } else {\r\n      logger.warn(`‚ö†Ô∏è No save data in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage('No save data in this slot', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new game in the selected slot\r\n   */\r\n  private newGameInSelectedSlot(): void {\r\n    logger.info(`üÜï Starting new game in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n    this.showMessage(`Starting new game in slot ${this.selectedSlot + 1}...`, 'success', 1000);\r\n    setTimeout(() => {\r\n      this.config.onNewGame(this.selectedSlot);\r\n      this.hide();\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * Delete the selected save slot\r\n   */\r\n  private deleteSelectedSlot(): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slot = slots.find(s => s.id === this.selectedSlot);\r\n    \r\n    if (slot) {\r\n      this.isConfirmingDelete = true;\r\n      this.deleteSlotId = this.selectedSlot;\r\n      logger.info(`üóëÔ∏è Confirming deletion of save slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n    } else {\r\n      logger.warn(`‚ö†Ô∏è No save data to delete in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage('No save data to delete', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirm slot deletion\r\n   */\r\n  private confirmDelete(): void {\r\n    logger.info(`üóëÔ∏è Deleting save slot ${this.deleteSlotId}`, null, 'SaveLoadMenu');\r\n    this.config.onDeleteSlot(this.deleteSlotId);\r\n    this.showMessage(`Save slot ${this.deleteSlotId + 1} deleted`, 'success');\r\n    this.cancelDelete();\r\n  }\r\n\r\n  /**\r\n   * Cancel slot deletion\r\n   */\r\n  private cancelDelete(): void {\r\n    this.isConfirmingDelete = false;\r\n    this.deleteSlotId = -1;\r\n  }\r\n\r\n  /**\r\n   * Get slot Y position with scroll offset\r\n   */\r\n  private getSlotYPosition(): number {\r\n    return this.scrollOffset;\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show a message to the user\r\n   */\r\n  private showMessage(text: string, type: 'info' | 'success' | 'error' = 'info', duration: number = 3000): void {\r\n    this.message = text;\r\n    this.messageType = type;\r\n    this.messageTimer = Date.now() + duration;\r\n    logger.info(`üíæ Save/Load Menu: ${text}`, null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Clear the current message\r\n   */\r\n  private clearMessage(): void {\r\n    this.message = '';\r\n    this.messageTimer = 0;\r\n  }\r\n\r\n  /**\r\n   * Update message timer\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    if (this.message && this.messageTimer > 0 && Date.now() > this.messageTimer) {\r\n      this.clearMessage();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render message overlay\r\n   */\r\n  private renderMessage(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.message) return;\r\n\r\n    // Message background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n    ctx.fillRect(60, 400, 240, 40);\r\n\r\n    // Message border\r\n    const borderColor = this.messageType === 'error' ? '#e74c3c' : \r\n                       this.messageType === 'success' ? '#50c878' : '#4a90e2';\r\n    ctx.strokeStyle = borderColor;\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeRect(60, 400, 240, 40);\r\n\r\n    // Message text\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(this.message, 180, 425);\r\n  }\r\n} ","// Circuit Breaker - Achievement Notification Component\r\n// Shows popup notifications when achievements are unlocked\r\n\r\nimport { Achievement } from '../core/AchievementManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface AchievementNotificationConfig {\r\n  onComplete: () => void;\r\n}\r\n\r\nexport class AchievementNotification {\r\n  private config: AchievementNotificationConfig;\r\n  private achievement: Achievement | null = null;\r\n  private isVisible: boolean = false;\r\n  private startTime: number = 0;\r\n  private animationPhase: 'slideIn' | 'show' | 'slideOut' = 'slideIn';\r\n  private slideInDuration: number = 500;\r\n  private slideOutDuration: number = 500;\r\n  private showDuration: number = 3000;\r\n\r\n  constructor(config: AchievementNotificationConfig) {\r\n    this.config = config;\r\n    logger.info('üèÜ AchievementNotification initialized', null, 'AchievementNotification');\r\n  }\r\n\r\n  /**\r\n   * Show an achievement notification\r\n   */\r\n  public show(achievement: Achievement): void {\r\n    this.achievement = achievement;\r\n    this.isVisible = true;\r\n    this.startTime = Date.now();\r\n    this.animationPhase = 'slideIn';\r\n    logger.info(`üèÜ Showing achievement notification: ${achievement.name}`, null, 'AchievementNotification');\r\n  }\r\n\r\n  /**\r\n   * Hide the notification\r\n   */\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    this.achievement = null;\r\n    this.animationPhase = 'slideIn';\r\n  }\r\n\r\n  /**\r\n   * Check if notification is visible\r\n   */\r\n  public isNotificationVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  /**\r\n   * Update notification animation\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    if (!this.isVisible || !this.achievement) return;\r\n\r\n    const elapsed = Date.now() - this.startTime;\r\n\r\n    // Handle animation phases\r\n    if (this.animationPhase === 'slideIn' && elapsed >= this.slideInDuration) {\r\n      this.animationPhase = 'show';\r\n      this.startTime = Date.now();\r\n    } else if (this.animationPhase === 'show' && elapsed >= this.showDuration) {\r\n      this.animationPhase = 'slideOut';\r\n      this.startTime = Date.now();\r\n    } else if (this.animationPhase === 'slideOut' && elapsed >= this.slideOutDuration) {\r\n      this.hide();\r\n      this.config.onComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the achievement notification\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible || !this.achievement) return;\r\n\r\n    const elapsed = Date.now() - this.startTime;\r\n    let progress = 0;\r\n    let yOffset = 0;\r\n\r\n    // Calculate animation progress and position\r\n    switch (this.animationPhase) {\r\n      case 'slideIn':\r\n        progress = Math.min(elapsed / this.slideInDuration, 1);\r\n        yOffset = (1 - progress) * 100; // Slide down from above\r\n        break;\r\n      case 'show':\r\n        progress = 1;\r\n        yOffset = 0;\r\n        break;\r\n      case 'slideOut':\r\n        progress = Math.min(elapsed / this.slideOutDuration, 1);\r\n        yOffset = progress * 100; // Slide up and out\r\n        break;\r\n    }\r\n\r\n    // Apply easing\r\n    const easeProgress = this.easeOutBack(progress);\r\n\r\n    // Notification position (top-right corner)\r\n    const notificationWidth = 300;\r\n    const notificationHeight = 80;\r\n    const x = 360 - notificationWidth - 20 + (1 - easeProgress) * notificationWidth;\r\n    const y = 20 + yOffset;\r\n\r\n    // Background with gradient\r\n    const gradient = ctx.createLinearGradient(x, y, x, y + notificationHeight);\r\n    gradient.addColorStop(0, '#2a2a3e');\r\n    gradient.addColorStop(1, '#1a1a2e');\r\n    \r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(x, y, notificationWidth, notificationHeight);\r\n\r\n    // Border with rarity color\r\n    const rarityColors = {\r\n      common: '#cccccc',\r\n      rare: '#4a90e2',\r\n      epic: '#9b59b6',\r\n      legendary: '#f39c12'\r\n    };\r\n    \r\n    ctx.strokeStyle = rarityColors[this.achievement.rarity] || '#cccccc';\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(x, y, notificationWidth, notificationHeight);\r\n\r\n    // Achievement icon\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '24px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(this.achievement.icon, x + 30, y + 45);\r\n\r\n    // Achievement name\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px \"Interceptor\"';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(this.achievement.name, x + 60, y + 30);\r\n\r\n    // Achievement description\r\n    ctx.fillStyle = '#cccccc';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.fillText(this.achievement.description, x + 60, y + 50);\r\n\r\n    // Rarity badge\r\n    const rarityText = this.achievement.rarity.toUpperCase();\r\n    ctx.fillStyle = rarityColors[this.achievement.rarity] || '#cccccc';\r\n    ctx.font = '10px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(rarityText, x + notificationWidth - 40, y + 25);\r\n\r\n    // Progress bar for progress-based achievements\r\n    if (this.achievement.maxProgress && this.achievement.progress !== undefined) {\r\n      const progressBarWidth = 80;\r\n      const progressBarHeight = 6;\r\n      const progressBarX = x + notificationWidth - progressBarWidth - 20;\r\n      const progressBarY = y + notificationHeight - 20;\r\n\r\n      // Background\r\n      ctx.fillStyle = '#444444';\r\n      ctx.fillRect(progressBarX, progressBarY, progressBarWidth, progressBarHeight);\r\n\r\n      // Progress\r\n      const progressPercent = this.achievement.progress / this.achievement.maxProgress;\r\n      ctx.fillStyle = rarityColors[this.achievement.rarity] || '#4a90e2';\r\n      ctx.fillRect(progressBarX, progressBarY, progressBarWidth * progressPercent, progressBarHeight);\r\n\r\n      // Progress text\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.font = '10px \"Interceptor\"';\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(\r\n        `${this.achievement.progress}/${this.achievement.maxProgress}`,\r\n        progressBarX + progressBarWidth / 2,\r\n        progressBarY - 5\r\n      );\r\n    }\r\n\r\n    // Sparkle effect for legendary achievements\r\n    if (this.achievement.rarity === 'legendary') {\r\n      this.renderSparkles(ctx, x, y, notificationWidth, notificationHeight, elapsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render sparkle effects for legendary achievements\r\n   */\r\n  private renderSparkles(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, elapsed: number): void {\r\n    const sparkleCount = 8;\r\n    const sparkleSize = 2;\r\n    \r\n    for (let i = 0; i < sparkleCount; i++) {\r\n      const angle = (elapsed * 0.001 + i * Math.PI * 2 / sparkleCount) % (Math.PI * 2);\r\n      const radius = 30 + Math.sin(elapsed * 0.002 + i) * 10;\r\n      const sparkleX = x + width / 2 + Math.cos(angle) * radius;\r\n      const sparkleY = y + height / 2 + Math.sin(angle) * radius;\r\n      \r\n      const alpha = 0.5 + 0.5 * Math.sin(elapsed * 0.003 + i);\r\n      ctx.fillStyle = `rgba(255, 215, 0, ${alpha})`;\r\n      ctx.fillRect(sparkleX - sparkleSize / 2, sparkleY - sparkleSize / 2, sparkleSize, sparkleSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Easing function for smooth animations\r\n   */\r\n  private easeOutBack(t: number): number {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n    return 1 + c3 * Math.pow(t - 1, 3) + c1 * Math.pow(t - 1, 2);\r\n  }\r\n} ","// Circuit Breaker - Stats Menu Component\r\n// Displays comprehensive game statistics and analytics\r\n\r\nimport { StatsManager } from '../core/StatsManager';\r\nimport { fontManager } from '../utils/FontManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface StatsMenuConfig {\r\n  onClose: () => void;\r\n  statsManager: StatsManager;\r\n}\r\n\r\nexport class StatsMenu {\r\n  private config: StatsMenuConfig;\r\n  private currentTab: 'overview' | 'levels' | 'performance' | 'sessions' = 'overview';\r\n  private scrollOffset: number = 0;\r\n  private readonly TAB_HEIGHT = 40;\r\n  private readonly SCROLL_SPEED = 20;\r\n\r\n  constructor(config: StatsMenuConfig) {\r\n    this.config = config;\r\n    logger.info('üìä StatsMenu initialized', null, 'StatsMenu');\r\n  }\r\n\r\n  /**\r\n   * Render the stats menu\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!ctx) return;\r\n\r\n    // Draw background overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw main container\r\n    this.drawContainer(ctx);\r\n    \r\n    // Draw header\r\n    this.drawHeader(ctx);\r\n    \r\n    // Draw tabs\r\n    this.drawTabs(ctx);\r\n    \r\n    // Draw content based on current tab\r\n    this.drawContent(ctx);\r\n    \r\n    // Draw footer\r\n    this.drawFooter(ctx);\r\n  }\r\n\r\n  /**\r\n   * Handle input\r\n   */\r\n  public handleInput(key: string): void {\r\n    switch (key) {\r\n      case 'Escape':\r\n        this.config.onClose();\r\n        break;\r\n      case 'Digit1':\r\n      case '1':\r\n        this.currentTab = 'overview';\r\n        break;\r\n      case 'Digit2':\r\n      case '2':\r\n        this.currentTab = 'levels';\r\n        break;\r\n      case 'Digit3':\r\n      case '3':\r\n        this.currentTab = 'performance';\r\n        break;\r\n      case 'Digit4':\r\n      case '4':\r\n        this.currentTab = 'sessions';\r\n        break;\r\n      case 'ArrowUp':\r\n        this.scrollOffset = Math.max(0, this.scrollOffset - this.SCROLL_SPEED);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.scrollOffset += this.SCROLL_SPEED;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw main container\r\n   */\r\n  private drawContainer(ctx: CanvasRenderingContext2D): void {\r\n    const containerWidth = 340;\r\n    const containerHeight = 580;\r\n    const containerX = (360 - containerWidth) / 2;\r\n    const containerY = 30;\r\n\r\n    // Draw container background\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.fillRect(containerX, containerY, containerWidth, containerHeight);\r\n\r\n    // Draw neon border\r\n    ctx.strokeStyle = '#b600f9';\r\n    ctx.lineWidth = 2;\r\n    ctx.shadowColor = '#b600f9';\r\n    ctx.shadowBlur = 10;\r\n    ctx.strokeRect(containerX, containerY, containerWidth, containerHeight);\r\n    ctx.shadowBlur = 0;\r\n  }\r\n\r\n  /**\r\n   * Draw header\r\n   */\r\n  private drawHeader(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'display', 20, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('GAME STATISTICS', Math.round(180), Math.round(60));\r\n\r\n    // Draw subtitle\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('ANALYTICS & PERFORMANCE DATA', Math.round(180), Math.round(75));\r\n  }\r\n\r\n  /**\r\n   * Draw tabs\r\n   */\r\n  private drawTabs(ctx: CanvasRenderingContext2D): void {\r\n    const tabs = [\r\n      { key: 'overview', label: 'OVERVIEW', number: '1' },\r\n      { key: 'levels', label: 'LEVELS', number: '2' },\r\n      { key: 'performance', label: 'PERFORMANCE', number: '3' },\r\n      { key: 'sessions', label: 'SESSIONS', number: '4' },\r\n    ];\r\n\r\n    const tabWidth = 85;\r\n    const tabY = 90;\r\n\r\n    tabs.forEach((tab, index) => {\r\n      const tabX = 10 + index * tabWidth;\r\n      const isActive = this.currentTab === tab.key;\r\n\r\n      // Draw tab background\r\n      ctx.fillStyle = isActive ? '#b600f9' : '#333333';\r\n      ctx.fillRect(Math.round(tabX), Math.round(tabY), tabWidth - 2, this.TAB_HEIGHT);\r\n\r\n      // Draw tab border\r\n      ctx.strokeStyle = isActive ? '#ffffff' : '#666666';\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeRect(Math.round(tabX), Math.round(tabY), tabWidth - 2, this.TAB_HEIGHT);\r\n\r\n      // Draw tab text\r\n      ctx.fillStyle = isActive ? '#ffffff' : '#cccccc';\r\n      fontManager.setFont(ctx, 'primary', 8, 'bold');\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(tab.label, Math.round(tabX + (tabWidth - 2) / 2), Math.round(tabY + 15));\r\n      ctx.fillText(`[${tab.number}]`, Math.round(tabX + (tabWidth - 2) / 2), Math.round(tabY + 28));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draw content based on current tab\r\n   */\r\n  private drawContent(ctx: CanvasRenderingContext2D): void {\r\n    const contentY = 155;\r\n    const contentHeight = 405;\r\n\r\n    // Set up clipping for scrollable content\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(10, contentY, 340, contentHeight);\r\n    ctx.clip();\r\n\r\n    // Apply scroll offset\r\n    ctx.translate(0, -this.scrollOffset);\r\n\r\n    switch (this.currentTab) {\r\n      case 'overview':\r\n        this.drawOverviewContent(ctx, contentY);\r\n        break;\r\n      case 'levels':\r\n        this.drawLevelsContent(ctx, contentY);\r\n        break;\r\n      case 'performance':\r\n        this.drawPerformanceContent(ctx, contentY);\r\n        break;\r\n      case 'sessions':\r\n        this.drawSessionsContent(ctx, contentY);\r\n        break;\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw overview content\r\n   */\r\n  private drawOverviewContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    const summary = this.config.statsManager.getStatsSummary();\r\n\r\n    let y = startY;\r\n\r\n    // Draw summary stats\r\n    this.drawStatRow(ctx, 'TOTAL PLAY TIME', summary.totalPlayTime, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'GAMES PLAYED', summary.gamesPlayed.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'COMPLETION RATE', summary.completionRate, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'AVERAGE SCORE', summary.averageScore.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'FAVORITE LEVEL', `Level ${summary.favoriteLevel}`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MOST CHALLENGING', `Level ${summary.mostChallengingLevel}`, y);\r\n    y += 35;\r\n\r\n    // Draw achievement progress\r\n    this.drawProgressBar(ctx, 'ACHIEVEMENT PROGRESS', stats.achievementProgress, y);\r\n    y += 30;\r\n    this.drawStatRow(ctx, 'ACHIEVEMENTS UNLOCKED', `${stats.achievementsUnlocked}/${stats.totalAchievements}`, y);\r\n    y += 35;\r\n\r\n    // Draw high scores\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('HIGH SCORES & RECORDS', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'HIGHEST SCORE', stats.highestScore.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'HIGHEST LEVEL', stats.highestLevel.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LONGEST SESSION', this.formatPlayTime(stats.longestSession), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'FASTEST COMPLETION', this.formatPlayTime(stats.fastestLevelCompletion), y);\r\n  }\r\n\r\n  /**\r\n   * Draw levels content\r\n   */\r\n  private drawLevelsContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('LEVEL STATISTICS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // Draw level headers\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('LEVEL', Math.round(20), Math.round(y));\r\n    ctx.fillText('ATTEMPTS', Math.round(80), Math.round(y));\r\n    ctx.fillText('COMPLETIONS', Math.round(140), Math.round(y));\r\n    ctx.fillText('RATE', Math.round(200), Math.round(y));\r\n    ctx.fillText('BEST TIME', Math.round(250), Math.round(y));\r\n    ctx.fillText('BEST SCORE', Math.round(320), Math.round(y));\r\n    y += 20;\r\n\r\n    // Draw level data\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 9);\r\n\r\n    for (const [levelId, levelStats] of stats.levelStats) {\r\n      if (y - startY > 400) break; // Limit visible levels\r\n\r\n      ctx.fillText(`Level ${levelId}`, Math.round(20), Math.round(y));\r\n      ctx.fillText(levelStats.attempts.toString(), Math.round(80), Math.round(y));\r\n      ctx.fillText(levelStats.completions.toString(), Math.round(140), Math.round(y));\r\n      ctx.fillText(`${levelStats.completionRate.toFixed(1)}%`, Math.round(200), Math.round(y));\r\n      ctx.fillText(this.formatPlayTime(levelStats.bestTime), Math.round(250), Math.round(y));\r\n      ctx.fillText(levelStats.bestScore.toString(), Math.round(320), Math.round(y));\r\n      y += 18;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw performance content\r\n   */\r\n  private drawPerformanceContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const performance = this.config.statsManager.getPerformanceStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('PERFORMANCE METRICS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // FPS stats\r\n    this.drawStatRow(ctx, 'AVERAGE FPS', `${performance.averageFPS.toFixed(1)}`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MIN FPS', performance.minFPS.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MAX FPS', performance.maxFPS.toString(), y);\r\n    y += 35;\r\n\r\n    // Load times\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('LOAD TIMES', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'GAME START', `${performance.loadTimes.gameStart}ms`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LEVEL LOAD', `${performance.loadTimes.levelLoad}ms`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'ASSET LOAD', `${performance.loadTimes.assetLoad}ms`, y);\r\n    y += 35;\r\n\r\n    // Device info\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('DEVICE INFORMATION', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'PLATFORM', performance.deviceInfo.platform, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'RESOLUTION', performance.deviceInfo.screenResolution, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LANGUAGE', performance.deviceInfo.language, y);\r\n    y += 25;\r\n\r\n    // User agent (truncated)\r\n    const userAgent = performance.deviceInfo.userAgent.length > 30 \r\n      ? performance.deviceInfo.userAgent.substring(0, 30) + '...'\r\n      : performance.deviceInfo.userAgent;\r\n    this.drawStatRow(ctx, 'BROWSER', userAgent, y);\r\n  }\r\n\r\n  /**\r\n   * Draw sessions content\r\n   */\r\n  private drawSessionsContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('RECENT SESSIONS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // Session headers\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'primary', 9, 'bold');\r\n    ctx.fillText('DURATION', Math.round(20), Math.round(y));\r\n    ctx.fillText('GOALS', Math.round(80), Math.round(y));\r\n    ctx.fillText('BALLS LOST', Math.round(120), Math.round(y));\r\n    ctx.fillText('SCORE', Math.round(180), Math.round(y));\r\n    ctx.fillText('STATUS', Math.round(240), Math.round(y));\r\n    y += 15;\r\n\r\n    // Session data\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 8);\r\n\r\n    for (const session of stats.recentSessions) {\r\n      if (y - startY > 400) break; // Limit visible sessions\r\n\r\n      const duration = this.formatPlayTime(session.duration);\r\n      const status = session.completed ? 'COMPLETE' : 'INCOMPLETE';\r\n      const statusColor = session.completed ? '#00ff99' : '#ff6666';\r\n\r\n      ctx.fillText(duration, Math.round(20), Math.round(y));\r\n      ctx.fillText(session.goalsReached.toString(), Math.round(80), Math.round(y));\r\n      ctx.fillText(session.ballsLost.toString(), Math.round(120), Math.round(y));\r\n      ctx.fillText(session.score.toString(), Math.round(180), Math.round(y));\r\n      \r\n      ctx.fillStyle = statusColor;\r\n      ctx.fillText(status, Math.round(240), Math.round(y));\r\n      ctx.fillStyle = '#ffffff';\r\n      \r\n      y += 16;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a stat row\r\n   */\r\n  private drawStatRow(ctx: CanvasRenderingContext2D, label: string, value: string, y: number): void {\r\n    ctx.fillStyle = '#cccccc';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(label, Math.round(20), Math.round(y));\r\n\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(value, Math.round(330), Math.round(y));\r\n  }\r\n\r\n  /**\r\n   * Draw a progress bar\r\n   */\r\n  private drawProgressBar(ctx: CanvasRenderingContext2D, label: string, percentage: number, y: number): void {\r\n    // Draw label\r\n    ctx.fillStyle = '#cccccc';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(label, Math.round(20), Math.round(y));\r\n\r\n    // Draw percentage\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(`${percentage.toFixed(1)}%`, Math.round(330), Math.round(y));\r\n\r\n    y += 15;\r\n\r\n    // Draw progress bar background\r\n    ctx.fillStyle = '#333333';\r\n    ctx.fillRect(Math.round(20), Math.round(y), 300, 8);\r\n\r\n    // Draw progress bar fill\r\n    const fillWidth = (percentage / 100) * 300;\r\n    ctx.fillStyle = '#00ff99';\r\n    ctx.fillRect(Math.round(20), Math.round(y), fillWidth, 8);\r\n\r\n    // Draw progress bar border\r\n    ctx.strokeStyle = '#666666';\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(Math.round(20), Math.round(y), 300, 8);\r\n  }\r\n\r\n  /**\r\n   * Draw footer\r\n   */\r\n  private drawFooter(ctx: CanvasRenderingContext2D): void {\r\n    const footerY = 580;\r\n\r\n    // Draw instructions\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 9);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('1-4: Switch tabs | ‚Üë‚Üì: Scroll | ESC: Close', Math.round(180), Math.round(footerY));\r\n\r\n    // Draw last updated\r\n    const stats = this.config.statsManager.getStats();\r\n    const lastUpdated = new Date(stats.lastUpdated).toLocaleString();\r\n    ctx.fillText(`Last updated: ${lastUpdated}`, Math.round(180), Math.round(footerY + 15));\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    if (ms === 0) return 'N/A';\r\n    \r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((ms % (1000 * 60)) / 1000);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else if (minutes > 0) {\r\n      return `${minutes}m ${seconds}s`;\r\n    } else {\r\n      return `${seconds}s`;\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Storage Manager\r\n// Handles save/load operations, data validation, and error recovery\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface GameProgress {\r\n  version: string;\r\n  lastSaved: number;\r\n  currentLevel: number;\r\n  highestLevel: number;\r\n  totalScore: number;\r\n  lives: number;\r\n  completedLevels: Set<number>;\r\n  highScores: Map<number, number>; // level -> score\r\n  achievements: Set<string>;\r\n  settings: {\r\n    masterVolume: number;\r\n    musicVolume: number;\r\n    sfxVolume: number;\r\n    audioEnabled: boolean;\r\n  };\r\n  playTime: number; // Total play time in milliseconds\r\n  gamesPlayed: number;\r\n  totalBallsLost: number;\r\n  totalGoalsReached: number;\r\n}\r\n\r\nexport interface SaveSlot {\r\n  id: number;\r\n  name: string;\r\n  lastPlayed: number;\r\n  progress: GameProgress;\r\n}\r\n\r\nexport class StorageManager {\r\n  private readonly STORAGE_KEY = 'circuit_breaker_save';\r\n  private readonly SAVE_SLOTS_KEY = 'circuit_breaker_slots';\r\n  private readonly CURRENT_VERSION = '1.0.0';\r\n  private readonly MAX_SAVE_SLOTS = 3;\r\n  private readonly AUTO_SAVE_INTERVAL = 30000; // 30 seconds\r\n\r\n  private autoSaveTimer: number | null = null;\r\n  private lastAutoSave: number = 0;\r\n\r\n  constructor() {\r\n    logger.info('üíæ StorageManager initialized', null, 'StorageManager');\r\n  }\r\n\r\n  /**\r\n   * Create a new game progress object\r\n   */\r\n  public createNewProgress(): GameProgress {\r\n    return {\r\n      version: this.CURRENT_VERSION,\r\n      lastSaved: Date.now(),\r\n      currentLevel: 1,\r\n      highestLevel: 1,\r\n      totalScore: 0,\r\n      lives: 3,\r\n      completedLevels: new Set(),\r\n      highScores: new Map(),\r\n      achievements: new Set(),\r\n      settings: {\r\n        masterVolume: 0.7,\r\n        musicVolume: 0.4,\r\n        sfxVolume: 0.8,\r\n        audioEnabled: true,\r\n      },\r\n      playTime: 0,\r\n      gamesPlayed: 0,\r\n      totalBallsLost: 0,\r\n      totalGoalsReached: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save game progress to localStorage\r\n   */\r\n  public saveProgress(progress: GameProgress, slotId: number = 0): boolean {\r\n    try {\r\n      // Update save timestamp\r\n      progress.lastSaved = Date.now();\r\n      progress.version = this.CURRENT_VERSION;\r\n\r\n      // Validate progress data\r\n      if (!this.validateProgress(progress)) {\r\n        logger.error('‚ùå Invalid progress data, save aborted', null, 'StorageManager');\r\n        return false;\r\n      }\r\n\r\n      // Convert Sets and Maps to arrays/objects for JSON serialization\r\n      const serializedProgress = this.serializeProgress(progress);\r\n\r\n      // Save to localStorage\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      localStorage.setItem(saveKey, JSON.stringify(serializedProgress));\r\n\r\n      // Update save slot metadata\r\n      this.updateSaveSlot(slotId, progress);\r\n\r\n      logger.info(`üíæ Game progress saved to slot ${slotId}`, null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to save game progress:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load game progress from localStorage\r\n   */\r\n  public loadProgress(slotId: number = 0): GameProgress | null {\r\n    try {\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      const savedData = localStorage.getItem(saveKey);\r\n\r\n      if (!savedData) {\r\n        logger.info(`üìÇ No save data found in slot ${slotId}`, null, 'StorageManager');\r\n        return null;\r\n      }\r\n\r\n      // Parse and validate saved data\r\n      const parsedData = JSON.parse(savedData);\r\n      const progress = this.deserializeProgress(parsedData);\r\n\r\n      if (!this.validateProgress(progress)) {\r\n        logger.error('‚ùå Invalid save data, loading aborted', null, 'StorageManager');\r\n        return null;\r\n      }\r\n\r\n      // Check version compatibility\r\n      if (!this.isVersionCompatible(progress.version)) {\r\n        logger.warn('‚ö†Ô∏è Save data version mismatch, attempting migration', null, 'StorageManager');\r\n        const migratedProgress = this.migrateProgress(progress);\r\n        return migratedProgress;\r\n      }\r\n\r\n      logger.info(`üìÇ Game progress loaded from slot ${slotId}`, null, 'StorageManager');\r\n      return progress;\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to load game progress:', error, 'StorageManager');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto-save game progress\r\n   */\r\n  public autoSave(progress: GameProgress, slotId: number = 0): boolean {\r\n    const now = Date.now();\r\n    \r\n    // Only auto-save if enough time has passed\r\n    if (now - this.lastAutoSave < this.AUTO_SAVE_INTERVAL) {\r\n      return false;\r\n    }\r\n\r\n    const success = this.saveProgress(progress, slotId);\r\n    if (success) {\r\n      this.lastAutoSave = now;\r\n      logger.debug('üîÑ Auto-save completed', null, 'StorageManager');\r\n    }\r\n    \r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Start auto-save timer\r\n   */\r\n  public startAutoSave(progress: GameProgress, slotId: number = 0): void {\r\n    this.stopAutoSave();\r\n    \r\n    this.autoSaveTimer = window.setInterval(() => {\r\n      this.autoSave(progress, slotId);\r\n    }, this.AUTO_SAVE_INTERVAL);\r\n    \r\n    logger.debug('üîÑ Auto-save timer started', null, 'StorageManager');\r\n  }\r\n\r\n  /**\r\n   * Stop auto-save timer\r\n   */\r\n  public stopAutoSave(): void {\r\n    if (this.autoSaveTimer) {\r\n      clearInterval(this.autoSaveTimer);\r\n      this.autoSaveTimer = null;\r\n      logger.debug('üîÑ Auto-save timer stopped', null, 'StorageManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available save slots\r\n   */\r\n  public getSaveSlots(): SaveSlot[] {\r\n    try {\r\n      const slotsData = localStorage.getItem(this.SAVE_SLOTS_KEY);\r\n      if (!slotsData) return [];\r\n\r\n      const slots = JSON.parse(slotsData);\r\n      return slots.filter((slot: SaveSlot) => slot && slot.progress);\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to load save slots:', error, 'StorageManager');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a save slot\r\n   */\r\n  public deleteSaveSlot(slotId: number): boolean {\r\n    try {\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      localStorage.removeItem(saveKey);\r\n      \r\n      // Remove from save slots metadata\r\n      const slots = this.getSaveSlots();\r\n      const updatedSlots = slots.filter(slot => slot.id !== slotId);\r\n      localStorage.setItem(this.SAVE_SLOTS_KEY, JSON.stringify(updatedSlots));\r\n      \r\n      logger.info(`üóëÔ∏è Save slot ${slotId} deleted`, null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to delete save slot:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all save data\r\n   */\r\n  public clearAllSaves(): boolean {\r\n    try {\r\n      // Clear all save slots\r\n      for (let i = 0; i < this.MAX_SAVE_SLOTS; i++) {\r\n        const saveKey = `${this.STORAGE_KEY}_${i}`;\r\n        localStorage.removeItem(saveKey);\r\n      }\r\n      \r\n      // Clear save slots metadata\r\n      localStorage.removeItem(this.SAVE_SLOTS_KEY);\r\n      \r\n      logger.info('üóëÔ∏è All save data cleared', null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to clear save data:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate progress data\r\n   */\r\n  private validateProgress(progress: GameProgress): boolean {\r\n    if (!progress || typeof progress !== 'object') return false;\r\n    \r\n    // Check required fields\r\n    const requiredFields = [\r\n      'version', 'lastSaved', 'currentLevel', 'highestLevel',\r\n      'totalScore', 'lives', 'completedLevels', 'highScores',\r\n      'achievements', 'settings', 'playTime', 'gamesPlayed',\r\n      'totalBallsLost', 'totalGoalsReached'\r\n    ];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!(field in progress)) {\r\n        logger.error(`‚ùå Missing required field: ${field}`, null, 'StorageManager');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Validate data types and ranges\r\n    if (progress.currentLevel < 1 || progress.highestLevel < 1) return false;\r\n    if (progress.totalScore < 0) return false;\r\n    if (progress.lives < 0 || progress.lives > 10) return false;\r\n    if (progress.playTime < 0) return false;\r\n    if (progress.gamesPlayed < 0) return false;\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Serialize progress for storage\r\n   */\r\n  private serializeProgress(progress: GameProgress): any {\r\n    return {\r\n      ...progress,\r\n      completedLevels: Array.from(progress.completedLevels),\r\n      highScores: Object.fromEntries(progress.highScores),\r\n      achievements: Array.from(progress.achievements),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deserialize progress from storage\r\n   */\r\n  private deserializeProgress(data: any): GameProgress {\r\n    return {\r\n      ...data,\r\n      completedLevels: new Set(data.completedLevels || []),\r\n      highScores: new Map(Object.entries(data.highScores || {})),\r\n      achievements: new Set(data.achievements || []),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if save version is compatible\r\n   */\r\n  private isVersionCompatible(_version: string): boolean {\r\n    // For now, accept any version and migrate if needed\r\n    // In the future, this could be more strict\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Migrate progress data to current version\r\n   */\r\n  private migrateProgress(progress: GameProgress): GameProgress {\r\n    // Add any missing fields with defaults\r\n    const migrated = {\r\n      ...this.createNewProgress(),\r\n      ...progress,\r\n    };\r\n    \r\n    // Ensure all required fields exist\r\n    if (!migrated.completedLevels) migrated.completedLevels = new Set();\r\n    if (!migrated.highScores) migrated.highScores = new Map();\r\n    if (!migrated.achievements) migrated.achievements = new Set();\r\n    if (!migrated.settings) migrated.settings = this.createNewProgress().settings;\r\n    \r\n    logger.info('üîÑ Progress data migrated to current version', null, 'StorageManager');\r\n    return migrated;\r\n  }\r\n\r\n  /**\r\n   * Update save slot metadata\r\n   */\r\n  private updateSaveSlot(slotId: number, progress: GameProgress): void {\r\n    try {\r\n      const slots = this.getSaveSlots();\r\n      const existingSlotIndex = slots.findIndex(slot => slot.id === slotId);\r\n      \r\n      const slotData: SaveSlot = {\r\n        id: slotId,\r\n        name: `Save ${slotId + 1}`,\r\n        lastPlayed: Date.now(),\r\n        progress: progress,\r\n      };\r\n      \r\n      if (existingSlotIndex >= 0) {\r\n        slots[existingSlotIndex] = slotData;\r\n      } else {\r\n        slots.push(slotData);\r\n      }\r\n      \r\n      // Sort by last played (newest first)\r\n      slots.sort((a, b) => b.lastPlayed - a.lastPlayed);\r\n      \r\n      localStorage.setItem(this.SAVE_SLOTS_KEY, JSON.stringify(slots));\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to update save slot metadata:', error, 'StorageManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get storage usage information\r\n   */\r\n  public getStorageInfo(): { used: number; available: number; percentage: number } {\r\n    try {\r\n      let used = 0;\r\n      const keys = Object.keys(localStorage);\r\n      \r\n      for (const key of keys) {\r\n        if (key.startsWith(this.STORAGE_KEY) || key === this.SAVE_SLOTS_KEY) {\r\n          used += localStorage.getItem(key)?.length || 0;\r\n        }\r\n      }\r\n      \r\n      // Estimate available storage (localStorage typically 5-10MB)\r\n      const available = 5 * 1024 * 1024; // 5MB estimate\r\n      const percentage = (used / available) * 100;\r\n      \r\n      return { used, available, percentage };\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to get storage info:', error, 'StorageManager');\r\n      return { used: 0, available: 0, percentage: 0 };\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Achievement Manager\r\n// Tracks player accomplishments and provides achievement notifications\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface Achievement {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  unlocked: boolean;\r\n  unlockedAt?: number;\r\n  progress?: number;\r\n  maxProgress?: number;\r\n  category: 'gameplay' | 'completion' | 'skill' | 'collection';\r\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\r\n}\r\n\r\nexport interface AchievementNotification {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  timestamp: number;\r\n  category: string;\r\n  rarity: string;\r\n}\r\n\r\nexport class AchievementManager {\r\n  private achievements: Map<string, Achievement> = new Map();\r\n  private notifications: AchievementNotification[] = [];\r\n  private onAchievementUnlocked?: (achievement: Achievement) => void;\r\n\r\n  constructor() {\r\n    this.initializeAchievements();\r\n    logger.info('üèÜ AchievementManager initialized', null, 'AchievementManager');\r\n  }\r\n\r\n  /**\r\n   * Initialize all available achievements\r\n   */\r\n  private initializeAchievements(): void {\r\n    // Gameplay achievements\r\n    this.addAchievement({\r\n      id: 'first_goal',\r\n      name: 'First Contact',\r\n      description: 'Reach your first goal',\r\n      icon: 'üéØ',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'common',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'level_complete',\r\n      name: 'Circuit Master',\r\n      description: 'Complete a level',\r\n      icon: '‚ö°',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'common',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'perfect_level',\r\n      name: 'Perfect Circuit',\r\n      description: 'Complete a level without losing any balls',\r\n      icon: 'üíé',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'rare',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'speed_runner',\r\n      name: 'Speed Runner',\r\n      description: 'Complete a level in under 30 seconds',\r\n      icon: 'üèÉ',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'rare',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'survivor',\r\n      name: 'Survivor',\r\n      description: 'Complete 5 levels in a single game',\r\n      icon: 'üõ°Ô∏è',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'high_scorer',\r\n      name: 'High Scorer',\r\n      description: 'Score 10,000 points in a single game',\r\n      icon: 'üèÜ',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'goal_hunter',\r\n      name: 'Goal Hunter',\r\n      description: 'Reach 50 goals total',\r\n      icon: 'üéØ',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'rare',\r\n      progress: 0,\r\n      maxProgress: 50,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'level_explorer',\r\n      name: 'Level Explorer',\r\n      description: 'Unlock 10 levels',\r\n      icon: 'üó∫Ô∏è',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'rare',\r\n      progress: 0,\r\n      maxProgress: 10,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'persistent_player',\r\n      name: 'Persistent Player',\r\n      description: 'Play 10 games',\r\n      icon: 'üéÆ',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'common',\r\n      progress: 0,\r\n      maxProgress: 10,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'time_investor',\r\n      name: 'Time Investor',\r\n      description: 'Play for 1 hour total',\r\n      icon: '‚è∞',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'common',\r\n      progress: 0,\r\n      maxProgress: 3600000, // 1 hour in milliseconds\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'ball_conservationist',\r\n      name: 'Ball Conservationist',\r\n      description: 'Complete a level with only 1 ball',\r\n      icon: 'üîµ',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'chain_reaction',\r\n      name: 'Chain Reaction',\r\n      description: 'Reach 3 goals in quick succession',\r\n      icon: '‚ö°',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'legendary',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'veteran_player',\r\n      name: 'Veteran Player',\r\n      description: 'Play for 5 hours total',\r\n      icon: 'üë¥',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'epic',\r\n      progress: 0,\r\n      maxProgress: 18000000, // 5 hours in milliseconds\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'master_circuit',\r\n      name: 'Master Circuit',\r\n      description: 'Complete all levels',\r\n      icon: 'üëë',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'legendary',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add an achievement to the system\r\n   */\r\n  private addAchievement(achievement: Achievement): void {\r\n    this.achievements.set(achievement.id, achievement);\r\n  }\r\n\r\n  /**\r\n   * Set callback for achievement unlocks\r\n   */\r\n  public setAchievementCallback(callback: (achievement: Achievement) => void): void {\r\n    this.onAchievementUnlocked = callback;\r\n  }\r\n\r\n  /**\r\n   * Check and update achievements based on game events\r\n   */\r\n  public checkAchievements(gameStats: {\r\n    currentLevel: number;\r\n    totalScore: number;\r\n    lives: number;\r\n    goalsReached: number;\r\n    levelsCompleted: number;\r\n    gamesPlayed: number;\r\n    totalPlayTime: number;\r\n    ballsLost: number;\r\n    perfectLevels: number;\r\n    quickCompletions: number;\r\n  }): void {\r\n    // Check first goal achievement\r\n    if (gameStats.goalsReached >= 1) {\r\n      this.unlockAchievement('first_goal');\r\n    }\r\n\r\n    // Check level completion achievements\r\n    if (gameStats.levelsCompleted >= 1) {\r\n      this.unlockAchievement('level_complete');\r\n    }\r\n\r\n    // Check perfect level achievement\r\n    if (gameStats.perfectLevels >= 1) {\r\n      this.unlockAchievement('perfect_level');\r\n    }\r\n\r\n    // Check speed runner achievement\r\n    if (gameStats.quickCompletions >= 1) {\r\n      this.unlockAchievement('speed_runner');\r\n    }\r\n\r\n    // Check survivor achievement\r\n    if (gameStats.levelsCompleted >= 5) {\r\n      this.unlockAchievement('survivor');\r\n    }\r\n\r\n    // Check high scorer achievement\r\n    if (gameStats.totalScore >= 10000) {\r\n      this.unlockAchievement('high_scorer');\r\n    }\r\n\r\n    // Check ball conservationist achievement\r\n    if (gameStats.lives >= 2 && gameStats.levelsCompleted >= 1) {\r\n      this.unlockAchievement('ball_conservationist');\r\n    }\r\n\r\n    // Update progress-based achievements\r\n    this.updateProgressAchievement('goal_hunter', gameStats.goalsReached);\r\n    this.updateProgressAchievement('level_explorer', gameStats.currentLevel);\r\n    this.updateProgressAchievement('persistent_player', gameStats.gamesPlayed);\r\n    this.updateProgressAchievement('time_investor', gameStats.totalPlayTime);\r\n    this.updateProgressAchievement('veteran_player', gameStats.totalPlayTime);\r\n\r\n    // Check master circuit achievement\r\n    if (gameStats.currentLevel >= 20) { // Assuming 20 levels total\r\n      this.unlockAchievement('master_circuit');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock an achievement\r\n   */\r\n  public unlockAchievement(achievementId: string): boolean {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || achievement.unlocked) {\r\n      return false;\r\n    }\r\n\r\n    achievement.unlocked = true;\r\n    achievement.unlockedAt = Date.now();\r\n\r\n    // Create notification\r\n    const notification: AchievementNotification = {\r\n      id: achievement.id,\r\n      name: achievement.name,\r\n      description: achievement.description,\r\n      icon: achievement.icon,\r\n      timestamp: Date.now(),\r\n      category: achievement.category,\r\n      rarity: achievement.rarity,\r\n    };\r\n\r\n    this.notifications.push(notification);\r\n\r\n    // Call callback if set\r\n    if (this.onAchievementUnlocked) {\r\n      this.onAchievementUnlocked(achievement);\r\n    }\r\n\r\n    logger.info(`üèÜ Achievement unlocked: ${achievement.name}`, null, 'AchievementManager');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Update progress for progress-based achievements\r\n   */\r\n  private updateProgressAchievement(achievementId: string, currentProgress: number): void {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || achievement.unlocked || !achievement.maxProgress) {\r\n      return;\r\n    }\r\n\r\n    achievement.progress = Math.min(currentProgress, achievement.maxProgress);\r\n\r\n    // Check if achievement should be unlocked\r\n    if (achievement.progress >= achievement.maxProgress) {\r\n      this.unlockAchievement(achievementId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all achievements\r\n   */\r\n  public getAllAchievements(): Achievement[] {\r\n    return Array.from(this.achievements.values());\r\n  }\r\n\r\n  /**\r\n   * Get unlocked achievements\r\n   */\r\n  public getUnlockedAchievements(): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.unlocked);\r\n  }\r\n\r\n  /**\r\n   * Get achievements by category\r\n   */\r\n  public getAchievementsByCategory(category: string): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.category === category);\r\n  }\r\n\r\n  /**\r\n   * Get achievements by rarity\r\n   */\r\n  public getAchievementsByRarity(rarity: string): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.rarity === rarity);\r\n  }\r\n\r\n  /**\r\n   * Get recent notifications\r\n   */\r\n  public getRecentNotifications(limit: number = 5): AchievementNotification[] {\r\n    return this.notifications\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Clear old notifications\r\n   */\r\n  public clearOldNotifications(olderThan: number = 24 * 60 * 60 * 1000): void { // 24 hours\r\n    const cutoff = Date.now() - olderThan;\r\n    this.notifications = this.notifications.filter(n => n.timestamp > cutoff);\r\n  }\r\n\r\n  /**\r\n   * Get achievement progress\r\n   */\r\n  public getAchievementProgress(achievementId: string): { current: number; max: number; percentage: number } | null {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || !achievement.maxProgress) {\r\n      return null;\r\n    }\r\n\r\n    const current = achievement.progress || 0;\r\n    const percentage = (current / achievement.maxProgress) * 100;\r\n\r\n    return {\r\n      current,\r\n      max: achievement.maxProgress,\r\n      percentage: Math.min(percentage, 100),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get achievement statistics\r\n   */\r\n  public getAchievementStats(): {\r\n    total: number;\r\n    unlocked: number;\r\n    percentage: number;\r\n    byCategory: Record<string, { total: number; unlocked: number }>;\r\n    byRarity: Record<string, { total: number; unlocked: number }>;\r\n  } {\r\n    const achievements = Array.from(this.achievements.values());\r\n    const unlocked = achievements.filter(a => a.unlocked);\r\n    \r\n    const byCategory: Record<string, { total: number; unlocked: number }> = {};\r\n    const byRarity: Record<string, { total: number; unlocked: number }> = {};\r\n\r\n    // Initialize counters\r\n    for (const achievement of achievements) {\r\n      if (!byCategory[achievement.category]) {\r\n        byCategory[achievement.category] = { total: 0, unlocked: 0 };\r\n      }\r\n      if (!byRarity[achievement.rarity]) {\r\n        byRarity[achievement.rarity] = { total: 0, unlocked: 0 };\r\n      }\r\n\r\n      byCategory[achievement.category].total++;\r\n      byRarity[achievement.rarity].total++;\r\n\r\n      if (achievement.unlocked) {\r\n        byCategory[achievement.category].unlocked++;\r\n        byRarity[achievement.rarity].unlocked++;\r\n      }\r\n    }\r\n\r\n    return {\r\n      total: achievements.length,\r\n      unlocked: unlocked.length,\r\n      percentage: achievements.length > 0 ? (unlocked.length / achievements.length) * 100 : 0,\r\n      byCategory,\r\n      byRarity,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load achievements from save data\r\n   */\r\n  public loadAchievements(unlockedAchievementIds: string[]): void {\r\n    for (const achievementId of unlockedAchievementIds) {\r\n      const achievement = this.achievements.get(achievementId);\r\n      if (achievement) {\r\n        achievement.unlocked = true;\r\n        achievement.unlockedAt = Date.now();\r\n      }\r\n    }\r\n    \r\n    logger.info(`üìÇ Loaded ${unlockedAchievementIds.length} achievements from save`, null, 'AchievementManager');\r\n  }\r\n\r\n  /**\r\n   * Get unlocked achievement IDs for saving\r\n   */\r\n  public getUnlockedAchievementIds(): string[] {\r\n    return Array.from(this.achievements.values())\r\n      .filter(a => a.unlocked)\r\n      .map(a => a.id);\r\n  }\r\n\r\n  /**\r\n   * Reset all achievements (for testing)\r\n   */\r\n  public resetAchievements(): void {\r\n    for (const achievement of this.achievements.values()) {\r\n      achievement.unlocked = false;\r\n      achievement.unlockedAt = undefined;\r\n      achievement.progress = 0;\r\n    }\r\n    \r\n    this.notifications = [];\r\n    logger.info('üîÑ All achievements reset', null, 'AchievementManager');\r\n  }\r\n} ","// Circuit Breaker - Stats Manager\r\n// Tracks gameplay metrics, performance data, and user behavior analytics\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface LevelStats {\r\n  levelId: number;\r\n  attempts: number;\r\n  completions: number;\r\n  bestTime: number; // milliseconds\r\n  bestScore: number;\r\n  totalPlayTime: number; // milliseconds\r\n  ballsLost: number;\r\n  goalsReached: number;\r\n  averageAttempts: number;\r\n  completionRate: number; // percentage\r\n  lastPlayed: number; // timestamp\r\n}\r\n\r\nexport interface PerformanceStats {\r\n  averageFPS: number;\r\n  minFPS: number;\r\n  maxFPS: number;\r\n  fpsSamples: number[];\r\n  memoryUsage?: number; // if available\r\n  loadTimes: {\r\n    gameStart: number;\r\n    levelLoad: number;\r\n    assetLoad: number;\r\n  };\r\n  deviceInfo: {\r\n    userAgent: string;\r\n    screenResolution: string;\r\n    platform: string;\r\n    language: string;\r\n  };\r\n}\r\n\r\nexport interface SessionStats {\r\n  sessionId: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  duration: number; // milliseconds\r\n  levelsPlayed: number[];\r\n  goalsReached: number;\r\n  ballsLost: number;\r\n  score: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface GameStats {\r\n  version: string;\r\n  lastUpdated: number;\r\n  \r\n  // Global gameplay stats\r\n  totalPlayTime: number; // milliseconds\r\n  totalSessions: number;\r\n  totalGamesStarted: number;\r\n  totalGamesCompleted: number;\r\n  totalGoalsReached: number;\r\n  totalBallsLost: number;\r\n  totalDeaths: number;\r\n  \r\n  // High scores and records\r\n  highestScore: number;\r\n  highestLevel: number;\r\n  longestSession: number; // milliseconds\r\n  fastestLevelCompletion: number; // milliseconds\r\n  \r\n  // Completion stats\r\n  levelsCompleted: number;\r\n  totalLevelAttempts: number;\r\n  averageCompletionRate: number; // percentage\r\n  \r\n  // Level-specific stats\r\n  levelStats: Map<number, LevelStats>;\r\n  \r\n  // Performance stats\r\n  performance: PerformanceStats;\r\n  \r\n  // Recent sessions (last 10)\r\n  recentSessions: SessionStats[];\r\n  \r\n  // Achievement stats\r\n  achievementsUnlocked: number;\r\n  totalAchievements: number;\r\n  achievementProgress: number; // percentage\r\n}\r\n\r\nexport interface StatsEvent {\r\n  type: 'game_start' | 'game_complete' | 'level_start' | 'level_complete' | \r\n        'goal_reached' | 'ball_lost' | 'death' | 'pause' | 'resume' | \r\n        'session_start' | 'session_end' | 'fps_update' | 'achievement_unlocked' | 'powerup_collected';\r\n  timestamp: number;\r\n  data?: any;\r\n}\r\n\r\nexport class StatsManager {\r\n  private stats: GameStats;\r\n  private currentSession: SessionStats | null = null;\r\n  private fpsSamples: number[] = [];\r\n  private readonly MAX_FPS_SAMPLES = 100;\r\n  private readonly STATS_KEY = 'circuit_breaker_stats';\r\n  private readonly VERSION = '1.0.0';\r\n\r\n  constructor() {\r\n    this.stats = this.loadStats();\r\n    this.initializePerformanceStats();\r\n    logger.info('üìä StatsManager initialized', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Record a gameplay event\r\n   */\r\n  public recordEvent(event: StatsEvent): void {\r\n    try {\r\n      switch (event.type) {\r\n        case 'game_start':\r\n          this.handleGameStart(event);\r\n          break;\r\n        case 'game_complete':\r\n          this.handleGameComplete(event);\r\n          break;\r\n        case 'level_start':\r\n          this.handleLevelStart(event);\r\n          break;\r\n        case 'level_complete':\r\n          this.handleLevelComplete(event);\r\n          break;\r\n        case 'goal_reached':\r\n          this.handleGoalReached(event);\r\n          break;\r\n        case 'ball_lost':\r\n          this.handleBallLost(event);\r\n          break;\r\n        case 'death':\r\n          this.handleDeath(event);\r\n          break;\r\n        case 'session_start':\r\n          this.handleSessionStart(event);\r\n          break;\r\n        case 'session_end':\r\n          this.handleSessionEnd(event);\r\n          break;\r\n        case 'fps_update':\r\n          this.handleFPSUpdate(event);\r\n          break;\r\n        case 'achievement_unlocked':\r\n          this.handleAchievementUnlocked(event);\r\n          break;\r\n      }\r\n\r\n      // Auto-save stats periodically\r\n      this.saveStats();\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to record stats event:', error, 'StatsManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current game stats\r\n   */\r\n  public getStats(): GameStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Get stats for a specific level\r\n   */\r\n  public getLevelStats(levelId: number): LevelStats | null {\r\n    return this.stats.levelStats.get(levelId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get performance stats\r\n   */\r\n  public getPerformanceStats(): PerformanceStats {\r\n    return { ...this.stats.performance };\r\n  }\r\n\r\n  /**\r\n   * Get current session stats\r\n   */\r\n  public getCurrentSession(): SessionStats | null {\r\n    return this.currentSession ? { ...this.currentSession } : null;\r\n  }\r\n\r\n  /**\r\n   * Reset all stats\r\n   */\r\n  public resetStats(): void {\r\n    this.stats = this.createNewStats();\r\n    this.currentSession = null;\r\n    this.fpsSamples = [];\r\n    this.saveStats();\r\n    logger.info('üîÑ All stats reset', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Export stats as JSON\r\n   */\r\n  public exportStats(): string {\r\n    const exportData = {\r\n      ...this.stats,\r\n      levelStats: Object.fromEntries(this.stats.levelStats),\r\n      exportDate: new Date().toISOString(),\r\n    };\r\n    return JSON.stringify(exportData, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Import stats from JSON\r\n   */\r\n  public importStats(jsonData: string): boolean {\r\n    try {\r\n      const importedStats = JSON.parse(jsonData);\r\n      \r\n      // Validate imported data\r\n      if (!this.validateStats(importedStats)) {\r\n        logger.error('‚ùå Invalid stats data format', null, 'StatsManager');\r\n        return false;\r\n      }\r\n\r\n              // Convert levelStats back to Map\r\n        if (importedStats.levelStats && typeof importedStats.levelStats === 'object') {\r\n          const levelStatsMap = new Map<number, LevelStats>();\r\n          for (const [key, value] of Object.entries(importedStats.levelStats)) {\r\n            levelStatsMap.set(parseInt(key), value as LevelStats);\r\n          }\r\n          importedStats.levelStats = levelStatsMap;\r\n        }\r\n\r\n      this.stats = importedStats;\r\n      this.saveStats();\r\n      logger.info('üì• Stats imported successfully', null, 'StatsManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to import stats:', error, 'StatsManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get stats summary for display\r\n   */\r\n  public getStatsSummary(): {\r\n    totalPlayTime: string;\r\n    gamesPlayed: number;\r\n    completionRate: string;\r\n    averageScore: number;\r\n    favoriteLevel: number;\r\n    mostChallengingLevel: number;\r\n  } {\r\n    const totalPlayTime = this.formatPlayTime(this.stats.totalPlayTime);\r\n    const gamesPlayed = this.stats.totalGamesStarted;\r\n    const completionRate = this.stats.averageCompletionRate.toFixed(1) + '%';\r\n    const averageScore = this.stats.totalGamesCompleted > 0 \r\n      ? Math.round(this.stats.highestScore / this.stats.totalGamesCompleted)\r\n      : 0;\r\n\r\n    // Find favorite level (most completed)\r\n    let favoriteLevel = 1;\r\n    let maxCompletions = 0;\r\n    for (const [levelId, levelStats] of this.stats.levelStats) {\r\n      if (levelStats.completions > maxCompletions) {\r\n        maxCompletions = levelStats.completions;\r\n        favoriteLevel = levelId;\r\n      }\r\n    }\r\n\r\n    // Find most challenging level (lowest completion rate)\r\n    let mostChallengingLevel = 1;\r\n    let lowestRate = 100;\r\n    for (const [levelId, levelStats] of this.stats.levelStats) {\r\n      if (levelStats.attempts > 0 && levelStats.completionRate < lowestRate) {\r\n        lowestRate = levelStats.completionRate;\r\n        mostChallengingLevel = levelId;\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalPlayTime,\r\n      gamesPlayed,\r\n      completionRate,\r\n      averageScore,\r\n      favoriteLevel,\r\n      mostChallengingLevel,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle game start event\r\n   */\r\n  private handleGameStart(event: StatsEvent): void {\r\n    this.stats.totalGamesStarted++;\r\n    this.stats.lastUpdated = event.timestamp;\r\n    logger.debug('üìä Game start recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle game complete event\r\n   */\r\n  private handleGameComplete(event: StatsEvent): void {\r\n    this.stats.totalGamesCompleted++;\r\n    this.stats.lastUpdated = event.timestamp;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.completed = true;\r\n      this.currentSession.endTime = event.timestamp;\r\n      this.currentSession.duration = event.timestamp - this.currentSession.startTime;\r\n    }\r\n    \r\n    logger.debug('üìä Game complete recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle level start event\r\n   */\r\n  private handleLevelStart(event: StatsEvent): void {\r\n    const levelId = event.data?.levelId || 1;\r\n    let levelStats = this.stats.levelStats.get(levelId);\r\n    \r\n    if (!levelStats) {\r\n      levelStats = this.createLevelStats(levelId);\r\n      this.stats.levelStats.set(levelId, levelStats);\r\n    }\r\n    \r\n    levelStats.attempts++;\r\n    levelStats.lastPlayed = event.timestamp;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.levelsPlayed.push(levelId);\r\n    }\r\n    \r\n    logger.debug(`üìä Level ${levelId} start recorded`, null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle level complete event\r\n   */\r\n  private handleLevelComplete(event: StatsEvent): void {\r\n    const levelId = event.data?.levelId || 1;\r\n    const completionTime = event.data?.completionTime || 0;\r\n    const score = event.data?.score || 0;\r\n    \r\n    const levelStats = this.stats.levelStats.get(levelId);\r\n    if (levelStats) {\r\n      levelStats.completions++;\r\n      levelStats.completionRate = (levelStats.completions / levelStats.attempts) * 100;\r\n      \r\n      if (completionTime > 0 && (levelStats.bestTime === 0 || completionTime < levelStats.bestTime)) {\r\n        levelStats.bestTime = completionTime;\r\n      }\r\n      \r\n      if (score > levelStats.bestScore) {\r\n        levelStats.bestScore = score;\r\n      }\r\n    }\r\n    \r\n    this.stats.levelsCompleted = Math.max(this.stats.levelsCompleted, levelId);\r\n    this.stats.highestLevel = Math.max(this.stats.highestLevel, levelId);\r\n    \r\n    logger.debug(`üìä Level ${levelId} complete recorded`, null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle goal reached event\r\n   */\r\n  private handleGoalReached(_event: StatsEvent): void {\r\n    this.stats.totalGoalsReached++;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.goalsReached++;\r\n    }\r\n    \r\n    logger.debug('üìä Goal reached recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle ball lost event\r\n   */\r\n  private handleBallLost(_event: StatsEvent): void {\r\n    this.stats.totalBallsLost++;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.ballsLost++;\r\n    }\r\n    \r\n    logger.debug('üìä Ball lost recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle death event\r\n   */\r\n  private handleDeath(_event: StatsEvent): void {\r\n    this.stats.totalDeaths++;\r\n    logger.debug('üìä Death recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle session start event\r\n   */\r\n  private handleSessionStart(event: StatsEvent): void {\r\n    this.stats.totalSessions++;\r\n    \r\n    this.currentSession = {\r\n      sessionId: this.generateSessionId(),\r\n      startTime: event.timestamp,\r\n      duration: 0,\r\n      levelsPlayed: [],\r\n      goalsReached: 0,\r\n      ballsLost: 0,\r\n      score: 0,\r\n      completed: false,\r\n    };\r\n    \r\n    logger.debug('üìä Session start recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle session end event\r\n   */\r\n  private handleSessionEnd(event: StatsEvent): void {\r\n    if (this.currentSession) {\r\n      this.currentSession.endTime = event.timestamp;\r\n      this.currentSession.duration = event.timestamp - this.currentSession.startTime;\r\n      \r\n      // Add to recent sessions\r\n      this.stats.recentSessions.unshift(this.currentSession);\r\n      if (this.stats.recentSessions.length > 10) {\r\n        this.stats.recentSessions = this.stats.recentSessions.slice(0, 10);\r\n      }\r\n      \r\n      // Update longest session\r\n      if (this.currentSession.duration > this.stats.longestSession) {\r\n        this.stats.longestSession = this.currentSession.duration;\r\n      }\r\n      \r\n      this.currentSession = null;\r\n    }\r\n    \r\n    logger.debug('üìä Session end recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle FPS update event\r\n   */\r\n  private handleFPSUpdate(event: StatsEvent): void {\r\n    const fps = event.data?.fps || 0;\r\n    \r\n    this.fpsSamples.push(fps);\r\n    if (this.fpsSamples.length > this.MAX_FPS_SAMPLES) {\r\n      this.fpsSamples.shift();\r\n    }\r\n    \r\n    // Update performance stats\r\n    this.stats.performance.averageFPS = this.fpsSamples.reduce((a, b) => a + b, 0) / this.fpsSamples.length;\r\n    this.stats.performance.minFPS = Math.min(...this.fpsSamples);\r\n    this.stats.performance.maxFPS = Math.max(...this.fpsSamples);\r\n    this.stats.performance.fpsSamples = [...this.fpsSamples];\r\n  }\r\n\r\n  /**\r\n   * Handle achievement unlocked event\r\n   */\r\n  private handleAchievementUnlocked(_event: StatsEvent): void {\r\n    this.stats.achievementsUnlocked++;\r\n    this.stats.achievementProgress = (this.stats.achievementsUnlocked / this.stats.totalAchievements) * 100;\r\n    logger.debug('üìä Achievement unlocked recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Create new stats object\r\n   */\r\n  private createNewStats(): GameStats {\r\n    return {\r\n      version: this.VERSION,\r\n      lastUpdated: Date.now(),\r\n      totalPlayTime: 0,\r\n      totalSessions: 0,\r\n      totalGamesStarted: 0,\r\n      totalGamesCompleted: 0,\r\n      totalGoalsReached: 0,\r\n      totalBallsLost: 0,\r\n      totalDeaths: 0,\r\n      highestScore: 0,\r\n      highestLevel: 1,\r\n      longestSession: 0,\r\n      fastestLevelCompletion: 0,\r\n      levelsCompleted: 0,\r\n      totalLevelAttempts: 0,\r\n      averageCompletionRate: 0,\r\n      levelStats: new Map(),\r\n      performance: this.createPerformanceStats(),\r\n      recentSessions: [],\r\n      achievementsUnlocked: 0,\r\n      totalAchievements: 0,\r\n      achievementProgress: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create performance stats object\r\n   */\r\n  private createPerformanceStats(): PerformanceStats {\r\n    return {\r\n      averageFPS: 0,\r\n      minFPS: 0,\r\n      maxFPS: 0,\r\n      fpsSamples: [],\r\n      loadTimes: {\r\n        gameStart: 0,\r\n        levelLoad: 0,\r\n        assetLoad: 0,\r\n      },\r\n      deviceInfo: {\r\n        userAgent: navigator.userAgent,\r\n        screenResolution: `${screen.width}x${screen.height}`,\r\n        platform: navigator.platform,\r\n        language: navigator.language,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create level stats object\r\n   */\r\n  private createLevelStats(levelId: number): LevelStats {\r\n    return {\r\n      levelId,\r\n      attempts: 0,\r\n      completions: 0,\r\n      bestTime: 0,\r\n      bestScore: 0,\r\n      totalPlayTime: 0,\r\n      ballsLost: 0,\r\n      goalsReached: 0,\r\n      averageAttempts: 0,\r\n      completionRate: 0,\r\n      lastPlayed: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize performance stats\r\n   */\r\n  private initializePerformanceStats(): void {\r\n    this.stats.performance = this.createPerformanceStats();\r\n  }\r\n\r\n  /**\r\n   * Generate unique session ID\r\n   */\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Load stats from localStorage\r\n   */\r\n  private loadStats(): GameStats {\r\n    try {\r\n      const savedStats = localStorage.getItem(this.STATS_KEY);\r\n      if (savedStats) {\r\n        const parsedStats = JSON.parse(savedStats);\r\n        \r\n        // Convert levelStats back to Map\r\n        if (parsedStats.levelStats && typeof parsedStats.levelStats === 'object') {\r\n          parsedStats.levelStats = new Map(Object.entries(parsedStats.levelStats));\r\n        }\r\n        \r\n        // Validate and migrate if needed\r\n        if (this.validateStats(parsedStats)) {\r\n          logger.info('üìÇ Stats loaded from storage', null, 'StatsManager');\r\n          return parsedStats;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to load stats:', error, 'StatsManager');\r\n    }\r\n    \r\n    logger.info('üÜï Creating new stats', null, 'StatsManager');\r\n    return this.createNewStats();\r\n  }\r\n\r\n  /**\r\n   * Save stats to localStorage\r\n   */\r\n  private saveStats(): void {\r\n    try {\r\n      const statsToSave = {\r\n        ...this.stats,\r\n        levelStats: Object.fromEntries(this.stats.levelStats),\r\n      };\r\n      localStorage.setItem(this.STATS_KEY, JSON.stringify(statsToSave));\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to save stats:', error, 'StatsManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate stats data structure\r\n   */\r\n  private validateStats(stats: any): stats is GameStats {\r\n    return stats && \r\n           typeof stats.version === 'string' &&\r\n           typeof stats.lastUpdated === 'number' &&\r\n           typeof stats.totalPlayTime === 'number';\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Power-Up Management System\r\n// Handles power-up states, effects, and persistence\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport enum PowerUpType {\r\n  SLOW_MO_SURGE = 'slow_mo_surge',\r\n  MAGNETIC_GUIDE = 'magnetic_guide',\r\n  CIRCUIT_PATCH = 'circuit_patch',\r\n  OVERCLOCK_BOOST = 'overclock_boost',\r\n  SCAN_REVEAL = 'scan_reveal',\r\n}\r\n\r\nexport enum BallType {\r\n  STANDARD = 'standard',\r\n  HEAVY = 'heavy',\r\n  LIGHT = 'light',\r\n  NEON_SPLIT = 'neon_split',\r\n}\r\n\r\nexport interface PowerUpState {\r\n  type: PowerUpType;\r\n  isActive: boolean;\r\n  startTime: number;\r\n  duration: number;\r\n  charges: number;\r\n  maxCharges: number;\r\n}\r\n\r\nexport interface PowerUpEffect {\r\n  timeScale?: number;\r\n  magneticForce?: number;\r\n  shieldActive?: boolean;\r\n  barSpeedMultiplier?: number;\r\n  scanActive?: boolean;\r\n}\r\n\r\nexport interface UpgradeProgress {\r\n  slowMoCharges: number;\r\n  barSpeedLevel: number;\r\n  frictionLevel: number;\r\n  shieldLevel: number;\r\n  unlockedThemes: string[];\r\n  unlockedBallTypes: BallType[];\r\n  currentTheme: string;\r\n  currentBallType: BallType;\r\n}\r\n\r\nexport class PowerUpManager {\r\n  private activePowerUps: Map<PowerUpType, PowerUpState> = new Map();\r\n  private powerUpEffects: PowerUpEffect = {};\r\n  private upgradeProgress: UpgradeProgress;\r\n  private currentTime: number = 0;\r\n\r\n  // Power-up configurations\r\n  private readonly POWER_UP_CONFIGS: Record<PowerUpType, {\r\n    baseDuration: number;\r\n    baseCharges: number;\r\n    timeScale?: number;\r\n    magneticForce?: number;\r\n    barSpeedMultiplier?: number;\r\n  }> = {\r\n    [PowerUpType.SLOW_MO_SURGE]: {\r\n      baseDuration: 5000, // 5 seconds (longer duration)\r\n      baseCharges: 1,\r\n      timeScale: 0.3, // 30% speed - more reasonable with proper time scaling\r\n    },\r\n    [PowerUpType.MAGNETIC_GUIDE]: {\r\n      baseDuration: 5000, // 5 seconds\r\n      baseCharges: 1,\r\n      magneticForce: 0.3,\r\n    },\r\n    [PowerUpType.CIRCUIT_PATCH]: {\r\n      baseDuration: -1, // Permanent until used\r\n      baseCharges: 1,\r\n    },\r\n    [PowerUpType.OVERCLOCK_BOOST]: {\r\n      baseDuration: 4000, // 4 seconds\r\n      baseCharges: 1,\r\n      barSpeedMultiplier: 1.5,\r\n    },\r\n    [PowerUpType.SCAN_REVEAL]: {\r\n      baseDuration: 3000, // 3 seconds\r\n      baseCharges: 1,\r\n    },\r\n  };\r\n\r\n  constructor() {\r\n    this.upgradeProgress = this.createDefaultUpgradeProgress();\r\n    logger.info('‚ö° PowerUpManager initialized', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Create default upgrade progress\r\n   */\r\n  private createDefaultUpgradeProgress(): UpgradeProgress {\r\n    return {\r\n      slowMoCharges: 1,\r\n      barSpeedLevel: 0,\r\n      frictionLevel: 0,\r\n      shieldLevel: 0,\r\n      unlockedThemes: ['default'],\r\n      unlockedBallTypes: [BallType.STANDARD],\r\n      currentTheme: 'default',\r\n      currentBallType: BallType.STANDARD,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update power-up manager\r\n   */\r\n  public update(deltaTime: number): void {\r\n    this.currentTime += deltaTime;\r\n    this.updateActivePowerUps();\r\n    this.calculateCombinedEffects();\r\n  }\r\n\r\n  /**\r\n   * Update active power-ups and remove expired ones\r\n   */\r\n  private updateActivePowerUps(): void {\r\n    const expiredPowerUps: PowerUpType[] = [];\r\n\r\n    this.activePowerUps.forEach((state, type) => {\r\n      if (state.isActive && state.duration > 0) {\r\n        const elapsed = this.currentTime - state.startTime;\r\n        if (elapsed >= state.duration) {\r\n          expiredPowerUps.push(type);\r\n        }\r\n      }\r\n    });\r\n\r\n    expiredPowerUps.forEach(type => {\r\n      this.deactivatePowerUp(type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate combined effects from all active power-ups\r\n   */\r\n  private calculateCombinedEffects(): void {\r\n    // Reset effects\r\n    this.powerUpEffects = {};\r\n\r\n    // Apply effects from active power-ups\r\n    this.activePowerUps.forEach((state, type) => {\r\n      if (state.isActive) {\r\n        this.applyPowerUpEffect(type);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Apply individual power-up effect\r\n   */\r\n  private applyPowerUpEffect(type: PowerUpType): void {\r\n    const config = this.POWER_UP_CONFIGS[type];\r\n\r\n    switch (type) {\r\n      case PowerUpType.SLOW_MO_SURGE:\r\n        this.powerUpEffects.timeScale = config.timeScale;\r\n        break;\r\n      case PowerUpType.MAGNETIC_GUIDE:\r\n        this.powerUpEffects.magneticForce = config.magneticForce;\r\n        break;\r\n      case PowerUpType.CIRCUIT_PATCH:\r\n        this.powerUpEffects.shieldActive = true;\r\n        break;\r\n      case PowerUpType.OVERCLOCK_BOOST:\r\n        this.powerUpEffects.barSpeedMultiplier = config.barSpeedMultiplier;\r\n        break;\r\n      case PowerUpType.SCAN_REVEAL:\r\n        this.powerUpEffects.scanActive = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a power-up\r\n   */\r\n  public activatePowerUp(type: PowerUpType): boolean {\r\n    const state = this.activePowerUps.get(type);\r\n    if (!state || state.charges <= 0) {\r\n      return false;\r\n    }\r\n\r\n    // Use a charge\r\n    state.charges--;\r\n\r\n    // Activate the power-up\r\n    state.isActive = true;\r\n    state.startTime = this.currentTime;\r\n\r\n    logger.info(`‚ö° Power-up activated: ${type}`, null, 'PowerUpManager');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Deactivate a power-up\r\n   */\r\n  public deactivatePowerUp(type: PowerUpType): void {\r\n    const state = this.activePowerUps.get(type);\r\n    if (state) {\r\n      state.isActive = false;\r\n      logger.info(`‚ö° Power-up deactivated: ${type}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add charges to a power-up\r\n   */\r\n  public addCharges(type: PowerUpType, amount: number = 1): void {\r\n    const state = this.activePowerUps.get(type);\r\n    if (state) {\r\n      state.charges = Math.min(state.charges + amount, state.maxCharges);\r\n      logger.info(`‚ö° Added ${amount} charges to ${type}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get power-up state\r\n   */\r\n  public getPowerUpState(type: PowerUpType): PowerUpState | undefined {\r\n    return this.activePowerUps.get(type);\r\n  }\r\n\r\n  /**\r\n   * Get all active power-ups\r\n   */\r\n  public getActivePowerUps(): Map<PowerUpType, PowerUpState> {\r\n    return new Map(this.activePowerUps);\r\n  }\r\n\r\n  /**\r\n   * Get current power-up effects\r\n   */\r\n  public getPowerUpEffects(): PowerUpEffect {\r\n    return { ...this.powerUpEffects };\r\n  }\r\n\r\n  /**\r\n   * Check if a power-up is active\r\n   */\r\n  public isPowerUpActive(type: PowerUpType): boolean {\r\n    const state = this.activePowerUps.get(type);\r\n    return state ? state.isActive : false;\r\n  }\r\n\r\n  /**\r\n   * Initialize power-ups for a new run\r\n   */\r\n  public initializeRun(): void {\r\n    this.activePowerUps.clear();\r\n\r\n    // Initialize each power-up type with ZERO charges for new games\r\n    Object.values(PowerUpType).forEach(type => {\r\n      const config = this.POWER_UP_CONFIGS[type];\r\n      \r\n      this.activePowerUps.set(type, {\r\n        type,\r\n        isActive: false,\r\n        startTime: 0,\r\n        duration: config.baseDuration,\r\n        charges: 0, // Start with zero charges\r\n        maxCharges: 0, // Start with zero max charges\r\n      });\r\n    });\r\n\r\n    logger.info('‚ö° Power-ups initialized for new run (zero charges)', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Get max charges for a power-up type based on upgrades\r\n   * Currently unused but kept for future upgrade system\r\n   */\r\n  // private getMaxChargesForType(type: PowerUpType): number {\r\n  //   switch (type) {\r\n  //     case PowerUpType.SLOW_MO_SURGE:\r\n  //       return this.upgradeProgress.slowMoCharges;\r\n  //     case PowerUpType.CIRCUIT_PATCH:\r\n  //       return this.upgradeProgress.shieldLevel;\r\n  //     default:\r\n  //       return this.POWER_UP_CONFIGS[type].baseCharges;\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Get upgrade progress\r\n   */\r\n  public getUpgradeProgress(): UpgradeProgress {\r\n    return { ...this.upgradeProgress };\r\n  }\r\n\r\n  /**\r\n   * Update upgrade progress\r\n   */\r\n  public updateUpgradeProgress(updates: Partial<UpgradeProgress>): void {\r\n    this.upgradeProgress = { ...this.upgradeProgress, ...updates };\r\n    logger.info('‚ö° Upgrade progress updated', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Get current ball type\r\n   */\r\n  public getCurrentBallType(): BallType {\r\n    return this.upgradeProgress.currentBallType;\r\n  }\r\n\r\n  /**\r\n   * Set current ball type\r\n   */\r\n  public setCurrentBallType(ballType: BallType): void {\r\n    if (this.upgradeProgress.unlockedBallTypes.includes(ballType)) {\r\n      this.upgradeProgress.currentBallType = ballType;\r\n      logger.info(`‚ö° Ball type changed to: ${ballType}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current theme\r\n   */\r\n  public getCurrentTheme(): string {\r\n    return this.upgradeProgress.currentTheme;\r\n  }\r\n\r\n  /**\r\n   * Set current theme\r\n   */\r\n  public setCurrentTheme(theme: string): void {\r\n    if (this.upgradeProgress.unlockedThemes.includes(theme)) {\r\n      this.upgradeProgress.currentTheme = theme;\r\n      logger.info(`‚ö° Theme changed to: ${theme}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock a ball type\r\n   */\r\n  public unlockBallType(ballType: BallType): void {\r\n    if (!this.upgradeProgress.unlockedBallTypes.includes(ballType)) {\r\n      this.upgradeProgress.unlockedBallTypes.push(ballType);\r\n      logger.info(`‚ö° Ball type unlocked: ${ballType}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock a theme\r\n   */\r\n  public unlockTheme(theme: string): void {\r\n    if (!this.upgradeProgress.unlockedThemes.includes(theme)) {\r\n      this.upgradeProgress.unlockedThemes.push(theme);\r\n      logger.info(`‚ö° Theme unlocked: ${theme}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get ball physics properties based on current ball type\r\n   */\r\n  public getBallPhysicsProperties(): {\r\n    mass: number;\r\n    friction: number;\r\n    restitution: number;\r\n  } {\r\n    const baseMass = 6;\r\n    const baseFriction = 0.18;\r\n    const baseRestitution = 0.65;\r\n\r\n    switch (this.upgradeProgress.currentBallType) {\r\n      case BallType.HEAVY:\r\n        return {\r\n          mass: baseMass * 1.5,\r\n          friction: baseFriction * 1.2,\r\n          restitution: baseRestitution * 0.8,\r\n        };\r\n      case BallType.LIGHT:\r\n        return {\r\n          mass: baseMass * 0.7,\r\n          friction: baseFriction * 0.6,\r\n          restitution: baseRestitution * 1.1,\r\n        };\r\n      case BallType.NEON_SPLIT:\r\n        return {\r\n          mass: baseMass * 0.9,\r\n          friction: baseFriction * 0.9,\r\n          restitution: baseRestitution,\r\n        };\r\n      default:\r\n        return {\r\n          mass: baseMass,\r\n          friction: baseFriction,\r\n          restitution: baseRestitution,\r\n        };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get bar speed multiplier based on upgrades\r\n   */\r\n  public getBarSpeedMultiplier(): number {\r\n    const baseMultiplier = 1.0;\r\n    const upgradeMultiplier = 1.0 + (this.upgradeProgress.barSpeedLevel * 0.1);\r\n    const powerUpMultiplier = this.powerUpEffects.barSpeedMultiplier || 1.0;\r\n    \r\n    return baseMultiplier * upgradeMultiplier * powerUpMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Get friction modifier based on upgrades\r\n   */\r\n  public getFrictionModifier(): number {\r\n    const baseFriction = 1.0;\r\n    const upgradeModifier = 1.0 - (this.upgradeProgress.frictionLevel * 0.05);\r\n    return baseFriction * upgradeModifier;\r\n  }\r\n\r\n  /**\r\n   * Use shield (for Circuit Patch power-up)\r\n   */\r\n  public useShield(): boolean {\r\n    const state = this.activePowerUps.get(PowerUpType.CIRCUIT_PATCH);\r\n    if (state && state.charges > 0) {\r\n      state.charges--;\r\n      state.isActive = false;\r\n      logger.info('üõ°Ô∏è Shield used', null, 'PowerUpManager');\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Reset all power-ups (for new game)\r\n   */\r\n  public reset(): void {\r\n    this.activePowerUps.clear();\r\n    this.powerUpEffects = {};\r\n    this.currentTime = 0;\r\n    logger.info('‚ö° PowerUpManager reset', null, 'PowerUpManager');\r\n  }\r\n} ","// Circuit Breaker - Main Game Class\n// Handles game state management and core game loop\n\nimport { GameState, GameStateType } from './GameState';\nimport { GameLoop } from './GameLoop';\nimport { Renderer } from '../rendering/Renderer';\nimport { PhysicsEngine } from '../physics/PhysicsEngine';\nimport { TiltingBar } from './TiltingBar';\nimport { InputManager } from '../input/InputManager';\nimport { LevelManager, Level, Hole } from './Level';\nimport { AudioManager } from '../audio/AudioManager';\nimport { fontManager } from '../utils/FontManager';\nimport { logger } from '../utils/Logger';\nimport { SettingsMenu } from '../ui/SettingsMenu';\nimport { SaveLoadMenu } from '../ui/SaveLoadMenu';\nimport { AchievementNotification } from '../ui/AchievementNotification';\nimport { StatsMenu } from '../ui/StatsMenu';\nimport { StorageManager, GameProgress } from './StorageManager';\nimport { AchievementManager } from './AchievementManager';\nimport { StatsManager } from './StatsManager';\nimport { PowerUpManager, PowerUpType } from './PowerUpManager';\n\n\nexport class Game {\n  private gameState: GameState;\n  private gameLoop: GameLoop;\n  private renderer: Renderer;\n  private physicsEngine: PhysicsEngine;\n  private inputManager: InputManager;\n  private tiltingBar: TiltingBar;\n  private levelManager: LevelManager;\n  private audioManager: AudioManager;\n  private settingsMenu: SettingsMenu;\n  private saveLoadMenu: SaveLoadMenu;\n  private achievementNotification: AchievementNotification;\n  private statsMenu: StatsMenu;\n  private storageManager: StorageManager;\n  private achievementManager: AchievementManager;\n  private statsManager: StatsManager;\n  private powerUpManager: PowerUpManager;\n  private currentLevel: Level | null = null;\n  private isRunning: boolean = false;\n  private levelCompletionHandled: boolean = false;\n\n  // Hole animation state\n  private isAnimatingHoleFall: boolean = false;\n  private holeAnimationState: {\n    ballId: string;\n    holePosition: { x: number; y: number };\n    startTime: number;\n    duration: number;\n    startPosition: { x: number; y: number };\n    scale: number;\n    opacity: number;\n    isGoalHole: boolean; // Track if this is a goal hole animation\n    isPowerUpHole: boolean; // Track if this is a power-up hole animation\n  } | null = null;\n\n  // Attract mode properties\n  private menuTimer: number = 0;\n  private readonly attractModeDelay: number = 10000; // 10 seconds in milliseconds\n  private attractModeTimer: number = 0;\n  // private attractModeAutoPlayInterval: number = 0; // TODO: Implement attract mode auto-play\n\n  // Loading properties\n  private loadingProgress: number = 0;\n  private loadingStatus: string = 'Initializing...';\n  private assetsToLoad: string[] = [];\n  private loadedAssets: number = 0;\n  private loadingComplete: boolean = false;\n\n  // Game progress tracking\n  private gameProgress!: GameProgress; // Will be initialized in loadGameProgress()\n  private currentSaveSlot: number = 0;\n  private sessionStartTime: number = 0;\n  private lastAutoSave: number = 0;\n\n  constructor() {\n    this.gameState = new GameState();\n    this.gameLoop = new GameLoop();\n    this.renderer = new Renderer();\n    this.physicsEngine = new PhysicsEngine();\n    this.inputManager = new InputManager();\n    this.levelManager = new LevelManager();\n    this.audioManager = new AudioManager();\n    this.storageManager = new StorageManager();\n    this.achievementManager = new AchievementManager();\n    this.statsManager = new StatsManager();\n    this.powerUpManager = new PowerUpManager();\n    this.settingsMenu = new SettingsMenu({\n      audioManager: this.audioManager,\n      onClose: () => this.closeSettings(),\n      onBackToMenu: () => this.backToMenuFromSettings(),\n    });\n    this.saveLoadMenu = new SaveLoadMenu({\n      onClose: () => this.closeSaveLoadMenu(),\n      onLoadGame: (slotId: number) => this.loadGameFromSlot(slotId),\n      onNewGame: (slotId: number) => this.startNewGameInSlot(slotId),\n      onDeleteSlot: (slotId: number) => this.deleteSaveSlot(slotId),\n      getSaveSlots: () => this.storageManager.getSaveSlots(),\n      getCurrentProgress: () => this.gameProgress,\n      getAchievements: () => this.achievementManager.getAllAchievements(),\n    });\n    this.achievementNotification = new AchievementNotification({\n      onComplete: () => {\n        // Achievement notification completed\n        logger.debug('üèÜ Achievement notification completed', null, 'Game');\n      },\n    });\n    this.statsMenu = new StatsMenu({\n      onClose: () => this.closeStatsMenu(),\n      statsManager: this.statsManager,\n    });\n    this.tiltingBar = new TiltingBar({\n      position: { x: 180, y: 590 }, // Center of 360px width screen, near bottom\n      width: 360, // Full width of screen\n      height: 8,\n      maxRotation: Math.PI / 4, // 45 degrees\n      rotationSpeed: 3,\n      friction: 0.05, // Low friction for smooth rolling\n    });\n    logger.info('üéÆ Circuit Breaker - Game initialized', null, 'Game');\n  }\n\n  /**\n   * Initialize the game, set up all systems, and prepare for gameplay.\n   */\n  public async init(): Promise<void> {\n    try {\n      logger.info('üéÆ Initializing Circuit Breaker...', null, 'Game');\n\n      // Initialize renderer with canvas\n      const canvas = document.getElementById(\n        'game-canvas',\n      ) as HTMLCanvasElement;\n      if (!canvas) {\n        throw new Error('Canvas element not found');\n      }\n      this.renderer.init(canvas);\n      \n      // Load sprites and atlas\n      logger.info('üé® Loading sprite atlas...', null, 'Game');\n      await this.renderer.loadSprites();\n      logger.info('‚úÖ Sprite atlas loading completed', null, 'Game');\n\n      // Preload custom fonts\n      await fontManager.preloadFonts();\n\n      // Initialize physics engine with realistic pinball settings\n      this.physicsEngine.setGravity(0, 520); // Stronger gravity for heavier pinball\n      this.physicsEngine.setAirResistance(0.999); // Minimal air resistance\n      this.physicsEngine.setBounds(360, 640); // Match canvas size\n      this.physicsEngine.setTiltingBar(this.tiltingBar);\n\n      // Set up physics audio callback for collision sounds\n      this.physicsEngine.setAudioCallback((velocity: number, type: string) => {\n        // Only play collision sounds when actually playing the game\n        if (this.gameState.isPlaying() && type === 'bounce') {\n          this.audioManager.playBounceSound(velocity);\n        }\n      });\n\n      // Override physics engine's ball held check to include saucer state\n      const originalIsBallHeld = this.physicsEngine.isBallHeld.bind(this.physicsEngine);\n      this.physicsEngine.isBallHeld = (ballId: string) => {\n        // Check if ball is in a saucer\n        if (this.currentLevel && this.currentLevel.isBallInSaucer(ballId)) {\n          return true;\n        }\n        return originalIsBallHeld(ballId);\n      };\n\n      // Override physics engine's held ball target to get saucer position\n      const originalGetHeldBallTarget = this.physicsEngine.getHeldBallTarget.bind(this.physicsEngine);\n      this.physicsEngine.getHeldBallTarget = (ballId: string) => {\n        // Get saucer position for held ball\n        if (this.currentLevel) {\n          // Find which hole has this ball in saucer mode\n          const levelData = this.currentLevel.getLevelData();\n          for (const hole of levelData.holes) {\n            if (hole.saucerState?.isActive && hole.saucerState.ballId === ballId) {\n              return this.currentLevel.getSaucerBallPosition(hole.id);\n            }\n          }\n        }\n        return originalGetHeldBallTarget(ballId);\n      };\n\n      // Initialize input manager\n      this.inputManager.init(canvas);\n\n      // Initialize audio system\n      await this.audioManager.init();\n\n      // Load game progress\n      this.loadGameProgress();\n\n      // Set up achievement callback\n      this.achievementManager.setAchievementCallback((achievement) => {\n        logger.info(`üèÜ Achievement unlocked: ${achievement.name}`, null, 'Game');\n        this.achievementNotification.show(achievement);\n      });\n\n      // Create main game ball starting off the left side of playfield\n      // Real pinball specifications: 1 1/16\" diameter (27mm), ~80-100g weight\n      const ballRadius = 14; // Slightly larger for more substantial feel\n      const ballStartX = -50; // Off the left side (hidden)\n      const ballStartY = 300; // Middle height (will be repositioned when started)\n\n      // Get ball physics properties from power-up manager\n      const ballPhysics = this.powerUpManager.getBallPhysicsProperties();\n      \n      // Create main game ball with realistic pinball physics\n      const ball = this.physicsEngine.createObject({\n        id: 'game-ball',\n        x: ballStartX,\n        y: ballStartY,\n        radius: ballRadius,\n        mass: ballPhysics.mass,\n        restitution: ballPhysics.restitution,\n        friction: ballPhysics.friction,\n        isStatic: false,\n      });\n\n      this.physicsEngine.addObject(ball);\n\n      // Sync physics engine debug mode with game state debug mode\n      this.physicsEngine.setDebug(this.gameState.isDebugMode());\n\n      // Initialize power-ups for the run\n      this.powerUpManager.initializeRun();\n      \n          // Load the first level\n    this.currentLevel = this.levelManager.loadLevel(1);\n    if (this.currentLevel) {\n      this.currentLevel.start();\n      this.levelCompletionHandled = false; // Initialize completion flag\n      \n      logger.info('üéØ Level 1 loaded and started', null, 'Game');\n    }\n\n      this.isRunning = true;\n      \n      // Record session start\n      this.statsManager.recordEvent({\n        type: 'session_start',\n        timestamp: Date.now(),\n      });\n      \n      logger.info('‚úÖ Circuit Breaker initialized successfully', null, 'Game');\n    } catch (error) {\n      logger.error('‚ùå Failed to initialize Circuit Breaker:', error, 'Game');\n      throw error;\n    }\n  }\n\n  /**\n   * Start the main game loop.\n   */\n  public start(): void {\n    if (!this.isRunning) {\n      logger.warn('‚ö†Ô∏è Game not initialized. Call init() first.', null, 'Game');\n      return;\n    }\n\n    logger.info('‚ñ∂Ô∏è Starting Circuit Breaker...', null, 'Game');\n    this.gameState.setState(GameStateType.LOADING);\n    this.gameLoop.start(\n      this.gameState,\n      this.renderer,\n      this.physicsEngine,\n      this,\n    );\n\n    // Start asset loading process\n    this.startAssetLoading();\n  }\n\n  /**\n   * Update the game state and handle input, called every frame.\n   * @param deltaTime Time elapsed since last frame (ms)\n   */\n  public update(deltaTime: number): void {\n    // Update input\n    this.inputManager.update();\n\n    // Handle loading input - transition to menu when user interacts\n    if (this.gameState.isLoading()) {\n      if (this.loadingComplete && this.hasAnyInput()) {\n        logger.debug('üéÆ User interaction detected - transitioning to menu', null, 'Game');\n        this.completeLoading();\n      }\n      // Don't process other input during loading\n      this.inputManager.endFrame();\n      return;\n    }\n\n    // Handle menu input - start new game when clicking or pressing space\n    if (this.gameState.isState(GameStateType.MENU)) {\n      // Check for any user interaction to reset menu timer\n      if (this.hasAnyInput()) {\n        this.menuTimer = 0;\n      }\n\n      if (\n        this.inputManager.isActionJustPressed('start') ||\n        this.inputManager.isMouseJustPressed()\n      ) {\n        logger.info('üéÆ Starting new game...', null, 'Game');\n        this.startNewGame();\n        this.menuTimer = 0; // Reset timer\n\n        // Resume audio context on user interaction (required by browsers)\n        this.audioManager.resumeContext();\n\n        // Play UI click sound\n        this.audioManager.playSound('ui_click');\n      }\n\n      // Handle debug mode toggle\n      if (this.inputManager.isKeyJustPressed('KeyD')) {\n        this.gameState.toggleDebugMode();\n        this.menuTimer = 0; // Reset timer\n\n        // Update physics engine debug mode to match\n        this.physicsEngine.setDebug(this.gameState.isDebugMode());\n\n        // Play UI click sound\n        this.audioManager.playSound('ui_click');\n      }\n\n      // Handle settings key (S key)\n      if (this.inputManager.isKeyJustPressed('KeyS')) {\n        logger.info('‚öôÔ∏è Opening settings menu...', null, 'Game');\n        this.openSettings();\n        this.menuTimer = 0; // Reset timer\n      }\n\n      // Handle save/load key (L key)\n      if (this.inputManager.isKeyJustPressed('KeyL')) {\n        logger.info('üíæ Opening save/load menu...', null, 'Game');\n        this.openSaveLoadMenu();\n        this.menuTimer = 0; // Reset timer\n      }\n\n      // Handle stats key (T key)\n      if (this.inputManager.isKeyJustPressed('KeyT')) {\n        logger.info('üìä Opening stats menu...', null, 'Game');\n        this.openStatsMenu();\n        this.menuTimer = 0; // Reset timer\n      }\n\n      // Update menu timer and check for attract mode\n      this.menuTimer += deltaTime;\n      if (this.menuTimer >= this.attractModeDelay) {\n        logger.debug('üé¨ Starting attract mode...', null, 'Game');\n        this.startAttractMode();\n      }\n    }\n\n    // Handle attract mode input\n    if (this.gameState.isAttractMode()) {\n      // Exit attract mode on any key press\n      if (this.hasAnyInput()) {\n        logger.debug('üè† Exiting attract mode - returning to menu...', null, 'Game');\n        this.exitAttractMode();\n      }\n\n      // Update attract mode auto-play\n      this.updateAttractMode(deltaTime);\n    }\n\n    // Handle game over input - return to menu when clicking or pressing space\n    if (this.gameState.isState(GameStateType.GAME_OVER)) {\n      if (\n        this.inputManager.isActionJustPressed('start') ||\n        this.inputManager.isMouseJustPressed()\n      ) {\n        logger.info('üè† Returning to menu...', null, 'Game');\n        this.gameState.reset();\n\n        // Play UI click sound\n        this.audioManager.playSound('ui_click');\n\n        // Return to menu music\n        this.playMenuMusic();\n      }\n    }\n\n    // Handle paused state input\n    if (this.gameState.isPaused()) {\n      // Handle escape key to resume\n      if (this.inputManager.isActionJustPressed('pause')) {\n        logger.info('‚ñ∂Ô∏è Resuming game...', null, 'Game');\n        this.gameState.setState(GameStateType.PLAYING);\n        this.audioManager.playSound('ui_click');\n      }\n      // Handle settings key\n      else if (this.inputManager.isKeyJustPressed('KeyS')) {\n        logger.info('‚öôÔ∏è Opening settings from pause menu...', null, 'Game');\n        this.openSettings();\n      }\n      // Handle Y key to return to menu\n      else if (this.inputManager.isKeyJustPressed('KeyY')) {\n        logger.info('üè† Returning to menu from pause...', null, 'Game');\n        this.gameState.reset();\n        this.audioManager.playSound('ui_click');\n        this.playMenuMusic();\n      }\n    }\n\n    // Handle settings menu input\n    if (this.gameState.isSettings()) {\n      // Handle settings menu pointer events\n      const mousePos = this.inputManager.getMousePosition();\n      if (mousePos) {\n        this.settingsMenu.handlePointerMove(mousePos.x, mousePos.y);\n        \n        if (this.inputManager.isMouseJustPressed()) {\n          this.settingsMenu.handlePointerDown(mousePos.x, mousePos.y);\n        }\n        \n        if (this.inputManager.isMouseJustReleased()) {\n          this.settingsMenu.handlePointerUp(mousePos.x, mousePos.y);\n        }\n      }\n\n      // Handle escape key to close settings\n      if (this.inputManager.isActionJustPressed('pause')) {\n        logger.info('‚öôÔ∏è Closing settings menu...', null, 'Game');\n        this.closeSettings();\n      }\n    }\n\n    // Handle save/load menu input\n    if (this.gameState.isSaveLoad()) {\n      // Update save/load menu\n      this.saveLoadMenu.update(deltaTime);\n      \n      // Handle save/load menu pointer events\n      const mousePos = this.inputManager.getMousePosition();\n      if (mousePos) {\n        this.saveLoadMenu.handlePointerMove(mousePos.x, mousePos.y);\n        \n        if (this.inputManager.isMouseJustPressed()) {\n          this.saveLoadMenu.handlePointerDown(mousePos.x, mousePos.y);\n        }\n        \n        if (this.inputManager.isMouseJustReleased()) {\n          this.saveLoadMenu.handlePointerUp(mousePos.x, mousePos.y);\n        }\n      }\n\n      // Handle keyboard input for save/load menu\n      const keys = this.inputManager.getJustPressedKeys();\n      for (const key of keys) {\n        if (this.saveLoadMenu.handleKeyPress(key)) {\n          break; // Menu handled the key\n        }\n      }\n\n      // Handle escape key to close save/load menu\n      if (this.inputManager.isActionJustPressed('pause')) {\n        logger.info('üíæ Closing save/load menu...', null, 'Game');\n        this.closeSaveLoadMenu();\n      }\n    }\n\n    // Handle stats menu input\n    if (this.gameState.isStats()) {\n      // Handle keyboard input for stats menu\n      const keys = this.inputManager.getJustPressedKeys();\n      for (const key of keys) {\n        this.statsMenu.handleInput(key);\n      }\n\n      // Handle escape key to close stats menu\n      if (this.inputManager.isActionJustPressed('pause')) {\n        logger.info('üìä Closing stats menu...', null, 'Game');\n        this.closeStatsMenu();\n      }\n    }\n\n    // Handle confirmation dialog input\n    if (this.gameState.isConfirmingMenu()) {\n      // Y key or Enter - confirm return to menu\n      if (\n        this.inputManager.isKeyJustPressed('KeyY') ||\n        this.inputManager.isKeyJustPressed('Enter')\n      ) {\n        logger.info('‚úÖ Confirmed - returning to menu', null, 'Game');\n        this.gameState.reset();\n        this.audioManager.playSound('ui_click');\n      }\n      // N key or Escape - cancel and return to game\n      else if (\n        this.inputManager.isKeyJustPressed('KeyN') ||\n        this.inputManager.isKeyJustPressed('Escape')\n      ) {\n        logger.info('‚ùå Cancelled - returning to game', null, 'Game');\n        this.gameState.setState(GameStateType.PLAYING);\n        this.audioManager.playSound('ui_click');\n      }\n    }\n\n    // Only process gameplay logic when actually playing\n    if (this.gameState.isPlaying()) {\n      // Update power-up manager\n      this.powerUpManager.update(deltaTime);\n      \n      // Auto-save and check achievements during gameplay\n      this.autoSave();\n      this.checkAchievements();\n\n      // Update achievement notification\n      this.achievementNotification.update(deltaTime);\n\n      // Handle escape key - show confirmation dialog\n      if (this.inputManager.isActionJustPressed('pause')) {\n        logger.debug('‚è∏Ô∏è Escape pressed - showing confirmation dialog', null, 'Game');\n        this.gameState.setState(GameStateType.CONFIRM_MENU);\n        this.audioManager.playSound('ui_click');\n        return; // Don't process other gameplay input\n      }\n\n      // Update hole animation if active\n      if (this.isAnimatingHoleFall) {\n        this.updateHoleAnimation(deltaTime);\n      }\n\n      // Check for start key press to place ball on bar\n      if (this.inputManager.isActionJustPressed('start')) {\n        logger.debug('üéØ SPACE pressed - placing ball on bar', null, 'Game');\n        this.placeBallOnBar();\n\n        // Resume audio context on user interaction (required by browsers)\n        this.audioManager.resumeContext();\n\n        // Play UI click sound\n        this.audioManager.playSound('ui_click');\n      }\n\n      // Handle power-up activation\n      this.handlePowerUpInput();\n\n      // Update tilting bar based on independent side controls (absolute movement)\n      const leftSideInput = this.inputManager.getLeftSideInput();\n      const rightSideInput = this.inputManager.getRightSideInput();\n\n      this.tiltingBar.moveLeftSide(leftSideInput);\n      this.tiltingBar.moveRightSide(rightSideInput);\n      this.tiltingBar.update(deltaTime / 1000); // Convert to seconds\n\n      // Update current level\n      if (this.currentLevel) {\n        this.currentLevel.update(deltaTime);\n        \n        // Update saucer behavior\n        this.updateSaucerBehavior();\n        \n        // Only check collisions if not animating\n        if (!this.isAnimatingHoleFall) {\n          this.checkCollisions();\n          this.checkWinLoseConditions();\n        }\n      }\n    }\n\n    // End frame - update previous input state for next frame\n    this.inputManager.endFrame();\n  }\n\n  /**\n   * Render the main gameplay area and UI overlays.\n   */\n  public renderGameplay(): void {\n    // Render level elements FIRST (background)\n    if (this.currentLevel) {\n      const levelData = this.currentLevel.getLevelData();\n\n      // Draw holes FIRST (under everything) - only draw active holes\n      for (const hole of levelData.holes) {\n        // Skip deactivated holes (like collected power-up holes)\n        if (!hole.isActive) continue;\n        \n        // Check if this goal hole has been completed\n        const isCompleted =\n          hole.isGoal && this.currentLevel\n            ? this.currentLevel.isGoalCompleted(hole.id)\n            : false;\n        this.renderer.drawHole(hole, isCompleted, this.gameState.isDebugMode());\n      }\n    }\n\n    // Render tilting bar AFTER holes (so it appears on top)\n    this.renderer.drawTiltingBar(this.tiltingBar);\n\n    // Render UI elements\n    if (this.currentLevel) {\n      const levelData = this.currentLevel.getLevelData();\n\n      // Draw essential UI (always visible)\n      const ctx = this.renderer.getContext();\n      if (ctx) {\n        ctx.fillStyle = '#00f0ff'; // Electric Blue\n        fontManager.setFont(ctx, 'primary', 12);\n        ctx.textAlign = 'left';\n        ctx.fillText(`Level: ${levelData.id} - ${levelData.name}`, 10, 20);\n        ctx.fillText(`Score: ${this.gameState.getStateData().score}`, 10, 35);\n        ctx.fillText(`Lives: ${this.gameState.getStateData().lives}`, 10, 50);\n\n        // Debug info (only when debug mode is enabled)\n        if (this.gameState.isDebugMode()) {\n          ctx.fillText(\n            `Progress: ${Math.round(this.currentLevel.getProgress() * 100)}%`,\n            10,\n            65,\n          );\n\n          // Show multi-goal progress\n          const completedGoals = this.currentLevel.getCompletedGoals();\n          const requiredGoals = this.currentLevel.getRequiredGoals();\n          ctx.fillText(\n            `Goals: ${completedGoals}/${requiredGoals} completed`,\n            10,\n            80,\n          );\n\n          if (completedGoals < requiredGoals) {\n            ctx.fillText('Goal: Navigate to the glowing goal holes', 10, 95);\n          } else {\n            ctx.fillText('Goal: All goals completed! Level complete!', 10, 95);\n          }\n        }\n      }\n    }\n\n    // Input instructions (only when debug mode is enabled)\n    if (this.gameState.isDebugMode()) {\n      const ctx = this.renderer.getContext();\n      if (ctx) {\n        ctx.fillStyle = '#00f0ff'; // Electric Blue\n        fontManager.setFont(ctx, 'primary', 10);\n        ctx.textAlign = 'center';\n        ctx.fillText(\n          'SPACE: Start | Left: A(up)/Z(down) | Right: ‚Üë(up)/‚Üì(down)',\n          180,\n          580,\n        );\n        ctx.fillText(\n          'Navigate upward to the goal holes - avoid falling into other holes!',\n          180,\n          595,\n        );\n      }\n    }\n\n    // Render power-up effects\n    this.renderPowerUpEffects();\n\n    // Render settings menu if open\n    if (this.gameState.isSettings()) {\n      const ctx = this.renderer.getContext();\n      if (ctx) {\n        this.settingsMenu.draw(ctx);\n      }\n    }\n  }\n\n  /**\n   * Get hole animation state for rendering\n   */\n  public getHoleAnimationState(): { scale: number; opacity: number } | null {\n    return this.holeAnimationState\n      ? {\n        scale: this.holeAnimationState.scale,\n        opacity: this.holeAnimationState.opacity,\n      }\n      : null;\n  }\n\n\n\n  /**\n   * Render power-up effects and UI\n   */\n  private renderPowerUpEffects(): void {\n    const ctx = this.renderer.getContext();\n    if (!ctx) return;\n\n    // Get active power-ups\n    const activePowerUps = this.powerUpManager.getActivePowerUps();\n    const powerUpEffects = this.powerUpManager.getPowerUpEffects();\n\n    // Render power-up overlays\n    if (powerUpEffects.timeScale) {\n      // Slow-Mo Surge overlay - more prominent\n      ctx.fillStyle = 'rgba(0, 255, 255, 0.4)'; // More opaque cyan overlay\n      ctx.fillRect(0, 0, 360, 640);\n      \n      // Add pulsing effect\n      const pulseIntensity = 0.2 + 0.1 * Math.sin(Date.now() * 0.01);\n      ctx.fillStyle = `rgba(0, 255, 255, ${pulseIntensity})`;\n      ctx.fillRect(0, 0, 360, 640);\n    }\n\n    // Render power-up HUD\n    this.renderPowerUpHUD(ctx, activePowerUps);\n  }\n\n  /**\n   * Render power-up HUD\n   */\n  private renderPowerUpHUD(ctx: CanvasRenderingContext2D, activePowerUps: Map<PowerUpType, any>): void {\n    const powerUpSprites = {\n      [PowerUpType.SLOW_MO_SURGE]: 'hourglass',\n      [PowerUpType.MAGNETIC_GUIDE]: 'magnet',\n      [PowerUpType.CIRCUIT_PATCH]: 'chip',\n      [PowerUpType.OVERCLOCK_BOOST]: 'cross',\n      [PowerUpType.SCAN_REVEAL]: 'eye',\n    };\n\n    // Power-up names for display (currently unused but kept for future use)\n    // const powerUpNames = {\n    //   [PowerUpType.SLOW_MO_SURGE]: 'Slow-Mo',\n    //   [PowerUpType.MAGNETIC_GUIDE]: 'Magnetic',\n    //   [PowerUpType.CIRCUIT_PATCH]: 'Shield',\n    //   [PowerUpType.OVERCLOCK_BOOST]: 'Overclock',\n    //   [PowerUpType.SCAN_REVEAL]: 'Scan',\n    // };\n\n    // Render power-up status with icons only: left, center, right\n    const screenWidth = 360;\n    const padding = 20; // Padding from edges\n    \n    // Define positions for each power-up type\n    const powerUpPositions = {\n      [PowerUpType.SLOW_MO_SURGE]: { x: padding + 30, align: 'center' },\n      [PowerUpType.MAGNETIC_GUIDE]: { x: padding + 80, align: 'center' },\n      [PowerUpType.CIRCUIT_PATCH]: { x: screenWidth / 2, align: 'center' },\n      [PowerUpType.OVERCLOCK_BOOST]: { x: screenWidth - padding - 80, align: 'center' },\n      [PowerUpType.SCAN_REVEAL]: { x: screenWidth - padding - 30, align: 'center' },\n    };\n    \n    activePowerUps.forEach((state, type) => {\n      const spriteName = powerUpSprites[type];\n      const charges = state.charges;\n      const isActive = state.isActive;\n      const position = powerUpPositions[type];\n\n      // Draw power-up sprite\n      if (spriteName && this.renderer) {\n        const spriteScale = 0.4; // Scale down for HUD\n        const spriteY = 610 - 20; // Position above text\n        \n        // Set color tint based on active state\n        if (isActive) {\n          if (type === PowerUpType.SLOW_MO_SURGE) {\n            // Add countdown timer for active Slow-Mo\n            const elapsed = Date.now() - state.startTime;\n            const remaining = Math.max(0, state.duration - elapsed);\n            const secondsRemaining = Math.ceil(remaining / 1000);\n            \n            // Change color based on remaining time\n            if (secondsRemaining <= 1) {\n              this.renderer.setTint('#ff0000'); // Red when almost done\n            } else if (secondsRemaining <= 2) {\n              this.renderer.setTint('#ff6600'); // Orange when low\n            } else {\n              this.renderer.setTint('#00ff00'); // Green when plenty of time\n            }\n          } else {\n            this.renderer.setTint('#00ff00'); // Green for active\n          }\n        } else {\n          this.renderer.setTint('#ffffff'); // White for inactive\n        }\n        \n        this.renderer.drawAtlasSprite(spriteName, position.x, spriteY, spriteScale);\n        this.renderer.clearTint();\n      }\n      \n      // Draw charge count\n      ctx.fillStyle = isActive ? '#00ff00' : '#ffffff';\n      ctx.font = '14px Interceptor';\n      ctx.textAlign = 'center';\n      \n      let displayText = `${charges}`;\n      \n      // Add countdown timer for active Slow-Mo\n      if (isActive && type === PowerUpType.SLOW_MO_SURGE) {\n        const elapsed = Date.now() - state.startTime;\n        const remaining = Math.max(0, state.duration - elapsed);\n        const secondsRemaining = Math.ceil(remaining / 1000);\n        displayText = `${charges}[${secondsRemaining}s]`;\n        \n        // Change color based on remaining time\n        if (secondsRemaining <= 1) {\n          ctx.fillStyle = '#ff0000'; // Red when almost done\n        } else if (secondsRemaining <= 2) {\n          ctx.fillStyle = '#ff6600'; // Orange when low\n        } else {\n          ctx.fillStyle = '#00ff00'; // Green when plenty of time\n        }\n      }\n      \n      ctx.fillText(displayText, position.x, 610);\n    });\n\n    // Render power-up controls hint\n    if (this.gameState.isDebugMode()) {\n      ctx.fillStyle = '#00f0ff';\n      ctx.font = '10px Interceptor';\n      ctx.textAlign = 'left';\n      ctx.fillText('Power-ups: Q(Slow-Mo) W(Magnetic) E(Shield) R(Overclock) T(Scan)', 10, 620);\n    }\n  }\n\n  /**\n   * Handle power-up input activation\n   */\n  private handlePowerUpInput(): void {\n    // Slow-Mo Surge - Q key\n    if (this.inputManager.isKeyJustPressed('KeyQ')) {\n      if (this.powerUpManager.activatePowerUp(PowerUpType.SLOW_MO_SURGE)) {\n        this.audioManager.playSound('powerup_activate');\n        logger.info('‚è∞ Slow-Mo Surge activated', null, 'Game');\n      }\n    }\n\n    // Magnetic Guide - W key\n    if (this.inputManager.isKeyJustPressed('KeyW')) {\n      if (this.powerUpManager.activatePowerUp(PowerUpType.MAGNETIC_GUIDE)) {\n        this.audioManager.playSound('powerup_activate');\n        logger.info('üß≤ Magnetic Guide activated', null, 'Game');\n      }\n    }\n\n    // Circuit Patch (Shield) - E key\n    if (this.inputManager.isKeyJustPressed('KeyE')) {\n      if (this.powerUpManager.activatePowerUp(PowerUpType.CIRCUIT_PATCH)) {\n        this.audioManager.playSound('shield_activate');\n        logger.info('üõ°Ô∏è Circuit Patch shield activated', null, 'Game');\n      }\n    }\n\n    // Overclock Boost - R key\n    if (this.inputManager.isKeyJustPressed('KeyR')) {\n      if (this.powerUpManager.activatePowerUp(PowerUpType.OVERCLOCK_BOOST)) {\n        this.audioManager.playSound('powerup_activate');\n        logger.info('‚ö° Overclock Boost activated', null, 'Game');\n      }\n    }\n\n    // Scan Reveal - T key\n    if (this.inputManager.isKeyJustPressed('KeyT')) {\n      if (this.powerUpManager.activatePowerUp(PowerUpType.SCAN_REVEAL)) {\n        this.audioManager.playSound('powerup_activate');\n        logger.info('üîç Scan Reveal activated', null, 'Game');\n      }\n    }\n  }\n\n  /**\n   * Place ball on the tilting bar\n   */\n  private placeBallOnBar(): void {\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\n    if (ball) {\n      // Position ball on the bar\n      ball.position.x = this.tiltingBar.position.x;\n      ball.position.y = this.tiltingBar.leftSideHeight - 20; // Slightly above the bar\n      ball.previousPosition.x = ball.position.x;\n      ball.previousPosition.y = ball.position.y;\n      ball.velocity.x = 0;\n      ball.velocity.y = 0;\n      logger.debug('üéØ Ball placed on tilting bar', null, 'Game');\n    }\n  }\n\n  /**\n   * Reset ball after completing a goal (no life loss)\n   */\n  private resetBallAfterGoal(): void {\n    logger.info('üéØ Goal completed - resetting ball without life loss', null, 'Game');\n\n    // Reset power-ups for new attempt\n    this.powerUpManager.initializeRun();\n\n    // Reset tilting bar to starting position\n    this.tiltingBar.reset();\n\n    // Reset ball to starting position on the bar\n    this.placeBallOnBar();\n  }\n\n  /**\n   * Get power-up manager\n   */\n  public getPowerUpManager(): PowerUpManager {\n    return this.powerUpManager;\n  }\n\n  /**\n   * Check if ball is currently animating into a hole\n   */\n  public getIsAnimatingHoleFall(): boolean {\n    return this.isAnimatingHoleFall;\n  }\n\n\n\n  /**\n   * Check collisions between ball and level elements\n   */\n  private checkCollisions(): void {\n    if (!this.currentLevel) return;\n\n    const ball = this.physicsEngine\n      .getObjects()\n      .find(obj => obj.id === 'game-ball');\n    if (!ball) return;\n\n    const ballPosition = { x: ball.position.x, y: ball.position.y };\n    const ballRadius = ball.radius;\n\n    // Check if ball reached the goal hole - now triggers hole animation\n    if (this.currentLevel.checkGoalReached(ballPosition, ballRadius)) {\n      this.handleGoalReached();\n      // Start hole animation for goal hole\n      const goalHole = this.currentLevel.getGoalHoleAtPosition(ballPosition);\n      if (goalHole) {\n        this.startHoleAnimation('game-ball', goalHole.position, true, false); // Mark as goal hole\n      }\n      return;\n    }\n\n    // Check if ball fell into any hole\n    const hitHole = this.currentLevel.checkHoleCollision(\n      ballPosition,\n      ballRadius,\n      'game-ball', // Pass ball ID to prevent re-entry\n    );\n    if (hitHole && !hitHole.isGoal) {\n      this.handleHoleCollision(hitHole);\n    }\n\n    // Check if ball fell off screen\n    if (this.currentLevel.checkBallFallOff(ballPosition, { x: 360, y: 640 })) {\n      this.handleBallFallOff();\n    }\n\n    // Check for power-up hole collisions (handled in handleHoleCollision)\n  }\n\n  /**\n   * Check win/lose conditions\n   */\n  private checkWinLoseConditions(): void {\n    if (!this.currentLevel) return;\n\n    // Check if level is complete (only handle once per level)\n    if (\n      this.currentLevel.checkLevelComplete() &&\n      !this.levelCompletionHandled\n    ) {\n      this.levelCompletionHandled = true;\n      this.handleLevelComplete();\n    }\n  }\n\n  /**\n   * Handle ball reaching the goal hole\n   */\n  private handleGoalReached(): void {\n    if (!this.currentLevel) return;\n\n    logger.info('üéØ Goal reached!', null, 'Game');\n\n    // Record goal reached event\n    this.statsManager.recordEvent({\n      type: 'goal_reached',\n      timestamp: Date.now(),\n    });\n\n    // Update game progress\n    this.gameProgress.totalGoalsReached++;\n\n    // Play target activation sound\n    this.audioManager.playSound('target');\n\n    // Add bonus score for reaching goal\n    const currentScore = this.gameState.getStateData().score;\n    this.gameState.updateStateData({ score: currentScore + 500 });\n\n    logger.info('üí∞ Goal bonus: 500 points', null, 'Game');\n\n    // Check if all goals are completed\n    const completedGoals = this.currentLevel.getCompletedGoals();\n    const requiredGoals = this.currentLevel.getRequiredGoals();\n\n    logger.info(`üéØ Goals completed: ${completedGoals}/${requiredGoals}`, null, 'Game');\n\n    if (completedGoals >= requiredGoals) {\n      logger.info('üéâ All goals completed! Level complete!', null, 'Game');\n      logger.info(\n        `üéØ Level ${this.currentLevel.getLevelData().id} complete! All ${requiredGoals} goals reached!`,\n        null,\n        'Game',\n      );\n    }\n  }\n\n  /**\n   * Handle ball falling into a hole\n   */\n  private handleHoleCollision(hole: Hole): void {\n    logger.info(`üï≥Ô∏è Ball fell into hole: ${hole.id}`, null, 'Game');\n\n    // Check if this is a power-up hole\n    const isPowerUpHole = hole.powerUpType !== undefined;\n    if (isPowerUpHole) {\n      // Start saucer behavior instead of immediate collection\n      if (this.currentLevel) {\n        this.currentLevel.startSaucerBehavior(hole.id, 'game-ball', Date.now());\n        this.handlePowerUpHoleCollection(hole);\n      }\n    } else {\n      // Regular hole - play falling sound and start animation\n      this.audioManager.playSound('zap');\n      this.startHoleAnimation('game-ball', hole.position, false, false);\n    }\n  }\n\n  /**\n   * Update saucer behavior and kick balls when ready\n   */\n  private updateSaucerBehavior(): void {\n    if (!this.currentLevel) return;\n\n    const kickData = this.currentLevel.updateSaucerBehavior(Date.now());\n    if (kickData) {\n      this.kickBallFromSaucer(kickData);\n    }\n  }\n\n  /**\n   * Kick ball out of saucer with physics\n   */\n  private kickBallFromSaucer(kickData: { ballId: string; direction: { x: number; y: number }; force: number; holeId: string }): void {\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === kickData.ballId);\n    if (!ball) return;\n\n    // Apply kick force to ball\n    const kickVelocity = {\n      x: kickData.direction.x * kickData.force,\n      y: kickData.direction.y * kickData.force\n    };\n\n    // Update ball physics\n    ball.previousPosition.x = ball.position.x - kickVelocity.x * 0.016; // 60fps\n    ball.previousPosition.y = ball.position.y - kickVelocity.y * 0.016;\n\n    // Play kick sound\n    this.audioManager.playSound('powerup_collect');\n\n    logger.info(`üöÄ Ball kicked from saucer with force: ${kickData.force} from hole: ${kickData.holeId}`, null, 'Game');\n  }\n\n  /**\n   * Handle power-up hole collection\n   */\n  private handlePowerUpHoleCollection(hole: Hole): void {\n    if (!hole.powerUpType) return;\n\n    logger.info(`üéÅ Power-up collected from hole: ${hole.powerUpType}`, null, 'Game');\n\n    // Add charge to the power-up\n    this.powerUpManager.addCharges(hole.powerUpType, 1);\n\n    // Don't deactivate the hole immediately - let saucer handle it\n    // The hole will be deactivated after the ball is kicked out\n\n    // Play collection sound\n    this.audioManager.playSound('powerup_collect');\n\n    // Record collection event\n    this.statsManager.recordEvent({\n      type: 'powerup_collected',\n      timestamp: Date.now(),\n      data: { powerUpType: hole.powerUpType, source: 'hole' },\n    });\n\n    logger.info(`‚ö° Added charge to ${hole.powerUpType} from power-up hole`, null, 'Game');\n  }\n\n  /**\n   * Handle ball falling off screen\n   */\n  private handleBallFallOff(): void {\n    logger.warn('üíÄ Ball fell off screen!', null, 'Game');\n\n    // Check if shield should be used\n    if (this.powerUpManager.useShield()) {\n      logger.info('üõ°Ô∏è Shield used to prevent ball loss!', null, 'Game');\n      this.audioManager.playSound('shield_break');\n      \n      // Reset ball to starting position on the bar\n      this.placeBallOnBar();\n      return;\n    }\n\n    // Record ball lost event\n    this.statsManager.recordEvent({\n      type: 'ball_lost',\n      timestamp: Date.now(),\n    });\n\n    // Update game progress\n    this.gameProgress.totalBallsLost++;\n\n    // Reduce lives\n    const currentLives = this.gameState.getStateData().lives;\n    if (currentLives > 1) {\n      this.gameState.updateStateData({ lives: currentLives - 1 });\n      logger.info(`üíî Lives remaining: ${currentLives - 1}`, null, 'Game');\n\n          // Reset power-ups for new game\n    this.powerUpManager.initializeRun();\n\n    // Reset tilting bar to starting position\n    this.tiltingBar.reset();\n\n    // Reset ball to starting position on the bar\n    this.placeBallOnBar();\n    } else {\n      this.handleGameOver();\n    }\n  }\n\n  /**\n   * Handle level completion\n   */\n  private handleLevelComplete(): void {\n    if (!this.currentLevel) return;\n\n    logger.info('üèÜ Level completed!', null, 'Game');\n\n    // Record level complete event\n    const levelId = this.currentLevel.getLevelData().id;\n    const levelScore = this.currentLevel.calculateScore();\n    this.statsManager.recordEvent({\n      type: 'level_complete',\n      timestamp: Date.now(),\n      data: { \n        levelId,\n        score: levelScore,\n        completionTime: Date.now() - this.sessionStartTime, // Rough completion time\n      },\n    });\n\n    // Update game progress\n    this.gameProgress.completedLevels.add(levelId);\n    this.gameProgress.highestLevel = Math.max(this.gameProgress.highestLevel, levelId);\n\n    // Play level completion sound\n    this.audioManager.playSound('level_complete');\n\n    // Add level completion bonus\n    const currentScore = this.gameState.getStateData().score;\n    this.gameState.updateStateData({ score: currentScore + levelScore });\n\n    logger.info(`üéâ Level bonus: ${levelScore}`, null, 'Game');\n\n    // Move to next level\n    const nextLevelId = this.currentLevel.getLevelData().id + 1;\n    this.levelManager.unlockLevel(nextLevelId);\n\n    // Load next level or show completion\n    if (this.levelManager.getLevelData(nextLevelId)) {\n      this.loadNextLevel(nextLevelId);\n    } else {\n      this.handleGameComplete();\n    }\n  }\n\n  /**\n   * Handle time up\n   */\n  // private handleTimeUp(): void {\n  //   logger.warn('‚è∞ Time up!', null, 'Game');\n  //   this.handleBallFallOff();\n  // }\n\n  /**\n   * Load next level\n   */\n  private loadNextLevel(levelId: number): void {\n    logger.info(`üîÑ Loading level ${levelId}...`, null, 'Game');\n\n    // Record level start event\n    this.statsManager.recordEvent({\n      type: 'level_start',\n      timestamp: Date.now(),\n      data: { levelId },\n    });\n\n    this.currentLevel = this.levelManager.loadLevel(levelId);\n    if (this.currentLevel) {\n      this.currentLevel.start();\n      this.gameState.updateStateData({ currentLevel: levelId });\n      this.levelCompletionHandled = false; // Reset completion flag for new level\n\n      // Reset tilting bar to starting position\n      this.tiltingBar.reset();\n\n      // Reset ball to starting position on the bar\n      this.placeBallOnBar();\n\n            logger.info(`üéØ Level ${levelId} loaded and started`, null, 'Game');\n    }\n  }\n\n  /**\n   * Handle game over\n   */\n  private handleGameOver(): void {\n    logger.warn('üíÄ Game Over!', null, 'Game');\n    \n    // Record death event\n    this.statsManager.recordEvent({\n      type: 'death',\n      timestamp: Date.now(),\n    });\n    \n    this.gameState.setState(GameStateType.GAME_OVER);\n\n    // Save final game progress\n    this.saveGameProgress();\n\n    // Play game over sound\n    this.audioManager.playSound('game_over');\n\n    // Return to menu music after a short delay\n    setTimeout(() => {\n      this.playMenuMusic();\n    }, 1000);\n\n    // Auto-return to menu after 5 seconds if user doesn't interact\n    setTimeout(() => {\n      if (this.gameState.isState(GameStateType.GAME_OVER)) {\n        logger.info('üè† Auto-returning to menu...', null, 'Game');\n        this.gameState.reset();\n      }\n    }, 5000);\n  }\n\n  /**\n   * Handle game completion\n   */\n  private handleGameComplete(): void {\n    logger.info('üéä Game completed! All levels finished!', null, 'Game');\n\n    // Record game complete event\n    this.statsManager.recordEvent({\n      type: 'game_complete',\n      timestamp: Date.now(),\n    });\n\n    // Return to menu music after a short delay\n    setTimeout(() => {\n      this.playMenuMusic();\n    }, 1000);\n\n    // Show completion message briefly, then return to main menu\n    setTimeout(() => {\n      logger.info('üè† Returning to main menu...', null, 'Game');\n      this.gameState.reset();\n    }, 2000); // 2 second delay to show completion\n  }\n\n  /**\n   * Pause the game.\n   */\n  public pause(): void {\n    logger.info('‚è∏Ô∏è Pausing Circuit Breaker...', null, 'Game');\n    \n    // Save progress when pausing\n    this.saveGameProgress();\n    \n    this.gameLoop.pause();\n  }\n\n  /**\n   * Resume the game from pause.\n   */\n  public resume(): void {\n    logger.info('‚ñ∂Ô∏è Resuming Circuit Breaker...', null, 'Game');\n    this.gameLoop.resume();\n  }\n\n  /**\n   * Stop the game and clean up resources.\n   */\n  public stop(): void {\n    logger.info('‚èπÔ∏è Stopping Circuit Breaker...', null, 'Game');\n    \n    // Record session end event\n    this.statsManager.recordEvent({\n      type: 'session_end',\n      timestamp: Date.now(),\n    });\n    \n    this.gameLoop.stop();\n    this.isRunning = false;\n  }\n\n  /**\n   * Get the current game state object.\n   */\n  public getGameState(): GameState {\n    return this.gameState;\n  }\n\n  /**\n   * Check if the game is currently running.\n   */\n  public isGameRunning(): boolean {\n    return this.isRunning && this.gameLoop.isGameLoopRunning();\n  }\n\n  /**\n   * Start a new game (used when clicking from menu)\n   */\n  private startNewGame(): void {\n    logger.info('üéÆ Starting new game...', null, 'Game');\n\n    // Record game start event\n    this.statsManager.recordEvent({\n      type: 'game_start',\n      timestamp: Date.now(),\n    });\n\n    // Update game progress\n    this.gameProgress.gamesPlayed++;\n    this.sessionStartTime = Date.now();\n\n    // Reset game state\n    this.gameState.setState(GameStateType.PLAYING);\n    this.gameState.updateStateData({\n      currentLevel: 1,\n      score: 0,\n      lives: 3,\n    });\n\n    // Load first level\n    this.currentLevel = this.levelManager.loadLevel(1);\n    if (this.currentLevel) {\n      this.currentLevel.start();\n      this.levelCompletionHandled = false;\n      \n      logger.info('üéØ Level 1 loaded and started', null, 'Game');\n    }\n\n    // Reset tilting bar to starting position\n    this.tiltingBar.reset();\n\n    // Reset ball to starting position on the bar\n    this.placeBallOnBar();\n\n    // Switch to gameplay music\n    this.playGameplayMusic();\n\n    logger.info('üöÄ New game started successfully!', null, 'Game');\n  }\n\n  /**\n   * Update hole animation if active\n   */\n  private updateHoleAnimation(_deltaTime: number): void {\n    if (!this.holeAnimationState) return;\n\n    const elapsed = Date.now() - this.holeAnimationState.startTime;\n    const progress = Math.min(elapsed / this.holeAnimationState.duration, 1);\n\n    // Easing function for more natural animation (starts fast, slows down)\n    const easedProgress = 1 - Math.pow(1 - progress, 3);\n\n    // Update animation properties\n    this.holeAnimationState.scale = 1 - easedProgress * 0.9; // Scale down to 10% of original (more dramatic)\n    this.holeAnimationState.opacity = 1 - easedProgress * 0.7; // Fade to 30% opacity\n\n    // Move ball towards hole center initially, then down behind playfield\n    const ball = this.physicsEngine\n      .getObjects()\n      .find(obj => obj.id === this.holeAnimationState?.ballId);\n    if (ball) {\n      const startPos = this.holeAnimationState.startPosition;\n      const holePos = this.holeAnimationState.holePosition;\n\n      if (progress < 0.3) {\n        // First 30% of animation: move towards hole center\n        const moveProgress = progress / 0.3;\n        ball.position.x = startPos.x + (holePos.x - startPos.x) * moveProgress;\n        ball.position.y = startPos.y + (holePos.y - startPos.y) * moveProgress;\n      } else {\n        // Remaining 70%: fall straight down behind playfield\n        const fallProgress = (progress - 0.3) / 0.7;\n        ball.position.x = holePos.x; // Stay at hole center horizontally\n        ball.position.y = holePos.y + fallProgress * 200; // Fall 200 pixels down behind playfield\n      }\n\n      // Update previous position to prevent physics interference\n      ball.previousPosition.x = ball.position.x;\n      ball.previousPosition.y = ball.position.y;\n\n      // Stop ball physics\n      ball.velocity.x = 0;\n      ball.velocity.y = 0;\n    }\n\n    // Complete animation\n    if (progress >= 1) {\n      this.completeHoleAnimation();\n    }\n  }\n\n  /**\n   * Start hole animation when ball enters a hole\n   */\n  private startHoleAnimation(\n    ballId: string,\n    holePosition: { x: number; y: number },\n    isGoalHole: boolean = false,\n    isPowerUpHole: boolean = false,\n  ): void {\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === ballId);\n    if (!ball) return;\n\n    logger.debug(`üé¨ Starting hole animation for ball: ${ballId} (goal: ${isGoalHole}, power-up: ${isPowerUpHole})`, null, 'Game');\n\n    this.isAnimatingHoleFall = true;\n    this.holeAnimationState = {\n      ballId: ballId,\n      holePosition: holePosition,\n      startTime: Date.now(),\n      duration: 500, // Faster animation: 500ms instead of 800ms\n      startPosition: { x: ball.position.x, y: ball.position.y },\n      scale: 1,\n      opacity: 1,\n      isGoalHole: isGoalHole,\n      isPowerUpHole: isPowerUpHole,\n    };\n  }\n\n  /**\n   * Complete hole animation and reset ball\n   */\n  private completeHoleAnimation(): void {\n    if (!this.holeAnimationState) return;\n\n    const isGoalHole = this.holeAnimationState.isGoalHole;\n    const isPowerUpHole = this.holeAnimationState.isPowerUpHole;\n    logger.debug(`üé¨ Hole animation complete (goal: ${isGoalHole}, power-up: ${isPowerUpHole})`, null, 'Game');\n\n    this.isAnimatingHoleFall = false;\n    this.holeAnimationState = null;\n\n    // Handle differently based on hole type\n    if (isGoalHole) {\n      // Goal hole - just reset ball without losing life\n      this.resetBallAfterGoal();\n    } else if (isPowerUpHole) {\n      // Power-up hole - just reset ball without losing life (power-up already collected)\n      this.resetBallAfterGoal();\n    } else {\n      // Regular hole - lose life and reset\n      this.handleBallFallOff();\n    }\n  }\n\n  /**\n   * Check if any input is currently active\n   */\n  private hasAnyInput(): boolean {\n    const inputState = this.inputManager.getInputState();\n\n    // Check if any key is pressed\n    const hasKeyPress = Object.values(inputState.keys).some(pressed => pressed);\n\n    // Check if mouse is clicked\n    const hasMouseClick = inputState.mouse.isDown;\n\n    return hasKeyPress || hasMouseClick;\n  }\n\n  /**\n   * Start attract mode\n   */\n  private startAttractMode(): void {\n    logger.debug('üé¨ Entering attract mode', null, 'Game');\n    this.gameState.setState(GameStateType.ATTRACT_MODE);\n    this.attractModeTimer = 0;\n    this.menuTimer = 0;\n\n    // Start a level for attract mode demonstration\n    this.startAttractModeLevel();\n\n    // Continue playing menu music during attract mode\n    // (No need to change music since it's already playing from menu)\n  }\n\n  /**\n   * Exit attract mode and return to menu\n   */\n  private exitAttractMode(): void {\n    logger.debug('üè† Exiting attract mode', null, 'Game');\n    this.gameState.setState(GameStateType.MENU);\n    this.attractModeTimer = 0;\n    this.menuTimer = 0;\n\n    // Reset any ongoing game state\n    this.gameState.reset();\n\n    // Play UI click sound\n    this.audioManager.playSound('ui_click');\n\n    // Return to menu music\n    this.playMenuMusic();\n  }\n\n  /**\n   * Update attract mode auto-play\n   */\n  private updateAttractMode(deltaTime: number): void {\n    this.attractModeTimer += deltaTime;\n\n    // Auto-play logic - simple automated bar movement\n    const time = this.attractModeTimer / 1000; // Convert to seconds\n    const leftInput = Math.sin(time * 0.8) * 0.7; // Slow left side movement\n    const rightInput = Math.cos(time * 0.6) * 0.8; // Slow right side movement\n\n    // Apply automated input to tilting bar\n    this.tiltingBar.moveLeftSide(leftInput);\n    this.tiltingBar.moveRightSide(rightInput);\n    this.tiltingBar.update(deltaTime / 1000);\n\n    // Periodically place ball on bar for demonstration\n    if (Math.floor(time) % 8 === 0 && time % 8 < 0.1) {\n      this.placeBallOnBar();\n    }\n\n    // Update current level if exists\n    if (this.currentLevel) {\n      this.currentLevel.update(deltaTime);\n      this.checkCollisions();\n      this.checkWinLoseConditions();\n    }\n\n    // Reset attract mode after 30 seconds to prevent infinite loops\n    if (this.attractModeTimer > 30000) {\n      this.exitAttractMode();\n    }\n  }\n\n  /**\n   * Start a level for attract mode demonstration\n   */\n  private startAttractModeLevel(): void {\n    try {\n      // Load level 1 for demonstration (use same method as startNewGame)\n      this.currentLevel = this.levelManager.loadLevel(1);\n\n      if (this.currentLevel) {\n        logger.debug('üéÆ Starting attract mode level', null, 'Game');\n        this.currentLevel.start();\n\n        // Reset tilting bar to starting position\n        this.tiltingBar.reset();\n\n        // Place ball on bar\n        this.placeBallOnBar();\n\n        logger.debug('‚úÖ Attract mode level started successfully', null, 'Game');\n      } else {\n        logger.error('‚ùå Failed to load attract mode level', null, 'Game');\n        this.exitAttractMode();\n      }\n    } catch (error) {\n      logger.error('‚ùå Error starting attract mode level:', error, 'Game');\n      this.exitAttractMode();\n    }\n  }\n\n  /**\n   * Play menu music\n   */\n  private async playMenuMusic(): Promise<void> {\n    try {\n      await this.audioManager.fadeToMusic('02-Delorean_Time.mp3', 1.0);\n      logger.debug('üéµ Menu music started (02-Delorean_Time.mp3)', null, 'Game');\n    } catch (error) {\n      logger.error('‚ùå Error playing menu music:', error, 'Game');\n    }\n  }\n\n  /**\n   * Play gameplay music\n   */\n  private async playGameplayMusic(): Promise<void> {\n    try {\n      await this.audioManager.fadeToMusic('Dead_Space.mp3', 1.0);\n      logger.debug('üéµ Gameplay music started', null, 'Game');\n    } catch (error) {\n      logger.error('‚ùå Error playing gameplay music:', error, 'Game');\n    }\n  }\n\n  /**\n   * Stop all music\n   */\n  // private stopMusic(): void {\n  //   this.audioManager.stopMusic();\n  // }\n\n  /**\n   * Get current loading progress (0-100)\n   */\n  public getLoadingProgress(): number {\n    return this.loadingProgress;\n  }\n\n  /**\n   * Get current loading status message\n   */\n  public getLoadingStatus(): string {\n    return this.loadingStatus;\n  }\n\n  /**\n   * Check if loading is complete and waiting for user input\n   */\n  public isLoadingComplete(): boolean {\n    return this.loadingComplete;\n  }\n\n  /**\n   * Start the asset loading process\n   */\n  private async startAssetLoading(): Promise<void> {\n    logger.info('üì¶ Starting asset loading...', null, 'Game');\n\n    // Define all assets that need to be loaded\n    this.assetsToLoad = [\n      'Engage_II.mp3',\n      'Dead_Space.mp3',\n      'atlas_01.json',\n      'atlas_01.png',\n      'powerup_atlas_01.json',\n      'powerup_atlas_01.png',\n    ];\n\n    this.loadedAssets = 0;\n    this.loadingProgress = 0;\n    this.loadingStatus = 'Loading audio files...';\n    this.loadingComplete = false;\n\n    try {\n      // Load audio files\n      await this.loadAudioAssets();\n\n      // Load sprite atlas\n      this.loadingStatus = 'Loading sprite atlas...';\n      await this.loadSpriteAssets();\n\n      // Initialize fonts\n      this.loadingStatus = 'Loading fonts...';\n      await this.loadFonts();\n\n      // Complete loading\n      this.loadingProgress = 100;\n      this.loadingStatus = 'Press any key to continue...';\n      this.loadingComplete = true;\n\n      logger.info('‚úÖ All assets loaded successfully', null, 'Game');\n    } catch (error) {\n      logger.error('‚ùå Error loading assets:', error, 'Game');\n      this.loadingStatus = 'Loading failed - Press any key to continue...';\n      this.loadingComplete = true;\n    }\n  }\n\n  /**\n   * Load audio assets\n   */\n  private async loadAudioAssets(): Promise<void> {\n    const audioFiles = this.assetsToLoad.filter(asset =>\n      asset.endsWith('.mp3'),\n    );\n\n    for (let i = 0; i < audioFiles.length; i++) {\n      const filename = audioFiles[i];\n      this.loadingStatus = `Loading ${filename}...`;\n\n      try {\n        await this.audioManager.loadMusic(filename);\n        this.loadedAssets++;\n        this.updateLoadingProgress();\n        logger.debug(`‚úÖ Loaded audio: ${filename}`, null, 'Game');\n      } catch (error) {\n        logger.warn(`‚ö†Ô∏è Failed to load audio: ${filename}`, error, 'Game');\n        this.loadedAssets++;\n        this.updateLoadingProgress();\n      }\n\n      // Small delay to show progress\n      await this.delay(100);\n    }\n  }\n\n  /**\n   * Load sprite assets\n   */\n  private async loadSpriteAssets(): Promise<void> {\n    // The sprite atlas is already loaded by the renderer during init\n    // Just simulate loading for progress tracking\n    const spriteFiles = this.assetsToLoad.filter(\n      asset => asset.endsWith('.json') || asset.endsWith('.png'),\n    );\n\n    for (let i = 0; i < spriteFiles.length; i++) {\n      const filename = spriteFiles[i];\n      this.loadingStatus = `Loading ${filename}...`;\n\n      this.loadedAssets++;\n      this.updateLoadingProgress();\n\n      // Small delay to show progress\n      await this.delay(200);\n    }\n    \n    logger.info('‚úÖ Sprite assets loading simulation completed', null, 'Game');\n  }\n\n  /**\n   * Load fonts (simulate font loading)\n   */\n  private async loadFonts(): Promise<void> {\n    this.loadingStatus = 'Initializing fonts...';\n\n    // Fonts are already loaded through CSS, just simulate the process\n    await this.delay(300);\n\n    logger.debug('‚úÖ Fonts initialized', null, 'Game');\n  }\n\n  /**\n   * Update loading progress based on loaded assets\n   */\n  private updateLoadingProgress(): void {\n    this.loadingProgress = (this.loadedAssets / this.assetsToLoad.length) * 100;\n  }\n\n  /**\n   * Load game progress from storage\n   */\n  private loadGameProgress(): void {\n    try {\n      // Try to load existing progress\n      const savedProgress = this.storageManager.loadProgress(this.currentSaveSlot);\n      \n      if (savedProgress) {\n        this.gameProgress = savedProgress;\n        \n        // Load achievements\n        this.achievementManager.loadAchievements(Array.from(savedProgress.achievements));\n        \n        // Apply saved settings to audio manager\n        this.audioManager.setMasterVolume(savedProgress.settings.masterVolume);\n        this.audioManager.setMusicVolume(savedProgress.settings.musicVolume);\n        this.audioManager.setSFXVolume(savedProgress.settings.sfxVolume);\n        this.audioManager.setEnabled(savedProgress.settings.audioEnabled);\n        \n        logger.info(`üìÇ Loaded game progress from slot ${this.currentSaveSlot}`, null, 'Game');\n      } else {\n        // Create new progress\n        this.gameProgress = this.storageManager.createNewProgress();\n        logger.info('üÜï Created new game progress', null, 'Game');\n      }\n    } catch (error) {\n      logger.error('‚ùå Failed to load game progress:', error, 'Game');\n      this.gameProgress = this.storageManager.createNewProgress();\n    }\n  }\n\n  /**\n   * Save game progress to storage\n   */\n  private saveGameProgress(): boolean {\n    try {\n      // Update progress with current game state\n      this.updateGameProgress();\n      \n      // Save to storage\n      const success = this.storageManager.saveProgress(this.gameProgress, this.currentSaveSlot);\n      \n      if (success) {\n        logger.debug('üíæ Game progress saved', null, 'Game');\n      }\n      \n      return success;\n    } catch (error) {\n      logger.error('‚ùå Failed to save game progress:', error, 'Game');\n      return false;\n    }\n  }\n\n  /**\n   * Update game progress with current state\n   */\n  private updateGameProgress(): void {\n    if (!this.gameProgress) return;\n\n    const currentTime = Date.now();\n    \n    // Update play time\n    if (this.sessionStartTime > 0) {\n      this.gameProgress.playTime += currentTime - this.sessionStartTime;\n      this.sessionStartTime = currentTime;\n    }\n\n    // Update settings\n    const audioConfig = this.audioManager.getConfig();\n    this.gameProgress.settings = {\n      masterVolume: audioConfig.masterVolume,\n      musicVolume: audioConfig.musicVolume,\n      sfxVolume: audioConfig.sfxVolume,\n      audioEnabled: audioConfig.enabled,\n    };\n\n    // Update achievements\n    this.gameProgress.achievements = new Set(this.achievementManager.getUnlockedAchievementIds());\n  }\n\n  /**\n   * Check and update achievements based on current game state\n   */\n  private checkAchievements(): void {\n    if (!this.gameProgress) return;\n\n    const stateData = this.gameState.getStateData();\n    const currentTime = Date.now();\n    \n    // Calculate session play time\n    const sessionPlayTime = this.sessionStartTime > 0 ? currentTime - this.sessionStartTime : 0;\n    const totalPlayTime = this.gameProgress.playTime + sessionPlayTime;\n\n    // Prepare game stats for achievement checking\n    const gameStats = {\n      currentLevel: stateData.currentLevel || 1,\n      totalScore: stateData.score || 0,\n      lives: stateData.lives || 3,\n      goalsReached: this.gameProgress.totalGoalsReached,\n      levelsCompleted: this.gameProgress.completedLevels.size,\n      gamesPlayed: this.gameProgress.gamesPlayed,\n      totalPlayTime: totalPlayTime,\n      ballsLost: this.gameProgress.totalBallsLost,\n      perfectLevels: 0, // TODO: Track perfect levels\n      quickCompletions: 0, // TODO: Track quick completions\n    };\n\n    // Check achievements\n    this.achievementManager.checkAchievements(gameStats);\n  }\n\n  /**\n   * Auto-save game progress\n   */\n  private autoSave(): boolean {\n    const now = Date.now();\n    \n    // Only auto-save every 30 seconds\n    if (now - this.lastAutoSave < 30000) {\n      return false;\n    }\n\n    const success = this.saveGameProgress();\n    if (success) {\n      this.lastAutoSave = now;\n    }\n    \n    return success;\n  }\n\n  /**\n   * Complete the loading process and transition to menu\n   */\n  private async completeLoading(): Promise<void> {\n    logger.info('üéØ Loading complete - transitioning to menu', null, 'Game');\n    this.gameState.setState(GameStateType.MENU);\n\n    // Resume audio context on user interaction (required by browsers)\n    await this.audioManager.resumeContext();\n\n    // Start menu music\n    this.playMenuMusic();\n  }\n\n  /**\n   * Utility method for delays\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Open settings menu\n   */\n  public openSettings(): void {\n    this.gameState.setState(GameStateType.SETTINGS);\n    \n    // Update settings menu configuration based on current state\n    const isFromPauseMenu = this.gameState.isPaused();\n    this.settingsMenu = new SettingsMenu({\n      audioManager: this.audioManager,\n      onClose: () => this.closeSettings(),\n      onBackToMenu: () => this.backToMenuFromSettings(),\n      isFromPauseMenu,\n    });\n    \n    this.settingsMenu.show();\n    this.settingsMenu.updateVolumeDisplays();\n    logger.info(`‚öôÔ∏è Settings menu opened ${isFromPauseMenu ? 'from pause menu' : 'from main menu'}`, null, 'Game');\n  }\n\n  /**\n   * Close settings menu\n   */\n  private closeSettings(): void {\n    this.settingsMenu.hide();\n    \n    // Return to previous state\n    if (this.gameState.isPaused()) {\n      this.gameState.setState(GameStateType.PAUSED);\n    } else {\n      this.gameState.setState(GameStateType.MENU);\n    }\n    \n    logger.info('‚öôÔ∏è Settings menu closed', null, 'Game');\n  }\n\n  /**\n   * Return to main menu from settings\n   */\n  private backToMenuFromSettings(): void {\n    this.settingsMenu.hide();\n    this.gameState.setState(GameStateType.MENU);\n    logger.info('üè† Returned to main menu from settings', null, 'Game');\n  }\n\n  /**\n   * Open save/load menu\n   */\n  public openSaveLoadMenu(): void {\n    logger.info('üíæ Opening save/load menu', null, 'Game');\n    this.gameState.setState(GameStateType.SAVE_LOAD);\n    this.saveLoadMenu.show();\n  }\n\n  /**\n   * Close save/load menu\n   */\n  private closeSaveLoadMenu(): void {\n    logger.info('üíæ Closing save/load menu', null, 'Game');\n    this.saveLoadMenu.hide();\n    \n    // Return to previous state\n    if (this.gameState.isState(GameStateType.SAVE_LOAD)) {\n      this.gameState.setState(GameStateType.MENU);\n    }\n  }\n\n  /**\n   * Load game from save slot\n   */\n  private loadGameFromSlot(slotId: number): void {\n    logger.info(`üìÇ Loading game from slot ${slotId}`, null, 'Game');\n    \n    // Load progress from slot\n    const savedProgress = this.storageManager.loadProgress(slotId);\n    if (savedProgress) {\n      this.gameProgress = savedProgress;\n      this.currentSaveSlot = slotId;\n      \n      // Load achievements\n      this.achievementManager.loadAchievements(Array.from(savedProgress.achievements));\n      \n      // Apply saved settings\n      this.audioManager.setMasterVolume(savedProgress.settings.masterVolume);\n      this.audioManager.setMusicVolume(savedProgress.settings.musicVolume);\n      this.audioManager.setSFXVolume(savedProgress.settings.sfxVolume);\n      this.audioManager.setEnabled(savedProgress.settings.audioEnabled);\n      \n      // Start game with loaded progress\n      this.startNewGame();\n    } else {\n      logger.warn(`‚ö†Ô∏è No save data found in slot ${slotId}`, null, 'Game');\n    }\n  }\n\n  /**\n   * Start new game in save slot\n   */\n  private startNewGameInSlot(slotId: number): void {\n    logger.info(`üÜï Starting new game in slot ${slotId}`, null, 'Game');\n    \n    // Create new progress for this slot\n    this.gameProgress = this.storageManager.createNewProgress();\n    this.currentSaveSlot = slotId;\n    \n    // Start new game\n    this.startNewGame();\n  }\n\n  /**\n   * Delete save slot\n   */\n  private deleteSaveSlot(slotId: number): void {\n    logger.info(`üóëÔ∏è Deleting save slot ${slotId}`, null, 'Game');\n    this.storageManager.deleteSaveSlot(slotId);\n  }\n\n  /**\n   * Open stats menu\n   */\n  public openStatsMenu(): void {\n    logger.info('üìä Opening stats menu...', null, 'Game');\n    this.gameState.setState(GameStateType.STATS);\n  }\n\n  /**\n   * Close stats menu\n   */\n  private closeStatsMenu(): void {\n    logger.info('üìä Closing stats menu...', null, 'Game');\n    this.gameState.setState(GameStateType.MENU);\n  }\n}\n","// Circuit Breaker - Main Entry Point\n// A neon cyberpunk arcade game where players guide data packets through circuit boards\n\nimport './style.css';\nimport { Game } from './core/Game';\nimport { logger } from './utils/Logger';\n\n// Global game instance\nlet game: Game | null = null;\n\n/**\n * Initialize the game when DOM is ready\n */\nasync function initGame(): Promise<void> {\n  try {\n    logger.info('üöÄ Circuit Breaker - Loading...', null, 'Main');\n\n    // Create canvas element\n    const gameContainer = document.getElementById('game-container');\n    if (!gameContainer) {\n      throw new Error('Game container not found');\n    }\n\n    // Clear loading message and create canvas\n    gameContainer.innerHTML = '';\n    const canvas = document.createElement('canvas');\n    canvas.id = 'game-canvas';\n    canvas.width = 360; // 9:16 aspect ratio (mobile portrait)\n    canvas.height = 640;\n    gameContainer.appendChild(canvas);\n\n    // Create game instance\n    game = new Game();\n\n    // Initialize game systems (this will initialize the renderer and load sprites)\n    await game.init();\n\n    // Start the game\n    game.start();\n\n    // Expose game instance to window for testing\n    (window as any).game = game;\n\n    logger.info('‚úÖ Circuit Breaker loaded successfully', null, 'Main');\n  } catch (error) {\n    logger.error('‚ùå Failed to load Circuit Breaker:', error, 'Main');\n    showErrorMessage('Failed to load game. Please refresh the page.');\n  }\n}\n\n/**\n * Show error message to user\n */\nfunction showErrorMessage(message: string): void {\n  const gameContainer = document.getElementById('game-container');\n  if (gameContainer) {\n    gameContainer.innerHTML = `\n      <div style=\"text-align: center; color: #b600f9;\">\n        <h1>Circuit Breaker</h1>\n        <p>Error: ${message}</p>\n        <p>Please refresh the page to try again.</p>\n      </div>\n    `;\n  }\n}\n\n/**\n * Handle window resize\n */\nfunction handleResize(): void {\n  // TODO: Handle canvas resize and UI adjustments\n  logger.debug('üì± Window resized', null, 'Main');\n}\n\n/**\n * Handle page visibility change\n */\nfunction handleVisibilityChange(): void {\n  if (document.hidden) {\n    logger.debug('üëÅÔ∏è Page hidden - pausing game', null, 'Main');\n    game?.pause();\n  } else {\n    logger.debug('üëÅÔ∏è Page visible - resuming game', null, 'Main');\n    game?.resume();\n  }\n}\n\n/**\n * Handle before unload\n */\nfunction handleBeforeUnload(): void {\n  logger.debug('üëã Page unloading - stopping game', null, 'Main');\n  game?.stop();\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initGame);\n} else {\n  initGame();\n}\n\n// Add event listeners\nwindow.addEventListener('resize', handleResize);\ndocument.addEventListener('visibilitychange', handleVisibilityChange);\nwindow.addEventListener('beforeunload', handleBeforeUnload);\n\n// Export for debugging\nexport { game };\n"],"names":["LogLevel","_Logger","__publicField","level","message","data","context","entry","logMessage","levelStr","contextStr","log","count","Logger","logger","GameStateType","GameState","newState","previousState","__spreadValues","updates","state","enabled","_FontManager","__async","fontPromises","cyberpunksRegular","cyberpunksItalic","interceptorRegular","interceptorItalic","interceptorBold","interceptorBoldItalic","results","loadedCount","result","index","e","error","type","size","weight","fontFamily","ctx","FontManager","fontManager","GameLoop","gameState","renderer","physicsEngine","game","currentTime","deltaTime","scaledDeltaTime","powerUpEffects","_gameState","obj","pos","radius","manifolds","manifold","constraints","constraint","animationState","objects","dynamicObjects","staticObjects","collisionCount","loadingProgress","loadingStatus","isLoadingComplete","time","pulseAlpha","barWidth","barHeight","barX","barY","progressWidth","spinnerSize","spinnerX","spinnerY","rotation","x","y","debugStatus","debugColor","dialogWidth","dialogHeight","dialogX","dialogY","buttonY","_a","stateData","Debug","args","name","fn","start","end","condition","_SpriteAtlas","totalSprites","atlas","spriteCount","jsonPath","imagePath","jsonResponse","atlasData","atlasImage","resolve","reject","spriteName","atlasName","scale","frameData","cacheKey","cachedCanvas","canvas","allSprites","SpriteAtlas","spriteAtlas","Renderer","atlasPromise","spritePromises","_index","sprite","dpr","displayWidth","displayHeight","bar","endpoints","atlasLoaded","barFrame","barLength","barAngle","spriteScale","scaledSpriteWidth","tilesNeeded","barCenterX","barCenterY","i","tileX","tileY","remainingLength","tileWidth","obstacle","centerX","centerY","angle","length","startX","startY","endX","endY","port","hole","isCompleted","debugMode","isGoalHole","isPowerUpHole","isSaucerActive","enlargedRadius","activeColor","darkColor","darkerColor","powerUpColors","colors","icon","color","saucerState","pulseIntensity","sinkProgress","ringRadius","ringAlpha","spinAngle","spinRadius","x1","y1","x2","y2","ejectProgress","ringY","zone","ball","opacity","targetSize","spriteFrame","scaledRadius","mainGradient","reflectionGradient","highlightGradient","envGradient","centered","drawX","drawY","flipper","isLeft","bumper","isActive","spinner","animationFrame","width","height","PhysicsEngine","callback","velocity","objectId","now","cooldownKey","lastAudioTime","config","mass","_b","id","frameTime","dt","targetPos","velX","velY","gravityX","gravityY","objA","objB","dx","dy","distance","percent","offsetX","offsetY","_constraint","j","otherObj","maxDistance","minDistance","penetration","normal","separationX","separationY","relativeVelocity","velocityAlongNormal","restitution","impulse","closestPointOnCenterLine","distanceToCenterLine","__pow","barSurfaceDistance","collisionDistance","barVec","barTangent","barNormal","barSurfacePoint","velocityAlongTangent","friction","reflectedVelocity","collisionVelocity","_barNormal","currentTangentVelocity","gravityAlongSlope","rollingFriction","rollingResistance","slopeAcceleration","resistanceForce","frictionForce","newTangentVelocity","newVelocity","ballId","closestPoint","barThickness","_ballId","cells","cellKey","cell","minX","maxX","minY","maxY","point","lineStart","lineEnd","t","resistance","_friction","_energy","TiltingBar","input","_deltaTime","heightDifference","maxHeightRange","halfWidth","collisionThreshold","projection","ballPosition","ballVelocity","ballRadius","distanceToBar","penetrationDepth","correctedPosition","dotProduct","reflection","frictionFactor","bounceEnergy","multiplier","InputManager","leftSideInput","rightSideInput","action","key","isPressed","keyCode","justPressed","rect","tiltInput","mouseTilt","event","_event","touch","Level","levelData","_ballRadius","goalHole","screenBounds","goalId","timeBonus","holeId","h","kickAngle","kickDirection","sinkOffset","elapsed","kickData","LevelManager","levelId","holes","maxPowerUpsPerLevel","powerUpHoleConfigs","goalHoles","numGoals","attempts","validPosition","goalX","goalY","existingGoal","sections","sectionHeight","baseDensity","maxDensity","powerUpHolesCreated","section","sectionY","sectionDensity","holesInSection","existingHole","powerUpType","AudioManager","AudioContextConstructor","bounceBuffer","rollBuffer","zapBuffer","targetBuffer","completeBuffer","clickBuffer","hoverBuffer","slideBuffer","gameOverBuffer","powerupCollectBuffer","powerupActivateBuffer","shieldBreakBuffer","shieldActivateBuffer","sampleRate","buffer","envelope","fundamental","harmonic2","harmonic3","noise","rumble","highFreq","buzz","crackle","chime1","chime2","chime3","notes","noteLength","noteIndex","freq","tone","click","hover","slide","distortion","sparkle","glass","shatter","echo","hum","resonance","protection","soundId","volume","pitch","sound","source","gainNode","normalizedVelocity","filename","audioUrl","response","arrayBuffer","audioBuffer","loop","loadedBuffer","newFilename","fadeTime","fadeSteps","fadeInterval","volumeStep","Button","label","nineSlice","px","py","audioManager","wasHovered","_px","_py","Slider","min","max","value","handleX","onChange","newValue","SettingsMenu","onClose","onBackToMenu","isFromPauseMenu","newEnabled","slider","button","SaveLoadMenu","slotY","slotHeight","slotStartY","slotEndY","_x","_y","slots","slot","s","isSelected","isHovered","date","currentProgress","infoY","achievements","unlockedCount","a","ms","hours","minutes","text","duration","borderColor","AchievementNotification","achievement","progress","yOffset","easeProgress","notificationWidth","notificationHeight","gradient","rarityColors","rarityText","progressBarX","progressBarY","progressPercent","sparkleX","sparkleY","alpha","StatsMenu","tabs","tabWidth","tabY","tab","tabX","stats","summary","levelStats","performance","userAgent","session","status","statusColor","percentage","fillWidth","lastUpdated","seconds","StorageManager","slotId","serializedProgress","saveKey","savedData","parsedData","success","slotsData","updatedSlots","requiredFields","field","__spreadProps","_version","migrated","existingSlotIndex","slotData","b","used","keys","available","AchievementManager","gameStats","achievementId","notification","category","rarity","limit","olderThan","cutoff","n","current","unlocked","byCategory","byRarity","unlockedAchievementIds","StatsManager","exportData","jsonData","importedStats","levelStatsMap","totalPlayTime","gamesPlayed","completionRate","averageScore","favoriteLevel","maxCompletions","mostChallengingLevel","lowestRate","completionTime","score","_c","fps","savedStats","parsedStats","statsToSave","PowerUpType","PowerUpManager","expiredPowerUps","amount","ballType","theme","upgradeMultiplier","powerUpMultiplier","Game","originalIsBallHeld","originalGetHeldBallTarget","ballStartX","ballStartY","ballPhysics","mousePos","completedGoals","requiredGoals","activePowerUps","powerUpSprites","screenWidth","padding","powerUpPositions","charges","position","remaining","secondsRemaining","displayText","hitHole","currentScore","kickVelocity","currentLives","levelScore","nextLevelId","easedProgress","startPos","holePos","moveProgress","fallProgress","holePosition","inputState","hasKeyPress","pressed","hasMouseClick","leftInput","rightInput","audioFiles","asset","spriteFiles","savedProgress","audioConfig","sessionPlayTime","initGame","gameContainer","showErrorMessage","handleResize","handleVisibilityChange","handleBeforeUnload"],"mappings":"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"}