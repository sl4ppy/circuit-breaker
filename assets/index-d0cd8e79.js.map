{"version":3,"file":"index-d0cd8e79.js","sources":["../../src/core/GameState.ts","../../src/utils/FontManager.ts","../../src/core/GameLoop.ts","../../src/utils/Debug.ts","../../src/rendering/SpriteAtlas.ts","../../src/rendering/Renderer.ts","../../src/physics/PhysicsEngine.ts","../../src/core/TiltingBar.ts","../../src/input/InputManager.ts","../../src/core/Level.ts","../../src/audio/AudioManager.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["// Circuit Breaker - Game State Management\r\n// Handles different game states and transitions\r\n\r\nexport enum GameStateType {\r\n  MENU = 'menu',\r\n  PLAYING = 'playing',\r\n  PAUSED = 'paused',\r\n  CONFIRM_MENU = 'confirm_menu', // Confirmation dialog for returning to menu\r\n  LEVEL_COMPLETE = 'level_complete',\r\n  GAME_OVER = 'game_over',\r\n  LOADING = 'loading'\r\n}\r\n\r\nexport interface GameStateData {\r\n  currentLevel: number\r\n  score: number\r\n  lives: number\r\n  isPaused: boolean\r\n  isGameOver: boolean\r\n  debugMode: boolean\r\n}\r\n\r\nexport class GameState {\r\n  private currentState: GameStateType = GameStateType.MENU\r\n  private stateData: GameStateData = {\r\n    currentLevel: 1,\r\n    score: 0,\r\n    lives: 3,\r\n    isPaused: false,\r\n    isGameOver: false,\r\n    debugMode: false\r\n  }\r\n\r\n  constructor() {\r\n    console.log('üìä GameState initialized')\r\n  }\r\n\r\n  /**\r\n   * Get current game state\r\n   */\r\n  public getCurrentState(): GameStateType {\r\n    return this.currentState\r\n  }\r\n\r\n  /**\r\n   * Set game state\r\n   */\r\n  public setState(newState: GameStateType): void {\r\n    const previousState = this.currentState\r\n    this.currentState = newState\r\n    console.log(`üîÑ Game state changed: ${previousState} ‚Üí ${newState}`)\r\n  }\r\n\r\n  /**\r\n   * Get state data\r\n   */\r\n  public getStateData(): GameStateData {\r\n    return { ...this.stateData }\r\n  }\r\n\r\n  /**\r\n   * Update state data\r\n   */\r\n  public updateStateData(updates: Partial<GameStateData>): void {\r\n    this.stateData = { ...this.stateData, ...updates }\r\n  }\r\n\r\n  /**\r\n   * Check if current state is a specific type\r\n   */\r\n  public isState(state: GameStateType): boolean {\r\n    return this.currentState === state\r\n  }\r\n\r\n  /**\r\n   * Check if game is in playing state\r\n   */\r\n  public isPlaying(): boolean {\r\n    return this.currentState === GameStateType.PLAYING\r\n  }\r\n\r\n  /**\r\n   * Check if game is paused\r\n   */\r\n  public isPaused(): boolean {\r\n    return this.currentState === GameStateType.PAUSED\r\n  }\r\n\r\n  /**\r\n   * Check if game is over\r\n   */\r\n  public isGameOver(): boolean {\r\n    return this.currentState === GameStateType.GAME_OVER\r\n  }\r\n\r\n  /**\r\n   * Check if confirmation dialog is showing\r\n   */\r\n  public isConfirmingMenu(): boolean {\r\n    return this.currentState === GameStateType.CONFIRM_MENU\r\n  }\r\n\r\n  /**\r\n   * Check if debug mode is enabled\r\n   */\r\n  public isDebugMode(): boolean {\r\n    return this.stateData.debugMode\r\n  }\r\n\r\n  /**\r\n   * Toggle debug mode\r\n   */\r\n  public toggleDebugMode(): void {\r\n    this.stateData.debugMode = !this.stateData.debugMode\r\n    console.log(`üêõ Debug mode ${this.stateData.debugMode ? 'enabled' : 'disabled'}`)\r\n  }\r\n\r\n  /**\r\n   * Set debug mode\r\n   */\r\n  public setDebugMode(enabled: boolean): void {\r\n    this.stateData.debugMode = enabled\r\n    console.log(`üêõ Debug mode ${enabled ? 'enabled' : 'disabled'}`)\r\n  }\r\n\r\n  /**\r\n   * Reset game state to initial values\r\n   */\r\n  public reset(): void {\r\n    this.currentState = GameStateType.MENU\r\n    this.stateData = {\r\n      currentLevel: 1,\r\n      score: 0,\r\n      lives: 3,\r\n      isPaused: false,\r\n      isGameOver: false,\r\n      debugMode: false\r\n    }\r\n    console.log('üîÑ Game state reset')\r\n  }\r\n} ","// Circuit Breaker - Font Manager\r\n// Centralized font management for Canvas rendering\r\n\r\nexport class FontManager {\r\n  private static instance: FontManager\r\n  private fontsLoaded: boolean = false\r\n  \r\n  // Font definitions with fallbacks\r\n  private fonts = {\r\n    primary: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace',\r\n    display: 'Cyberpunks, Interceptor, \"Courier New\", monospace',\r\n    mono: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace'\r\n  }\r\n  \r\n  private constructor() {\r\n    this.loadFonts()\r\n  }\r\n  \r\n  public static getInstance(): FontManager {\r\n    if (!FontManager.instance) {\r\n      FontManager.instance = new FontManager()\r\n    }\r\n    return FontManager.instance\r\n  }\r\n  \r\n  /**\r\n   * Load custom fonts and check if they're available\r\n   */\r\n  private async loadFonts(): Promise<void> {\r\n    try {\r\n      // Check if fonts are available using CSS Font Loading API\r\n      if ('fonts' in document) {\r\n        // Create font faces with better error handling\r\n        const fontPromises: Promise<FontFace>[] = []\r\n        \r\n        // Load Cyberpunks font family (using relative paths for GitHub Pages compatibility)\r\n        try {\r\n          const cyberpunksRegular = new FontFace('Cyberpunks', 'url(\"./assets/fonts/Cyberpunks.otf\")')\r\n          const cyberpunksItalic = new FontFace('Cyberpunks', 'url(\"./assets/fonts/Cyberpunks Italic.otf\")', { style: 'italic' })\r\n          fontPromises.push(cyberpunksRegular.load(), cyberpunksItalic.load())\r\n        } catch (e) {\r\n          console.log('‚ö†Ô∏è Cyberpunks font creation failed:', e)\r\n        }\r\n        \r\n        // Load Interceptor font family (using relative paths for GitHub Pages compatibility) \r\n        try {\r\n          const interceptorRegular = new FontFace('Interceptor', 'url(\"./assets/fonts/Interceptor.otf\")')\r\n          const interceptorItalic = new FontFace('Interceptor', 'url(\"./assets/fonts/Interceptor Italic.otf\")', { style: 'italic' })\r\n          const interceptorBold = new FontFace('Interceptor', 'url(\"./assets/fonts/Interceptor Bold.otf\")', { weight: 'bold' })\r\n          const interceptorBoldItalic = new FontFace('Interceptor', 'url(\"./assets/fonts/Interceptor Bold Italic.otf\")', { weight: 'bold', style: 'italic' })\r\n          fontPromises.push(interceptorRegular.load(), interceptorItalic.load(), interceptorBold.load(), interceptorBoldItalic.load())\r\n        } catch (e) {\r\n          console.log('‚ö†Ô∏è Interceptor font creation failed:', e)\r\n        }\r\n        \r\n        if (fontPromises.length > 0) {\r\n          // Load fonts with individual error handling\r\n          const results = await Promise.allSettled(fontPromises)\r\n          \r\n          let loadedCount = 0\r\n          results.forEach((result, index) => {\r\n            if (result.status === 'fulfilled') {\r\n              try {\r\n                document.fonts.add(result.value)\r\n                loadedCount++\r\n              } catch (e) {\r\n                console.log(`‚ö†Ô∏è Failed to add font ${index} to document:`, e)\r\n              }\r\n            } else {\r\n              console.log(`‚ö†Ô∏è Font ${index} failed to load:`, result.reason)\r\n            }\r\n          })\r\n          \r\n          if (loadedCount > 0) {\r\n            this.fontsLoaded = true\r\n            console.log(`üé® Loaded ${loadedCount}/${fontPromises.length} custom fonts successfully`)\r\n          } else {\r\n            this.fontsLoaded = false\r\n            console.log('‚ö†Ô∏è No custom fonts loaded, using fallbacks')\r\n          }\r\n        } else {\r\n          this.fontsLoaded = false\r\n          console.log('‚ö†Ô∏è No fonts could be created, using fallbacks')\r\n        }\r\n      } else {\r\n        this.fontsLoaded = false\r\n        console.log('‚ö†Ô∏è Font Loading API not available, using fallbacks')\r\n      }\r\n    } catch (error) {\r\n      console.log('‚ö†Ô∏è Font loading completely failed, using fallbacks:', error)\r\n      this.fontsLoaded = false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get font string for Canvas context\r\n   */\r\n  public getFont(type: 'primary' | 'display' | 'mono', size: number, weight: 'normal' | 'bold' = 'normal'): string {\r\n    const fontFamily = this.fonts[type]\r\n    return `${weight} ${size}px ${fontFamily}`\r\n  }\r\n  \r\n  /**\r\n   * Set font on Canvas context\r\n   */\r\n  public setFont(ctx: CanvasRenderingContext2D, type: 'primary' | 'display' | 'mono', size: number, weight: 'normal' | 'bold' = 'normal'): void {\r\n    ctx.font = this.getFont(type, size, weight)\r\n  }\r\n  \r\n  /**\r\n   * Check if custom fonts are loaded\r\n   */\r\n  public areFontsLoaded(): boolean {\r\n    return this.fontsLoaded\r\n  }\r\n  \r\n  /**\r\n   * Preload fonts (call this early in initialization)\r\n   */\r\n  public async preloadFonts(): Promise<void> {\r\n    if (!this.fontsLoaded) {\r\n      await this.loadFonts()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get available font types\r\n   */\r\n  public getFontTypes(): string[] {\r\n    return Object.keys(this.fonts)\r\n  }\r\n  \r\n  /**\r\n   * Check if specific font family is available\r\n   */\r\n  public isFontAvailable(fontFamily: string): boolean {\r\n    if (!('fonts' in document)) return false\r\n    return document.fonts.check(`12px ${fontFamily}`)\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const fontManager = FontManager.getInstance() ","// Circuit Breaker - Game Loop\r\n// Handles the main game loop with fixed timestep and performance optimization\r\n\r\nimport { GameState, GameStateType } from './GameState'\r\nimport { Renderer } from '../rendering/Renderer'\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine'\r\nimport { Debug } from '../utils/Debug'\r\nimport { fontManager } from '../utils/FontManager'\r\n\r\nexport class GameLoop {\r\n  private animationId: number | null = null\r\n  private lastTime: number = 0\r\n  private accumulator: number = 0\r\n  private readonly timestep: number = 1000 / 60 // 60 FPS\r\n  private isRunning: boolean = false\r\n  private isPaused: boolean = false\r\n  private renderer: Renderer | null = null\r\n  private physicsEngine: PhysicsEngine | null = null\r\n  private game: any = null\r\n\r\n  constructor() {\r\n    console.log('üîÑ GameLoop initialized')\r\n  }\r\n\r\n  /**\r\n   * Start the game loop\r\n   */\r\n  public start(gameState: GameState, renderer?: Renderer, physicsEngine?: PhysicsEngine, game?: any): void {\r\n    if (this.isRunning) {\r\n      console.warn('‚ö†Ô∏è Game loop is already running')\r\n      return\r\n    }\r\n\r\n    this.renderer = renderer || null\r\n    this.physicsEngine = physicsEngine || null\r\n    this.game = game || null\r\n\r\n    this.isRunning = true\r\n    this.isPaused = false\r\n    this.lastTime = performance.now()\r\n    this.accumulator = 0\r\n\r\n    console.log('‚ñ∂Ô∏è Game loop started')\r\n    this.gameLoop(gameState)\r\n  }\r\n\r\n  /**\r\n   * Main game loop with fixed timestep\r\n   */\r\n  private gameLoop(gameState: GameState): void {\r\n    if (!this.isRunning) return\r\n\r\n    const currentTime = performance.now()\r\n    const deltaTime = currentTime - this.lastTime\r\n    this.lastTime = currentTime\r\n\r\n    // Accumulate time\r\n    this.accumulator += deltaTime\r\n\r\n    // Update with fixed timestep\r\n    while (this.accumulator >= this.timestep) {\r\n      if (!this.isPaused) {\r\n        this.update(gameState, this.timestep)\r\n      }\r\n      this.accumulator -= this.timestep\r\n    }\r\n\r\n    // Render\r\n    this.render(gameState)\r\n\r\n    // Continue loop\r\n    this.animationId = requestAnimationFrame(() => this.gameLoop(gameState))\r\n  }\r\n\r\n  /**\r\n   * Update game logic\r\n   */\r\n  private update(_gameState: GameState, deltaTime: number): void {\r\n    // Update game logic if available\r\n    if (this.game && this.game.update) {\r\n      this.game.update(deltaTime)\r\n    }\r\n\r\n    // Update physics if available\r\n    if (this.physicsEngine) {\r\n      this.physicsEngine.update(deltaTime)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the game\r\n   */\r\n  private render(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    // Clear canvas\r\n    this.renderer.clear()\r\n\r\n    // Render game based on state\r\n    if (gameState.isPlaying()) {\r\n      this.renderGameplay(gameState)\r\n    } else if (gameState.isState(GameStateType.MENU)) {\r\n      this.renderMenu(gameState)\r\n    } else if (gameState.isState(GameStateType.PAUSED)) {\r\n      this.renderPaused()\r\n    } else if (gameState.isState(GameStateType.CONFIRM_MENU)) {\r\n      this.renderConfirmDialog(gameState)\r\n    } else if (gameState.isState(GameStateType.GAME_OVER)) {\r\n      this.renderGameOver(gameState)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render gameplay\r\n   */\r\n  private renderGameplay(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground()\r\n\r\n    // Draw all physics objects except balls first\r\n    if (this.physicsEngine) {\r\n      for (const obj of this.physicsEngine.getObjects()) {\r\n        // Skip balls - we'll draw them last\r\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\r\n          continue\r\n        }\r\n        \r\n        // Render other objects as simple circles\r\n        ctx.beginPath()\r\n        const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 }\r\n        const radius = obj.radius || 10\r\n        ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2)\r\n        \r\n        // Different colors for different object types\r\n        if (obj.isStatic) {\r\n          ctx.fillStyle = '#ff0066' // Red for static obstacles\r\n          ctx.shadowColor = '#ff0066'\r\n        } else {\r\n          ctx.fillStyle = '#00ffff' // Cyan for dynamic objects\r\n          ctx.shadowColor = '#00ffff'\r\n        }\r\n        \r\n        ctx.shadowBlur = 16\r\n        ctx.fill()\r\n        ctx.shadowBlur = 0\r\n        ctx.closePath()\r\n\r\n        // Debug info for non-ball objects - only show if debug mode is enabled\r\n        if (gameState.isDebugMode() && this.physicsEngine.getDebug && this.physicsEngine.getDebug()) {\r\n          // Draw velocity vectors for debugging\r\n          if (!obj.isStatic && obj.velocity) {\r\n            const velScale = 3 // Reduced scale for performance\r\n            ctx.beginPath()\r\n            ctx.moveTo(pos.x, pos.y)\r\n            ctx.lineTo(pos.x + obj.velocity.x * velScale, pos.y + obj.velocity.y * velScale)\r\n            ctx.strokeStyle = '#ffff00'\r\n            ctx.lineWidth = 1\r\n            ctx.stroke()\r\n            ctx.closePath()\r\n          }\r\n\r\n          // Draw minimal object info\r\n          ctx.fillStyle = '#ffffff'\r\n          ctx.font = '8px Courier New'\r\n          ctx.textAlign = 'center'\r\n          ctx.fillText(obj.id, pos.x, pos.y - radius - 5)\r\n        }\r\n      }\r\n\r\n      // Only draw debug info when debug mode is enabled\r\n      if (gameState.isDebugMode() && this.physicsEngine.getDebug && this.physicsEngine.getDebug()) {\r\n        // Draw collision manifolds for debugging\r\n        if (this.physicsEngine.getCollisionManifolds) {\r\n          const manifolds = this.physicsEngine.getCollisionManifolds()\r\n          for (const manifold of manifolds) {\r\n            // Draw collision point\r\n            ctx.beginPath()\r\n            ctx.arc(manifold.contactPoint.x, manifold.contactPoint.y, 2, 0, Math.PI * 2)\r\n            ctx.fillStyle = '#ff0000'\r\n            ctx.fill()\r\n            ctx.closePath()\r\n          }\r\n        }\r\n\r\n        // Draw constraints for debugging\r\n        if (this.physicsEngine.getConstraints) {\r\n          const constraints = this.physicsEngine.getConstraints()\r\n          for (const constraint of constraints) {\r\n            if (constraint.type === 'distance' && constraint.objectB) {\r\n              // Draw distance constraint as a line\r\n              ctx.beginPath()\r\n              ctx.moveTo(constraint.objectA.position.x, constraint.objectA.position.y)\r\n              ctx.lineTo(constraint.objectB.position.x, constraint.objectB.position.y)\r\n              ctx.strokeStyle = '#00ff00'\r\n              ctx.lineWidth = 1\r\n              ctx.setLineDash([3, 3])\r\n              ctx.stroke()\r\n              ctx.setLineDash([])\r\n              ctx.closePath()\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Draw placeholder text - only in debug mode\r\n    if (gameState.isDebugMode()) {\r\n      ctx.fillStyle = '#00ffff'\r\n      ctx.font = '20px Courier New'\r\n      ctx.textAlign = 'center'\r\n      ctx.fillText('Circuit Breaker', 180, 40)\r\n      ctx.font = '12px Courier New'\r\n      ctx.fillText('Robust Physics System Active', 180, 60)\r\n    }\r\n    \r\n    // Call game's render method for additional elements (holes, UI, etc.)\r\n    if (this.game && this.game.renderGameplay) {\r\n      this.game.renderGameplay()\r\n    }\r\n\r\n    // Draw balls LAST so they appear on top of everything\r\n    if (this.physicsEngine) {\r\n      for (const obj of this.physicsEngine.getObjects()) {\r\n        // Only render balls\r\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\r\n          if (this.renderer) {\r\n            // Get animation state from game if available\r\n            const animationState = this.game && this.game.getHoleAnimationState ? \r\n              this.game.getHoleAnimationState() : null\r\n            this.renderer.drawChromeBall(obj, animationState)\r\n          }\r\n\r\n          // Debug info for balls - only show if debug mode is enabled\r\n          if (gameState.isDebugMode() && this.physicsEngine.getDebug && this.physicsEngine.getDebug()) {\r\n            const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 }\r\n            const radius = obj.radius || 10\r\n            \r\n            // Draw velocity vectors for debugging\r\n            if (!obj.isStatic && obj.velocity) {\r\n              const velScale = 3 // Reduced scale for performance\r\n              ctx.beginPath()\r\n              ctx.moveTo(pos.x, pos.y)\r\n              ctx.lineTo(pos.x + obj.velocity.x * velScale, pos.y + obj.velocity.y * velScale)\r\n              ctx.strokeStyle = '#ffff00'\r\n              ctx.lineWidth = 1\r\n              ctx.stroke()\r\n              ctx.closePath()\r\n            }\r\n\r\n            // Draw minimal object info\r\n            ctx.fillStyle = '#ffffff'\r\n            ctx.font = '8px Courier New'\r\n            ctx.textAlign = 'center'\r\n            ctx.fillText(obj.id, pos.x, pos.y - radius - 5)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enhanced debug info - only show if debug mode is enabled\r\n    if (gameState.isDebugMode() && this.physicsEngine) {\r\n      const objects = this.physicsEngine.getObjects()\r\n      const dynamicObjects = objects.filter(obj => !obj.isStatic).length\r\n      const staticObjects = objects.filter(obj => obj.isStatic).length\r\n      \r\n      ctx.font = '10px Courier New'\r\n      ctx.textAlign = 'left'\r\n      ctx.fillStyle = '#00ffff'\r\n      ctx.fillText(`Objects: ${dynamicObjects} dynamic, ${staticObjects} static`, 10, 610)\r\n      ctx.fillText(`Gravity: ${this.physicsEngine.getGravity()}`, 10, 625)\r\n      \r\n      // Show collision count\r\n      if (this.physicsEngine.getCollisionManifolds) {\r\n        const collisionCount = this.physicsEngine.getCollisionManifolds().length\r\n        ctx.fillText(`Collisions: ${collisionCount}`, 200, 610)\r\n      }\r\n      \r\n      // Show physics performance info\r\n      ctx.fillText(`Physics: Optimized Verlet (1 substep)`, 10, 595)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render menu\r\n   */\r\n  private renderMenu(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground()\r\n\r\n    // Draw subtle grid pattern\r\n    ctx.strokeStyle = '#003366'\r\n    ctx.lineWidth = 1\r\n    ctx.globalAlpha = 0.3\r\n    \r\n    // Vertical lines\r\n    for (let x = 0; x <= 360; x += 20) {\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, 0)\r\n      ctx.lineTo(x, 640)\r\n      ctx.stroke()\r\n    }\r\n    \r\n    // Horizontal lines  \r\n    for (let y = 0; y <= 640; y += 20) {\r\n      ctx.beginPath()\r\n      ctx.moveTo(0, y)\r\n      ctx.lineTo(360, y)\r\n      ctx.stroke()\r\n    }\r\n    \r\n    ctx.globalAlpha = 1\r\n\r\n    // Draw main title with neon glow\r\n    ctx.save()\r\n    ctx.shadowColor = '#00f0ff' // Electric Blue\r\n    ctx.shadowBlur = 20\r\n    ctx.fillStyle = '#b600f9' // Neon Purple\r\n    fontManager.setFont(ctx, 'display', 72, 'bold')\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('CIRCUIT', 180, 120)\r\n    ctx.fillText('BREAKER', 180, 180)\r\n    ctx.restore()\r\n\r\n    // Draw subtitle\r\n    ctx.fillStyle = '#b600f9' // Neon Purple\r\n    fontManager.setFont(ctx, 'primary', 16)\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('NEON CYBERPUNK PINBALL', 180, 280)\r\n\r\n    // Draw description\r\n    ctx.fillStyle = '#ffffff'\r\n    fontManager.setFont(ctx, 'primary', 12)\r\n    ctx.fillText('Navigate the ball through cyber holes', 180, 320)\r\n    ctx.fillText('to reach all goals and break the circuit', 180, 340)\r\n\r\n    // Draw start instruction with pulse effect\r\n    const time = Date.now()\r\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 500)\r\n    ctx.save()\r\n    ctx.globalAlpha = pulseAlpha\r\n    ctx.shadowColor = '#00ff99' // Acid Green\r\n    ctx.shadowBlur = 10\r\n    ctx.fillStyle = '#00ff99' // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold')\r\n    ctx.fillText('CLICK OR PRESS SPACE TO START', 180, 420)\r\n    ctx.restore()\r\n\r\n    // Draw controls\r\n    ctx.fillStyle = '#888888'\r\n    fontManager.setFont(ctx, 'primary', 10)\r\n    ctx.fillText('CONTROLS:', 180, 480)\r\n    ctx.fillText('A/Z - Left Side Up/Down', 180, 500)\r\n    ctx.fillText('‚Üë/‚Üì - Right Side Up/Down', 180, 520)\r\n    ctx.fillText('SPACE - Start/Place Ball', 180, 540)\r\n    ctx.fillText('D - Toggle Debug Mode', 180, 560)\r\n\r\n    // Draw debug mode status\r\n    const debugStatus = gameState.isDebugMode() ? 'ON' : 'OFF'\r\n    const debugColor = gameState.isDebugMode() ? '#00ff99' : '#b600f9' // Acid Green or Neon Purple\r\n    ctx.fillStyle = debugColor\r\n    fontManager.setFont(ctx, 'primary', 12)\r\n    ctx.fillText(`DEBUG MODE: ${debugStatus}`, 180, 460)\r\n\r\n    // Draw version info\r\n    ctx.fillStyle = '#444444'\r\n    fontManager.setFont(ctx, 'primary', 8)\r\n    ctx.fillText('Circuit Breaker v0.3.0', 180, 590)\r\n  }\r\n\r\n  /**\r\n   * Render paused state\r\n   */\r\n  private renderPaused(): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw paused overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\r\n    ctx.fillRect(0, 0, 360, 640)\r\n\r\n    ctx.fillStyle = '#00f0ff' // Electric Blue\r\n    ctx.font = '20px Courier New'\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('PAUSED', 180, 320)\r\n  }\r\n\r\n  /**\r\n   * Render confirmation dialog\r\n   */\r\n  private renderConfirmDialog(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // First render the current gameplay in the background (dimmed)\r\n    this.renderGameplay(gameState)\r\n\r\n    // Draw semi-transparent overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)'\r\n    ctx.fillRect(0, 0, 360, 640)\r\n\r\n    // Draw dialog box background\r\n    const dialogWidth = 280\r\n    const dialogHeight = 160\r\n    const dialogX = (360 - dialogWidth) / 2\r\n    const dialogY = (640 - dialogHeight) / 2\r\n\r\n    // Draw dialog background with neon border\r\n    ctx.fillStyle = '#1a1a1a'\r\n    ctx.fillRect(dialogX, dialogY, dialogWidth, dialogHeight)\r\n    \r\n    ctx.strokeStyle = '#b600f9' // Neon Purple border\r\n    ctx.lineWidth = 3\r\n    ctx.shadowColor = '#b600f9'\r\n    ctx.shadowBlur = 10\r\n    ctx.strokeRect(dialogX, dialogY, dialogWidth, dialogHeight)\r\n    ctx.shadowBlur = 0\r\n\r\n    // Draw dialog title\r\n    ctx.fillStyle = '#b600f9' // Neon Purple\r\n    fontManager.setFont(ctx, 'primary', 18, 'bold')\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('RETURN TO MENU?', 180, dialogY + 40)\r\n\r\n    // Draw confirmation message\r\n    ctx.fillStyle = '#ffffff'\r\n    fontManager.setFont(ctx, 'primary', 12)\r\n    ctx.fillText('Your progress will be lost.', 180, dialogY + 70)\r\n    ctx.fillText('Are you sure?', 180, dialogY + 90)\r\n\r\n    // Draw buttons with glow effects\r\n    const buttonY = dialogY + 120\r\n    \r\n    // YES button (Electric Blue)\r\n    ctx.fillStyle = '#00f0ff'\r\n    ctx.shadowColor = '#00f0ff'\r\n    ctx.shadowBlur = 8\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold')\r\n    ctx.fillText('[Y] YES', 130, buttonY)\r\n    \r\n    // NO button (Acid Green)\r\n    ctx.fillStyle = '#00ff99'\r\n    ctx.shadowColor = '#00ff99'\r\n    ctx.shadowBlur = 8\r\n    ctx.fillText('[N] NO', 230, buttonY)\r\n    \r\n    ctx.shadowBlur = 0\r\n\r\n    // Draw instruction text\r\n    ctx.fillStyle = '#888888'\r\n    fontManager.setFont(ctx, 'primary', 10)\r\n    ctx.fillText('Press Y to confirm, N or ESC to cancel', 180, dialogY + 145)\r\n  }\r\n\r\n  /**\r\n   * Render game over state\r\n   */\r\n  private renderGameOver(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw dark background\r\n    this.renderer.drawBackground()\r\n\r\n    // Draw red alert grid\r\n    ctx.strokeStyle = '#330000'\r\n    ctx.lineWidth = 1\r\n    ctx.globalAlpha = 0.3\r\n    \r\n    // Vertical lines\r\n    for (let x = 0; x <= 360; x += 30) {\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, 0)\r\n      ctx.lineTo(x, 640)\r\n      ctx.stroke()\r\n    }\r\n    \r\n    // Horizontal lines\r\n    for (let y = 0; y <= 640; y += 30) {\r\n      ctx.beginPath()\r\n      ctx.moveTo(0, y)\r\n      ctx.lineTo(360, y)\r\n      ctx.stroke()\r\n    }\r\n    \r\n    ctx.globalAlpha = 1\r\n\r\n    // Draw GAME OVER with red glow\r\n    ctx.save()\r\n    ctx.shadowColor = '#b600f9' // Neon Purple\r\n    ctx.shadowBlur = 25\r\n    ctx.fillStyle = '#b600f9' // Neon Purple\r\n    fontManager.setFont(ctx, 'display', 28, 'bold')\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('GAME OVER', 180, 200)\r\n    ctx.restore()\r\n\r\n    // Draw circuit broken subtitle\r\n    ctx.fillStyle = '#ff6666'\r\n    fontManager.setFont(ctx, 'primary', 14)\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('CIRCUIT BREAKER MALFUNCTION', 180, 230)\r\n\r\n    // Get and display score\r\n    const stateData = gameState.getStateData()\r\n    ctx.fillStyle = '#ffffff'\r\n    fontManager.setFont(ctx, 'primary', 16)\r\n    ctx.fillText(`FINAL SCORE: ${stateData.score}`, 180, 280)\r\n    ctx.fillText(`LEVEL REACHED: ${stateData.currentLevel}`, 180, 310)\r\n\r\n    // Draw restart instruction with pulse effect\r\n    const time = Date.now()\r\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 400)\r\n    ctx.save()\r\n    ctx.globalAlpha = pulseAlpha\r\n    ctx.shadowColor = '#00ff99' // Acid Green\r\n    ctx.shadowBlur = 10\r\n    ctx.fillStyle = '#00ff99' // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold')\r\n    ctx.fillText('CLICK OR PRESS SPACE TO RETURN TO MENU', 180, 400)\r\n    ctx.restore()\r\n\r\n    // Draw system message\r\n    ctx.fillStyle = '#666666'\r\n    fontManager.setFont(ctx, 'primary', 10)\r\n    ctx.fillText('SYSTEM: Preparing for circuit restart...', 180, 480)\r\n  }\r\n\r\n  /**\r\n   * Pause the game loop\r\n   */\r\n  public pause(): void {\r\n    this.isPaused = true\r\n    console.log('‚è∏Ô∏è Game loop paused')\r\n  }\r\n\r\n  /**\r\n   * Resume the game loop\r\n   */\r\n  public resume(): void {\r\n    this.isPaused = false\r\n    console.log('‚ñ∂Ô∏è Game loop resumed')\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop\r\n   */\r\n  public stop(): void {\r\n    this.isRunning = false\r\n    if (this.animationId !== null) {\r\n      cancelAnimationFrame(this.animationId)\r\n      this.animationId = null\r\n    }\r\n    console.log('‚èπÔ∏è Game loop stopped')\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is running\r\n   */\r\n  public isGameLoopRunning(): boolean {\r\n    return this.isRunning\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is paused\r\n   */\r\n  public isGameLoopPaused(): boolean {\r\n    return this.isPaused\r\n  }\r\n\r\n  /**\r\n   * Get current FPS\r\n   */\r\n  public getFPS(): number {\r\n    return 1000 / this.timestep\r\n  }\r\n} ","// Circuit Breaker - Debug Utilities\r\n// Development and debugging tools\r\n\r\nexport class Debug {\r\n  private static isEnabled: boolean = true\r\n  private static logs: string[] = []\r\n  private static maxLogs: number = 100\r\n\r\n  /**\r\n   * Enable or disable debug mode\r\n   */\r\n  public static setEnabled(enabled: boolean): void {\r\n    this.isEnabled = enabled\r\n  }\r\n\r\n  /**\r\n   * Log a debug message\r\n   */\r\n  public static log(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] ${message}`\r\n    \r\n    console.log(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Log a warning message\r\n   */\r\n  public static warn(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] WARNING: ${message}`\r\n    \r\n    console.warn(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Log an error message\r\n   */\r\n  public static error(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] ERROR: ${message}`\r\n    \r\n    console.error(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Add message to internal logs\r\n   */\r\n  private static addToLogs(message: string): void {\r\n    this.logs.push(message)\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all debug logs\r\n   */\r\n  public static getLogs(): string[] {\r\n    return [...this.logs]\r\n  }\r\n\r\n  /**\r\n   * Clear all debug logs\r\n   */\r\n  public static clearLogs(): void {\r\n    this.logs = []\r\n  }\r\n\r\n  /**\r\n   * Measure performance of a function\r\n   */\r\n  public static measurePerformance<T>(name: string, fn: () => T): T {\r\n    if (!this.isEnabled) return fn()\r\n\r\n    const start = performance.now()\r\n    const result = fn()\r\n    const end = performance.now()\r\n    \r\n    this.log(`Performance [${name}]: ${(end - start).toFixed(2)}ms`)\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Create a performance timer\r\n   */\r\n  public static createTimer(name: string): () => void {\r\n    const start = performance.now()\r\n    return () => {\r\n      const end = performance.now()\r\n      this.log(`Timer [${name}]: ${(end - start).toFixed(2)}ms`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assert a condition\r\n   */\r\n  public static assert(condition: boolean, message: string): void {\r\n    if (!this.isEnabled) return\r\n\r\n    if (!condition) {\r\n      this.error(`Assertion failed: ${message}`)\r\n      throw new Error(`Assertion failed: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get memory usage info\r\n   */\r\n  public static getMemoryInfo(): object {\r\n    if (!this.isEnabled) return {}\r\n\r\n    // Note: This is limited in browsers, but useful for debugging\r\n    return {\r\n      logsCount: this.logs.length,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export debug info\r\n   */\r\n  public static exportDebugInfo(): object {\r\n    return {\r\n      enabled: this.isEnabled,\r\n      logs: this.getLogs(),\r\n      memory: this.getMemoryInfo()\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Sprite Atlas Manager\r\n// Efficient sprite loading and management using texture atlases\r\n\r\nimport { Debug } from '../utils/Debug.js'\r\n\r\nexport interface SpriteFrame {\r\n  x: number\r\n  y: number\r\n  w: number\r\n  h: number\r\n}\r\n\r\nexport interface AtlasData {\r\n  frames: { [key: string]: SpriteFrame }\r\n  meta: {\r\n    image: string\r\n    size: { w: number; h: number }\r\n    scale: number\r\n  }\r\n}\r\n\r\nexport class SpriteAtlas {\r\n  private static instance: SpriteAtlas\r\n  private atlasImage: HTMLImageElement | null = null\r\n  private atlasData: AtlasData | null = null\r\n  private isLoaded: boolean = false\r\n  private offscreenCanvases: Map<string, HTMLCanvasElement> = new Map()\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): SpriteAtlas {\r\n    if (!SpriteAtlas.instance) {\r\n      SpriteAtlas.instance = new SpriteAtlas()\r\n    }\r\n    return SpriteAtlas.instance\r\n  }\r\n\r\n  /**\r\n   * Load the sprite atlas image and JSON data\r\n   */\r\n  public async load(): Promise<void> {\r\n    try {\r\n      // Load atlas JSON data\r\n      const jsonResponse = await fetch('./assets/sprites/atlas_01.json')\r\n      if (!jsonResponse.ok) {\r\n        throw new Error(`Failed to load atlas JSON: ${jsonResponse.status}`)\r\n      }\r\n      this.atlasData = await jsonResponse.json()\r\n\r\n      // Load atlas image\r\n      this.atlasImage = new Image()\r\n      this.atlasImage.src = './assets/sprites/atlas_01.png'\r\n\r\n      await new Promise<void>((resolve, reject) => {\r\n        this.atlasImage!.onload = () => resolve()\r\n        this.atlasImage!.onerror = reject\r\n      })\r\n\r\n      this.isLoaded = true\r\n      Debug.log('üé® Sprite atlas loaded successfully with', Object.keys(this.atlasData?.frames || {}).length, 'sprites')\r\n    } catch (error) {\r\n      Debug.log('‚ùå Failed to load sprite atlas:', error)\r\n      this.isLoaded = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a sprite frame definition by name\r\n   */\r\n  public getFrame(spriteName: string): SpriteFrame | null {\r\n    if (!this.atlasData) return null\r\n    return this.atlasData.frames[spriteName] || null\r\n  }\r\n\r\n  /**\r\n   * Draw a sprite from the atlas to a canvas context\r\n   */\r\n  public drawSprite(\r\n    ctx: CanvasRenderingContext2D,\r\n    spriteName: string,\r\n    x: number,\r\n    y: number,\r\n    scale: number = 1\r\n  ): boolean {\r\n    if (!this.isLoaded || !this.atlasImage || !this.atlasData) {\r\n      return false\r\n    }\r\n\r\n    const frame = this.getFrame(spriteName)\r\n    if (!frame) {\r\n      Debug.log(`‚ö†Ô∏è Sprite not found: ${spriteName}`)\r\n      return false\r\n    }\r\n\r\n    ctx.drawImage(\r\n      this.atlasImage,\r\n      frame.x, frame.y, frame.w, frame.h,\r\n      x, y, frame.w * scale, frame.h * scale\r\n    )\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Get a cached canvas with a specific sprite pre-rendered\r\n   * Useful for sprites that are used frequently\r\n   */\r\n  public getSpriteCanvas(spriteName: string, scale: number = 1): HTMLCanvasElement | null {\r\n    const cacheKey = `${spriteName}_${scale}`\r\n    \r\n    if (this.offscreenCanvases.has(cacheKey)) {\r\n      return this.offscreenCanvases.get(cacheKey)!\r\n    }\r\n\r\n    if (!this.isLoaded || !this.atlasImage || !this.atlasData) {\r\n      return null\r\n    }\r\n\r\n    const frame = this.getFrame(spriteName)\r\n    if (!frame) return null\r\n\r\n    // Create offscreen canvas\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = frame.w * scale\r\n    canvas.height = frame.h * scale\r\n    \r\n    const ctx = canvas.getContext('2d')\r\n    if (!ctx) return null\r\n\r\n    // Draw sprite to offscreen canvas\r\n    ctx.drawImage(\r\n      this.atlasImage,\r\n      frame.x, frame.y, frame.w, frame.h,\r\n      0, 0, frame.w * scale, frame.h * scale\r\n    )\r\n\r\n    // Cache and return\r\n    this.offscreenCanvases.set(cacheKey, canvas)\r\n    return canvas\r\n  }\r\n\r\n  /**\r\n   * Get all available sprite names\r\n   */\r\n  public getSpriteNames(): string[] {\r\n    if (!this.atlasData) return []\r\n    return Object.keys(this.atlasData.frames)\r\n  }\r\n\r\n  /**\r\n   * Check if atlas is loaded\r\n   */\r\n  public isAtlasLoaded(): boolean {\r\n    return this.isLoaded\r\n  }\r\n\r\n  /**\r\n   * Get atlas dimensions\r\n   */\r\n  public getAtlasDimensions(): { width: number; height: number } | null {\r\n    if (!this.atlasData) return null\r\n    return {\r\n      width: this.atlasData.meta.size.w,\r\n      height: this.atlasData.meta.size.h\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear sprite cache\r\n   */\r\n  public clearCache(): void {\r\n    this.offscreenCanvases.clear()\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const spriteAtlas = SpriteAtlas.getInstance() ","// Circuit Breaker - Renderer\r\n// Handles canvas drawing and visual effects\r\n\r\nimport { Debug } from '../utils/Debug'\r\nimport { fontManager } from '../utils/FontManager'\r\nimport { spriteAtlas } from './SpriteAtlas.js'\r\n\r\nexport class Renderer {\r\n  private canvas: HTMLCanvasElement | null = null\r\n  private ctx: CanvasRenderingContext2D | null = null\r\n  private width: number = 800\r\n  private height: number = 600\r\n  \r\n  // Sprite images\r\n  private backgroundSprite: HTMLImageElement | null = null\r\n  private spritesLoaded: boolean = false\r\n\r\n  constructor() {\r\n    Debug.log('üé® Renderer initialized')\r\n    this.loadSprites()\r\n  }\r\n\r\n  /**\r\n   * Load sprite images and atlas\r\n   */\r\n  private async loadSprites(): Promise<void> {\r\n    try {\r\n      // Load background sprite (using relative paths for GitHub Pages compatibility)\r\n      this.backgroundSprite = new Image()\r\n      this.backgroundSprite.src = './assets/sprites/playfield_background_02.png'\r\n      \r\n      // Load sprite atlas\r\n      const atlasPromise = spriteAtlas.load()\r\n      \r\n      // Wait for background and atlas to load with individual error handling\r\n      const spritePromises = [\r\n        new Promise<string>((resolve, reject) => {\r\n          this.backgroundSprite!.onload = () => resolve('background')\r\n          this.backgroundSprite!.onerror = (e) => reject({ sprite: 'background', error: e })\r\n        }),\r\n        atlasPromise.then(() => 'atlas').catch((e) => Promise.reject({ sprite: 'atlas', error: e }))\r\n      ]\r\n      \r\n      const results = await Promise.allSettled(spritePromises)\r\n      \r\n      let loadedCount = 0\r\n      results.forEach((result, index) => {\r\n        if (result.status === 'fulfilled') {\r\n          loadedCount++\r\n          Debug.log(`‚úÖ ${result.value} loaded successfully`)\r\n        } else {\r\n          const { sprite, error } = result.reason\r\n          Debug.log(`‚ùå Failed to load ${sprite}:`, error)\r\n        }\r\n      })\r\n      \r\n      // Consider sprites loaded if at least one loads (background is optional, atlas provides balls)\r\n      this.spritesLoaded = loadedCount > 0\r\n      \r\n      if (loadedCount === 2) {\r\n        Debug.log('üé® All sprites and atlas loaded successfully')\r\n      } else if (loadedCount === 1) {\r\n        Debug.log('‚ö†Ô∏è Some sprites loaded, game will use fallbacks where needed')\r\n      } else {\r\n        Debug.log('‚ùå No sprites loaded, game will use fallbacks')\r\n      }\r\n      \r\n    } catch (error) {\r\n      Debug.log('‚ùå Sprite loading system failed:', error)\r\n      this.spritesLoaded = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the renderer with a canvas\r\n   */\r\n  public init(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas\r\n    this.ctx = canvas.getContext('2d')\r\n    \r\n    if (!this.ctx) {\r\n      throw new Error('Failed to get 2D context from canvas')\r\n    }\r\n\r\n    this.width = canvas.width\r\n    this.height = canvas.height\r\n    \r\n    Debug.log(`Renderer initialized with canvas: ${this.width}x${this.height}`)\r\n  }\r\n\r\n  /**\r\n   * Clear the canvas\r\n   */\r\n  public clear(): void {\r\n    if (!this.ctx) return\r\n    \r\n    this.ctx.clearRect(0, 0, this.width, this.height)\r\n  }\r\n\r\n  /**\r\n   * Draw the playfield background\r\n   */\r\n  public drawBackground(): void {\r\n    if (!this.ctx) return\r\n\r\n    if (this.backgroundSprite && this.spritesLoaded) {\r\n      // Draw the background image scaled to fit the playfield (360x640)\r\n      this.ctx.drawImage(this.backgroundSprite, 0, 0, 360, 640)\r\n    } else {\r\n      // Fallback to solid color background if image not loaded\r\n      this.ctx.fillStyle = '#1a1a1a'\r\n      this.ctx.fillRect(0, 0, 360, 640)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the game\r\n   */\r\n  public render(): void {\r\n    if (!this.ctx) return\r\n\r\n    // TODO: Implement rendering\r\n    // - Clear canvas\r\n    // - Draw background\r\n    // - Draw game objects\r\n    // - Draw UI elements\r\n    // - Apply visual effects\r\n  }\r\n\r\n  /**\r\n   * Draw a tilting bar with neon cyberpunk styling\r\n   */\r\n  public drawTiltingBar(bar: any): void {\r\n    if (!this.ctx) return\r\n\r\n    const endpoints = bar.getEndpoints()\r\n    \r\n    // Save context\r\n    this.ctx.save()\r\n    \r\n    // Draw glow effect\r\n    this.ctx.shadowColor = bar.glowColor\r\n    this.ctx.shadowBlur = 20\r\n    this.ctx.lineWidth = bar.thickness + 4\r\n    this.ctx.strokeStyle = bar.glowColor\r\n    this.ctx.globalAlpha = 0.3\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y)\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y)\r\n    this.ctx.stroke()\r\n    \r\n    // Draw main bar\r\n    this.ctx.shadowBlur = 0\r\n    this.ctx.globalAlpha = 1\r\n    this.ctx.lineWidth = bar.thickness\r\n    this.ctx.strokeStyle = bar.color\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y)\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y)\r\n    this.ctx.stroke()\r\n    \r\n    // Draw center pivot point\r\n    this.ctx.fillStyle = bar.color\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(bar.position.x, bar.position.y, 6, 0, Math.PI * 2)\r\n    this.ctx.fill()\r\n    \r\n\r\n    \r\n    // Restore context\r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw an obstacle with neon cyberpunk styling\r\n   */\r\n  public drawObstacle(obstacle: any): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n    \r\n    const centerX = obstacle.position.x + obstacle.size.x / 2\r\n    const centerY = obstacle.position.y + obstacle.size.y / 2\r\n    \r\n    switch (obstacle.type) {\r\n      case 'electrical_hazard':\r\n        // Draw electrical hazard with sparking effect\r\n        this.ctx.shadowColor = '#b600f9' // Neon Purple\r\n        this.ctx.shadowBlur = obstacle.isActive ? 15 : 5\r\n        this.ctx.fillStyle = obstacle.isActive ? '#b600f9' : '#660066' // Neon Purple\r\n        this.ctx.strokeStyle = '#d466ff' // Lighter purple\r\n        this.ctx.lineWidth = 2\r\n        \r\n        // Draw main hazard rectangle\r\n        this.ctx.fillRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        this.ctx.strokeRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        \r\n        // Draw sparks if active\r\n        if (obstacle.isActive) {\r\n          this.drawElectricalSparks(centerX, centerY, obstacle.size.x)\r\n        }\r\n        \r\n        // Draw warning symbol\r\n        this.ctx.fillStyle = '#00ff99' // Acid Green\r\n        this.ctx.font = '12px monospace'\r\n        this.ctx.textAlign = 'center'\r\n        this.ctx.fillText('‚ö°', centerX, centerY + 4)\r\n        break\r\n        \r\n      case 'barrier':\r\n        // Draw solid barrier\r\n        this.ctx.shadowColor = '#00f0ff' // Electric Blue\r\n        this.ctx.shadowBlur = 10\r\n        this.ctx.fillStyle = '#006677' // Darker blue\r\n        this.ctx.strokeStyle = '#00f0ff' // Electric Blue\r\n        this.ctx.lineWidth = 2\r\n        \r\n        this.ctx.fillRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        this.ctx.strokeRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        break\r\n        \r\n      case 'hole':\r\n        // Draw hole/pit\r\n        this.ctx.shadowColor = '#b600f9' // Neon Purple\r\n        this.ctx.shadowBlur = 8\r\n        this.ctx.fillStyle = '#220000' // Dark red\r\n        this.ctx.strokeStyle = '#b600f9' // Neon Purple\r\n        this.ctx.lineWidth = 2\r\n        \r\n        this.ctx.fillRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        this.ctx.strokeRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        break\r\n        \r\n      default:\r\n        // Draw generic obstacle\r\n        this.ctx.strokeStyle = '#ffffff'\r\n        this.ctx.lineWidth = 2\r\n        this.ctx.strokeRect(obstacle.position.x, obstacle.position.y, obstacle.size.x, obstacle.size.y)\r\n        break\r\n    }\r\n    \r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw electrical sparks effect\r\n   */\r\n  private drawElectricalSparks(centerX: number, centerY: number, size: number): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n    this.ctx.strokeStyle = '#ffffff'\r\n    this.ctx.lineWidth = 1\r\n    this.ctx.globalAlpha = 0.8\r\n    \r\n    // Draw random spark lines\r\n    for (let i = 0; i < 5; i++) {\r\n      const angle = Math.random() * Math.PI * 2\r\n      const length = Math.random() * size * 0.5\r\n      const startX = centerX + Math.cos(angle) * 5\r\n      const startY = centerY + Math.sin(angle) * 5\r\n      const endX = startX + Math.cos(angle) * length\r\n      const endY = startY + Math.sin(angle) * length\r\n      \r\n      this.ctx.beginPath()\r\n      this.ctx.moveTo(startX, startY)\r\n      this.ctx.lineTo(endX, endY)\r\n      this.ctx.stroke()\r\n    }\r\n    \r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw target port with neon cyberpunk styling\r\n   */\r\n  public drawTargetPort(port: any): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n    \r\n    const centerX = port.position.x\r\n    const centerY = port.position.y\r\n    \r\n    // Draw outer glow\r\n    this.ctx.shadowColor = port.color\r\n    this.ctx.shadowBlur = 20\r\n    this.ctx.fillStyle = port.color\r\n    this.ctx.globalAlpha = 0.3\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.arc(centerX, centerY, port.radius + 10, 0, Math.PI * 2)\r\n    this.ctx.fill()\r\n    \r\n    this.ctx.globalAlpha = 1\r\n    this.ctx.shadowBlur = 0\r\n    \r\n    // Draw port circle\r\n    this.ctx.fillStyle = port.isCompleted ? '#333333' : port.color\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2)\r\n    this.ctx.fill()\r\n    \r\n    // Draw port outline\r\n    this.ctx.strokeStyle = port.isCompleted ? '#666666' : port.color\r\n    this.ctx.lineWidth = 3\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2)\r\n    this.ctx.stroke()\r\n    \r\n    // Draw port symbol\r\n    this.ctx.fillStyle = '#ffffff'\r\n    this.ctx.font = '16px monospace'\r\n    this.ctx.textAlign = 'center'\r\n    this.ctx.fillText(port.isCompleted ? '‚úì' : '‚óã', centerX, centerY + 6)\r\n    \r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw a hole with neon cyberpunk styling\r\n   */\r\n  public drawHole(hole: any, isCompleted: boolean = false): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n    \r\n    const centerX = hole.position.x\r\n    const centerY = hole.position.y\r\n    \r\n    // Choose colors based on hole type\r\n    const isGoalHole = hole.isGoal\r\n    const activeColor = isGoalHole ? '#ff6600' : '#00ff99' // Neon Orange for goals, Acid Green for regular holes\r\n    const darkColor = isGoalHole ? '#441100' : '#004400' // Dark orange vs dark green\r\n    const darkerColor = isGoalHole ? '#220000' : '#002200' // Darker orange vs darker green\r\n    \r\n    // Draw outer glow\r\n    this.ctx.strokeStyle = activeColor\r\n    this.ctx.lineWidth = 3\r\n    this.ctx.globalAlpha = 0.5\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.arc(centerX, centerY, hole.radius + 5, 0, Math.PI * 2)\r\n    this.ctx.stroke()\r\n    \r\n    this.ctx.globalAlpha = 1\r\n    \r\n    // Draw hole interior\r\n    if (isCompleted) {\r\n      // Completed hole - show success state\r\n      this.ctx.shadowColor = activeColor\r\n      this.ctx.shadowBlur = 15\r\n      this.ctx.fillStyle = darkerColor\r\n      \r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius - 2, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n      \r\n      // Draw completion indicator\r\n      this.ctx.fillStyle = darkerColor\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius / 2, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n      \r\n      // Draw colored outline\r\n      this.ctx.strokeStyle = activeColor\r\n      this.ctx.lineWidth = 2\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius - 2, 0, Math.PI * 2)\r\n      this.ctx.stroke()\r\n      \r\n      // Draw checkmark\r\n      this.ctx.fillStyle = activeColor\r\n      this.ctx.font = '12px monospace'\r\n      this.ctx.textAlign = 'center'\r\n      this.ctx.fillText('‚úì', centerX, centerY + 4)\r\n    } else {\r\n      // Active hole - show glowing state\r\n      this.ctx.shadowColor = activeColor\r\n      this.ctx.shadowBlur = isGoalHole ? 15 : 10 // Stronger glow for goal holes\r\n      this.ctx.fillStyle = activeColor\r\n      this.ctx.globalAlpha = isGoalHole ? 0.8 : 0.6 // Brighter for goal holes\r\n      \r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius - 2, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n      \r\n      this.ctx.globalAlpha = 1\r\n      \r\n      // Draw inner dark area\r\n      this.ctx.fillStyle = darkColor\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius / 2, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n      \r\n      // Draw colored outline\r\n      this.ctx.strokeStyle = activeColor\r\n      this.ctx.lineWidth = 2\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(centerX, centerY, hole.radius - 2, 0, Math.PI * 2)\r\n      this.ctx.stroke()\r\n      \r\n      // Draw symbol - different for goal vs regular holes\r\n      this.ctx.fillStyle = '#ffffff'\r\n      this.ctx.font = '10px monospace'\r\n      this.ctx.textAlign = 'center'\r\n      this.ctx.fillText(isGoalHole ? 'üéØ' : '‚óè', centerX, centerY + 3)\r\n    }\r\n    \r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw danger zone with neon cyberpunk styling\r\n   */\r\n  public drawDangerZone(zone: any): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n    \r\n    const centerX = zone.position.x + zone.width / 2\r\n    const centerY = zone.position.y + zone.height / 2\r\n    \r\n    // Draw pulsing danger zone\r\n    this.ctx.shadowColor = '#b600f9' // Neon Purple\r\n    this.ctx.shadowBlur = 20\r\n    this.ctx.fillStyle = '#220000' // Dark red\r\n    this.ctx.globalAlpha = 0.7\r\n    \r\n    this.ctx.fillRect(zone.position.x, zone.position.y, zone.width, zone.height)\r\n    \r\n    this.ctx.globalAlpha = 1\r\n    \r\n    // Draw border\r\n    this.ctx.strokeStyle = '#b600f9' // Neon Purple\r\n    this.ctx.lineWidth = 3\r\n    this.ctx.strokeRect(zone.position.x, zone.position.y, zone.width, zone.height)\r\n    \r\n    // Draw warning symbol\r\n    this.ctx.fillStyle = '#000000'\r\n    this.ctx.font = '20px monospace'\r\n    this.ctx.textAlign = 'center'\r\n    this.ctx.fillText('‚ö†', centerX, centerY + 8)\r\n    \r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw a ball using sprite image or fallback to chrome rendering\r\n   */\r\n  public drawChromeBall(ball: any, animationState?: { scale: number; opacity: number }): void {\r\n    if (!this.ctx) return\r\n\r\n    this.ctx.save()\r\n\r\n    const x = ball.position.x\r\n    const y = ball.position.y\r\n    const radius = ball.radius\r\n    const scale = animationState?.scale || 1\r\n    const opacity = animationState?.opacity || 1\r\n\r\n    // Set global opacity for animation\r\n    this.ctx.globalAlpha = opacity\r\n\r\n    // Use sprite atlas if loaded, otherwise fallback to procedural rendering\r\n    if (this.spritesLoaded && spriteAtlas.isAtlasLoaded()) {\r\n      // Draw sprite-based ball from atlas\r\n      const spriteSize = radius * 2 * scale\r\n      \r\n      // Draw shadow behind sprite\r\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x + radius * scale * 0.1, y + radius * scale * 0.1, radius * scale, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n      \r\n      // Draw the ball sprite from atlas\r\n      const ballSpriteName = 'ball_normal'\r\n      spriteAtlas.drawSprite(\r\n        this.ctx,\r\n        ballSpriteName,\r\n        x - spriteSize / 2,  // Center horizontally\r\n        y - spriteSize / 2,  // Center vertically\r\n        spriteSize / 16      // Scale factor (assuming 16x16 sprite, adjust as needed)\r\n      )\r\n    } else {\r\n      // Fallback to procedural chrome rendering\r\n      const scaledRadius = radius * scale\r\n\r\n      // Create main ball gradient (chrome base)\r\n      const mainGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.3, y - scaledRadius * 0.3, 0,\r\n        x, y, scaledRadius\r\n      )\r\n      mainGradient.addColorStop(0, '#ffffff')      // Bright highlight\r\n      mainGradient.addColorStop(0.1, '#e6e6e6')    // Light chrome\r\n      mainGradient.addColorStop(0.3, '#cccccc')    // Medium chrome\r\n      mainGradient.addColorStop(0.6, '#999999')    // Dark chrome\r\n      mainGradient.addColorStop(0.8, '#666666')    // Darker chrome\r\n      mainGradient.addColorStop(1, '#333333')      // Shadow edge\r\n\r\n      // Draw main ball shadow (behind ball)\r\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x + scaledRadius * 0.1, y + scaledRadius * 0.1, scaledRadius, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Draw main chrome ball\r\n      this.ctx.fillStyle = mainGradient\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x, y, scaledRadius, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Create secondary reflection gradient\r\n      const reflectionGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.4, y - scaledRadius * 0.4, 0,\r\n        x - scaledRadius * 0.2, y - scaledRadius * 0.2, scaledRadius * 0.6\r\n      )\r\n      reflectionGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)')\r\n      reflectionGradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.3)')\r\n      reflectionGradient.addColorStop(1, 'rgba(255, 255, 255, 0)')\r\n\r\n      // Draw secondary reflection\r\n      this.ctx.fillStyle = reflectionGradient\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x - scaledRadius * 0.2, y - scaledRadius * 0.2, scaledRadius * 0.6, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Create primary highlight\r\n      const highlightGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.3, y - scaledRadius * 0.3, 0,\r\n        x - scaledRadius * 0.3, y - scaledRadius * 0.3, scaledRadius * 0.4\r\n      )\r\n      highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 1)')\r\n      highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.8)')\r\n      highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)')\r\n\r\n      // Draw primary highlight\r\n      this.ctx.fillStyle = highlightGradient\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x - scaledRadius * 0.3, y - scaledRadius * 0.3, scaledRadius * 0.4, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Add small specular highlights\r\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)'\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x - scaledRadius * 0.4, y - scaledRadius * 0.4, scaledRadius * 0.15, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Add tiny bright spot\r\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 1)'\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x - scaledRadius * 0.35, y - scaledRadius * 0.35, scaledRadius * 0.08, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n\r\n      // Add environment reflection (cyberpunk colors)\r\n      const envGradient = this.ctx.createRadialGradient(\r\n        x + scaledRadius * 0.3, y + scaledRadius * 0.2, 0,\r\n        x + scaledRadius * 0.3, y + scaledRadius * 0.2, scaledRadius * 0.5\r\n      )\r\n      envGradient.addColorStop(0, 'rgba(0, 255, 255, 0.2)')  // Cyan reflection\r\n      envGradient.addColorStop(0.3, 'rgba(255, 0, 102, 0.1)') // Pink reflection\r\n      envGradient.addColorStop(1, 'rgba(0, 0, 0, 0)')\r\n\r\n      this.ctx.fillStyle = envGradient\r\n      this.ctx.beginPath()\r\n      this.ctx.arc(x + scaledRadius * 0.3, y + scaledRadius * 0.2, scaledRadius * 0.5, 0, Math.PI * 2)\r\n      this.ctx.fill()\r\n    }\r\n\r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Draw a sprite from the atlas with optional scaling and positioning\r\n   */\r\n  public drawAtlasSprite(\r\n    spriteName: string, \r\n    x: number, \r\n    y: number, \r\n    scale: number = 1,\r\n    centered: boolean = true\r\n  ): boolean {\r\n    if (!this.ctx || !spriteAtlas.isAtlasLoaded()) return false\r\n    \r\n    const frame = spriteAtlas.getFrame(spriteName)\r\n    if (!frame) return false\r\n    \r\n    const drawX = centered ? x - (frame.w * scale) / 2 : x\r\n    const drawY = centered ? y - (frame.h * scale) / 2 : y\r\n    \r\n    return spriteAtlas.drawSprite(this.ctx, spriteName, drawX, drawY, scale)\r\n  }\r\n\r\n  /**\r\n   * Draw a flipper using atlas sprites\r\n   */\r\n  public drawFlipper(flipper: any, isLeft: boolean): void {\r\n    if (!this.ctx) return\r\n    \r\n    const spriteName = isLeft ? 'flipper_left_down' : 'flipper_right_down'\r\n    this.drawAtlasSprite(spriteName, flipper.position.x, flipper.position.y, 2)\r\n  }\r\n\r\n  /**\r\n   * Draw a bumper using atlas sprites with animation\r\n   */\r\n  public drawBumper(bumper: any, isActive: boolean = false): void {\r\n    if (!this.ctx) return\r\n    \r\n    const spriteName = isActive ? 'round_bumper_active' : 'round_bumper_idle'\r\n    this.drawAtlasSprite(spriteName, bumper.position.x, bumper.position.y, 1.5)\r\n  }\r\n\r\n  /**\r\n   * Draw a spinner with rotation animation\r\n   */\r\n  public drawSpinner(spinner: any, animationFrame: number = 1): void {\r\n    if (!this.ctx) return\r\n    \r\n    // Cycle through spinner animation frames (1-4)\r\n    const frame = Math.max(1, Math.min(4, animationFrame))\r\n    const spriteName = `spinner_${frame}`\r\n    this.drawAtlasSprite(spriteName, spinner.position.x, spinner.position.y, 2)\r\n  }\r\n\r\n  /**\r\n   * Get canvas context\r\n   */\r\n  public getContext(): CanvasRenderingContext2D | null {\r\n    return this.ctx\r\n  }\r\n\r\n  /**\r\n   * Get canvas dimensions\r\n   */\r\n  public getDimensions(): { width: number; height: number } {\r\n    return { width: this.width, height: this.height }\r\n  }\r\n\r\n  /**\r\n   * Resize the renderer\r\n   */\r\n  public resize(width: number, height: number): void {\r\n    if (!this.canvas) return\r\n\r\n    this.width = width\r\n    this.height = height\r\n    this.canvas.width = width\r\n    this.canvas.height = height\r\n    \r\n    Debug.log(`Renderer resized to: ${width}x${height}`)\r\n  }\r\n} ","// Circuit Breaker - Advanced Physics Engine\r\n// Robust Verlet integration with constraint solving and accurate collision detection\r\n\r\nimport { Debug } from '../utils/Debug'\r\n\r\nexport interface PhysicsObject {\r\n  id: string\r\n  position: { x: number; y: number }\r\n  previousPosition: { x: number; y: number }\r\n  acceleration: { x: number; y: number }\r\n  velocity: { x: number; y: number }\r\n  radius: number\r\n  mass: number\r\n  inverseMass: number // 1/mass for performance\r\n  restitution: number // Bounciness (0-1)\r\n  friction: number // Surface friction (0-1)\r\n  isStatic: boolean\r\n  constraints: Constraint[]\r\n  \r\n  // For backward compatibility\r\n  x?: number\r\n  y?: number\r\n  vx?: number\r\n  vy?: number\r\n  type?: 'dynamic' | 'static'\r\n  rotation?: number\r\n  width?: number\r\n  height?: number\r\n  \r\n  // Rolling physics state\r\n  isRollingOnBar?: boolean\r\n}\r\n\r\nexport interface Constraint {\r\n  type: 'distance' | 'position' | 'angle'\r\n  objectA: PhysicsObject\r\n  objectB?: PhysicsObject\r\n  targetDistance?: number\r\n  targetPosition?: { x: number; y: number }\r\n  targetAngle?: number\r\n  stiffness: number\r\n  restLength?: number\r\n}\r\n\r\nexport interface CollisionManifold {\r\n  objectA: PhysicsObject\r\n  objectB: PhysicsObject\r\n  normal: { x: number; y: number }\r\n  penetration: number\r\n  contactPoint: { x: number; y: number }\r\n}\r\n\r\ninterface SpatialCell {\r\n  objects: PhysicsObject[]\r\n}\r\n\r\nexport class PhysicsEngine {\r\n  private gravity: { x: number; y: number } = { x: 0, y: 400 }\r\n  private airResistance: number = 0.999\r\n  private objects: PhysicsObject[] = []\r\n  private constraints: Constraint[] = []\r\n  private spatialGrid: Map<string, SpatialCell> = new Map()\r\n  private gridSize: number = 60\r\n  private tiltingBar: any = null\r\n  private bounds = { width: 360, height: 640 }\r\n  \r\n  // Simulation parameters (optimized for performance)\r\n  private deltaTime: number = 1 / 60\r\n  \r\n  // Performance tracking\r\n  private debug: boolean = false\r\n  private collisionManifolds: CollisionManifold[] = []\r\n  \r\n  // Audio callback for collision sounds\r\n  private audioCallback: ((velocity: number, type: string) => void) | null = null\r\n  \r\n  // Audio cooldown timers to prevent rapid-fire collision sounds (in milliseconds)\r\n  private audioTimeouts: Map<string, number> = new Map()\r\n  private readonly AUDIO_COOLDOWN_MS = 150 // 150ms cooldown between same collision type sounds\r\n\r\n  constructor() {\r\n    Debug.log('‚ö° Advanced PhysicsEngine initialized with Verlet integration')\r\n  }\r\n\r\n  /**\r\n   * Set the tilting bar reference for collision detection\r\n   */\r\n  public setTiltingBar(bar: any): void {\r\n    this.tiltingBar = bar\r\n  }\r\n\r\n  /**\r\n   * Set audio callback for collision sounds\r\n   */\r\n  public setAudioCallback(callback: (velocity: number, type: string) => void): void {\r\n    this.audioCallback = callback\r\n  }\r\n\r\n  /**\r\n   * Play audio with cooldown to prevent rapid-fire sounds\r\n   */\r\n  private playAudioWithCooldown(velocity: number, type: string, objectId: string): void {\r\n    if (!this.audioCallback) return\r\n    \r\n    const now = Date.now()\r\n    const cooldownKey = `${objectId}_${type}`\r\n    const lastAudioTime = this.audioTimeouts.get(cooldownKey) || 0\r\n    \r\n    // Only play if enough time has passed since last audio of this type for this object\r\n    if (now - lastAudioTime >= this.AUDIO_COOLDOWN_MS) {\r\n      this.audioCallback(velocity, type)\r\n      this.audioTimeouts.set(cooldownKey, now)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a physics object with proper initialization\r\n   */\r\n  public createObject(config: {\r\n    id: string\r\n    x: number\r\n    y: number\r\n    radius: number\r\n    mass?: number\r\n    restitution?: number\r\n    friction?: number\r\n    isStatic?: boolean\r\n  }): PhysicsObject {\r\n    const mass = config.mass || 1\r\n    const obj: PhysicsObject = {\r\n      id: config.id,\r\n      position: { x: config.x, y: config.y },\r\n      previousPosition: { x: config.x, y: config.y },\r\n      acceleration: { x: 0, y: 0 },\r\n      velocity: { x: 0, y: 0 },\r\n      radius: config.radius,\r\n      mass: mass,\r\n      inverseMass: config.isStatic ? 0 : 1 / mass,\r\n      restitution: config.restitution || 0.7,\r\n      friction: config.friction || 0.3,\r\n      isStatic: config.isStatic || false,\r\n      constraints: [],\r\n      // Backward compatibility\r\n      x: config.x,\r\n      y: config.y,\r\n      vx: 0,\r\n      vy: 0\r\n    }\r\n    \r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * Add a physics object to the simulation\r\n   */\r\n  public addObject(obj: PhysicsObject): void {\r\n    // Ensure proper initialization if not created with createObject\r\n    if (!obj.previousPosition) {\r\n      obj.previousPosition = { x: obj.position?.x || obj.x || 0, y: obj.position?.y || obj.y || 0 }\r\n    }\r\n    if (!obj.acceleration) {\r\n      obj.acceleration = { x: 0, y: 0 }\r\n    }\r\n    if (!obj.velocity) {\r\n      obj.velocity = { x: 0, y: 0 }\r\n    }\r\n    if (!obj.inverseMass) {\r\n      obj.inverseMass = obj.isStatic ? 0 : 1 / (obj.mass || 1)\r\n    }\r\n    if (!obj.constraints) {\r\n      obj.constraints = []\r\n    }\r\n    \r\n    this.objects.push(obj)\r\n    this.updateSpatialGrid()\r\n    Debug.log(`Added physics object: ${obj.id}`)\r\n  }\r\n\r\n  /**\r\n   * Remove a physics object by id\r\n   */\r\n  public removeObject(id: string): void {\r\n    this.objects = this.objects.filter(obj => obj.id !== id)\r\n    this.updateSpatialGrid()\r\n    Debug.log(`Removed physics object: ${id}`)\r\n  }\r\n\r\n  /**\r\n   * Add a constraint between objects\r\n   */\r\n  public addConstraint(constraint: Constraint): void {\r\n    this.constraints.push(constraint)\r\n    Debug.log(`Added constraint: ${constraint.type}`)\r\n  }\r\n\r\n  /**\r\n   * Main physics update (optimized for performance)\r\n   */\r\n  public update(frameTime: number): void {\r\n    // Simple direct update instead of fixed timestep for better performance\r\n    const dt = Math.min(frameTime, 1/30) // Cap at 30fps minimum\r\n    this.simulateStep(dt)\r\n    \r\n    // Update backward compatibility properties\r\n    this.updateBackwardCompatibility()\r\n  }\r\n\r\n  /**\r\n   * Single physics simulation step (optimized)\r\n   */\r\n  private simulateStep(dt: number): void {\r\n    // Clear collision manifolds and rolling flags\r\n    this.collisionManifolds = []\r\n    for (const obj of this.objects) {\r\n      obj.isRollingOnBar = false\r\n    }\r\n    \r\n    // Update spatial grid only when needed\r\n    if (this.objects.length > 0) {\r\n      this.updateSpatialGrid()\r\n    }\r\n    \r\n    // Integrate positions using simplified Verlet integration\r\n    this.integratePositions(dt)\r\n    \r\n    // Single iteration of constraints and collisions for performance\r\n    this.solveConstraints()\r\n    this.detectAndResolveCollisions()\r\n    \r\n    // Handle tilting bar collisions and rolling physics\r\n    this.handleTiltingBarCollisions()\r\n    \r\n    // Handle boundary collisions\r\n    this.handleBoundaryCollisions()\r\n    \r\n    // Update velocities from position changes\r\n    this.updateVelocities(dt)\r\n  }\r\n\r\n  /**\r\n   * Simplified Verlet integration for position updates\r\n   */\r\n  private integratePositions(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      // Calculate current velocity\r\n      const velX = obj.position.x - obj.previousPosition.x\r\n      const velY = obj.position.y - obj.previousPosition.y\r\n      \r\n      // Store current position as previous\r\n      obj.previousPosition.x = obj.position.x\r\n      obj.previousPosition.y = obj.position.y\r\n      \r\n      // Update position with velocity and gravity\r\n      obj.position.x += velX * this.airResistance + this.gravity.x * dt * dt\r\n      obj.position.y += velY * this.airResistance + this.gravity.y * dt * dt\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocities from position changes\r\n   */\r\n  private updateVelocities(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      obj.velocity.x = (obj.position.x - obj.previousPosition.x) / dt\r\n      obj.velocity.y = (obj.position.y - obj.previousPosition.y) / dt\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve all constraints\r\n   */\r\n  private solveConstraints(): void {\r\n    for (const constraint of this.constraints) {\r\n      this.solveConstraint(constraint)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve individual constraint\r\n   */\r\n  private solveConstraint(constraint: Constraint): void {\r\n    switch (constraint.type) {\r\n      case 'distance':\r\n        this.solveDistanceConstraint(constraint)\r\n        break\r\n      case 'position':\r\n        this.solvePositionConstraint(constraint)\r\n        break\r\n      case 'angle':\r\n        this.solveAngleConstraint(constraint)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve distance constraint between two objects\r\n   */\r\n  private solveDistanceConstraint(constraint: Constraint): void {\r\n    if (!constraint.objectB || !constraint.targetDistance) return\r\n    \r\n    const objA = constraint.objectA\r\n    const objB = constraint.objectB\r\n    \r\n    const dx = objB.position.x - objA.position.x\r\n    const dy = objB.position.y - objA.position.y\r\n    const distance = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (distance === 0) return\r\n    \r\n    const difference = constraint.targetDistance - distance\r\n    const percent = difference / distance / 2\r\n    const offsetX = dx * percent * constraint.stiffness\r\n    const offsetY = dy * percent * constraint.stiffness\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.position.x -= offsetX * objA.inverseMass\r\n      objA.position.y -= offsetY * objA.inverseMass\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.position.x += offsetX * objB.inverseMass\r\n      objB.position.y += offsetY * objB.inverseMass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve position constraint (pin object to position)\r\n   */\r\n  private solvePositionConstraint(constraint: Constraint): void {\r\n    if (!constraint.targetPosition) return\r\n    \r\n    const obj = constraint.objectA\r\n    if (obj.isStatic) return\r\n    \r\n    const dx = constraint.targetPosition.x - obj.position.x\r\n    const dy = constraint.targetPosition.y - obj.position.y\r\n    \r\n    obj.position.x += dx * constraint.stiffness\r\n    obj.position.y += dy * constraint.stiffness\r\n  }\r\n\r\n  /**\r\n   * Solve angle constraint (maintain angle between objects)\r\n   */\r\n  private solveAngleConstraint(_constraint: Constraint): void {\r\n    // Implementation for angle constraints if needed\r\n    // This is more complex and depends on specific requirements\r\n  }\r\n\r\n  /**\r\n   * Detect and resolve collisions between objects (optimized)\r\n   */\r\n  private detectAndResolveCollisions(): void {\r\n    // Only check collisions if we have multiple objects\r\n    if (this.objects.length < 2) return\r\n    \r\n    for (let i = 0; i < this.objects.length; i++) {\r\n      const obj = this.objects[i]\r\n      if (obj.isStatic) continue\r\n      \r\n      // Check only against objects after this one to avoid duplicate checks\r\n      for (let j = i + 1; j < this.objects.length; j++) {\r\n        const otherObj = this.objects[j]\r\n        \r\n        // Quick distance check before expensive collision detection\r\n        const dx = otherObj.position.x - obj.position.x\r\n        const dy = otherObj.position.y - obj.position.y\r\n        const maxDistance = obj.radius + otherObj.radius + 5 // Small buffer\r\n        \r\n        if (dx * dx + dy * dy < maxDistance * maxDistance) {\r\n          const manifold = this.detectCollision(obj, otherObj)\r\n          if (manifold) {\r\n            this.collisionManifolds.push(manifold)\r\n            this.resolveCollisionSimple(manifold)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect collision between two objects\r\n   */\r\n  private detectCollision(objA: PhysicsObject, objB: PhysicsObject): CollisionManifold | null {\r\n    const dx = objB.position.x - objA.position.x\r\n    const dy = objB.position.y - objA.position.y\r\n    const distance = Math.sqrt(dx * dx + dy * dy)\r\n    const minDistance = objA.radius + objB.radius\r\n    \r\n    if (distance < minDistance) {\r\n      const penetration = minDistance - distance\r\n      const normal = distance > 0 ? { x: dx / distance, y: dy / distance } : { x: 1, y: 0 }\r\n      \r\n      return {\r\n        objectA: objA,\r\n        objectB: objB,\r\n        normal: normal,\r\n        penetration: penetration,\r\n        contactPoint: {\r\n          x: objA.position.x + normal.x * objA.radius,\r\n          y: objA.position.y + normal.y * objA.radius\r\n        }\r\n      }\r\n    }\r\n    \r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Resolve collision using impulse-based method\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private resolveCollision(manifold: CollisionManifold): void {\r\n    const objA = manifold.objectA\r\n    const objB = manifold.objectB\r\n    \r\n    // Position correction to prevent sinking\r\n    const correction = manifold.penetration / (objA.inverseMass + objB.inverseMass) * 0.8\r\n    objA.position.x -= manifold.normal.x * correction * objA.inverseMass\r\n    objA.position.y -= manifold.normal.y * correction * objA.inverseMass\r\n    objB.position.x += manifold.normal.x * correction * objB.inverseMass\r\n    objB.position.y += manifold.normal.y * correction * objB.inverseMass\r\n    \r\n    // Velocity correction\r\n    const relativeVelocity = {\r\n      x: objB.velocity.x - objA.velocity.x,\r\n      y: objB.velocity.y - objA.velocity.y\r\n    }\r\n    \r\n    const velocityAlongNormal = relativeVelocity.x * manifold.normal.x + relativeVelocity.y * manifold.normal.y\r\n    \r\n    if (velocityAlongNormal > 0) return // Objects separating\r\n    \r\n    const restitution = Math.min(objA.restitution, objB.restitution)\r\n    const impulseScalar = -(1 + restitution) * velocityAlongNormal / (objA.inverseMass + objB.inverseMass)\r\n    \r\n    const impulse = {\r\n      x: impulseScalar * manifold.normal.x,\r\n      y: impulseScalar * manifold.normal.y\r\n    }\r\n    \r\n    // Apply impulse to velocities (which affects next frame's position)\r\n    if (!objA.isStatic) {\r\n      objA.previousPosition.x -= impulse.x * objA.inverseMass\r\n      objA.previousPosition.y -= impulse.y * objA.inverseMass\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.previousPosition.x += impulse.x * objB.inverseMass\r\n      objB.previousPosition.y += impulse.y * objB.inverseMass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simplified collision resolution for better performance\r\n   */\r\n  private resolveCollisionSimple(manifold: CollisionManifold): void {\r\n    const objA = manifold.objectA\r\n    const objB = manifold.objectB\r\n    \r\n    // Simple position separation\r\n    const separationX = manifold.normal.x * manifold.penetration * 0.5\r\n    const separationY = manifold.normal.y * manifold.penetration * 0.5\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.position.x -= separationX\r\n      objA.position.y -= separationY\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.position.x += separationX\r\n      objB.position.y += separationY\r\n    }\r\n    \r\n    // Simple velocity reflection\r\n    const relativeVelocity = {\r\n      x: objB.velocity.x - objA.velocity.x,\r\n      y: objB.velocity.y - objA.velocity.y\r\n    }\r\n    \r\n    const velocityAlongNormal = relativeVelocity.x * manifold.normal.x + relativeVelocity.y * manifold.normal.y\r\n    \r\n    if (velocityAlongNormal > 0) return // Objects separating\r\n    \r\n    const restitution = Math.min(objA.restitution, objB.restitution) * 0.8 // Reduced for stability\r\n    const impulse = velocityAlongNormal * restitution\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.previousPosition.x += manifold.normal.x * impulse * 0.5\r\n      objA.previousPosition.y += manifold.normal.y * impulse * 0.5\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.previousPosition.x -= manifold.normal.x * impulse * 0.5\r\n      objB.previousPosition.y -= manifold.normal.y * impulse * 0.5\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle tilting bar collisions with realistic rolling physics\r\n   */\r\n  private handleTiltingBarCollisions(): void {\r\n    if (!this.tiltingBar) return\r\n    \r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      const endpoints = this.tiltingBar.getEndpoints()\r\n      const closestPointOnCenterLine = this.getClosestPointOnLineSegment(obj.position, endpoints.start, endpoints.end)\r\n      const distanceToCenterLine = Math.sqrt((obj.position.x - closestPointOnCenterLine.x) ** 2 + (obj.position.y - closestPointOnCenterLine.y) ** 2)\r\n      \r\n      // Account for bar thickness - collision happens when ball touches the bar surface\r\n      const barThickness = this.tiltingBar.thickness || 12\r\n      const barSurfaceDistance = barThickness / 2\r\n      const collisionDistance = obj.radius + barSurfaceDistance\r\n      \r\n      if (distanceToCenterLine < collisionDistance) {\r\n        // Calculate bar vectors\r\n        const barVec = { x: endpoints.end.x - endpoints.start.x, y: endpoints.end.y - endpoints.start.y }\r\n        const barLength = Math.sqrt(barVec.x * barVec.x + barVec.y * barVec.y)\r\n        const barTangent = { x: barVec.x / barLength, y: barVec.y / barLength } // Along the bar\r\n        const barNormal = { x: -barVec.y / barLength, y: barVec.x / barLength } // Perpendicular to bar\r\n        \r\n        // Ensure normal points away from bar (upward)\r\n        if (barNormal.y > 0) {\r\n          barNormal.x = -barNormal.x\r\n          barNormal.y = -barNormal.y\r\n        }\r\n        \r\n        // Calculate the actual collision point on the bar surface\r\n        const barSurfacePoint = {\r\n          x: closestPointOnCenterLine.x + barNormal.x * barSurfaceDistance,\r\n          y: closestPointOnCenterLine.y + barNormal.y * barSurfaceDistance\r\n        }\r\n        \r\n        // Position correction - place ball exactly at collision distance from bar surface\r\n        obj.position.x = barSurfacePoint.x + barNormal.x * obj.radius\r\n        obj.position.y = barSurfacePoint.y + barNormal.y * obj.radius\r\n        \r\n        // Current velocity\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        \r\n        const velocityAlongNormal = velocity.x * barNormal.x + velocity.y * barNormal.y\r\n        const velocityAlongTangent = velocity.x * barTangent.x + velocity.y * barTangent.y\r\n        \r\n        // Check if ball is moving into the bar (collision) or resting on it\r\n        if (velocityAlongNormal < -0.5) {\r\n          // High-speed collision - reflect velocity\r\n          const restitution = obj.restitution * 0.8 // Reduced bounce on bar\r\n          const friction = this.tiltingBar.friction || 0.3\r\n          \r\n          const reflectedVelocity = {\r\n            x: velocity.x - 2 * velocityAlongNormal * barNormal.x,\r\n            y: velocity.y - 2 * velocityAlongNormal * barNormal.y\r\n          }\r\n          \r\n          // Apply restitution and friction\r\n          reflectedVelocity.x *= restitution * (1 - friction)\r\n          reflectedVelocity.y *= restitution\r\n          \r\n          // Update previous position to reflect new velocity\r\n          obj.previousPosition.x = obj.position.x - reflectedVelocity.x\r\n          obj.previousPosition.y = obj.position.y - reflectedVelocity.y\r\n          \r\n          // Play bounce sound based on collision velocity (with cooldown)\r\n          const collisionVelocity = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y)\r\n          this.playAudioWithCooldown(collisionVelocity, 'bounce', obj.id)\r\n        } else {\r\n          // Ball is resting on or gently touching the bar - apply rolling physics\r\n          this.applyRollingPhysics(obj, barTangent, barNormal, velocityAlongTangent, this.deltaTime)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply realistic rolling physics when ball is on the tilted bar\r\n   */\r\n  private applyRollingPhysics(obj: any, barTangent: { x: number; y: number }, _barNormal: { x: number; y: number }, currentTangentVelocity: number, dt: number): void {\r\n    // Calculate the component of gravity along the bar slope\r\n    const gravityAlongSlope = this.gravity.x * barTangent.x + this.gravity.y * barTangent.y\r\n    \r\n    // Rolling resistance and friction\r\n    const rollingFriction = this.tiltingBar.friction || 0.05\r\n    const rollingResistance = 0.01 // Small resistance to rolling (reduced for smoother motion)\r\n    \r\n    // Calculate acceleration along the slope\r\n    let slopeAcceleration = gravityAlongSlope\r\n    \r\n    // Apply rolling resistance (opposes motion)\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const resistanceForce = -Math.sign(currentTangentVelocity) * rollingResistance * Math.abs(this.gravity.y)\r\n      slopeAcceleration += resistanceForce\r\n    }\r\n    \r\n    // Apply friction if ball is moving along the slope\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const frictionForce = -Math.sign(currentTangentVelocity) * rollingFriction * Math.abs(this.gravity.y)\r\n      slopeAcceleration += frictionForce\r\n    }\r\n    \r\n    // Calculate new velocity along the slope\r\n    const newTangentVelocity = currentTangentVelocity + slopeAcceleration * dt\r\n    \r\n    // Apply the new velocity (only along the tangent, no normal component)\r\n    const newVelocity = {\r\n      x: newTangentVelocity * barTangent.x,\r\n      y: newTangentVelocity * barTangent.y\r\n    }\r\n    \r\n    // Update previous position to reflect rolling motion\r\n    obj.previousPosition.x = obj.position.x - newVelocity.x\r\n    obj.previousPosition.y = obj.position.y - newVelocity.y\r\n    \r\n    // Update velocity for backward compatibility\r\n    obj.velocity.x = newVelocity.x\r\n    obj.velocity.y = newVelocity.y\r\n    \r\n    // Mark that this object is currently rolling on the bar (for debugging/gameplay)\r\n    obj.isRollingOnBar = true\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently in contact with the tilting bar\r\n   */\r\n  public isBallOnBar(ballId: string): boolean {\r\n    const ball = this.objects.find(obj => obj.id === ballId)\r\n    if (!ball || !this.tiltingBar) return false\r\n    \r\n    const endpoints = this.tiltingBar.getEndpoints()\r\n    const closestPoint = this.getClosestPointOnLineSegment(ball.position, endpoints.start, endpoints.end)\r\n    const distance = Math.sqrt((ball.position.x - closestPoint.x) ** 2 + (ball.position.y - closestPoint.y) ** 2)\r\n    \r\n    const barThickness = this.tiltingBar.thickness || 12\r\n    const collisionDistance = ball.radius + barThickness / 2\r\n    \r\n    return distance <= collisionDistance + 2 // Small tolerance\r\n  }\r\n\r\n  /**\r\n   * Handle boundary collisions\r\n   */\r\n  private handleBoundaryCollisions(): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      // Floor collision\r\n      if (obj.position.y + obj.radius > this.bounds.height) {\r\n        obj.position.y = this.bounds.height - obj.radius\r\n        \r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        \r\n        if (velocity.y > 0) {\r\n          obj.previousPosition.y = obj.position.y + velocity.y * obj.restitution\r\n          obj.previousPosition.x = obj.position.x - velocity.x * 0.8 // Floor friction\r\n          \r\n          // Removed audio for floor collision - no sound on boundary hits\r\n        }\r\n      }\r\n      \r\n      // Left wall collision\r\n      if (obj.position.x - obj.radius < 0) {\r\n        obj.position.x = obj.radius\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        if (velocity.x < 0) {\r\n          obj.previousPosition.x = obj.position.x + velocity.x * obj.restitution\r\n          \r\n          // Removed audio for wall collision - no sound on boundary hits\r\n        }\r\n      }\r\n      \r\n      // Right wall collision\r\n      if (obj.position.x + obj.radius > this.bounds.width) {\r\n        obj.position.x = this.bounds.width - obj.radius\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        if (velocity.x > 0) {\r\n          obj.previousPosition.x = obj.position.x + velocity.x * obj.restitution\r\n          \r\n          // Removed audio for wall collision - no sound on boundary hits\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update backward compatibility properties\r\n   */\r\n  private updateBackwardCompatibility(): void {\r\n    for (const obj of this.objects) {\r\n      obj.x = obj.position.x\r\n      obj.y = obj.position.y\r\n      obj.vx = obj.velocity.x\r\n      obj.vy = obj.velocity.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update spatial partitioning grid (optimized)\r\n   */\r\n  private updateSpatialGrid(): void {\r\n    // Skip spatial grid for small number of objects\r\n    if (this.objects.length <= 3) return\r\n    \r\n    this.spatialGrid.clear()\r\n    \r\n    for (const obj of this.objects) {\r\n      const cells = this.getObjectCells(obj)\r\n      for (const cellKey of cells) {\r\n        if (!this.spatialGrid.has(cellKey)) {\r\n          this.spatialGrid.set(cellKey, { objects: [] })\r\n        }\r\n        this.spatialGrid.get(cellKey)!.objects.push(obj)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get grid cells that an object occupies\r\n   */\r\n  private getObjectCells(obj: PhysicsObject): string[] {\r\n    const cells: string[] = []\r\n    const radius = obj.radius\r\n    const minX = Math.floor((obj.position.x - radius) / this.gridSize)\r\n    const maxX = Math.floor((obj.position.x + radius) / this.gridSize)\r\n    const minY = Math.floor((obj.position.y - radius) / this.gridSize)\r\n    const maxY = Math.floor((obj.position.y + radius) / this.gridSize)\r\n\r\n    for (let x = minX; x <= maxX; x++) {\r\n      for (let y = minY; y <= maxY; y++) {\r\n        cells.push(`${x},${y}`)\r\n      }\r\n    }\r\n    return cells\r\n  }\r\n\r\n  /**\r\n   * Get objects in nearby cells for collision detection\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private getNearbyObjects(obj: PhysicsObject): PhysicsObject[] {\r\n    const nearby: PhysicsObject[] = []\r\n    const cells = this.getObjectCells(obj)\r\n    \r\n    for (const cellKey of cells) {\r\n      const cell = this.spatialGrid.get(cellKey)\r\n      if (cell) {\r\n        for (const otherObj of cell.objects) {\r\n          if (otherObj.id !== obj.id && !nearby.includes(otherObj)) {\r\n            nearby.push(otherObj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return nearby\r\n  }\r\n\r\n  /**\r\n   * Get closest point on line segment to a point\r\n   */\r\n  private getClosestPointOnLineSegment(point: { x: number; y: number }, lineStart: { x: number; y: number }, lineEnd: { x: number; y: number }): { x: number; y: number } {\r\n    const dx = lineEnd.x - lineStart.x\r\n    const dy = lineEnd.y - lineStart.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return lineStart\r\n    \r\n    const t = Math.max(0, Math.min(1, ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / (length * length)))\r\n    \r\n    return {\r\n      x: lineStart.x + t * dx,\r\n      y: lineStart.y + t * dy\r\n    }\r\n  }\r\n\r\n  // Public API methods\r\n  public getObjects(): PhysicsObject[] {\r\n    return this.objects\r\n  }\r\n\r\n  public setGravity(x: number, y: number): void {\r\n    this.gravity.x = x\r\n    this.gravity.y = y\r\n    Debug.log(`Gravity set to: (${x}, ${y})`)\r\n  }\r\n\r\n  public setAirResistance(resistance: number): void {\r\n    this.airResistance = Math.max(0, Math.min(1, resistance))\r\n    Debug.log(`Air resistance set to: ${this.airResistance}`)\r\n  }\r\n\r\n  public setBounds(width: number, height: number): void {\r\n    this.bounds.width = width\r\n    this.bounds.height = height\r\n    Debug.log(`Physics bounds set to: ${width}x${height}`)\r\n  }\r\n\r\n  public setDebug(enabled: boolean): void {\r\n    this.debug = enabled\r\n  }\r\n\r\n  public getDebug(): boolean {\r\n    return this.debug\r\n  }\r\n\r\n  public getCollisionManifolds(): CollisionManifold[] {\r\n    return this.collisionManifolds\r\n  }\r\n\r\n  public getConstraints(): Constraint[] {\r\n    return this.constraints\r\n  }\r\n\r\n  // Legacy compatibility methods\r\n  public getFriction(): number {\r\n    return 0.98 // Return a default value for compatibility\r\n  }\r\n\r\n  public getBounceEnergy(): number {\r\n    return 0.7 // Return a default value for compatibility\r\n  }\r\n\r\n  public getGravity(): number {\r\n    return this.gravity.y // Return Y gravity for compatibility\r\n  }\r\n\r\n  public setFriction(_friction: number): void {\r\n    Debug.log(`Legacy friction setting ignored - use per-object friction instead`)\r\n  }\r\n\r\n  public setBounceEnergy(_energy: number): void {\r\n    Debug.log(`Legacy bounce energy setting ignored - use per-object restitution instead`)\r\n  }\r\n} ","import { Vector2 } from '../utils/MathUtils'\r\n\r\nexport interface TiltingBarConfig {\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n  maxRotation: number // Maximum rotation angle in radians\r\n  rotationSpeed: number // How fast the bar rotates\r\n  friction: number // Surface friction for ball interactions\r\n}\r\n\r\nexport class TiltingBar {\r\n  public position: Vector2\r\n  public rotation: number = 0\r\n  public targetRotation: number = 0\r\n  public leftSideHeight: number = 590 // Absolute Y position for left side (start at bottom)\r\n  public rightSideHeight: number = 590 // Absolute Y position for right side (start at bottom)\r\n  public minSideHeight: number = 50 // Minimum height (top of screen area)\r\n  public maxSideHeight: number = 590 // Maximum height (bottom of screen)\r\n  public sideSpeed: number = 100 // Speed of side height changes\r\n  public width: number\r\n  public height: number\r\n  public maxRotation: number\r\n  public rotationSpeed: number\r\n  public friction: number\r\n  \r\n  // Visual properties\r\n  public color: string = '#00f0ff' // Electric Blue\r\n  public glowColor: string = '#b600f9' // Neon Purple\r\n  public thickness: number = 12 // Increased thickness for better collision\r\n\r\n  constructor(config: TiltingBarConfig) {\r\n    this.position = { ...config.position }\r\n    this.width = config.width\r\n    this.height = config.height\r\n    this.maxRotation = config.maxRotation\r\n    this.rotationSpeed = config.rotationSpeed\r\n    this.friction = config.friction\r\n  }\r\n\r\n  /**\r\n   * Set the target rotation angle (will be clamped to maxRotation)\r\n   */\r\n  public setTargetRotation(angle: number): void {\r\n    this.targetRotation = Math.max(-this.maxRotation, Math.min(this.maxRotation, angle))\r\n  }\r\n\r\n  /**\r\n   * Move left side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveLeftSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.leftSideHeight -= input * this.sideSpeed * (1/60) // Move up (negative) or down (positive)\r\n      this.leftSideHeight = Math.max(this.minSideHeight, Math.min(this.maxSideHeight, this.leftSideHeight))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move right side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveRightSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.rightSideHeight -= input * this.sideSpeed * (1/60) // Move up (negative) or down (positive)\r\n      this.rightSideHeight = Math.max(this.minSideHeight, Math.min(this.maxSideHeight, this.rightSideHeight))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current tilt as a percentage (-1 to 1)\r\n   */\r\n  public getTiltPercentage(): number {\r\n    return this.rotation / this.maxRotation\r\n  }\r\n\r\n  /**\r\n   * Update the bar's rotation based on current side heights\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    // Calculate rotation based on height difference\r\n    const heightDifference = this.rightSideHeight - this.leftSideHeight\r\n    const maxHeightRange = this.maxSideHeight - this.minSideHeight\r\n    this.rotation = (heightDifference / maxHeightRange) * this.maxRotation\r\n    \r\n    // Also update targetRotation for compatibility\r\n    this.targetRotation = this.rotation\r\n  }\r\n\r\n  /**\r\n   * Get the endpoints of the bar for collision detection\r\n   */\r\n  public getEndpoints(): { start: Vector2; end: Vector2 } {\r\n    const halfWidth = this.width / 2\r\n    \r\n    return {\r\n      start: {\r\n        x: this.position.x - halfWidth,\r\n        y: this.leftSideHeight\r\n      },\r\n      end: {\r\n        x: this.position.x + halfWidth,\r\n        y: this.rightSideHeight\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the normal vector of the bar surface\r\n   */\r\n  public getNormal(): Vector2 {\r\n    const endpoints = this.getEndpoints()\r\n    const dx = endpoints.end.x - endpoints.start.x\r\n    const dy = endpoints.end.y - endpoints.start.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return { x: 0, y: -1 } // Default upward normal\r\n    \r\n    // Normal perpendicular to the bar, pointing upward\r\n    return {\r\n      x: -dy / length,\r\n      y: dx / length\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a point is near the bar (for collision detection)\r\n   */\r\n  public isPointNearBar(point: Vector2, radius: number): boolean {\r\n    const endpoints = this.getEndpoints()\r\n    const distance = this.distanceToLineSegment(point, endpoints.start, endpoints.end)\r\n    const collisionThreshold = radius + this.thickness / 2 + 2 // Add small buffer for better detection\r\n    return distance <= collisionThreshold\r\n  }\r\n\r\n  /**\r\n   * Calculate distance from point to line segment\r\n   */\r\n  private distanceToLineSegment(point: Vector2, start: Vector2, end: Vector2): number {\r\n    const dx = end.x - start.x\r\n    const dy = end.y - start.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return Math.sqrt((point.x - start.x) ** 2 + (point.y - start.y) ** 2)\r\n    \r\n    const t = Math.max(0, Math.min(1, ((point.x - start.x) * dx + (point.y - start.y) * dy) / (length * length)))\r\n    const projection = {\r\n      x: start.x + t * dx,\r\n      y: start.y + t * dy\r\n    }\r\n    \r\n    return Math.sqrt((point.x - projection.x) ** 2 + (point.y - projection.y) ** 2)\r\n  }\r\n\r\n  /**\r\n   * Get collision response for a ball hitting the bar\r\n   */\r\n  public getCollisionResponse(ballPosition: Vector2, ballVelocity: Vector2, ballRadius: number): { velocity: Vector2; position: Vector2 } {\r\n    const endpoints = this.getEndpoints()\r\n    const normal = this.getNormal()\r\n    \r\n    // Calculate penetration depth\r\n    const distanceToBar = this.distanceToLineSegment(ballPosition, endpoints.start, endpoints.end)\r\n    const penetrationDepth = ballRadius + this.thickness / 2 - distanceToBar\r\n    \r\n    // Push ball out of the bar\r\n    const correctedPosition = {\r\n      x: ballPosition.x + normal.x * penetrationDepth,\r\n      y: ballPosition.y + normal.y * penetrationDepth\r\n    }\r\n    \r\n    // Reflect velocity along the normal (only if moving into the bar)\r\n    const dotProduct = ballVelocity.x * normal.x + ballVelocity.y * normal.y\r\n    \r\n    let newVelocity = ballVelocity\r\n    if (dotProduct < 0) { // Ball is moving into the bar\r\n      const reflection = {\r\n        x: ballVelocity.x - 2 * dotProduct * normal.x,\r\n        y: ballVelocity.y - 2 * dotProduct * normal.y\r\n      }\r\n      \r\n      // Apply friction and bounce energy\r\n      const frictionFactor = 1 - this.friction\r\n      const bounceEnergy = 0.8 // Slight energy loss on bounce\r\n      newVelocity = {\r\n        x: reflection.x * frictionFactor * bounceEnergy,\r\n        y: reflection.y * bounceEnergy\r\n      }\r\n    }\r\n    \r\n    return {\r\n      velocity: newVelocity,\r\n      position: correctedPosition\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the tilting bar to its starting position (both sides at bottom)\r\n   */\r\n  public reset(): void {\r\n    this.leftSideHeight = this.maxSideHeight  // Reset to bottom position (590)\r\n    this.rightSideHeight = this.maxSideHeight // Reset to bottom position (590)\r\n    this.rotation = 0 // Reset rotation to horizontal\r\n    this.targetRotation = 0 // Reset target rotation\r\n    console.log('üîÑ Tilting bar reset to starting position')\r\n  }\r\n\r\n} ","export interface InputState {\r\n  keys: { [key: string]: boolean }\r\n  mouse: {\r\n    x: number\r\n    y: number\r\n    isDown: boolean\r\n    button: number\r\n  }\r\n  tiltInput: number // -1 to 1 for bar tilt\r\n}\r\n\r\nexport class InputManager {\r\n  private inputState: InputState = {\r\n    keys: {},\r\n    mouse: {\r\n      x: 0,\r\n      y: 0,\r\n      isDown: false,\r\n      button: -1\r\n    },\r\n    tiltInput: 0\r\n  }\r\n  \r\n  private previousKeys: { [key: string]: boolean } = {}\r\n  private canvas: HTMLCanvasElement | null = null\r\n  private keyBindings = {\r\n    leftSideUp: ['KeyA'],\r\n    leftSideDown: ['KeyZ'],\r\n    rightSideUp: ['ArrowUp'],\r\n    rightSideDown: ['ArrowDown'],\r\n    start: ['Space'],\r\n    reset: ['KeyR'],\r\n    pause: ['KeyP', 'Escape']\r\n  }\r\n\r\n  constructor() {\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * Initialize input manager with canvas reference\r\n   */\r\n  public init(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas\r\n    this.setupCanvasListeners()\r\n  }\r\n\r\n  /**\r\n   * Get current input state\r\n   */\r\n  public getInputState(): InputState {\r\n    return { ...this.inputState }\r\n  }\r\n\r\n  /**\r\n   * Get tilt input value (-1 to 1)\r\n   */\r\n  public getTiltInput(): number {\r\n    return this.inputState.tiltInput\r\n  }\r\n\r\n  /**\r\n   * Get left side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getLeftSideInput(): number {\r\n    let leftSideInput = 0\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1\r\n    }\r\n    return leftSideInput\r\n  }\r\n\r\n  /**\r\n   * Get right side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getRightSideInput(): number {\r\n    let rightSideInput = 0\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1\r\n    }\r\n    return rightSideInput\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action is pressed\r\n   */\r\n  public isActionPressed(action: keyof typeof this.keyBindings): boolean {\r\n    return this.keyBindings[action].some(key => this.inputState.keys[key])\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action was just pressed (not held)\r\n   */\r\n  public isActionJustPressed(action: keyof typeof this.keyBindings): boolean {\r\n    const isPressed = this.keyBindings[action].some(key => \r\n      this.inputState.keys[key] && !this.previousKeys[key]\r\n    )\r\n    \r\n    // Debug logging for start key\r\n    if (action === 'start' && isPressed) {\r\n      console.log('üîë Start key (SPACE) just pressed!')\r\n    }\r\n    \r\n    return isPressed\r\n  }\r\n\r\n  /**\r\n   * Check if a specific key was just pressed (not held) by key code\r\n   */\r\n  public isKeyJustPressed(keyCode: string): boolean {\r\n    return this.inputState.keys[keyCode] && !this.previousKeys[keyCode]\r\n  }\r\n\r\n  /**\r\n   * Check if mouse was just clicked (not held)\r\n   */\r\n  public isMouseJustPressed(): boolean {\r\n    return this.inputState.mouse.isDown && !this.previousMouseState\r\n  }\r\n\r\n  private previousMouseState: boolean = false\r\n\r\n  /**\r\n   * Update input state (called each frame)\r\n   */\r\n  public update(): void {\r\n    // Calculate tilt input based on independent left/right side controls\r\n    let leftSideInput = 0\r\n    let rightSideInput = 0\r\n    \r\n    // Left side controls (A raises, Z lowers)\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1\r\n    }\r\n    \r\n    // Right side controls (Up raises, Down lowers)\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1\r\n    }\r\n    \r\n    // Calculate overall tilt based on difference between sides\r\n    // Positive tilt = right side higher than left side\r\n    const tiltInput = (rightSideInput - leftSideInput) * 0.5\r\n    \r\n    // Add mouse tilt control if mouse is being used\r\n    if (this.canvas && this.inputState.mouse.isDown) {\r\n      const rect = this.canvas.getBoundingClientRect()\r\n      const centerX = rect.width / 2\r\n      const mouseX = this.inputState.mouse.x - rect.left\r\n      const mouseTilt = (mouseX - centerX) / centerX\r\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, mouseTilt))\r\n    } else {\r\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, tiltInput))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call this at the end of each frame to update previous key state\r\n   */\r\n  public endFrame(): void {\r\n    // Store previous key state for just-pressed detection\r\n    this.previousKeys = { ...this.inputState.keys }\r\n    // Store previous mouse state for just-pressed detection\r\n    this.previousMouseState = this.inputState.mouse.isDown\r\n  }\r\n\r\n  /**\r\n   * Setup global event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Keyboard events\r\n    document.addEventListener('keydown', this.handleKeyDown.bind(this))\r\n    document.addEventListener('keyup', this.handleKeyUp.bind(this))\r\n    \r\n    // Prevent default behavior for game keys\r\n    document.addEventListener('keydown', (e) => {\r\n      const allKeys = Object.values(this.keyBindings).flat()\r\n      if (allKeys.includes(e.code)) {\r\n        e.preventDefault()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Setup canvas-specific event listeners\r\n   */\r\n  private setupCanvasListeners(): void {\r\n    if (!this.canvas) return\r\n\r\n    // Mouse events\r\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this))\r\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this))\r\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this))\r\n    this.canvas.addEventListener('mouseleave', this.handleMouseLeave.bind(this))\r\n\r\n    // Touch events for mobile support\r\n    this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this))\r\n    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this))\r\n    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Handle keydown events\r\n   */\r\n  private handleKeyDown(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = true\r\n  }\r\n\r\n  /**\r\n   * Handle keyup events\r\n   */\r\n  private handleKeyUp(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = false\r\n  }\r\n\r\n  /**\r\n   * Handle mouse down events\r\n   */\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = true\r\n    this.inputState.mouse.button = event.button\r\n    this.updateMousePosition(event)\r\n  }\r\n\r\n  /**\r\n   * Handle mouse up events\r\n   */\r\n  private handleMouseUp(_event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = false\r\n    this.inputState.mouse.button = -1\r\n  }\r\n\r\n  /**\r\n   * Handle mouse move events\r\n   */\r\n  private handleMouseMove(event: MouseEvent): void {\r\n    this.updateMousePosition(event)\r\n  }\r\n\r\n  /**\r\n   * Handle mouse leave events\r\n   */\r\n  private handleMouseLeave(): void {\r\n    this.inputState.mouse.isDown = false\r\n    this.inputState.mouse.button = -1\r\n  }\r\n\r\n  /**\r\n   * Handle touch start events\r\n   */\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    if (event.touches.length > 0) {\r\n      this.inputState.mouse.isDown = true\r\n      this.updateTouchPosition(event.touches[0])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch end events\r\n   */\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    this.inputState.mouse.isDown = false\r\n  }\r\n\r\n  /**\r\n   * Handle touch move events\r\n   */\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    if (event.touches.length > 0) {\r\n      this.updateTouchPosition(event.touches[0])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from mouse event\r\n   */\r\n  private updateMousePosition(event: MouseEvent): void {\r\n    this.inputState.mouse.x = event.clientX\r\n    this.inputState.mouse.y = event.clientY\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from touch event\r\n   */\r\n  private updateTouchPosition(touch: Touch): void {\r\n    this.inputState.mouse.x = touch.clientX\r\n    this.inputState.mouse.y = touch.clientY\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  public dispose(): void {\r\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this))\r\n    document.removeEventListener('keyup', this.handleKeyUp.bind(this))\r\n    \r\n    if (this.canvas) {\r\n      this.canvas.removeEventListener('mousedown', this.handleMouseDown.bind(this))\r\n      this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this))\r\n      this.canvas.removeEventListener('mousemove', this.handleMouseMove.bind(this))\r\n      this.canvas.removeEventListener('mouseleave', this.handleMouseLeave.bind(this))\r\n      this.canvas.removeEventListener('touchstart', this.handleTouchStart.bind(this))\r\n      this.canvas.removeEventListener('touchend', this.handleTouchEnd.bind(this))\r\n      this.canvas.removeEventListener('touchmove', this.handleTouchMove.bind(this))\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Level System\r\n// Hole-based navigation system where players guide the ball through holes to reach the goal\r\n\r\nimport { Vector2 } from '../utils/MathUtils'\r\n\r\nexport interface Hole {\r\n  id: string\r\n  position: Vector2\r\n  radius: number\r\n  isGoal: boolean\r\n  isActive: boolean\r\n}\r\n\r\nexport interface LevelData {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  holes: Hole[]\r\n  goalHoles: Hole[]  // Changed from single goalHole to multiple goalHoles\r\n  ballStartPosition: Vector2\r\n  difficulty: number\r\n  bonusMultiplier: number\r\n  requiredGoals: number  // Number of goals that must be reached to complete level\r\n}\r\n\r\nexport class Level {\r\n  private levelData: LevelData\r\n  private isCompleted: boolean = false\r\n  private startTime: number = 0\r\n  private elapsedTime: number = 0\r\n  private completedGoals: Set<string> = new Set()  // Track completed goal holes\r\n\r\n  constructor(levelData: LevelData) {\r\n    this.levelData = levelData\r\n    console.log(`üìã Level ${levelData.id} loaded: ${levelData.name} (${levelData.goalHoles.length} goals)`)\r\n  }\r\n\r\n  /**\r\n   * Start the level timer\r\n   */\r\n  public start(): void {\r\n    this.startTime = Date.now()\r\n    this.elapsedTime = 0\r\n    this.isCompleted = false\r\n    console.log(`üèÅ Level ${this.levelData.id} started`)\r\n  }\r\n\r\n  /**\r\n   * Update level state\r\n   */\r\n  public update(deltaTime: number): void {\r\n    this.elapsedTime += deltaTime\r\n    \r\n    // Update hole glow effects\r\n    this.levelData.holes.forEach(hole => {\r\n      if (hole.isGoal) {\r\n        // Goal hole pulses with a bright glow\r\n        hole.isActive = true\r\n      } else {\r\n        // Regular holes are always active\r\n        hole.isActive = true\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Check if ball falls into any hole\r\n   */\r\n  public checkHoleCollision(ballPosition: Vector2, ballRadius: number): Hole | null {\r\n    for (const hole of this.levelData.holes) {\r\n      if (!hole.isActive) continue\r\n      \r\n      // Skip completed goal holes - balls can no longer fall into them\r\n      if (hole.isGoal && this.completedGoals.has(hole.id)) {\r\n        continue\r\n      }\r\n      \r\n      const dx = ballPosition.x - hole.position.x\r\n      const dy = ballPosition.y - hole.position.y\r\n      const distance = Math.sqrt(dx * dx + dy * dy)\r\n      \r\n      // Ball falls into hole only when ball center crosses into hole boundary\r\n      if (distance <= hole.radius) {\r\n        console.log(`üï≥Ô∏è Ball fell into hole: ${hole.id}`)\r\n        return hole\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Check if ball reaches the goal hole\r\n   */\r\n  public checkGoalReached(ballPosition: Vector2, ballRadius: number): boolean {\r\n    for (const goalHole of this.levelData.goalHoles) {\r\n      // Skip goal holes that are already completed\r\n      if (this.completedGoals.has(goalHole.id)) {\r\n        continue\r\n      }\r\n      \r\n      const dx = ballPosition.x - goalHole.position.x\r\n      const dy = ballPosition.y - goalHole.position.y\r\n      const distance = Math.sqrt(dx * dx + dy * dy)\r\n      \r\n      // Ball reaches goal only when ball center crosses into goal hole boundary\r\n      if (distance <= goalHole.radius) {\r\n        console.log(`üéØ Ball reached goal hole: ${goalHole.id}`)\r\n        this.completedGoals.add(goalHole.id)\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Check if ball falls off the screen (failure condition)\r\n   */\r\n  public checkBallFallOff(ballPosition: Vector2, screenBounds: Vector2): boolean {\r\n    return ballPosition.y > screenBounds.y + 50 // 50px buffer below screen\r\n  }\r\n\r\n  /**\r\n   * Check if level is complete\r\n   */\r\n  public checkLevelComplete(): boolean {\r\n    // Level is complete when all required goals are reached\r\n    if (!this.isCompleted && this.completedGoals.size >= this.levelData.requiredGoals) {\r\n      this.markComplete()\r\n      return true\r\n    }\r\n    return this.isCompleted\r\n  }\r\n\r\n  /**\r\n   * Get number of completed goals\r\n   */\r\n  public getCompletedGoals(): number {\r\n    return this.completedGoals.size\r\n  }\r\n\r\n  /**\r\n   * Get required number of goals\r\n   */\r\n  public getRequiredGoals(): number {\r\n    return this.levelData.requiredGoals\r\n  }\r\n\r\n  /**\r\n   * Check if all goals are completed\r\n   */\r\n  public areAllGoalsCompleted(): boolean {\r\n    return this.completedGoals.size >= this.levelData.requiredGoals\r\n  }\r\n\r\n  /**\r\n   * Check if a specific goal hole has been completed\r\n   */\r\n  public isGoalCompleted(goalId: string): boolean {\r\n    return this.completedGoals.has(goalId)\r\n  }\r\n\r\n  /**\r\n   * Mark level as complete\r\n   */\r\n  public markComplete(): void {\r\n    if (!this.isCompleted) {\r\n      this.isCompleted = true\r\n      console.log(`üèÜ Level ${this.levelData.id} completed!`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate level score based on time and completion\r\n   */\r\n  public calculateScore(): number {\r\n    const baseScore = 1000 // Base score for completing level\r\n    \r\n    // Time bonus (faster completion = higher score)\r\n    const timeBonus = Math.max(0, (60000 - this.elapsedTime) / 100) // 60 seconds max bonus\r\n    \r\n    return Math.floor((baseScore + timeBonus) * this.levelData.bonusMultiplier)\r\n  }\r\n\r\n  /**\r\n   * Get level progress (0-1)\r\n   */\r\n  public getProgress(): number {\r\n    // Progress based on ball's Y position (higher = more progress)\r\n    // This will be calculated by the game based on ball position\r\n    return this.isCompleted ? 1.0 : 0.0\r\n  }\r\n\r\n  /**\r\n   * Get level data\r\n   */\r\n  public getLevelData(): LevelData {\r\n    return this.levelData\r\n  }\r\n\r\n  /**\r\n   * Reset level state\r\n   */\r\n  public reset(): void {\r\n    this.isCompleted = false\r\n    this.startTime = 0\r\n    this.elapsedTime = 0\r\n    this.completedGoals.clear()\r\n    \r\n    // Reset all holes\r\n    this.levelData.holes.forEach(hole => {\r\n      hole.isActive = true\r\n    })\r\n    \r\n    console.log(`üîÑ Level ${this.levelData.id} reset`)\r\n  }\r\n}\r\n\r\nexport class LevelManager {\r\n  private levels: Map<number, LevelData> = new Map()\r\n  private currentLevel: Level | null = null\r\n  private unlockedLevels: Set<number> = new Set([1]) // Level 1 is unlocked by default\r\n\r\n  constructor() {\r\n    console.log('üìö LevelManager initialized')\r\n    this.loadLevels()\r\n  }\r\n\r\n  /**\r\n   * Generate holes for a level with increasing density from bottom to top\r\n   */\r\n  private generateHoles(levelId: number): { holes: Hole[], goalHoles: Hole[] } {\r\n    const holes: Hole[] = []\r\n    const PLAYFIELD_WIDTH = 360\r\n    const PLAYFIELD_HEIGHT = 640\r\n    const BALL_RADIUS = 14\r\n    const HOLE_RADIUS = BALL_RADIUS // Holes are exactly ball size\r\n    const BUFFER = 8 // Minimum spacing between holes\r\n    \r\n    // Bar starts at Y=590, so holes should start at least 10px above that\r\n    const BAR_START_POSITION = 590\r\n    const HOLE_START_Y = BAR_START_POSITION - 10 // Y=580\r\n    const TOP_BOUNDARY = 50 // Top of playfield\r\n    const GOAL_AREA_HEIGHT = 100 // Reserve top 100px for goal\r\n    \r\n    // Generate goal holes near the top (Y: 50-150)\r\n    const goalHoles: Hole[] = []\r\n    const numGoals = levelId + 1 // Level 1 = 2 goals, Level 2 = 3 goals, etc.\r\n    \r\n    for (let i = 0; i < numGoals; i++) {\r\n      let attempts = 0\r\n      let validPosition = false\r\n      \r\n      while (!validPosition && attempts < 100) {\r\n        const goalX = 50 + Math.random() * (PLAYFIELD_WIDTH - 100)\r\n        const goalY = TOP_BOUNDARY + Math.random() * GOAL_AREA_HEIGHT\r\n        \r\n        // Check if position is valid (not too close to other goal holes)\r\n        validPosition = true\r\n        for (const existingGoal of goalHoles) {\r\n          const dx = goalX - existingGoal.position.x\r\n          const dy = goalY - existingGoal.position.y\r\n          const distance = Math.sqrt(dx * dx + dy * dy)\r\n          \r\n          if (distance < (HOLE_RADIUS * 3 + BUFFER)) { // More spacing for goal holes\r\n            validPosition = false\r\n            break\r\n          }\r\n        }\r\n        \r\n        if (validPosition) {\r\n          goalHoles.push({\r\n            id: `goal-${levelId}-${i}`,\r\n            position: { x: goalX, y: goalY },\r\n            radius: HOLE_RADIUS,\r\n            isGoal: true,\r\n            isActive: true\r\n          })\r\n        }\r\n        \r\n        attempts++\r\n      }\r\n    }\r\n    \r\n    // Add goal holes to the holes array\r\n    holes.push(...goalHoles)\r\n    \r\n    // Generate regular holes with INCREASING density toward the top\r\n    const sections = 10 // Divide playfield into sections\r\n    const playableHeight = HOLE_START_Y - (TOP_BOUNDARY + GOAL_AREA_HEIGHT) // Y=580 to Y=150\r\n    const sectionHeight = playableHeight / sections\r\n    \r\n    // Difficulty scaling - sparse at bottom, dense at top\r\n    const baseDensity = 0.05 + (levelId - 1) * 0.01 // Very sparse at bottom\r\n    const maxDensity = 0.3 + (levelId - 1) * 0.08 // Dense at top\r\n    \r\n    for (let section = 0; section < sections; section++) {\r\n      // Section 0 is at bottom (Y=580), section 9 is near top (Y=150)\r\n      const sectionY = HOLE_START_Y - (section + 1) * sectionHeight\r\n      \r\n      // Density increases as we go toward the top (higher section number = higher density)\r\n      const sectionDensity = baseDensity + (section / sections) * maxDensity\r\n      const holesInSection = Math.floor(sectionDensity * 12) // 12 holes max per section\r\n      \r\n      for (let i = 0; i < holesInSection; i++) {\r\n        let attempts = 0\r\n        let validPosition = false\r\n        \r\n        while (!validPosition && attempts < 50) {\r\n          const x = HOLE_RADIUS + Math.random() * (PLAYFIELD_WIDTH - 2 * HOLE_RADIUS)\r\n          const y = sectionY + Math.random() * sectionHeight\r\n          \r\n          // Check if position is valid (not too close to other holes)\r\n          validPosition = true\r\n          for (const existingHole of holes) {\r\n            const dx = x - existingHole.position.x\r\n            const dy = y - existingHole.position.y\r\n            const distance = Math.sqrt(dx * dx + dy * dy)\r\n            \r\n            if (distance < (HOLE_RADIUS * 2 + BUFFER)) {\r\n              validPosition = false\r\n              break\r\n            }\r\n          }\r\n          \r\n          if (validPosition) {\r\n            holes.push({\r\n              id: `hole-${levelId}-${section}-${i}`,\r\n              position: { x, y },\r\n              radius: HOLE_RADIUS,\r\n              isGoal: false,\r\n              isActive: true\r\n            })\r\n          }\r\n          \r\n          attempts++\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`üï≥Ô∏è Generated ${holes.length} holes for level ${levelId} (sparse at bottom, dense at top)`)\r\n    \r\n    return { holes, goalHoles }\r\n  }\r\n\r\n  /**\r\n   * Load all level definitions\r\n   */\r\n  private loadLevels(): void {\r\n    // Generate 5 levels with increasing difficulty\r\n    for (let levelId = 1; levelId <= 5; levelId++) {\r\n      const { holes, goalHoles } = this.generateHoles(levelId)\r\n      \r\n      const levelData: LevelData = {\r\n        id: levelId,\r\n        name: `Circuit Level ${levelId}`,\r\n        description: `Navigate through the holes to reach the goal circuit. Difficulty: ${levelId}/5`,\r\n        holes,\r\n        goalHoles,\r\n        ballStartPosition: { x: 343, y: 584 }, // On the tilting bar (bar starts at Y=590, ball should be slightly above)\r\n        difficulty: levelId,\r\n        bonusMultiplier: 1.0 + (levelId - 1) * 0.2,\r\n        requiredGoals: goalHoles.length\r\n      }\r\n      \r\n      this.levels.set(levelId, levelData)\r\n    }\r\n    \r\n    console.log(`üìö Loaded ${this.levels.size} levels`)\r\n  }\r\n\r\n  /**\r\n   * Load a specific level\r\n   */\r\n  public loadLevel(levelId: number): Level | null {\r\n    const levelData = this.levels.get(levelId)\r\n    if (!levelData) {\r\n      console.warn(`‚ö†Ô∏è Level ${levelId} not found`)\r\n      return null\r\n    }\r\n    \r\n    if (!this.isLevelUnlocked(levelId)) {\r\n      console.warn(`üîí Level ${levelId} is locked`)\r\n      return null\r\n    }\r\n    \r\n    this.currentLevel = new Level(levelData)\r\n    return this.currentLevel\r\n  }\r\n\r\n  /**\r\n   * Check if level is unlocked\r\n   */\r\n  public isLevelUnlocked(levelId: number): boolean {\r\n    return this.unlockedLevels.has(levelId)\r\n  }\r\n\r\n  /**\r\n   * Unlock a level\r\n   */\r\n  public unlockLevel(levelId: number): void {\r\n    if (!this.unlockedLevels.has(levelId)) {\r\n      this.unlockedLevels.add(levelId)\r\n      console.log(`üîì Level ${levelId} unlocked`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current level\r\n   */\r\n  public getCurrentLevel(): Level | null {\r\n    return this.currentLevel\r\n  }\r\n\r\n  /**\r\n   * Get available levels\r\n   */\r\n  public getAvailableLevels(): number[] {\r\n    return Array.from(this.levels.keys())\r\n  }\r\n\r\n  /**\r\n   * Get unlocked levels\r\n   */\r\n  public getUnlockedLevels(): number[] {\r\n    return Array.from(this.unlockedLevels)\r\n  }\r\n\r\n  /**\r\n   * Get level data\r\n   */\r\n  public getLevelData(levelId: number): LevelData | null {\r\n    return this.levels.get(levelId) || null\r\n  }\r\n} ","// Circuit Breaker - Audio Manager\r\n// Handles sound effects, background music, and audio processing using Web Audio API\r\n\r\nexport interface AudioConfig {\r\n  masterVolume: number\r\n  sfxVolume: number\r\n  musicVolume: number\r\n  enabled: boolean\r\n}\r\n\r\nexport interface SoundEffect {\r\n  id: string\r\n  buffer: AudioBuffer | null\r\n  volume: number\r\n  loop: boolean\r\n  pitch: number\r\n}\r\n\r\nexport class AudioManager {\r\n  private audioContext: AudioContext | null = null\r\n  private masterGain: GainNode | null = null\r\n  private sfxGain: GainNode | null = null\r\n  private musicGain: GainNode | null = null\r\n  private config: AudioConfig = {\r\n    masterVolume: 0.7,\r\n    sfxVolume: 0.8,\r\n    musicVolume: 0.4,\r\n    enabled: true\r\n  }\r\n  \r\n  private soundEffects: Map<string, SoundEffect> = new Map()\r\n  private loadedSounds: Map<string, AudioBuffer> = new Map()\r\n  private currentMusic: AudioBufferSourceNode | null = null\r\n  private isInitialized: boolean = false\r\n\r\n  constructor() {\r\n    console.log('üîä AudioManager initialized')\r\n  }\r\n\r\n  /**\r\n   * Initialize the audio system\r\n   */\r\n  public async init(): Promise<void> {\r\n    if (this.isInitialized) return\r\n\r\n    try {\r\n      // Create audio context\r\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()\r\n      \r\n      // Create gain nodes for volume control\r\n      this.masterGain = this.audioContext.createGain()\r\n      this.sfxGain = this.audioContext.createGain()\r\n      this.musicGain = this.audioContext.createGain()\r\n      \r\n      // Connect gain nodes\r\n      this.sfxGain.connect(this.masterGain)\r\n      this.musicGain.connect(this.masterGain)\r\n      this.masterGain.connect(this.audioContext.destination)\r\n      \r\n      // Set initial volumes\r\n      this.masterGain.gain.value = this.config.masterVolume\r\n      this.sfxGain.gain.value = this.config.sfxVolume\r\n      this.musicGain.gain.value = this.config.musicVolume\r\n      \r\n      // Create procedural sound effects\r\n      await this.createProceduralSounds()\r\n      \r\n      this.isInitialized = true\r\n      console.log('‚úÖ Audio system initialized')\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to initialize audio system:', error)\r\n      this.config.enabled = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create procedural sound effects using Web Audio API\r\n   */\r\n  private async createProceduralSounds(): Promise<void> {\r\n    if (!this.audioContext) return\r\n\r\n    // Ball bounce sound - realistic metallic ping\r\n    const bounceBuffer = this.createBounceSound()\r\n    this.soundEffects.set('bounce', {\r\n      id: 'bounce',\r\n      buffer: bounceBuffer,\r\n      volume: 0.6,\r\n      loop: false,\r\n      pitch: 1.0\r\n    })\r\n\r\n    // Ball rolling sound - continuous rumble\r\n    const rollBuffer = this.createRollingSound()\r\n    this.soundEffects.set('roll', {\r\n      id: 'roll',\r\n      buffer: rollBuffer,\r\n      volume: 0.3,\r\n      loop: true,\r\n      pitch: 1.0\r\n    })\r\n\r\n    // Electrical zap sound - sharp electronic buzz\r\n    const zapBuffer = this.createElectricalZap()\r\n    this.soundEffects.set('zap', {\r\n      id: 'zap',\r\n      buffer: zapBuffer,\r\n      volume: 0.7,\r\n      loop: false,\r\n      pitch: 1.0\r\n    })\r\n\r\n    // Target port activation - satisfying chime\r\n    const targetBuffer = this.createTargetSound()\r\n    this.soundEffects.set('target', {\r\n      id: 'target',\r\n      buffer: targetBuffer,\r\n      volume: 0.8,\r\n      loop: false,\r\n      pitch: 1.0\r\n    })\r\n\r\n    // Level complete - triumphant fanfare\r\n    const completeBuffer = this.createLevelCompleteSound()\r\n    this.soundEffects.set('level_complete', {\r\n      id: 'level_complete',\r\n      buffer: completeBuffer,\r\n      volume: 0.9,\r\n      loop: false,\r\n      pitch: 1.0\r\n    })\r\n\r\n    // UI click sound - subtle beep\r\n    const clickBuffer = this.createUIClickSound()\r\n    this.soundEffects.set('ui_click', {\r\n      id: 'ui_click',\r\n      buffer: clickBuffer,\r\n      volume: 0.5,\r\n      loop: false,\r\n      pitch: 1.0\r\n    })\r\n\r\n    console.log(`üéµ Created ${this.soundEffects.size} procedural sound effects`)\r\n  }\r\n\r\n  /**\r\n   * Create realistic ball bounce sound\r\n   */\r\n  private createBounceSound(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 0.2 // 200ms\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate\r\n      const envelope = Math.exp(-t * 8) // Quick decay\r\n      \r\n      // Metallic ping with harmonics\r\n      const fundamental = Math.sin(2 * Math.PI * 800 * t) * 0.5\r\n      const harmonic2 = Math.sin(2 * Math.PI * 1600 * t) * 0.3\r\n      const harmonic3 = Math.sin(2 * Math.PI * 2400 * t) * 0.2\r\n      \r\n      // Add some noise for realism\r\n      const noise = (Math.random() - 0.5) * 0.1\r\n      \r\n      data[i] = (fundamental + harmonic2 + harmonic3 + noise) * envelope\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Create ball rolling sound\r\n   */\r\n  private createRollingSound(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 1.0 // 1 second loop\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate\r\n      \r\n      // Low frequency rumble with random variations\r\n      const rumble = Math.sin(2 * Math.PI * 60 * t) * 0.3\r\n      const highFreq = Math.sin(2 * Math.PI * 200 * t) * 0.1\r\n      const noise = (Math.random() - 0.5) * 0.2\r\n      \r\n      data[i] = rumble + highFreq + noise\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Create electrical zap sound\r\n   */\r\n  private createElectricalZap(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 0.3\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate\r\n      const envelope = Math.exp(-t * 6)\r\n      \r\n      // Sharp, buzzing electrical sound\r\n      const buzz = Math.sin(2 * Math.PI * 1200 * t) * 0.4\r\n      const crackle = Math.sin(2 * Math.PI * 3000 * t) * 0.3\r\n      const noise = (Math.random() - 0.5) * 0.5\r\n      \r\n      data[i] = (buzz + crackle + noise) * envelope\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Create target port activation sound\r\n   */\r\n  private createTargetSound(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 0.5\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate\r\n      const envelope = Math.exp(-t * 4)\r\n      \r\n      // Pleasant chime sound\r\n      const chime1 = Math.sin(2 * Math.PI * 523 * t) * 0.5 // C5\r\n      const chime2 = Math.sin(2 * Math.PI * 659 * t) * 0.3 // E5\r\n      const chime3 = Math.sin(2 * Math.PI * 784 * t) * 0.2 // G5\r\n      \r\n      data[i] = (chime1 + chime2 + chime3) * envelope\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Create level complete sound\r\n   */\r\n  private createLevelCompleteSound(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 1.0\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    // Simple ascending melody\r\n    const notes = [523, 659, 784, 1047] // C5, E5, G5, C6\r\n    const noteLength = length / notes.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const noteIndex = Math.floor(i / noteLength)\r\n      const t = (i % noteLength) / sampleRate\r\n      const envelope = Math.exp(-t * 2)\r\n      \r\n      const freq = notes[noteIndex] || notes[notes.length - 1]\r\n      const tone = Math.sin(2 * Math.PI * freq * t) * envelope * 0.5\r\n      \r\n      data[i] = tone\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Create UI click sound\r\n   */\r\n  private createUIClickSound(): AudioBuffer {\r\n    if (!this.audioContext) return null as any\r\n\r\n    const sampleRate = this.audioContext.sampleRate\r\n    const duration = 0.1\r\n    const length = sampleRate * duration\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate\r\n      const envelope = Math.exp(-t * 20)\r\n      \r\n      const click = Math.sin(2 * Math.PI * 1000 * t) * envelope * 0.3\r\n      data[i] = click\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * Play a sound effect\r\n   */\r\n  public playSound(soundId: string, volume: number = 1.0, pitch: number = 1.0): void {\r\n    if (!this.config.enabled || !this.audioContext || !this.isInitialized) return\r\n\r\n    const sound = this.soundEffects.get(soundId)\r\n    if (!sound || !sound.buffer) {\r\n      console.warn(`üîá Sound not found: ${soundId}`)\r\n      return\r\n    }\r\n\r\n    try {\r\n      const source = this.audioContext.createBufferSource()\r\n      const gainNode = this.audioContext.createGain()\r\n      \r\n      source.buffer = sound.buffer\r\n      source.loop = sound.loop\r\n      source.playbackRate.value = pitch\r\n      \r\n      gainNode.gain.value = sound.volume * volume\r\n      \r\n      source.connect(gainNode)\r\n      gainNode.connect(this.sfxGain!)\r\n      \r\n      source.start()\r\n      \r\n      // Auto-cleanup for non-looping sounds\r\n      if (!sound.loop) {\r\n        source.addEventListener('ended', () => {\r\n          source.disconnect()\r\n          gainNode.disconnect()\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error(`‚ùå Error playing sound ${soundId}:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play ball bounce sound with velocity-based pitch\r\n   */\r\n  public playBounceSound(velocity: number): void {\r\n    const normalizedVelocity = Math.min(velocity / 500, 1.0)\r\n    const volume = 0.3 + normalizedVelocity * 0.7\r\n    const pitch = 0.8 + normalizedVelocity * 0.4\r\n    \r\n    this.playSound('bounce', volume, pitch)\r\n  }\r\n\r\n  /**\r\n   * Play rolling sound (continuous)\r\n   */\r\n  public playRollingSound(): void {\r\n    // Only play if not already playing\r\n    this.playSound('roll', 0.5)\r\n  }\r\n\r\n  /**\r\n   * Stop all sounds\r\n   */\r\n  public stopAllSounds(): void {\r\n    if (!this.audioContext) return\r\n\r\n    try {\r\n      // Stop current music\r\n      if (this.currentMusic) {\r\n        this.currentMusic.stop()\r\n        this.currentMusic = null\r\n      }\r\n      \r\n      // Note: Individual sound effects will stop automatically\r\n      console.log('üîá All sounds stopped')\r\n    } catch (error) {\r\n      console.error('‚ùå Error stopping sounds:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set master volume\r\n   */\r\n  public setMasterVolume(volume: number): void {\r\n    this.config.masterVolume = Math.max(0, Math.min(1, volume))\r\n    if (this.masterGain) {\r\n      this.masterGain.gain.value = this.config.masterVolume\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set sound effects volume\r\n   */\r\n  public setSFXVolume(volume: number): void {\r\n    this.config.sfxVolume = Math.max(0, Math.min(1, volume))\r\n    if (this.sfxGain) {\r\n      this.sfxGain.gain.value = this.config.sfxVolume\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set music volume\r\n   */\r\n  public setMusicVolume(volume: number): void {\r\n    this.config.musicVolume = Math.max(0, Math.min(1, volume))\r\n    if (this.musicGain) {\r\n      this.musicGain.gain.value = this.config.musicVolume\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable/disable audio\r\n   */\r\n  public setEnabled(enabled: boolean): void {\r\n    this.config.enabled = enabled\r\n    if (!enabled) {\r\n      this.stopAllSounds()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get audio configuration\r\n   */\r\n  public getConfig(): AudioConfig {\r\n    return { ...this.config }\r\n  }\r\n\r\n  /**\r\n   * Resume audio context (required for user interaction)\r\n   */\r\n  public async resumeContext(): Promise<void> {\r\n    if (this.audioContext && this.audioContext.state === 'suspended') {\r\n      await this.audioContext.resume()\r\n      console.log('üîä Audio context resumed')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if audio is available\r\n   */\r\n  public isAvailable(): boolean {\r\n    return this.isInitialized && this.config.enabled\r\n  }\r\n} ","// Circuit Breaker - Main Game Class\n// Handles game state management and core game loop\n\nimport { GameState, GameStateType } from './GameState'\nimport { GameLoop } from './GameLoop'\nimport { Renderer } from '../rendering/Renderer'\nimport { PhysicsEngine } from '../physics/PhysicsEngine'\nimport { TiltingBar } from './TiltingBar'\nimport { InputManager } from '../input/InputManager'\nimport { LevelManager, Level } from './Level'\nimport { AudioManager } from '../audio/AudioManager'\nimport { fontManager } from '../utils/FontManager'\n\nexport class Game {\n  private gameState: GameState\n  private gameLoop: GameLoop\n  private renderer: Renderer\n  private physicsEngine: PhysicsEngine\n  private inputManager: InputManager\n  private tiltingBar: TiltingBar\n  private levelManager: LevelManager\n  private audioManager: AudioManager\n  private currentLevel: Level | null = null\n  private isRunning: boolean = false\n  private levelCompletionHandled: boolean = false\n  \n  // Hole animation state\n  private isAnimatingHoleFall: boolean = false\n  private holeAnimationState: {\n    ballId: string\n    holePosition: { x: number; y: number }\n    startTime: number\n    duration: number\n    startPosition: { x: number; y: number }\n    scale: number\n    opacity: number\n  } | null = null\n\n  constructor() {\n    this.gameState = new GameState()\n    this.gameLoop = new GameLoop()\n    this.renderer = new Renderer()\n    this.physicsEngine = new PhysicsEngine()\n    this.inputManager = new InputManager()\n    this.levelManager = new LevelManager()\n    this.audioManager = new AudioManager()\n    this.tiltingBar = new TiltingBar({\n      position: { x: 180, y: 590 }, // Center of 360px width screen, near bottom\n      width: 360, // Full width of screen\n      height: 8,\n      maxRotation: Math.PI / 4, // 45 degrees\n      rotationSpeed: 3,\n      friction: 0.05 // Low friction for smooth rolling\n    })\n    console.log('üéÆ Circuit Breaker - Game initialized')\n  }\n\n  /**\n   * Initialize the game\n   */\n  public async init(): Promise<void> {\n    try {\n      console.log('üéÆ Initializing Circuit Breaker...')\n      \n      // Initialize renderer with canvas\n      const canvas = document.getElementById('game-canvas') as HTMLCanvasElement\n      if (!canvas) {\n        throw new Error('Canvas element not found')\n      }\n      this.renderer.init(canvas)\n      \n      // Preload custom fonts\n      await fontManager.preloadFonts()\n      \n      // Initialize physics engine with realistic pinball settings\n      this.physicsEngine.setGravity(0, 520) // Stronger gravity for heavier pinball\n      this.physicsEngine.setAirResistance(0.999) // Minimal air resistance\n      this.physicsEngine.setBounds(360, 640) // Match canvas size\n      this.physicsEngine.setTiltingBar(this.tiltingBar)\n      \n      // Set up physics audio callback for collision sounds\n      this.physicsEngine.setAudioCallback((velocity: number, type: string) => {\n        // Only play collision sounds when actually playing the game\n        if (this.gameState.isPlaying() && type === 'bounce') {\n          this.audioManager.playBounceSound(velocity)\n        }\n      })\n      \n      // Initialize input manager\n      this.inputManager.init(canvas)\n      \n      // Initialize audio system\n      await this.audioManager.init()\n      \n      // Create main game ball starting off the left side of playfield\n      // Real pinball specifications: 1 1/16\" diameter (27mm), ~80-100g weight\n      const ballRadius = 14 // Slightly larger for more substantial feel\n      const ballStartX = -50 // Off the left side (hidden)\n      const ballStartY = 300 // Middle height (will be repositioned when started)\n      \n      // Create main game ball with realistic pinball physics\n      const ball = this.physicsEngine.createObject({\n        id: 'game-ball',\n        x: ballStartX,\n        y: ballStartY,\n        radius: ballRadius,\n        mass: 6, // Heavy steel ball (6x heavier than generic ball)\n        restitution: 0.65, // Moderate bounce like real pinball\n        friction: 0.18, // Steel on metal/plastic surface friction\n        isStatic: false\n      })\n      \n      this.physicsEngine.addObject(ball)\n      \n      // Sync physics engine debug mode with game state debug mode\n      this.physicsEngine.setDebug(this.gameState.isDebugMode())\n      \n      // Load the first level\n      this.currentLevel = this.levelManager.loadLevel(1)\n      if (this.currentLevel) {\n        this.currentLevel.start()\n        this.levelCompletionHandled = false // Initialize completion flag\n        console.log('üéØ Level 1 loaded and started')\n      }\n      \n      this.isRunning = true\n      console.log('‚úÖ Circuit Breaker initialized successfully')\n      \n    } catch (error) {\n      console.error('‚ùå Failed to initialize Circuit Breaker:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Start the game loop\n   */\n  public start(): void {\n    if (!this.isRunning) {\n      console.warn('‚ö†Ô∏è Game not initialized. Call init() first.')\n      return\n    }\n\n    console.log('‚ñ∂Ô∏è Starting Circuit Breaker...')\n    this.gameState.setState(GameStateType.MENU)\n    this.gameLoop.start(this.gameState, this.renderer, this.physicsEngine, this)\n  }\n\n  /**\n   * Update game logic (called by GameLoop)\n   */\n  public update(deltaTime: number): void {\n    // Update input\n    this.inputManager.update()\n    \n    // Handle menu input - start new game when clicking or pressing space\n    if (this.gameState.isState(GameStateType.MENU)) {\n      if (this.inputManager.isActionJustPressed('start') || this.inputManager.isMouseJustPressed()) {\n        console.log('üéÆ Starting new game...')\n        this.startNewGame()\n        \n        // Resume audio context on user interaction (required by browsers)\n        this.audioManager.resumeContext()\n        \n        // Play UI click sound\n        this.audioManager.playSound('ui_click')\n      }\n      \n      // Handle debug mode toggle\n      if (this.inputManager.isKeyJustPressed('KeyD')) {\n        this.gameState.toggleDebugMode()\n        \n        // Update physics engine debug mode to match\n        this.physicsEngine.setDebug(this.gameState.isDebugMode())\n        \n        // Play UI click sound\n        this.audioManager.playSound('ui_click')\n      }\n    }\n    \n    // Handle game over input - return to menu when clicking or pressing space\n    if (this.gameState.isState(GameStateType.GAME_OVER)) {\n      if (this.inputManager.isActionJustPressed('start') || this.inputManager.isMouseJustPressed()) {\n        console.log('üè† Returning to menu...')\n        this.gameState.reset()\n        \n        // Play UI click sound\n        this.audioManager.playSound('ui_click')\n      }\n    }\n\n    // Handle confirmation dialog input\n    if (this.gameState.isConfirmingMenu()) {\n      // Y key or Enter - confirm return to menu\n      if (this.inputManager.isKeyJustPressed('KeyY') || this.inputManager.isKeyJustPressed('Enter')) {\n        console.log('‚úÖ Confirmed - returning to menu')\n        this.gameState.reset()\n        this.audioManager.playSound('ui_click')\n      }\n      // N key or Escape - cancel and return to game\n      else if (this.inputManager.isKeyJustPressed('KeyN') || this.inputManager.isKeyJustPressed('Escape')) {\n        console.log('‚ùå Cancelled - returning to game')\n        this.gameState.setState(GameStateType.PLAYING)\n        this.audioManager.playSound('ui_click')\n      }\n    }\n    \n    // Only process gameplay logic when actually playing\n    if (this.gameState.isPlaying()) {\n      // Handle escape key - show confirmation dialog\n      if (this.inputManager.isActionJustPressed('pause')) {\n        console.log('‚è∏Ô∏è Escape pressed - showing confirmation dialog')\n        this.gameState.setState(GameStateType.CONFIRM_MENU)\n        this.audioManager.playSound('ui_click')\n        return // Don't process other gameplay input\n      }\n\n      // Update hole animation if active\n      if (this.isAnimatingHoleFall) {\n        this.updateHoleAnimation(deltaTime)\n      }\n      \n      // Check for start key press to place ball on bar\n      if (this.inputManager.isActionJustPressed('start')) {\n        console.log('üéØ SPACE pressed - placing ball on bar')\n        this.placeBallOnBar()\n        \n        // Resume audio context on user interaction (required by browsers)\n        this.audioManager.resumeContext()\n        \n        // Play UI click sound\n        this.audioManager.playSound('ui_click')\n      }\n      \n      // Update tilting bar based on independent side controls (absolute movement)\n      const leftSideInput = this.inputManager.getLeftSideInput()\n      const rightSideInput = this.inputManager.getRightSideInput()\n      \n      this.tiltingBar.moveLeftSide(leftSideInput)\n      this.tiltingBar.moveRightSide(rightSideInput)\n      this.tiltingBar.update(deltaTime / 1000) // Convert to seconds\n      \n      // Update current level\n      if (this.currentLevel) {\n        this.currentLevel.update(deltaTime)\n        // Only check collisions if not animating\n        if (!this.isAnimatingHoleFall) {\n          this.checkCollisions()\n          this.checkWinLoseConditions()\n        }\n      }\n    }\n    \n    // End frame - update previous input state for next frame\n    this.inputManager.endFrame()\n  }\n\n  /**\n   * Place the ball at right edge, 10 pixels above the bar's top edge with zero velocity\n   */\n  private placeBallOnBar(): void {\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball')\n    if (ball) {\n      const ballRadius = ball.radius\n      // Position ball at right edge with 5px gap from playfield edge\n      const ballX = 360 - ballRadius - 5\n      \n      // Get the precise bar positioning using the bar's own thickness property\n      const barRightSideY = this.tiltingBar.rightSideHeight // 590 (center line of bar)\n      const barThickness = this.tiltingBar.thickness // Use actual thickness property\n      const barTopSurface = barRightSideY - barThickness / 2 // Top collision surface\n      \n      // Position ball so its bottom edge is exactly 10 pixels above the bar's top surface\n      // Ball center must be at: barTopSurface - 10 - ballRadius\n      const ballY = barTopSurface - 10 - ballRadius\n      \n             console.log(`üèÄ Precise ball placement:`)\n       console.log(`   Ball radius: ${ballRadius}`)\n       console.log(`   Bar right side Y: ${barRightSideY}`)\n       console.log(`   Bar thickness: ${barThickness}`)\n       console.log(`   Bar top surface: ${barTopSurface}`)\n       console.log(`   Ball center Y: ${ballY}`)\n       console.log(`   Ball bottom Y: ${ballY + ballRadius} (should be ${barTopSurface - 10})`)\n       console.log(`   Gap between ball and bar: ${(ballY + ballRadius) - barTopSurface} pixels`)\n      \n      // Set ball position\n      ball.position.x = ballX\n      ball.position.y = ballY\n      \n      // Set previous position to current position for ZERO velocity\n      ball.previousPosition.x = ball.position.x\n      ball.previousPosition.y = ball.position.y\n      \n      // Ensure velocity is zero\n      ball.velocity.x = 0\n      ball.velocity.y = 0\n      \n      // Update backward compatibility properties\n      ball.x = ball.position.x\n      ball.y = ball.position.y\n      ball.vx = 0\n      ball.vy = 0\n      \n      console.log(`‚úÖ Ball placed at (${ball.position.x}, ${ball.position.y})`)\n    } else {\n      console.error('‚ùå Ball not found in physics engine!')\n    }\n  }\n\n  /**\n   * Render additional game elements (called by GameLoop)\n   */\n  public renderGameplay(): void {\n    // Render tilting bar\n    this.renderer.drawTiltingBar(this.tiltingBar)\n    \n    // Render level elements\n    if (this.currentLevel) {\n      const levelData = this.currentLevel.getLevelData()\n      \n      // Draw holes\n      levelData.holes.forEach(hole => {\n        // Check if this goal hole has been completed\n        const isCompleted = hole.isGoal && this.currentLevel ? this.currentLevel.isGoalCompleted(hole.id) : false\n        this.renderer.drawHole(hole, isCompleted)\n      })\n      \n      // Draw essential UI (always visible)\n      const ctx = this.renderer.getContext()\n      if (ctx) {\n        ctx.fillStyle = '#00f0ff' // Electric Blue\n        fontManager.setFont(ctx, 'primary', 12)\n        ctx.textAlign = 'left'\n        ctx.fillText(`Level: ${levelData.id} - ${levelData.name}`, 10, 20)\n        ctx.fillText(`Score: ${this.gameState.getStateData().score}`, 10, 35)\n        ctx.fillText(`Lives: ${this.gameState.getStateData().lives}`, 10, 50)\n        \n        // Debug info (only when debug mode is enabled)\n        if (this.gameState.isDebugMode()) {\n          ctx.fillText(`Progress: ${Math.round(this.currentLevel.getProgress() * 100)}%`, 10, 65)\n          \n          // Show multi-goal progress\n          const completedGoals = this.currentLevel.getCompletedGoals()\n          const requiredGoals = this.currentLevel.getRequiredGoals()\n          ctx.fillText(`Goals: ${completedGoals}/${requiredGoals} completed`, 10, 80)\n          \n          if (completedGoals < requiredGoals) {\n            ctx.fillText(`Goal: Navigate to the glowing goal holes`, 10, 95)\n          } else {\n            ctx.fillText(`Goal: All goals completed! Level complete!`, 10, 95)\n          }\n        }\n      }\n    }\n    \n    // Input instructions (only when debug mode is enabled)\n    if (this.gameState.isDebugMode()) {\n      const ctx = this.renderer.getContext()\n      if (ctx) {\n        ctx.fillStyle = '#00f0ff' // Electric Blue\n        fontManager.setFont(ctx, 'primary', 10)\n        ctx.textAlign = 'center'\n        ctx.fillText('SPACE: Start | Left: A(up)/Z(down) | Right: ‚Üë(up)/‚Üì(down)', 180, 580)\n        ctx.fillText('Navigate upward to the goal holes - avoid falling into other holes!', 180, 595)\n      }\n    }\n  }\n\n  /**\n   * Get hole animation state for rendering\n   */\n  public getHoleAnimationState(): { scale: number; opacity: number } | null {\n    return this.holeAnimationState ? {\n      scale: this.holeAnimationState.scale,\n      opacity: this.holeAnimationState.opacity\n    } : null\n  }\n\n  /**\n   * Check if ball is currently animating into a hole\n   */\n  public getIsAnimatingHoleFall(): boolean {\n    return this.isAnimatingHoleFall\n  }\n\n  /**\n   * Check collisions between ball and level elements\n   */\n  private checkCollisions(): void {\n    if (!this.currentLevel) return\n\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball')\n    if (!ball) return\n\n    const ballPosition = { x: ball.position.x, y: ball.position.y }\n    const ballRadius = ball.radius\n\n    // Check if ball reached the goal hole\n    if (this.currentLevel.checkGoalReached(ballPosition, ballRadius)) {\n      this.handleGoalReached()\n      return\n    }\n\n    // Check if ball fell into any hole\n    const hitHole = this.currentLevel.checkHoleCollision(ballPosition, ballRadius)\n    if (hitHole && !hitHole.isGoal) {\n      this.handleHoleCollision(hitHole)\n    }\n\n    // Check if ball fell off screen\n    if (this.currentLevel.checkBallFallOff(ballPosition, { x: 360, y: 640 })) {\n      this.handleBallFallOff()\n    }\n  }\n\n  /**\n   * Check win/lose conditions\n   */\n  private checkWinLoseConditions(): void {\n    if (!this.currentLevel) return\n\n    // Check if level is complete (only handle once per level)\n    if (this.currentLevel.checkLevelComplete() && !this.levelCompletionHandled) {\n      this.levelCompletionHandled = true\n      this.handleLevelComplete()\n    }\n  }\n\n  /**\n   * Handle ball reaching the goal hole\n   */\n  private handleGoalReached(): void {\n    if (!this.currentLevel) return\n\n    console.log('üéØ Goal reached!')\n    \n    // Play target activation sound\n    this.audioManager.playSound('target')\n    \n    // Add bonus score for reaching goal\n    const currentScore = this.gameState.getStateData().score\n    this.gameState.updateStateData({ score: currentScore + 500 })\n    \n    console.log('üí∞ Goal bonus: 500 points')\n    \n    // Check if all goals are completed\n    const completedGoals = this.currentLevel.getCompletedGoals()\n    const requiredGoals = this.currentLevel.getRequiredGoals()\n    \n    console.log(`üéØ Goals completed: ${completedGoals}/${requiredGoals}`)\n    \n    // Only mark level as complete if all goals are reached\n    if (this.currentLevel.areAllGoalsCompleted()) {\n      console.log('üéâ All goals completed! Level complete!')\n      // Level completion will be handled by checkWinLoseConditions\n    } else {\n      console.log(`üîÑ Continue playing! ${requiredGoals - completedGoals} goal(s) remaining`)\n      \n      // Reset tilting bar to starting position\n      this.tiltingBar.reset()\n      \n      // Reset ball to starting position on the bar\n      this.placeBallOnBar()\n    }\n  }\n\n  /**\n   * Handle ball falling into a hole\n   */\n  private handleHoleCollision(hole: any): void {\n    console.log(`üï≥Ô∏è Ball fell into hole: ${hole.id}`)\n    \n    // Play falling sound\n    this.audioManager.playSound('zap') // Use zap sound for falling into holes\n    \n    // Start hole animation instead of immediately resetting\n    this.startHoleAnimation('game-ball', hole.position)\n  }\n\n  /**\n   * Handle ball falling off screen\n   */\n  private handleBallFallOff(): void {\n    console.log('üíÄ Ball fell off screen!')\n    \n    // Reduce lives\n    const currentLives = this.gameState.getStateData().lives\n    if (currentLives > 1) {\n      this.gameState.updateStateData({ lives: currentLives - 1 })\n      console.log(`üíî Lives remaining: ${currentLives - 1}`)\n      \n      // Reset tilting bar to starting position\n      this.tiltingBar.reset()\n      \n      // Reset ball to starting position on the bar\n      this.placeBallOnBar()\n    } else {\n      this.handleGameOver()\n    }\n  }\n\n  /**\n   * Handle level completion\n   */\n  private handleLevelComplete(): void {\n    if (!this.currentLevel) return\n\n    console.log('üèÜ Level completed!')\n    \n    // Play level completion sound\n    this.audioManager.playSound('level_complete')\n    \n    // Add level completion bonus\n    const levelScore = this.currentLevel.calculateScore()\n    const currentScore = this.gameState.getStateData().score\n    this.gameState.updateStateData({ score: currentScore + levelScore })\n    \n    console.log(`üéâ Level bonus: ${levelScore}`)\n    \n    // Move to next level\n    const nextLevelId = this.currentLevel.getLevelData().id + 1\n    this.levelManager.unlockLevel(nextLevelId)\n    \n    // Load next level or show completion\n    if (this.levelManager.getLevelData(nextLevelId)) {\n      this.loadNextLevel(nextLevelId)\n    } else {\n      this.handleGameComplete()\n    }\n  }\n\n  /**\n   * Handle time up\n   */\n  private handleTimeUp(): void {\n    console.log('‚è∞ Time up!')\n    this.handleBallFallOff()\n  }\n\n  /**\n   * Load next level\n   */\n  private loadNextLevel(levelId: number): void {\n    console.log(`üîÑ Loading level ${levelId}...`)\n    \n    this.currentLevel = this.levelManager.loadLevel(levelId)\n    if (this.currentLevel) {\n      this.currentLevel.start()\n      this.gameState.updateStateData({ currentLevel: levelId })\n      this.levelCompletionHandled = false // Reset completion flag for new level\n      \n      // Reset tilting bar to starting position\n      this.tiltingBar.reset()\n      \n      // Reset ball to starting position on the bar\n      this.placeBallOnBar()\n      \n      console.log(`üéØ Level ${levelId} loaded and started`)\n    }\n  }\n\n  /**\n   * Handle game over\n   */\n  private handleGameOver(): void {\n    console.log('üíÄ Game Over!')\n    this.gameState.setState(GameStateType.GAME_OVER)\n    \n    // Play game over sound\n    this.audioManager.playSound('game_over')\n    \n    // Auto-return to menu after 5 seconds if user doesn't interact\n    setTimeout(() => {\n      if (this.gameState.isState(GameStateType.GAME_OVER)) {\n        console.log('üè† Auto-returning to menu...')\n        this.gameState.reset()\n      }\n    }, 5000)\n  }\n\n  /**\n   * Handle game completion\n   */\n  private handleGameComplete(): void {\n    console.log('üéä Game completed! All levels finished!')\n    \n    // Show completion message briefly, then return to main menu\n    setTimeout(() => {\n      console.log('üè† Returning to main menu...')\n      this.gameState.reset()\n    }, 2000) // 2 second delay to show completion\n  }\n\n  /**\n   * Pause the game\n   */\n  public pause(): void {\n    console.log('‚è∏Ô∏è Pausing Circuit Breaker...')\n    this.gameLoop.pause()\n  }\n\n  /**\n   * Resume the game\n   */\n  public resume(): void {\n    console.log('‚ñ∂Ô∏è Resuming Circuit Breaker...')\n    this.gameLoop.resume()\n  }\n\n  /**\n   * Stop the game\n   */\n  public stop(): void {\n    console.log('‚èπÔ∏è Stopping Circuit Breaker...')\n    this.gameLoop.stop()\n    this.isRunning = false\n  }\n\n  /**\n   * Get current game state\n   */\n  public getGameState(): GameState {\n    return this.gameState\n  }\n\n  /**\n   * Check if game is running\n   */\n  public isGameRunning(): boolean {\n    return this.isRunning && this.gameLoop.isGameLoopRunning()\n  }\n\n  /**\n   * Start a new game (used when clicking from menu)\n   */\n  private startNewGame(): void {\n    console.log('üéÆ Starting new game...')\n    \n    // Reset game state\n    this.gameState.setState(GameStateType.PLAYING)\n    this.gameState.updateStateData({\n      currentLevel: 1,\n      score: 0,\n      lives: 3\n    })\n    \n    // Load first level\n    this.currentLevel = this.levelManager.loadLevel(1)\n    if (this.currentLevel) {\n      this.currentLevel.start()\n      this.levelCompletionHandled = false\n      console.log('üéØ Level 1 loaded and started')\n    }\n    \n    // Reset tilting bar to starting position\n    this.tiltingBar.reset()\n    \n    // Reset ball to starting position on the bar\n    this.placeBallOnBar()\n    \n    console.log('üöÄ New game started successfully!')\n  }\n\n  /**\n   * Update hole animation if active\n   */\n  private updateHoleAnimation(deltaTime: number): void {\n    if (!this.holeAnimationState) return\n\n    const elapsed = Date.now() - this.holeAnimationState.startTime\n    const progress = Math.min(elapsed / this.holeAnimationState.duration, 1)\n\n    // Easing function for more natural animation (starts fast, slows down)\n    const easedProgress = 1 - Math.pow(1 - progress, 3)\n\n    // Update animation properties\n    this.holeAnimationState.scale = 1 - easedProgress * 0.9 // Scale down to 10% of original (more dramatic)\n    this.holeAnimationState.opacity = 1 - easedProgress * 0.7 // Fade to 30% opacity\n\n    // Move ball towards hole center initially, then down behind playfield\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === this.holeAnimationState?.ballId)\n    if (ball) {\n      const startPos = this.holeAnimationState.startPosition\n      const holePos = this.holeAnimationState.holePosition\n      \n      if (progress < 0.3) {\n        // First 30% of animation: move towards hole center\n        const moveProgress = progress / 0.3\n        ball.position.x = startPos.x + (holePos.x - startPos.x) * moveProgress\n        ball.position.y = startPos.y + (holePos.y - startPos.y) * moveProgress\n      } else {\n        // Remaining 70%: fall straight down behind playfield\n        const fallProgress = (progress - 0.3) / 0.7\n        ball.position.x = holePos.x // Stay at hole center horizontally\n        ball.position.y = holePos.y + fallProgress * 200 // Fall 200 pixels down behind playfield\n      }\n      \n      // Update previous position to prevent physics interference\n      ball.previousPosition.x = ball.position.x\n      ball.previousPosition.y = ball.position.y\n      \n      // Stop ball physics\n      ball.velocity.x = 0\n      ball.velocity.y = 0\n    }\n\n    // Complete animation\n    if (progress >= 1) {\n      this.completeHoleAnimation()\n    }\n  }\n\n  /**\n   * Start hole animation when ball enters a hole\n   */\n  private startHoleAnimation(ballId: string, holePosition: { x: number; y: number }): void {\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === ballId)\n    if (!ball) return\n\n    console.log(`üé¨ Starting hole animation for ball: ${ballId}`)\n    \n    this.isAnimatingHoleFall = true\n    this.holeAnimationState = {\n      ballId: ballId,\n      holePosition: holePosition,\n      startTime: Date.now(),\n      duration: 500, // Faster animation: 500ms instead of 800ms\n      startPosition: { x: ball.position.x, y: ball.position.y },\n      scale: 1,\n      opacity: 1\n    }\n  }\n\n  /**\n   * Complete hole animation and reset ball\n   */\n  private completeHoleAnimation(): void {\n    console.log('üé¨ Hole animation complete')\n    \n    this.isAnimatingHoleFall = false\n    this.holeAnimationState = null\n    \n    // Now perform the actual ball reset\n    this.handleBallFallOff()\n  }\n} ","// Circuit Breaker - Main Entry Point\r\n// A neon cyberpunk arcade game where players guide data packets through circuit boards\r\n\r\nimport './style.css'\r\nimport { Game } from './core/Game'\r\nimport { Renderer } from './rendering/Renderer'\r\n\r\n// Global game instance\r\nlet game: Game | null = null\r\nlet renderer: Renderer | null = null\r\n\r\n/**\r\n * Initialize the game when DOM is ready\r\n */\r\nasync function initGame(): Promise<void> {\r\n  try {\r\n    console.log('üöÄ Circuit Breaker - Loading...')\r\n\r\n    // Create canvas element\r\n    const gameContainer = document.getElementById('game-container')\r\n    if (!gameContainer) {\r\n      throw new Error('Game container not found')\r\n    }\r\n\r\n    // Clear loading message and create canvas\r\n    gameContainer.innerHTML = ''\r\n    const canvas = document.createElement('canvas')\r\n    canvas.id = 'game-canvas'\r\n    canvas.width = 360  // 9:16 aspect ratio (mobile portrait)\r\n    canvas.height = 640\r\n    gameContainer.appendChild(canvas)\r\n\r\n    // Initialize renderer\r\n    renderer = new Renderer()\r\n    renderer.init(canvas)\r\n\r\n    // Create game instance\r\n    game = new Game()\r\n\r\n    // Initialize game systems\r\n    await game.init()\r\n\r\n    // Start the game\r\n    game.start()\r\n\r\n    console.log('‚úÖ Circuit Breaker loaded successfully')\r\n  } catch (error) {\r\n    console.error('‚ùå Failed to load Circuit Breaker:', error)\r\n    showErrorMessage('Failed to load game. Please refresh the page.')\r\n  }\r\n}\r\n\r\n/**\r\n * Show error message to user\r\n */\r\nfunction showErrorMessage(message: string): void {\r\n  const gameContainer = document.getElementById('game-container')\r\n  if (gameContainer) {\r\n    gameContainer.innerHTML = `\r\n      <div style=\"text-align: center; color: #b600f9;\">\r\n        <h1>Circuit Breaker</h1>\r\n        <p>Error: ${message}</p>\r\n        <p>Please refresh the page to try again.</p>\r\n      </div>\r\n    `\r\n  }\r\n}\r\n\r\n/**\r\n * Handle window resize\r\n */\r\nfunction handleResize(): void {\r\n  // TODO: Handle canvas resize and UI adjustments\r\n  console.log('üì± Window resized')\r\n}\r\n\r\n/**\r\n * Handle page visibility change\r\n */\r\nfunction handleVisibilityChange(): void {\r\n  if (document.hidden) {\r\n    console.log('üëÅÔ∏è Page hidden - pausing game')\r\n    game?.pause()\r\n  } else {\r\n    console.log('üëÅÔ∏è Page visible - resuming game')\r\n    game?.resume()\r\n  }\r\n}\r\n\r\n/**\r\n * Handle before unload\r\n */\r\nfunction handleBeforeUnload(): void {\r\n  console.log('üëã Page unloading - stopping game')\r\n  game?.stop()\r\n}\r\n\r\n// Initialize when DOM is ready\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initGame)\r\n} else {\r\n  initGame()\r\n}\r\n\r\n// Add event listeners\r\nwindow.addEventListener('resize', handleResize)\r\ndocument.addEventListener('visibilitychange', handleVisibilityChange)\r\nwindow.addEventListener('beforeunload', handleBeforeUnload)\r\n\r\n// Export for debugging\r\nexport { game } "],"names":["GameStateType","GameState","__publicField","newState","previousState","__spreadValues","updates","state","enabled","_FontManager","__async","fontPromises","cyberpunksRegular","cyberpunksItalic","interceptorRegular","interceptorItalic","interceptorBold","interceptorBoldItalic","results","loadedCount","result","index","e","error","type","size","weight","fontFamily","ctx","FontManager","fontManager","GameLoop","gameState","renderer","physicsEngine","game","currentTime","deltaTime","_gameState","obj","pos","radius","manifolds","manifold","constraints","constraint","animationState","objects","dynamicObjects","staticObjects","collisionCount","x","y","time","pulseAlpha","debugStatus","debugColor","dialogWidth","dialogHeight","dialogX","dialogY","buttonY","stateData","Debug","message","args","logMessage","name","fn","start","end","condition","_SpriteAtlas","jsonResponse","resolve","reject","_a","spriteName","scale","frame","cacheKey","canvas","SpriteAtlas","spriteAtlas","Renderer","atlasPromise","spritePromises","sprite","bar","endpoints","obstacle","centerX","centerY","i","angle","length","startX","startY","endX","endY","port","hole","isCompleted","isGoalHole","activeColor","darkColor","darkerColor","zone","ball","opacity","spriteSize","ballSpriteName","scaledRadius","mainGradient","reflectionGradient","highlightGradient","envGradient","centered","drawX","drawY","flipper","isLeft","bumper","isActive","spinner","animationFrame","width","height","PhysicsEngine","callback","velocity","objectId","now","cooldownKey","lastAudioTime","config","mass","_b","id","frameTime","dt","velX","velY","objA","objB","dx","dy","distance","percent","offsetX","offsetY","_constraint","j","otherObj","maxDistance","minDistance","penetration","normal","correction","relativeVelocity","velocityAlongNormal","impulseScalar","impulse","separationX","separationY","restitution","closestPointOnCenterLine","distanceToCenterLine","__pow","barSurfaceDistance","collisionDistance","barVec","barLength","barTangent","barNormal","barSurfacePoint","velocityAlongTangent","friction","reflectedVelocity","collisionVelocity","_barNormal","currentTangentVelocity","gravityAlongSlope","rollingFriction","rollingResistance","slopeAcceleration","resistanceForce","frictionForce","newTangentVelocity","newVelocity","ballId","closestPoint","barThickness","cells","cellKey","minX","maxX","minY","maxY","nearby","cell","point","lineStart","lineEnd","t","resistance","_friction","_energy","TiltingBar","input","_deltaTime","heightDifference","maxHeightRange","halfWidth","collisionThreshold","projection","ballPosition","ballVelocity","ballRadius","distanceToBar","penetrationDepth","correctedPosition","dotProduct","reflection","frictionFactor","bounceEnergy","InputManager","leftSideInput","rightSideInput","action","key","isPressed","keyCode","tiltInput","rect","mouseTilt","event","_event","touch","Level","levelData","goalHole","screenBounds","goalId","timeBonus","LevelManager","levelId","holes","goalHoles","numGoals","attempts","validPosition","goalX","goalY","existingGoal","sections","sectionHeight","baseDensity","maxDensity","section","sectionY","sectionDensity","holesInSection","existingHole","AudioManager","bounceBuffer","rollBuffer","zapBuffer","targetBuffer","completeBuffer","clickBuffer","sampleRate","buffer","data","envelope","fundamental","harmonic2","harmonic3","noise","rumble","highFreq","buzz","crackle","chime1","chime2","chime3","notes","noteLength","noteIndex","freq","tone","click","soundId","volume","pitch","sound","source","gainNode","normalizedVelocity","Game","ballStartX","ballStartY","ballX","barRightSideY","barTopSurface","ballY","completedGoals","requiredGoals","hitHole","currentScore","currentLives","levelScore","nextLevelId","elapsed","progress","easedProgress","startPos","holePos","moveProgress","fallProgress","holePosition","initGame","gameContainer","showErrorMessage","handleResize","handleVisibilityChange","handleBeforeUnload"],"mappings":"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"}