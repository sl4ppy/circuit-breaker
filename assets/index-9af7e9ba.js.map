{"version":3,"file":"index-9af7e9ba.js","sources":["../../src/utils/Logger.ts","../../src/core/GameState.ts","../../src/utils/FontManager.ts","../../src/core/GameLoop.ts","../../src/utils/Debug.ts","../../src/rendering/SpriteAtlas.ts","../../src/rendering/Renderer.ts","../../src/physics/PhysicsEngine.ts","../../src/core/TiltingBar.ts","../../src/utils/ScalingManager.ts","../../src/input/InputManager.ts","../../src/utils/MathUtils.ts","../../src/core/PowerUpTypes.ts","../../src/core/Level.ts","../../src/audio/AudioManager.ts","../../src/ui/Button.ts","../../src/ui/Slider.ts","../../src/ui/SettingsMenu.ts","../../src/ui/SaveLoadMenu.ts","../../src/ui/AchievementNotification.ts","../../src/ui/StatsMenu.ts","../../src/ui/WinScreen.ts","../../src/core/StorageManager.ts","../../src/core/AchievementManager.ts","../../src/core/StatsManager.ts","../../src/core/PowerUpConfig.ts","../../src/core/PowerUpEventSystem.ts","../../src/core/PowerUpManager.ts","../../src/core/PowerUpEffects.ts","../../src/utils/PowerUpDebugger.ts","../../src/ui/PointFlyOff.ts","../../src/ui/PointFlyOffManager.ts","../../src/core/UnifiedScoringSystem.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["// Circuit Breaker - Centralized Logging System\r\n// Structured logging with levels and production filtering\r\n\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n}\r\n\r\nexport interface LogEntry {\r\n  timestamp: string;\r\n  level: LogLevel;\r\n  message: string;\r\n  data?: unknown;\r\n  context?: string;\r\n}\r\n\r\nexport class Logger {\r\n  private static instance: Logger;\r\n  private logLevel: LogLevel = LogLevel.INFO;\r\n  private logs: LogEntry[] = [];\r\n  private maxLogs: number = 1000;\r\n  private isProduction: boolean = false;\r\n\r\n  private constructor() {\r\n    this.isProduction = process.env.NODE_ENV === 'production';\r\n    if (this.isProduction) {\r\n      this.logLevel = LogLevel.WARN; // Only show warnings and errors in production\r\n    }\r\n  }\r\n\r\n  public static getInstance(): Logger {\r\n    if (!Logger.instance) {\r\n      Logger.instance = new Logger();\r\n    }\r\n    return Logger.instance;\r\n  }\r\n\r\n  /**\r\n   * Set the minimum log level\r\n   */\r\n  public setLogLevel(level: LogLevel): void {\r\n    this.logLevel = level;\r\n  }\r\n\r\n  /**\r\n   * Log a debug message\r\n   */\r\n  public debug(message: string, data?: unknown, context?: string): void {\r\n    this.log(LogLevel.DEBUG, message, data, context);\r\n  }\r\n\r\n  /**\r\n   * Log an info message\r\n   */\r\n  public info(message: string, data?: unknown, context?: string): void {\r\n    this.log(LogLevel.INFO, message, data, context);\r\n  }\r\n\r\n  /**\r\n   * Log a warning message\r\n   */\r\n  public warn(message: string, data?: unknown, context?: string): void {\r\n    this.log(LogLevel.WARN, message, data, context);\r\n  }\r\n\r\n  /**\r\n   * Log an error message\r\n   */\r\n  public error(message: string, data?: unknown, context?: string): void {\r\n    this.log(LogLevel.ERROR, message, data, context);\r\n  }\r\n\r\n  /**\r\n   * Internal logging method\r\n   */\r\n  private log(\r\n    level: LogLevel,\r\n    message: string,\r\n    data?: unknown,\r\n    context?: string,\r\n  ): void {\r\n    if (level < this.logLevel) return;\r\n\r\n    const entry: LogEntry = {\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      message,\r\n      data,\r\n      context,\r\n    };\r\n\r\n    this.logs.push(entry);\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs.shift();\r\n    }\r\n\r\n    // Output to console with appropriate method\r\n    const logMessage = this.formatMessage(entry);\r\n\r\n    // Use console methods directly since this is the Logger class itself\r\n    switch (level) {\r\n    case LogLevel.DEBUG:\r\n      // eslint-disable-next-line no-console\r\n      console.debug(logMessage, data || '');\r\n      break;\r\n    case LogLevel.INFO:\r\n      // eslint-disable-next-line no-console\r\n      console.info(logMessage, data || '');\r\n      break;\r\n    case LogLevel.WARN:\r\n      // eslint-disable-next-line no-console\r\n      console.warn(logMessage, data || '');\r\n      break;\r\n    case LogLevel.ERROR:\r\n      // eslint-disable-next-line no-console\r\n      console.error(logMessage, data || '');\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format log message with timestamp and context\r\n   */\r\n  private formatMessage(entry: LogEntry): string {\r\n    const levelStr = LogLevel[entry.level];\r\n    const contextStr = entry.context ? `[${entry.context}]` : '';\r\n    return `[${entry.timestamp}] ${levelStr}${contextStr}: ${entry.message}`;\r\n  }\r\n\r\n  /**\r\n   * Get all logs\r\n   */\r\n  public getLogs(): LogEntry[] {\r\n    return [...this.logs];\r\n  }\r\n\r\n  /**\r\n   * Clear all logs\r\n   */\r\n  public clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  /**\r\n   * Export logs for debugging\r\n   */\r\n  public exportLogs(): string {\r\n    return JSON.stringify(this.logs, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Get logs by level\r\n   */\r\n  public getLogsByLevel(level: LogLevel): LogEntry[] {\r\n    return this.logs.filter(log => log.level === level);\r\n  }\r\n\r\n  /**\r\n   * Get recent logs (last N entries)\r\n   */\r\n  public getRecentLogs(count: number): LogEntry[] {\r\n    return this.logs.slice(-count);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const logger = Logger.getInstance();\r\n","// Circuit Breaker - Game State Management\r\n// Handles different game states and transitions\r\n\r\nimport { logger } from '../utils/Logger';\r\nimport { LevelScoreData } from './UnifiedScoringSystem';\r\n\r\nexport enum GameStateType {\r\n  MENU = 'menu',\r\n  HOW_TO_PLAY = 'how_to_play', // How to play screen\r\n  ATTRACT_MODE = 'attract_mode', // Auto-play demo mode\r\n  PLAYING = 'playing',\r\n  PAUSED = 'paused',\r\n  CONFIRM_MENU = 'confirm_menu', // Confirmation dialog for returning to menu\r\n  SETTINGS = 'settings', // Settings menu overlay\r\n  SAVE_LOAD = 'save_load', // Save/load menu overlay\r\n  STATS = 'stats', // Stats menu overlay\r\n  WIN_SCREEN = 'win_screen', // Level completion screen\r\n  LEVEL_COMPLETE = 'level_complete',\r\n  GAME_OVER = 'game_over',\r\n  LOADING = 'loading',\r\n}\r\n\r\nexport interface GameStateData {\r\n  currentLevel: number;\r\n  score: number; // Legacy score field - kept for compatibility\r\n  totalScore: number; // New unified total score\r\n  lives: number;\r\n  isPaused: boolean;\r\n  isGameOver: boolean;\r\n  debugMode: boolean;\r\n  // Power-up related state\r\n  activePowerUps: string[];\r\n  powerUpEffects: {\r\n    timeScale?: number;\r\n    magneticForce?: number;\r\n    shieldActive?: boolean;\r\n    barSpeedMultiplier?: number;\r\n    scanActive?: boolean;\r\n  };\r\n  // Unified scoring system data\r\n  levelScores: LevelScoreData[];\r\n  currentLevelStartTime?: number;\r\n}\r\n\r\nexport class GameState {\r\n  private currentState: GameStateType = GameStateType.MENU;\r\n  private stateData: GameStateData = {\r\n    currentLevel: 1,\r\n    score: 0,\r\n    totalScore: 0,\r\n    lives: 3,\r\n    isPaused: false,\r\n    isGameOver: false,\r\n    debugMode: false,\r\n    // Power-up related state\r\n    activePowerUps: [],\r\n    powerUpEffects: {},\r\n    // Unified scoring system data\r\n    levelScores: [],\r\n    currentLevelStartTime: undefined,\r\n  };\r\n\r\n  constructor() {\r\n    logger.info('📊 GameState initialized', null, 'GameState');\r\n  }\r\n\r\n  /**\r\n   * Get current game state\r\n   */\r\n  public getCurrentState(): GameStateType {\r\n    return this.currentState;\r\n  }\r\n\r\n  /**\r\n   * Set game state\r\n   */\r\n  public setState(newState: GameStateType): void {\r\n    const previousState = this.currentState;\r\n    this.currentState = newState;\r\n    logger.info(`🔄 Game state changed: ${previousState} → ${newState}`, null, 'GameState');\r\n  }\r\n\r\n  /**\r\n   * Get state data\r\n   */\r\n  public getStateData(): GameStateData {\r\n    return { ...this.stateData };\r\n  }\r\n\r\n  /**\r\n   * Update state data\r\n   */\r\n  public updateStateData(updates: Partial<GameStateData>): void {\r\n    this.stateData = { ...this.stateData, ...updates };\r\n  }\r\n\r\n  /**\r\n   * Check if current state is a specific type\r\n   */\r\n  public isState(state: GameStateType): boolean {\r\n    return this.currentState === state;\r\n  }\r\n\r\n  /**\r\n   * Check if game is in playing state\r\n   */\r\n  public isPlaying(): boolean {\r\n    return this.currentState === GameStateType.PLAYING;\r\n  }\r\n\r\n  /**\r\n   * Check if game is paused\r\n   */\r\n  public isPaused(): boolean {\r\n    return this.currentState === GameStateType.PAUSED;\r\n  }\r\n\r\n  /**\r\n   * Check if game is over\r\n   */\r\n  public isGameOver(): boolean {\r\n    return this.currentState === GameStateType.GAME_OVER;\r\n  }\r\n\r\n  /**\r\n   * Check if confirmation dialog is showing\r\n   */\r\n  public isConfirmingMenu(): boolean {\r\n    return this.currentState === GameStateType.CONFIRM_MENU;\r\n  }\r\n\r\n  /**\r\n   * Check if in attract mode\r\n   */\r\n  public isAttractMode(): boolean {\r\n    return this.currentState === GameStateType.ATTRACT_MODE;\r\n  }\r\n\r\n  /**\r\n   * Check if in loading state\r\n   */\r\n  public isLoading(): boolean {\r\n    return this.currentState === GameStateType.LOADING;\r\n  }\r\n\r\n  /**\r\n   * Check if in settings state\r\n   */\r\n  public isSettings(): boolean {\r\n    return this.currentState === GameStateType.SETTINGS;\r\n  }\r\n\r\n  /**\r\n   * Check if in save/load state\r\n   */\r\n  public isSaveLoad(): boolean {\r\n    return this.currentState === GameStateType.SAVE_LOAD;\r\n  }\r\n\r\n  /**\r\n   * Check if in stats state\r\n   */\r\n  public isStats(): boolean {\r\n    return this.currentState === GameStateType.STATS;\r\n  }\r\n\r\n  /**\r\n   * Check if in how to play state\r\n   */\r\n  public isHowToPlay(): boolean {\r\n    return this.currentState === GameStateType.HOW_TO_PLAY;\r\n  }\r\n\r\n  /**\r\n   * Check if in win screen state\r\n   */\r\n  public isWinScreen(): boolean {\r\n    return this.currentState === GameStateType.WIN_SCREEN;\r\n  }\r\n\r\n  /**\r\n   * Check if debug mode is enabled\r\n   */\r\n  public isDebugMode(): boolean {\r\n    return this.stateData.debugMode;\r\n  }\r\n\r\n  /**\r\n   * Toggle debug mode\r\n   */\r\n  public toggleDebugMode(): void {\r\n    this.stateData.debugMode = !this.stateData.debugMode;\r\n    logger.info(\r\n      `🐛 Debug mode ${this.stateData.debugMode ? 'enabled' : 'disabled'}`,\r\n      null,\r\n      'GameState',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set debug mode\r\n   */\r\n  public setDebugMode(enabled: boolean): void {\r\n    this.stateData.debugMode = enabled;\r\n    logger.info(`🐛 Debug mode ${enabled ? 'enabled' : 'disabled'}`, null, 'GameState');\r\n  }\r\n\r\n  /**\r\n   * Update total score from unified scoring system\r\n   */\r\n  public updateTotalScore(totalScore: number): void {\r\n    this.stateData.totalScore = totalScore;\r\n  }\r\n\r\n  /**\r\n   * Add level score data\r\n   */\r\n  public addLevelScore(levelScore: LevelScoreData): void {\r\n    this.stateData.levelScores.push(levelScore);\r\n    this.stateData.totalScore += levelScore.levelPoints;\r\n  }\r\n\r\n  /**\r\n   * Get current total score from unified system\r\n   */\r\n  public getTotalScore(): number {\r\n    return this.stateData.totalScore;\r\n  }\r\n\r\n  /**\r\n   * Get level scores history\r\n   */\r\n  public getLevelScores(): LevelScoreData[] {\r\n    return [...this.stateData.levelScores];\r\n  }\r\n\r\n  /**\r\n   * Set current level start time\r\n   */\r\n  public setCurrentLevelStartTime(time: number): void {\r\n    this.stateData.currentLevelStartTime = time;\r\n  }\r\n\r\n  /**\r\n   * Get current level start time\r\n   */\r\n  public getCurrentLevelStartTime(): number | undefined {\r\n    return this.stateData.currentLevelStartTime;\r\n  }\r\n\r\n  /**\r\n   * Reset game state to initial values\r\n   */\r\n  public reset(): void {\r\n    this.currentState = GameStateType.MENU;\r\n    this.stateData = {\r\n      currentLevel: 1,\r\n      score: 0,\r\n      totalScore: 0,\r\n      lives: 3,\r\n      isPaused: false,\r\n      isGameOver: false,\r\n      debugMode: false,\r\n      // Power-up related state\r\n      activePowerUps: [],\r\n      powerUpEffects: {},\r\n      // Unified scoring system data\r\n      levelScores: [],\r\n      currentLevelStartTime: undefined,\r\n    };\r\n    logger.info('🔄 Game state reset', null, 'GameState');\r\n  }\r\n}\r\n","// Circuit Breaker - Font Manager\r\n// Centralized font management for Canvas rendering\r\n\r\nimport { logger } from './Logger';\r\n\r\nexport class FontManager {\r\n  private static instance: FontManager;\r\n  private fontsLoaded: boolean = false;\r\n\r\n  // Font definitions with fallbacks\r\n  private fonts = {\r\n    primary: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace',\r\n    display: 'Cyberpunks, Interceptor, \"Courier New\", monospace',\r\n    mono: 'Interceptor, \"Courier New\", Monaco, Consolas, monospace',\r\n  };\r\n\r\n  private constructor() {\r\n    this.loadFonts();\r\n  }\r\n\r\n  public static getInstance(): FontManager {\r\n    if (!FontManager.instance) {\r\n      FontManager.instance = new FontManager();\r\n    }\r\n    return FontManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Load custom fonts and check if they're available\r\n   */\r\n  private async loadFonts(): Promise<void> {\r\n    try {\r\n      // Check if fonts are available using CSS Font Loading API\r\n      if ('fonts' in document) {\r\n        // Create font faces with better error handling\r\n        const fontPromises: Promise<FontFace>[] = [];\r\n\r\n        // Load Cyberpunks font family (using relative paths for GitHub Pages compatibility)\r\n        try {\r\n          const cyberpunksRegular = new FontFace(\r\n            'Cyberpunks',\r\n            'url(\"./assets/fonts/Cyberpunks.otf\")',\r\n          );\r\n          const cyberpunksItalic = new FontFace(\r\n            'Cyberpunks',\r\n            'url(\"./assets/fonts/Cyberpunks Italic.otf\")',\r\n            { style: 'italic' },\r\n          );\r\n          fontPromises.push(cyberpunksRegular.load(), cyberpunksItalic.load());\r\n        } catch (e) {\r\n          logger.warn('⚠️ Cyberpunks font creation failed:', e, 'FontManager');\r\n        }\r\n\r\n        // Load Interceptor font family (using relative paths for GitHub Pages compatibility)\r\n        try {\r\n          const interceptorRegular = new FontFace(\r\n            'Interceptor',\r\n            'url(\"./assets/fonts/Interceptor.otf\")',\r\n          );\r\n          const interceptorItalic = new FontFace(\r\n            'Interceptor',\r\n            'url(\"./assets/fonts/Interceptor Italic.otf\")',\r\n            { style: 'italic' },\r\n          );\r\n          const interceptorBold = new FontFace(\r\n            'Interceptor',\r\n            'url(\"./assets/fonts/Interceptor Bold.otf\")',\r\n            { weight: 'bold' },\r\n          );\r\n          const interceptorBoldItalic = new FontFace(\r\n            'Interceptor',\r\n            'url(\"./assets/fonts/Interceptor Bold Italic.otf\")',\r\n            { weight: 'bold', style: 'italic' },\r\n          );\r\n          fontPromises.push(\r\n            interceptorRegular.load(),\r\n            interceptorItalic.load(),\r\n            interceptorBold.load(),\r\n            interceptorBoldItalic.load(),\r\n          );\r\n        } catch (e) {\r\n          logger.warn('⚠️ Interceptor font creation failed:', e, 'FontManager');\r\n        }\r\n\r\n        if (fontPromises.length > 0) {\r\n          // Load fonts with individual error handling\r\n          const results = await Promise.allSettled(fontPromises);\r\n\r\n          let loadedCount = 0;\r\n          results.forEach((result, index) => {\r\n            if (result.status === 'fulfilled') {\r\n              try {\r\n                document.fonts.add(result.value);\r\n                loadedCount++;\r\n              } catch (e) {\r\n                logger.warn(`⚠️ Failed to add font ${index} to document:`, e, 'FontManager');\r\n              }\r\n            } else {\r\n              logger.warn(`⚠️ Font ${index} failed to load:`, result.reason, 'FontManager');\r\n            }\r\n          });\r\n\r\n          if (loadedCount > 0) {\r\n            this.fontsLoaded = true;\r\n            logger.info(\r\n              `🎨 Loaded ${loadedCount}/${fontPromises.length} custom fonts successfully`,\r\n              null,\r\n              'FontManager',\r\n            );\r\n          } else {\r\n            this.fontsLoaded = false;\r\n            logger.warn('⚠️ No custom fonts loaded, using fallbacks', null, 'FontManager');\r\n          }\r\n        } else {\r\n          this.fontsLoaded = false;\r\n          logger.warn('⚠️ No fonts could be created, using fallbacks', null, 'FontManager');\r\n        }\r\n      } else {\r\n        this.fontsLoaded = false;\r\n        logger.warn('⚠️ Font Loading API not available, using fallbacks', null, 'FontManager');\r\n      }\r\n    } catch (error) {\r\n      logger.warn('⚠️ Font loading completely failed, using fallbacks:', error, 'FontManager');\r\n      this.fontsLoaded = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get font string for Canvas context\r\n   */\r\n  public getFont(\r\n    type: 'primary' | 'display' | 'mono',\r\n    size: number,\r\n    weight: 'normal' | 'bold' = 'normal',\r\n  ): string {\r\n    const fontFamily = this.fonts[type];\r\n    return `${weight} ${size}px ${fontFamily}`;\r\n  }\r\n\r\n  /**\r\n   * Set font on Canvas context\r\n   */\r\n  public setFont(\r\n    ctx: CanvasRenderingContext2D,\r\n    type: 'primary' | 'display' | 'mono',\r\n    size: number,\r\n    weight: 'normal' | 'bold' = 'normal',\r\n  ): void {\r\n    ctx.font = this.getFont(type, size, weight);\r\n  }\r\n\r\n  /**\r\n   * Check if custom fonts are loaded\r\n   */\r\n  public areFontsLoaded(): boolean {\r\n    return this.fontsLoaded;\r\n  }\r\n\r\n  /**\r\n   * Preload fonts (call this early in initialization)\r\n   */\r\n  public async preloadFonts(): Promise<void> {\r\n    if (!this.fontsLoaded) {\r\n      await this.loadFonts();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available font types\r\n   */\r\n  public getFontTypes(): string[] {\r\n    return Object.keys(this.fonts);\r\n  }\r\n\r\n  /**\r\n   * Check if specific font family is available\r\n   */\r\n  public isFontAvailable(fontFamily: string): boolean {\r\n    if (!('fonts' in document)) return false;\r\n    return document.fonts.check(`12px ${fontFamily}`);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const fontManager = FontManager.getInstance();\r\n","// Circuit Breaker - Game Loop\r\n// Handles the main game loop with fixed timestep and performance optimization\r\n\r\nimport { GameState, GameStateType } from './GameState';\r\nimport { Renderer } from '../rendering/Renderer';\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine';\r\nimport { Game } from './Game';\r\nimport { fontManager } from '../utils/FontManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport class GameLoop {\r\n  private animationId: number | null = null;\r\n  private lastTime: number = 0;\r\n  private accumulator: number = 0;\r\n  private readonly timestep: number = 1000 / 60; // 60 FPS\r\n  private isRunning: boolean = false;\r\n  private isPaused: boolean = false;\r\n  private renderer: Renderer | null = null;\r\n  private physicsEngine: PhysicsEngine | null = null;\r\n  private game: Game | null = null;\r\n  \r\n  // FPS tracking\r\n  private fpsUpdateTime: number = 0;\r\n  private frameCount: number = 0;\r\n  private currentFPS: number = 60;\r\n  private readonly FPS_UPDATE_INTERVAL: number = 1000; // Update FPS every second\r\n\r\n  constructor() {\r\n    logger.info('🔄 GameLoop initialized', null, 'GameLoop');\r\n  }\r\n\r\n  /**\r\n   * Start the game loop\r\n   */\r\n  public start(\r\n    gameState: GameState,\r\n    renderer?: Renderer,\r\n    physicsEngine?: PhysicsEngine,\r\n    game?: Game,\r\n  ): void {\r\n    if (this.isRunning) {\r\n      logger.warn('⚠️ Game loop is already running');\r\n      return;\r\n    }\r\n\r\n    this.renderer = renderer || null;\r\n    this.physicsEngine = physicsEngine || null;\r\n    this.game = game || null;\r\n\r\n    this.isRunning = true;\r\n    this.isPaused = false;\r\n    this.lastTime = performance.now();\r\n    this.accumulator = 0;\r\n\r\n    logger.info('▶️ Game loop started', null, 'GameLoop');\r\n    this.gameLoop(gameState);\r\n  }\r\n\r\n  /**\r\n   * Main game loop with fixed timestep\r\n   */\r\n  private gameLoop(gameState: GameState): void {\r\n    if (!this.isRunning) return;\r\n\r\n    const currentTime = performance.now();\r\n    const deltaTime = currentTime - this.lastTime;\r\n    this.lastTime = currentTime;\r\n\r\n    // Update FPS tracking\r\n    this.updateFPSTracking(currentTime);\r\n\r\n    // Apply power-up time scaling to the entire game loop\r\n    let scaledDeltaTime = deltaTime;\r\n    if (this.game && this.game.getPowerUpManager) {\r\n      const powerUpEffects = this.game.getPowerUpManager().getPowerUpEffects();\r\n      if (powerUpEffects.timeScale) {\r\n        scaledDeltaTime = deltaTime * powerUpEffects.timeScale;\r\n        console.log(`⏰ GameLoop: timeScale=${powerUpEffects.timeScale}, deltaTime=${deltaTime}ms -> ${scaledDeltaTime}ms`);\r\n      }\r\n    }\r\n\r\n    // Accumulate time with scaling\r\n    this.accumulator += scaledDeltaTime;\r\n\r\n    // Update with fixed timestep\r\n    while (this.accumulator >= this.timestep) {\r\n      if (!this.isPaused) {\r\n        this.update(gameState, this.timestep);\r\n      }\r\n      this.accumulator -= this.timestep;\r\n    }\r\n\r\n    // Render\r\n    this.render(gameState);\r\n\r\n    // Continue loop\r\n    this.animationId = requestAnimationFrame(() => this.gameLoop(gameState));\r\n  }\r\n\r\n  /**\r\n   * Update game logic\r\n   */\r\n  private update(_gameState: GameState, deltaTime: number): void {\r\n    // Update game logic if available\r\n    if (this.game && this.game.update) {\r\n      this.game.update(deltaTime);\r\n    }\r\n\r\n    // Update physics if available\r\n    if (this.physicsEngine) {\r\n      this.physicsEngine.update(deltaTime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the game\r\n   */\r\n  private render(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    // Clear canvas\r\n    this.renderer.clear();\r\n\r\n    // Render game based on state\r\n    if (gameState.isLoading()) {\r\n      this.renderLoading(gameState);\r\n    } else if (gameState.isPlaying()) {\r\n      this.renderGameplay(gameState);\r\n      this.renderAchievementNotification();\r\n    } else if (gameState.isAttractMode()) {\r\n      this.renderAttractMode(gameState);\r\n    } else if (gameState.isState(GameStateType.SETTINGS)) {\r\n      // Draw the appropriate background for the settings overlay\r\n      const game = this.game;\r\n      const ctx = this.renderer.getContext();\r\n      if (!ctx || !game || typeof game['settingsMenu'] === 'undefined' || !game['settingsMenu']) return;\r\n      // Use the public isFromPauseMenu getter\r\n      if (game['settingsMenu'].isFromPauseMenu) {\r\n        this.renderPaused();\r\n      } else {\r\n        this.renderMenu(gameState);\r\n      }\r\n      // Draw the settings menu overlay on top\r\n      game['settingsMenu'].draw(ctx);\r\n    } else if (gameState.isState(GameStateType.SAVE_LOAD)) {\r\n      // Draw the appropriate background for the save/load overlay\r\n      const game = this.game;\r\n      const ctx = this.renderer.getContext();\r\n      if (!ctx || !game || typeof game['saveLoadMenu'] === 'undefined' || !game['saveLoadMenu']) return;\r\n      \r\n      // Always draw menu background for save/load menu\r\n      this.renderMenu(gameState);\r\n      \r\n      // Draw the save/load menu overlay on top\r\n      game['saveLoadMenu'].render(ctx);\r\n    } else if (gameState.isState(GameStateType.STATS)) {\r\n      // Draw the appropriate background for the stats overlay\r\n      const game = this.game;\r\n      const ctx = this.renderer.getContext();\r\n      if (!ctx || !game || typeof game['statsMenu'] === 'undefined' || !game['statsMenu']) return;\r\n      \r\n      // Always draw menu background for stats menu\r\n      this.renderMenu(gameState);\r\n      \r\n      // Draw the stats menu overlay on top\r\n      game['statsMenu'].render(ctx);\r\n    } else if (gameState.isState(GameStateType.WIN_SCREEN)) {\r\n      // Draw the win screen\r\n      const game = this.game;\r\n      const ctx = this.renderer.getContext();\r\n      if (!ctx || !game || typeof game['winScreen'] === 'undefined' || !game['winScreen']) return;\r\n      \r\n      // Draw the gameplay background (blurred/dimmed)\r\n      this.renderGameplay(gameState);\r\n      \r\n      // Draw the win screen overlay on top\r\n      game['winScreen'].render(ctx);\r\n    } else if (gameState.isState(GameStateType.MENU)) {\r\n      this.renderMenu(gameState);\r\n    } else if (gameState.isState(GameStateType.HOW_TO_PLAY)) {\r\n      this.renderHowToPlay(gameState);\r\n    } else if (gameState.isState(GameStateType.PAUSED)) {\r\n      this.renderPaused();\r\n    } else if (gameState.isState(GameStateType.CONFIRM_MENU)) {\r\n      this.renderConfirmDialog(gameState);\r\n    } else if (gameState.isState(GameStateType.GAME_OVER)) {\r\n      this.renderGameOver(gameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render gameplay\r\n   */\r\n  private renderGameplay(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground();\r\n\r\n    // Draw all physics objects except balls first\r\n    if (this.physicsEngine) {\r\n      for (const obj of this.physicsEngine.getObjects()) {\r\n        // Skip balls - we'll draw them last\r\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\r\n          continue;\r\n        }\r\n\r\n        // Render other objects as simple circles\r\n        ctx.beginPath();\r\n        const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 };\r\n        const radius = obj.radius || 10;\r\n        ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\r\n\r\n        // Different colors for different object types\r\n        if (obj.isStatic) {\r\n          ctx.fillStyle = '#ff0066'; // Red for static obstacles\r\n          ctx.shadowColor = '#ff0066';\r\n        } else {\r\n          ctx.fillStyle = '#00ffff'; // Cyan for dynamic objects\r\n          ctx.shadowColor = '#00ffff';\r\n        }\r\n\r\n        ctx.shadowBlur = 16;\r\n        ctx.fill();\r\n        ctx.shadowBlur = 0;\r\n        ctx.closePath();\r\n\r\n        // Debug info for non-ball objects - only show if debug mode is enabled\r\n        if (\r\n          gameState.isDebugMode() &&\r\n          this.physicsEngine.getDebug &&\r\n          this.physicsEngine.getDebug()\r\n        ) {\r\n          // Draw velocity vectors for debugging\r\n          if (!obj.isStatic && obj.velocity) {\r\n            const velScale = 3; // Reduced scale for performance\r\n            ctx.beginPath();\r\n            ctx.moveTo(pos.x, pos.y);\r\n            ctx.lineTo(\r\n              pos.x + obj.velocity.x * velScale,\r\n              pos.y + obj.velocity.y * velScale,\r\n            );\r\n            ctx.strokeStyle = '#ffff00';\r\n            ctx.lineWidth = 1;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n\r\n          // Draw minimal object info\r\n          ctx.fillStyle = '#ffffff';\r\n          ctx.font = '8px Courier New';\r\n          ctx.textAlign = 'center';\r\n          ctx.fillText(obj.id, pos.x, pos.y - radius - 5);\r\n        }\r\n      }\r\n\r\n      // Only draw debug info when debug mode is enabled\r\n      if (\r\n        gameState.isDebugMode() &&\r\n        this.physicsEngine.getDebug &&\r\n        this.physicsEngine.getDebug()\r\n      ) {\r\n        // Draw collision manifolds for debugging\r\n        if (this.physicsEngine.getCollisionManifolds) {\r\n          const manifolds = this.physicsEngine.getCollisionManifolds();\r\n          for (const manifold of manifolds) {\r\n            // Draw collision point\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n              manifold.contactPoint.x,\r\n              manifold.contactPoint.y,\r\n              2,\r\n              0,\r\n              Math.PI * 2,\r\n            );\r\n            ctx.fillStyle = '#ff0000';\r\n            ctx.fill();\r\n            ctx.closePath();\r\n          }\r\n        }\r\n\r\n        // Draw constraints for debugging\r\n        if (this.physicsEngine.getConstraints) {\r\n          const constraints = this.physicsEngine.getConstraints();\r\n          for (const constraint of constraints) {\r\n            if (constraint.type === 'distance' && constraint.objectB) {\r\n              // Draw distance constraint as a line\r\n              ctx.beginPath();\r\n              ctx.moveTo(\r\n                constraint.objectA.position.x,\r\n                constraint.objectA.position.y,\r\n              );\r\n              ctx.lineTo(\r\n                constraint.objectB.position.x,\r\n                constraint.objectB.position.y,\r\n              );\r\n              ctx.strokeStyle = '#00ff00';\r\n              ctx.lineWidth = 1;\r\n              ctx.setLineDash([3, 3]);\r\n              ctx.stroke();\r\n              ctx.setLineDash([]);\r\n              ctx.closePath();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Draw placeholder text - only in debug mode\r\n    if (gameState.isDebugMode()) {\r\n      ctx.fillStyle = '#00ffff';\r\n      ctx.font = '20px Courier New';\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText('Circuit Breaker', 180, 40);\r\n      ctx.font = '12px Courier New';\r\n      ctx.fillText('Robust Physics System Active', 180, 60);\r\n    }\r\n\r\n    // Call game's render method for additional elements (holes, UI, etc.)\r\n    if (this.game && this.game.renderGameplay) {\r\n      this.game.renderGameplay();\r\n    }\r\n\r\n    // Draw balls LAST so they appear on top of everything\r\n    if (this.physicsEngine) {\r\n      for (const obj of this.physicsEngine.getObjects()) {\r\n        // Only render balls\r\n        if (obj.id === 'game-ball' || obj.id.includes('ball')) {\r\n          if (this.renderer) {\r\n            // Get animation state from game if available\r\n            const animationState =\r\n              this.game && this.game.getHoleAnimationState\r\n                ? this.game.getHoleAnimationState() || undefined\r\n                : undefined;\r\n            \r\n            // Check if ball is in saucer waiting state to determine sprite\r\n            const spriteName = this.game && this.game.getBallSpriteForSaucerState\r\n              ? this.game.getBallSpriteForSaucerState(obj.id)\r\n              : 'ball_normal';\r\n            \r\n            this.renderer.drawChromeBall(obj, animationState, spriteName);\r\n          }\r\n\r\n          // Debug info for balls - only show if debug mode is enabled\r\n          if (\r\n            gameState.isDebugMode() &&\r\n            this.physicsEngine.getDebug &&\r\n            this.physicsEngine.getDebug()\r\n          ) {\r\n            const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 };\r\n            const radius = obj.radius || 10;\r\n\r\n            // Draw velocity vectors for debugging\r\n            if (!obj.isStatic && obj.velocity) {\r\n              const velScale = 3; // Reduced scale for performance\r\n              ctx.beginPath();\r\n              ctx.moveTo(pos.x, pos.y);\r\n              ctx.lineTo(\r\n                pos.x + obj.velocity.x * velScale,\r\n                pos.y + obj.velocity.y * velScale,\r\n              );\r\n              ctx.strokeStyle = '#ffff00';\r\n              ctx.lineWidth = 1;\r\n              ctx.stroke();\r\n              ctx.closePath();\r\n            }\r\n\r\n            // Draw minimal object info\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '8px Courier New';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(obj.id, pos.x, pos.y - radius - 5);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enhanced debug info - only show if debug mode is enabled\r\n    if (gameState.isDebugMode() && this.physicsEngine) {\r\n      const objects = this.physicsEngine.getObjects();\r\n      const dynamicObjects = objects.filter(obj => !obj.isStatic).length;\r\n      const staticObjects = objects.filter(obj => obj.isStatic).length;\r\n\r\n      ctx.font = '10px Courier New';\r\n      ctx.textAlign = 'left';\r\n      ctx.fillStyle = '#00ffff';\r\n      ctx.fillText(\r\n        `Objects: ${dynamicObjects} dynamic, ${staticObjects} static`,\r\n        10,\r\n        610,\r\n      );\r\n      ctx.fillText(`Gravity: ${this.physicsEngine.getGravity()}`, 10, 625);\r\n\r\n      // Show collision count\r\n      if (this.physicsEngine.getCollisionManifolds) {\r\n        const collisionCount =\r\n          this.physicsEngine.getCollisionManifolds().length;\r\n        ctx.fillText(`Collisions: ${collisionCount}`, 200, 610);\r\n      }\r\n\r\n      // Show physics performance info\r\n      ctx.fillText('Physics: Optimized Verlet (1 substep)', 10, 595);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render loading screen\r\n   */\r\n  private renderLoading(_gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground();\r\n\r\n    // Get loading progress from game instance\r\n    const loadingProgress =\r\n      this.game && this.game.getLoadingProgress\r\n        ? this.game.getLoadingProgress()\r\n        : 0;\r\n    const loadingStatus =\r\n      this.game && this.game.getLoadingStatus\r\n        ? this.game.getLoadingStatus()\r\n        : 'Initializing...';\r\n    const isLoadingComplete =\r\n      this.game && this.game.isLoadingComplete\r\n        ? this.game.isLoadingComplete()\r\n        : false;\r\n\r\n    // Draw main title with animated neon glow and pulsing stroke\r\n    ctx.save();\r\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\r\n    ctx.shadowBlur = 20;\r\n    \r\n    // Create pulsing stroke effect\r\n    const loadingTitleTime = Date.now();\r\n    const titlePulseIntensity = 0.5 + 0.5 * Math.sin(loadingTitleTime / 1000);\r\n    ctx.strokeStyle = `rgba(0, 240, 255, ${titlePulseIntensity})`; // Pulsing Electric Blue\r\n    ctx.lineWidth = 3;\r\n    fontManager.setFont(ctx, 'display', 72, 'bold');\r\n    ctx.textAlign = 'center';\r\n    \r\n    // Draw stroke outline first\r\n    ctx.strokeText('CIRCUIT', 180, 120);\r\n    ctx.strokeText('BREAKER', 180, 180);\r\n    \r\n    // Draw fill text on top\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    ctx.fillText('CIRCUIT', 180, 120);\r\n    ctx.fillText('BREAKER', 180, 180);\r\n    ctx.restore();\r\n\r\n    // Draw loading text with pulse effect\r\n    const time = Date.now();\r\n    const pulseAlpha = 0.6 + 0.4 * Math.sin(time / 600);\r\n    ctx.save();\r\n    ctx.globalAlpha = pulseAlpha;\r\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\r\n    fontManager.setFont(ctx, 'primary', 18, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('LOADING...', 180, 260);\r\n    ctx.restore();\r\n\r\n    // Draw progress bar background\r\n    const barWidth = 300;\r\n    const barHeight = 20;\r\n    const barX = (360 - barWidth) / 2;\r\n    const barY = 300;\r\n\r\n    ctx.fillStyle = '#222222';\r\n    ctx.fillRect(barX, barY, barWidth, barHeight);\r\n\r\n    // Draw progress bar border\r\n    ctx.strokeStyle = '#00f0ff';\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeRect(barX, barY, barWidth, barHeight);\r\n\r\n    // Draw progress bar fill\r\n    const progressWidth = (loadingProgress / 100) * (barWidth - 4);\r\n    if (progressWidth > 0) {\r\n      ctx.fillStyle = '#00f0ff';\r\n      ctx.fillRect(barX + 2, barY + 2, progressWidth, barHeight - 4);\r\n    }\r\n\r\n    // Draw progress percentage\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 14);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(`${Math.round(loadingProgress)}%`, 180, 345);\r\n\r\n    // Draw loading status with different styling when complete\r\n    if (isLoadingComplete) {\r\n      // Pulsing \"Press any key\" message when complete\r\n      const pulseAlpha = 0.6 + 0.4 * Math.sin(time / 400);\r\n      ctx.save();\r\n      ctx.globalAlpha = pulseAlpha;\r\n      ctx.shadowColor = '#00ff99'; // Acid Green\r\n      ctx.shadowBlur = 10;\r\n      ctx.fillStyle = '#00ff99'; // Acid Green\r\n      fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(loadingStatus, 180, 370);\r\n      ctx.restore();\r\n    } else {\r\n      // Normal status text while loading\r\n      ctx.fillStyle = '#888888';\r\n      fontManager.setFont(ctx, 'primary', 12);\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(loadingStatus, 180, 370);\r\n\r\n      // Draw spinning loading indicator only while loading\r\n      const spinnerSize = 30;\r\n      const spinnerX = 180;\r\n      const spinnerY = 400;\r\n      const rotation = (time / 100) % (Math.PI * 2);\r\n\r\n      ctx.save();\r\n      ctx.translate(spinnerX, spinnerY);\r\n      ctx.rotate(rotation);\r\n      ctx.strokeStyle = '#00f0ff';\r\n      ctx.lineWidth = 3;\r\n      ctx.beginPath();\r\n      ctx.arc(0, 0, spinnerSize / 2, 0, Math.PI * 1.5);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n\r\n    // Draw version info\r\n    ctx.fillStyle = '#444444';\r\n    fontManager.setFont(ctx, 'primary', 8);\r\n    ctx.fillText('Circuit Breaker v0.6.0', 180, 590);\r\n    ctx.fillText('Chris Van Doren - July 2025', 180, 605);\r\n  }\r\n\r\n  /**\r\n   * Render attract mode\r\n   */\r\n  private renderAttractMode(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    // Render the gameplay (same as playing state)\r\n    this.renderGameplay(gameState);\r\n\r\n    // Add attract mode overlay\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw semi-transparent overlay\r\n    ctx.save();\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw main title with audio-reactive pulsing stroke effect\r\n    ctx.save();\r\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\r\n    ctx.shadowBlur = 20;\r\n    \r\n    // Create dramatically audio-reactive pulsing stroke effect\r\n    // const titleTime = Date.now(); // removed unused\r\n    let pulseIntensity = 0.1; // Minimal base pulse\r\n    \r\n    // Add dramatic audio reactivity if music is playing\r\n    if (this.game && this.game.getAudioLevel) {\r\n      const audioLevel = this.game.getAudioLevel();\r\n      const audioReactivity = audioLevel * 8.0; // Extremely dramatic reactivity\r\n      pulseIntensity = Math.min(1.0, pulseIntensity + audioReactivity); // Audio completely dominates\r\n    }\r\n    \r\n    // Keep Electric Blue color, only change opacity and width\r\n    ctx.strokeStyle = `rgba(0, 240, 255, ${pulseIntensity})`; // Audio-reactive Electric Blue opacity\r\n    // Ramp stroke width: 0px up to 0.40 audio level, then ramp to 12px\r\n    let strokeWidth = 0;\r\n    if (pulseIntensity > 0.40) {\r\n      const rampProgress = (pulseIntensity - 0.40) / (1.0 - 0.25); // 0 to 1 over the ramp range\r\n      strokeWidth = rampProgress * 12; // Ramp from 0 to 12px\r\n    }\r\n    ctx.lineWidth = strokeWidth;\r\n    fontManager.setFont(ctx, 'display', 48, 'bold'); // Smaller size for attract mode\r\n    ctx.textAlign = 'center';\r\n    \r\n    // Draw stroke outline first\r\n    ctx.strokeText('CIRCUIT', 180, 60);\r\n    ctx.strokeText('BREAKER', 180, 100);\r\n    \r\n    // Draw fill text on top\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    ctx.fillText('CIRCUIT', 180, 60);\r\n    ctx.fillText('BREAKER', 180, 100);\r\n    ctx.restore();\r\n\r\n    // Draw demo text\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 14);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('CIRCUIT BREAKER DEMO', 180, 120);\r\n    ctx.fillText('Press any key to return to menu', 180, 140);\r\n\r\n    // Draw controls reminder\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('A/Z - Left Side Up/Down', 180, 580);\r\n    ctx.fillText('↑/↓ - Right Side Up/Down', 180, 595);\r\n    ctx.fillText('SPACE - Start/Place Ball', 180, 610);\r\n    ctx.fillText('D - Toggle Debug Mode', 180, 625);\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Render menu\r\n   */\r\n  private renderMenu(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground();\r\n\r\n    // Draw subtle grid pattern\r\n    ctx.strokeStyle = '#003366';\r\n    ctx.lineWidth = 1;\r\n    ctx.globalAlpha = 0.3;\r\n\r\n    // Vertical lines\r\n    for (let x = 0; x <= 360; x += 20) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, 640);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Horizontal lines\r\n    for (let y = 0; y <= 640; y += 20) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(360, y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    ctx.globalAlpha = 1;\r\n\r\n    // Draw main title with animated neon glow and pulsing stroke\r\n    ctx.save();\r\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\r\n    ctx.shadowBlur = 20;\r\n    \r\n    // Create dramatically audio-reactive pulsing stroke effect\r\n    const titleTime = Date.now();\r\n    let pulseIntensity = 0.1; // Minimal base pulse\r\n    \r\n    // Add dramatic audio reactivity if music is playing\r\n    if (this.game && this.game.getAudioLevel) {\r\n      const audioLevel = this.game.getAudioLevel();\r\n      const audioReactivity = audioLevel * 8.0; // Extremely dramatic reactivity\r\n      pulseIntensity = Math.min(1.0, pulseIntensity + audioReactivity); // Audio completely dominates\r\n      \r\n      // Debug: Log audio levels to see if they're changing\r\n      if (titleTime % 1000 < 16) { // Log once per second (60fps = ~16ms per frame)\r\n        console.log(`🎵 Audio Level: ${audioLevel.toFixed(3)}, Pulse: ${pulseIntensity.toFixed(3)}`);\r\n      }\r\n    }\r\n    \r\n    // Keep Electric Blue color, only change opacity and width\r\n    ctx.strokeStyle = `rgba(0, 240, 255, ${pulseIntensity})`; // Audio-reactive Electric Blue opacity\r\n    // Ramp stroke width: 0px up to 0.25 audio level, then ramp to 12px\r\n    let strokeWidth = 0;\r\n    if (pulseIntensity > 0.40) {\r\n      const rampProgress = (pulseIntensity - 0.40) / (1.0 - 0.25); // 0 to 1 over the ramp range\r\n      strokeWidth = rampProgress * 12; // Ramp from 0 to 12px\r\n    }\r\n    ctx.lineWidth = strokeWidth;\r\n    fontManager.setFont(ctx, 'display', 72, 'bold');\r\n    ctx.textAlign = 'center';\r\n    \r\n    // Draw stroke outline first\r\n    ctx.strokeText('CIRCUIT', 180, 120);\r\n    ctx.strokeText('BREAKER', 180, 180);\r\n    \r\n    // Draw fill text on top\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    ctx.fillText('CIRCUIT', 180, 120);\r\n    ctx.fillText('BREAKER', 180, 180);\r\n    ctx.restore();\r\n\r\n    // Draw subtitle with neon stroke outline\r\n    ctx.save();\r\n    ctx.strokeStyle = '#00f0ff'; // Electric Blue\r\n    ctx.lineWidth = 2;\r\n    fontManager.setFont(ctx, 'primary', 16);\r\n    ctx.textAlign = 'center';\r\n    \r\n    // Draw stroke outline first\r\n    ctx.strokeText('NEON CYBERPUNK PINBALL', 180, 280);\r\n    \r\n    // Draw fill text on top\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    ctx.fillText('NEON CYBERPUNK PINBALL', 180, 280);\r\n    ctx.restore();\r\n\r\n    // Draw description\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 12);\r\n    ctx.fillText('Navigate the ball through cyber holes', 180, 320);\r\n    ctx.fillText('to reach all goals and break the circuit', 180, 340);\r\n\r\n    // Draw start instruction with pulse effect\r\n    const time = Date.now();\r\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 500);\r\n    ctx.save();\r\n    ctx.globalAlpha = pulseAlpha;\r\n    ctx.shadowColor = '#00ff99'; // Acid Green\r\n    ctx.shadowBlur = 10;\r\n    ctx.fillStyle = '#00ff99'; // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('CLICK OR PRESS SPACE TO START', 180, 420);\r\n    ctx.restore();\r\n\r\n    // Draw bright \"How to Play\" button\r\n    ctx.save();\r\n    const buttonPulse = 0.7 + 0.3 * Math.sin(time / 300); // Faster pulse for attention\r\n    ctx.globalAlpha = buttonPulse;\r\n    ctx.shadowColor = '#ff6600'; // Orange glow\r\n    ctx.shadowBlur = 15;\r\n    \r\n    // Draw button background\r\n    const buttonWidth = 180;\r\n    const buttonHeight = 40;\r\n    const buttonX = 180 - buttonWidth / 2;\r\n    const buttonY = 460;\r\n    \r\n    ctx.fillStyle = '#ff6600'; // Bright Orange\r\n    ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);\r\n    \r\n    // Draw button border\r\n    ctx.strokeStyle = '#ffaa33';\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(buttonX, buttonY, buttonWidth, buttonHeight);\r\n    \r\n    // Draw button text\r\n    ctx.globalAlpha = 1;\r\n    ctx.shadowBlur = 5;\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 16, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('HOW TO PLAY', 180, buttonY + 26);\r\n    ctx.restore();\r\n    \r\n    // Draw hint text\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('Press H or click button above', 180, 520);\r\n\r\n    // Draw menu shortcuts\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('S - Settings  •  L - Save/Load  •  T - Statistics', 180, 550);\r\n\r\n    // Draw debug mode status at bottom\r\n    const debugStatus = gameState.isDebugMode() ? 'ON' : 'OFF';\r\n    const debugColor = gameState.isDebugMode() ? '#00ff99' : '#b600f9'; // Acid Green or Neon Purple\r\n    ctx.fillStyle = debugColor;\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText(`[D] DEBUG MODE: ${debugStatus}`, 180, 580);\r\n\r\n    // Draw version info\r\n    ctx.fillStyle = '#444444';\r\n    fontManager.setFont(ctx, 'primary', 8);\r\n    ctx.fillText('Circuit Breaker v1.0.1', 180, 615);\r\n    ctx.fillText('Created by Chris Van Doren in July of 2025', 180, 630);\r\n  }\r\n\r\n  /**\r\n   * Render how to play screen\r\n   */\r\n  private renderHowToPlay(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw background\r\n    this.renderer.drawBackground();\r\n\r\n    // Draw subtle grid pattern\r\n    ctx.strokeStyle = '#003366';\r\n    ctx.lineWidth = 1;\r\n    ctx.globalAlpha = 0.3;\r\n\r\n    // Vertical lines\r\n    for (let x = 0; x <= 360; x += 20) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, 640);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Horizontal lines\r\n    for (let y = 0; y <= 640; y += 20) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(360, y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    ctx.globalAlpha = 1;\r\n\r\n    // Draw title\r\n    ctx.save();\r\n    ctx.shadowColor = '#00f0ff'; // Electric Blue\r\n    ctx.shadowBlur = 20;\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    fontManager.setFont(ctx, 'display', 48, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('HOW TO PLAY', 180, 80);\r\n    ctx.restore();\r\n\r\n    // Draw game objective\r\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('OBJECTIVE:', 180, 120);\r\n    \r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 11);\r\n    ctx.fillText('Navigate the ball through cyber holes to reach', 180, 140);\r\n    ctx.fillText('ALL goal holes and complete each level.', 180, 155);\r\n    ctx.fillText('Avoid falling off the playfield!', 180, 170);\r\n\r\n    // Draw power-ups section\r\n    ctx.fillStyle = '#00ff99'; // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('POWER-UPS & BONUSES:', 180, 200);\r\n    \r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('• SAUCERS: Ball sinks in, gets power-up, then ejects', 180, 220);\r\n    ctx.fillText('• SLOW-MO SURGE: Slows down time for precision', 180, 235);\r\n    ctx.fillText('• MAGNETIC GUIDE: Attracts ball toward goals', 180, 250);\r\n    ctx.fillText('• CIRCUIT PATCH: Repairs bar damage & extends life', 180, 265);\r\n    ctx.fillText('• OVERCLOCK BOOST: Increases bar movement speed', 180, 280);\r\n    ctx.fillText('• SCAN REVEAL: Shows hidden animated holes', 180, 295);\r\n\r\n    // Draw controls section\r\n    ctx.fillStyle = '#ff6600'; // Orange\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('CONTROLS:', 180, 325);\r\n    \r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('KEYBOARD:', 180, 345);\r\n    ctx.fillText('• A/Z - Left Side Up/Down', 180, 360);\r\n    ctx.fillText('• ↑/↓ or L/, - Right Side Up/Down', 180, 375);\r\n    ctx.fillText('• SPACE - Start/Place Ball', 180, 390);\r\n    \r\n    ctx.fillText('TOUCH CONTROLS (Mobile):', 180, 410);\r\n    ctx.fillText('• Touch above/below bar sides to move up/down', 180, 425);\r\n    ctx.fillText('• Left side of screen controls left bar end', 180, 440);\r\n    ctx.fillText('• Right side of screen controls right bar end', 180, 455);\r\n    \r\n    ctx.fillText('MENUS:', 180, 475);\r\n    ctx.fillText('• S - Settings  • L - Save/Load  • T - Statistics', 180, 490);\r\n\r\n    // Draw back instruction with pulse effect\r\n    const time = Date.now();\r\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 500);\r\n    ctx.save();\r\n    ctx.globalAlpha = pulseAlpha;\r\n    ctx.shadowColor = '#00ff99'; // Acid Green\r\n    ctx.shadowBlur = 10;\r\n    ctx.fillStyle = '#00ff99'; // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('PRESS ESC OR BACKSPACE TO RETURN', 180, 540);\r\n    ctx.restore();\r\n\r\n    // Draw debug mode status at bottom\r\n    const debugStatus = gameState.isDebugMode() ? 'ON' : 'OFF';\r\n    const debugColor = gameState.isDebugMode() ? '#00ff99' : '#b600f9'; // Acid Green or Neon Purple\r\n    ctx.fillStyle = debugColor;\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText(`[D] DEBUG MODE: ${debugStatus}`, 180, 580);\r\n\r\n    // Draw version info\r\n    ctx.fillStyle = '#444444';\r\n    fontManager.setFont(ctx, 'primary', 8);\r\n    ctx.fillText('Circuit Breaker v1.0.1', 180, 615);\r\n    ctx.fillText('Created by Chris Van Doren in July of 2025', 180, 630);\r\n  }\r\n\r\n  /**\r\n   * Render paused state\r\n   */\r\n  private renderPaused(): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw paused overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw paused title\r\n    ctx.fillStyle = '#00f0ff'; // Electric Blue\r\n    fontManager.setFont(ctx, 'display', 24, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('PAUSED', 180, 280);\r\n\r\n    // Draw instructions\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 14);\r\n    ctx.fillText('Press ESC to resume', 180, 320);\r\n    ctx.fillText('Press S for Settings', 180, 340);\r\n    ctx.fillText('Press Y to return to menu', 180, 360);\r\n  }\r\n\r\n  /**\r\n   * Render confirmation dialog\r\n   */\r\n  private renderConfirmDialog(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // First render the current gameplay in the background (dimmed)\r\n    this.renderGameplay(gameState);\r\n\r\n    // Draw semi-transparent overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw dialog box background\r\n    const dialogWidth = 280;\r\n    const dialogHeight = 160;\r\n    const dialogX = (360 - dialogWidth) / 2;\r\n    const dialogY = (640 - dialogHeight) / 2;\r\n\r\n    // Draw dialog background with neon border\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.fillRect(dialogX, dialogY, dialogWidth, dialogHeight);\r\n\r\n    ctx.strokeStyle = '#b600f9'; // Neon Purple border\r\n    ctx.lineWidth = 3;\r\n    ctx.shadowColor = '#b600f9';\r\n    ctx.shadowBlur = 10;\r\n    ctx.strokeRect(dialogX, dialogY, dialogWidth, dialogHeight);\r\n    ctx.shadowBlur = 0;\r\n\r\n    // Draw dialog title\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    fontManager.setFont(ctx, 'primary', 18, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('RETURN TO MENU?', 180, dialogY + 40);\r\n\r\n    // Draw confirmation message\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 12);\r\n    ctx.fillText('Your progress will be lost.', 180, dialogY + 70);\r\n    ctx.fillText('Are you sure?', 180, dialogY + 90);\r\n\r\n    // Draw buttons with glow effects\r\n    const buttonY = dialogY + 120;\r\n\r\n    // YES button (Electric Blue)\r\n    ctx.fillStyle = '#00f0ff';\r\n    ctx.shadowColor = '#00f0ff';\r\n    ctx.shadowBlur = 8;\r\n    fontManager.setFont(ctx, 'primary', 14, 'bold');\r\n    ctx.fillText('[Y] YES', 130, buttonY);\r\n\r\n    // NO button (Acid Green)\r\n    ctx.fillStyle = '#00ff99';\r\n    ctx.shadowColor = '#00ff99';\r\n    ctx.shadowBlur = 8;\r\n    ctx.fillText('[N] NO', 230, buttonY);\r\n\r\n    ctx.shadowBlur = 0;\r\n\r\n    // Draw instruction text\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('Press Y to confirm, N or ESC to cancel', 180, dialogY + 145);\r\n  }\r\n\r\n  /**\r\n   * Render achievement notification overlay\r\n   */\r\n  private renderAchievementNotification(): void {\r\n    const game = this.game;\r\n    const ctx = this.renderer?.getContext();\r\n    if (!ctx || !game || typeof game['achievementNotification'] === 'undefined' || !game['achievementNotification']) return;\r\n    \r\n    game['achievementNotification'].render(ctx);\r\n  }\r\n\r\n  /**\r\n   * Render game over state\r\n   */\r\n  private renderGameOver(gameState: GameState): void {\r\n    if (!this.renderer) return;\r\n\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Draw dark background\r\n    this.renderer.drawBackground();\r\n\r\n    // Draw red alert grid\r\n    ctx.strokeStyle = '#330000';\r\n    ctx.lineWidth = 1;\r\n    ctx.globalAlpha = 0.3;\r\n\r\n    // Vertical lines\r\n    for (let x = 0; x <= 360; x += 30) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, 640);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Horizontal lines\r\n    for (let y = 0; y <= 640; y += 30) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(360, y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    ctx.globalAlpha = 1;\r\n\r\n    // Draw GAME OVER with red glow\r\n    ctx.save();\r\n    ctx.shadowColor = '#b600f9'; // Neon Purple\r\n    ctx.shadowBlur = 25;\r\n    ctx.fillStyle = '#b600f9'; // Neon Purple\r\n    fontManager.setFont(ctx, 'display', 28, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('GAME OVER', 180, 200);\r\n    ctx.restore();\r\n\r\n    // Draw circuit broken subtitle\r\n    ctx.fillStyle = '#ff6666';\r\n    fontManager.setFont(ctx, 'primary', 14);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('CIRCUIT BREAKER MALFUNCTION', 180, 230);\r\n\r\n    // Get and display score\r\n    const stateData = gameState.getStateData();\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 16);\r\n    ctx.fillText(`FINAL SCORE: ${stateData.score}`, 180, 280);\r\n    ctx.fillText(`LEVEL REACHED: ${stateData.currentLevel}`, 180, 310);\r\n\r\n    // Draw restart instruction with pulse effect\r\n    const time = Date.now();\r\n    const pulseAlpha = 0.5 + 0.5 * Math.sin(time / 400);\r\n    ctx.save();\r\n    ctx.globalAlpha = pulseAlpha;\r\n    ctx.shadowColor = '#00ff99'; // Acid Green\r\n    ctx.shadowBlur = 10;\r\n    ctx.fillStyle = '#00ff99'; // Acid Green\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.fillText('CLICK OR PRESS SPACE TO RETURN TO MENU', 180, 400);\r\n    ctx.restore();\r\n\r\n    // Draw system message\r\n    ctx.fillStyle = '#666666';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('SYSTEM: Preparing for circuit restart...', 180, 480);\r\n  }\r\n\r\n  /**\r\n   * Pause the game loop\r\n   */\r\n  public pause(): void {\r\n    this.isPaused = true;\r\n    logger.info('⏸️ Game loop paused', null, 'GameLoop');\r\n  }\r\n\r\n  /**\r\n   * Resume the game loop\r\n   */\r\n  public resume(): void {\r\n    this.isPaused = false;\r\n    logger.info('▶️ Game loop resumed', null, 'GameLoop');\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop\r\n   */\r\n  public stop(): void {\r\n    this.isRunning = false;\r\n    if (this.animationId !== null) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n    logger.info('⏹️ Game loop stopped', null, 'GameLoop');\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is running\r\n   */\r\n  public isGameLoopRunning(): boolean {\r\n    return this.isRunning;\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is paused\r\n   */\r\n  public isGameLoopPaused(): boolean {\r\n    return this.isPaused;\r\n  }\r\n\r\n  /**\r\n   * Update FPS tracking\r\n   */\r\n  private updateFPSTracking(currentTime: number): void {\r\n    this.frameCount++;\r\n    \r\n    if (currentTime - this.fpsUpdateTime >= this.FPS_UPDATE_INTERVAL) {\r\n      this.currentFPS = Math.round((this.frameCount * 1000) / (currentTime - this.fpsUpdateTime));\r\n      this.frameCount = 0;\r\n      this.fpsUpdateTime = currentTime;\r\n      \r\n      // Record FPS event if game is available\r\n      if (this.game && this.game['statsManager']) {\r\n        this.game['statsManager'].recordEvent({\r\n          type: 'fps_update',\r\n          timestamp: Date.now(),\r\n          data: { fps: this.currentFPS },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current FPS\r\n   */\r\n  public getFPS(): number {\r\n    return this.currentFPS;\r\n  }\r\n}\r\n","// Circuit Breaker - Debug Utilities\r\n// Development and debugging tools\r\n\r\nimport { logger } from './Logger';\r\n\r\nexport class Debug {\r\n  private static isEnabled: boolean = true;\r\n  private static logs: string[] = [];\r\n  private static maxLogs: number = 100;\r\n\r\n  /**\r\n   * Enable or disable debug mode\r\n   */\r\n  public static setEnabled(enabled: boolean): void {\r\n    this.isEnabled = enabled;\r\n  }\r\n\r\n  /**\r\n   * Log a debug message\r\n   */\r\n  public static log(message: string, ...args: unknown[]): void {\r\n    if (!this.isEnabled) return;\r\n\r\n    const timestamp = new Date().toISOString();\r\n    const logMessage = `[${timestamp}] ${message}`;\r\n\r\n    logger.info(logMessage, args.length > 0 ? args : null, 'Debug');\r\n    this.addToLogs(logMessage);\r\n  }\r\n\r\n  /**\r\n   * Log a warning message\r\n   */\r\n  public static warn(message: string, ...args: unknown[]): void {\r\n    if (!this.isEnabled) return;\r\n\r\n    const timestamp = new Date().toISOString();\r\n    const logMessage = `[${timestamp}] WARNING: ${message}`;\r\n\r\n    logger.warn(logMessage, args.length > 0 ? args : null, 'Debug');\r\n    this.addToLogs(logMessage);\r\n  }\r\n\r\n  /**\r\n   * Log an error message\r\n   */\r\n  public static error(message: string, ...args: unknown[]): void {\r\n    if (!this.isEnabled) return;\r\n\r\n    const timestamp = new Date().toISOString();\r\n    const logMessage = `[${timestamp}] ERROR: ${message}`;\r\n\r\n    logger.error(logMessage, args.length > 0 ? args : null, 'Debug');\r\n    this.addToLogs(logMessage);\r\n  }\r\n\r\n  /**\r\n   * Add message to internal logs\r\n   */\r\n  private static addToLogs(message: string): void {\r\n    this.logs.push(message);\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all debug logs\r\n   */\r\n  public static getLogs(): string[] {\r\n    return [...this.logs];\r\n  }\r\n\r\n  /**\r\n   * Clear all debug logs\r\n   */\r\n  public static clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  /**\r\n   * Measure performance of a function\r\n   */\r\n  public static measurePerformance<T>(name: string, fn: () => T): T {\r\n    if (!this.isEnabled) return fn();\r\n\r\n    const start = performance.now();\r\n    const result = fn();\r\n    const end = performance.now();\r\n\r\n    this.log(`Performance [${name}]: ${(end - start).toFixed(2)}ms`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a performance timer\r\n   */\r\n  public static createTimer(name: string): () => void {\r\n    const start = performance.now();\r\n    return () => {\r\n      const end = performance.now();\r\n      this.log(`Timer [${name}]: ${(end - start).toFixed(2)}ms`);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Assert a condition\r\n   */\r\n  public static assert(condition: boolean, message: string): void {\r\n    if (!this.isEnabled) return;\r\n\r\n    if (!condition) {\r\n      this.error(`Assertion failed: ${message}`);\r\n      throw new Error(`Assertion failed: ${message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get memory usage info\r\n   */\r\n  public static getMemoryInfo(): Record<string, unknown> {\r\n    if (!this.isEnabled) return {};\r\n\r\n    // Note: This is limited in browsers, but useful for debugging\r\n    return {\r\n      logsCount: this.logs.length,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Export debug info\r\n   */\r\n  public static exportDebugInfo(): Record<string, unknown> {\r\n    return {\r\n      enabled: this.isEnabled,\r\n      logs: this.getLogs(),\r\n      memory: this.getMemoryInfo(),\r\n    };\r\n  }\r\n}\r\n","// Circuit Breaker - Sprite Atlas Manager\r\n// Efficient sprite loading and management using texture atlases\r\n\r\nimport { Debug } from '../utils/Debug';\r\n\r\nexport interface SpriteFrame {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface AtlasData {\r\n  frames: { [key: string]: SpriteFrame };\r\n  meta: {\r\n    image: string;\r\n    size: { w: number; h: number };\r\n    scale: number;\r\n  };\r\n}\r\n\r\nexport class SpriteAtlas {\r\n  private static instance: SpriteAtlas;\r\n  private atlases: Map<string, { image: HTMLImageElement; data: AtlasData }> = new Map();\r\n  private isLoaded: boolean = false;\r\n  private offscreenCanvases: Map<string, HTMLCanvasElement> = new Map();\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): SpriteAtlas {\r\n    if (!SpriteAtlas.instance) {\r\n      SpriteAtlas.instance = new SpriteAtlas();\r\n    }\r\n    return SpriteAtlas.instance;\r\n  }\r\n\r\n  /**\r\n   * Load the sprite atlas image and JSON data\r\n   */\r\n  public async load(): Promise<void> {\r\n    try {\r\n      Debug.log('🚀 Starting sprite atlas loading process...');\r\n      \r\n      // Load main atlas\r\n      await this.loadAtlas('main', './assets/sprites/atlas_01.json', './assets/sprites/atlas_01.png');\r\n      \r\n      // Load power-up atlas\r\n      await this.loadAtlas('powerup', './assets/sprites/powerup_atlas_01.json', './assets/sprites/powerup_atlas_01.png');\r\n\r\n      this.isLoaded = true;\r\n      \r\n      let totalSprites = 0;\r\n      this.atlases.forEach((atlas, name) => {\r\n        const spriteCount = Object.keys(atlas.data.frames).length;\r\n        totalSprites += spriteCount;\r\n        Debug.log(`📊 Atlas '${name}' contains ${spriteCount} sprites`);\r\n      });\r\n      \r\n      Debug.log(\r\n        '🎨 All sprite atlases loaded successfully with',\r\n        totalSprites,\r\n        'total sprites',\r\n      );\r\n    } catch (error) {\r\n      Debug.log('❌ Failed to load sprite atlases:', error);\r\n      this.isLoaded = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a specific atlas\r\n   */\r\n  private async loadAtlas(name: string, jsonPath: string, imagePath: string): Promise<void> {\r\n    Debug.log(`🔄 Loading ${name} atlas from ${jsonPath} and ${imagePath}`);\r\n    \r\n    // Load atlas JSON data\r\n    const jsonResponse = await fetch(jsonPath);\r\n    if (!jsonResponse.ok) {\r\n      throw new Error(`Failed to load ${name} atlas JSON: ${jsonResponse.status}`);\r\n    }\r\n    const atlasData = await jsonResponse.json();\r\n    Debug.log(`📄 ${name} atlas JSON loaded with ${Object.keys(atlasData.frames).length} sprites`);\r\n\r\n    // Load atlas image\r\n    const atlasImage = new Image();\r\n    atlasImage.src = imagePath;\r\n\r\n    await new Promise<void>((resolve, reject) => {\r\n      atlasImage.onload = () => {\r\n        Debug.log(`🖼️ ${name} atlas image loaded successfully`);\r\n        resolve();\r\n      };\r\n      atlasImage.onerror = (error) => {\r\n        Debug.log(`❌ Failed to load ${name} atlas image:`, error);\r\n        reject(error);\r\n      };\r\n    });\r\n\r\n    this.atlases.set(name, { image: atlasImage, data: atlasData });\r\n    \r\n    Debug.log(\r\n      `🎨 ${name} atlas loaded with`,\r\n      Object.keys(atlasData.frames).length,\r\n      'sprites:',\r\n      Object.keys(atlasData.frames).join(', '),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a sprite frame definition by name\r\n   */\r\n  public getFrame(spriteName: string): { frame: SpriteFrame; atlas: string } | null {\r\n    // Search through all atlases\r\n    for (const [atlasName, atlas] of this.atlases) {\r\n      if (atlas.data.frames[spriteName]) {\r\n        return { frame: atlas.data.frames[spriteName], atlas: atlasName };\r\n      }\r\n    }\r\n    Debug.log(`❌ Sprite ${spriteName} not found in any atlas`);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Draw a sprite from the atlas to a canvas context\r\n   */\r\n  public drawSprite(\r\n    ctx: CanvasRenderingContext2D,\r\n    spriteName: string,\r\n    x: number,\r\n    y: number,\r\n    scale: number = 1,\r\n  ): boolean {\r\n    if (!this.isLoaded) {\r\n      return false;\r\n    }\r\n\r\n    const frameData = this.getFrame(spriteName);\r\n    if (!frameData) {\r\n      return false;\r\n    }\r\n\r\n    const atlas = this.atlases.get(frameData.atlas);\r\n    if (!atlas) {\r\n      return false;\r\n    }\r\n\r\n    ctx.drawImage(\r\n      atlas.image,\r\n      frameData.frame.x,\r\n      frameData.frame.y,\r\n      frameData.frame.w,\r\n      frameData.frame.h,\r\n      x,\r\n      y,\r\n      frameData.frame.w * scale,\r\n      frameData.frame.h * scale,\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get a cached canvas with a specific sprite pre-rendered\r\n   * Useful for sprites that are used frequently\r\n   */\r\n  public getSpriteCanvas(\r\n    spriteName: string,\r\n    scale: number = 1,\r\n  ): HTMLCanvasElement | null {\r\n    const cacheKey = `${spriteName}_${scale}`;\r\n\r\n    if (this.offscreenCanvases.has(cacheKey)) {\r\n      const cachedCanvas = this.offscreenCanvases.get(cacheKey);\r\n      if (cachedCanvas) {\r\n        return cachedCanvas;\r\n      }\r\n    }\r\n\r\n    if (!this.isLoaded) {\r\n      return null;\r\n    }\r\n\r\n    const frameData = this.getFrame(spriteName);\r\n    if (!frameData) return null;\r\n\r\n    const atlas = this.atlases.get(frameData.atlas);\r\n    if (!atlas) return null;\r\n\r\n    // Create offscreen canvas\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = frameData.frame.w * scale;\r\n    canvas.height = frameData.frame.h * scale;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return null;\r\n\r\n    // Draw sprite to offscreen canvas\r\n    ctx.drawImage(\r\n      atlas.image,\r\n      frameData.frame.x,\r\n      frameData.frame.y,\r\n      frameData.frame.w,\r\n      frameData.frame.h,\r\n      0,\r\n      0,\r\n      frameData.frame.w * scale,\r\n      frameData.frame.h * scale,\r\n    );\r\n\r\n    // Cache and return\r\n    this.offscreenCanvases.set(cacheKey, canvas);\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Get all available sprite names\r\n   */\r\n  public getSpriteNames(): string[] {\r\n    const allSprites: string[] = [];\r\n    this.atlases.forEach((atlas) => {\r\n      allSprites.push(...Object.keys(atlas.data.frames));\r\n    });\r\n    return allSprites;\r\n  }\r\n\r\n  /**\r\n   * Check if atlas is loaded\r\n   */\r\n  public isAtlasLoaded(): boolean {\r\n    return this.isLoaded;\r\n  }\r\n\r\n  /**\r\n   * Get atlas dimensions for a specific atlas\r\n   */\r\n  public getAtlasDimensions(atlasName: string = 'main'): { width: number; height: number } | null {\r\n    const atlas = this.atlases.get(atlasName);\r\n    if (!atlas) return null;\r\n    return {\r\n      width: atlas.data.meta.size.w,\r\n      height: atlas.data.meta.size.h,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear sprite cache\r\n   */\r\n  public clearCache(): void {\r\n    this.offscreenCanvases.clear();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const spriteAtlas = SpriteAtlas.getInstance();\r\n","// Circuit Breaker - Renderer\r\n// Handles canvas drawing and visual effects\r\n\r\nimport { Debug } from '../utils/Debug';\r\nimport { spriteAtlas } from './SpriteAtlas';\r\nimport { TiltingBar } from '../core/TiltingBar';\r\nimport { Hole } from '../core/Level';\r\n\r\nexport class Renderer {\r\n  private canvas: HTMLCanvasElement | null = null;\r\n  private ctx: CanvasRenderingContext2D | null = null;\r\n  private width: number = 800;\r\n  private height: number = 600;\r\n\r\n  // Sprite images\r\n  private backgroundSprite: HTMLImageElement | null = null;\r\n  private spritesLoaded: boolean = false;\r\n  \r\n  // Tinting support\r\n  private currentTint: string | null = null;\r\n\r\n  constructor() {\r\n    Debug.log('🎨 Renderer initialized');\r\n  }\r\n\r\n  /**\r\n   * Load sprite images and atlas\r\n   */\r\n  public async loadSprites(): Promise<void> {\r\n    try {\r\n      // Load background sprite (using relative paths for GitHub Pages compatibility)\r\n      this.backgroundSprite = new Image();\r\n      this.backgroundSprite.src =\r\n        './assets/sprites/playfield_background_02.png';\r\n\r\n      // Load sprite atlas\r\n      const atlasPromise = spriteAtlas.load();\r\n\r\n      // Wait for background and atlas to load with individual error handling\r\n      const spritePromises = [\r\n        new Promise<string>((resolve, reject) => {\r\n          if (this.backgroundSprite) {\r\n            this.backgroundSprite.onload = () => resolve('background');\r\n            this.backgroundSprite.onerror = e =>\r\n              reject({ sprite: 'background', error: e });\r\n          } else {\r\n            reject({ sprite: 'background', error: new Error('Background sprite not initialized') });\r\n          }\r\n        }),\r\n        atlasPromise\r\n          .then(() => 'atlas')\r\n          .catch(e => Promise.reject({ sprite: 'atlas', error: e })),\r\n      ];\r\n\r\n      const results = await Promise.allSettled(spritePromises);\r\n\r\n      let loadedCount = 0;\r\n      results.forEach((result, _index) => {\r\n        if (result.status === 'fulfilled') {\r\n          loadedCount++;\r\n          Debug.log(`✅ ${result.value} loaded successfully`);\r\n        } else {\r\n          const { sprite, error } = result.reason;\r\n          Debug.log(`❌ Failed to load ${sprite}:`, error);\r\n        }\r\n      });\r\n\r\n      // Consider sprites loaded if at least one loads (background is optional, atlas provides balls)\r\n      this.spritesLoaded = loadedCount > 0;\r\n\r\n      if (loadedCount === 2) {\r\n        Debug.log('🎨 All sprites and atlas loaded successfully');\r\n      } else if (loadedCount === 1) {\r\n        Debug.log(\r\n          '⚠️ Some sprites loaded, game will use fallbacks where needed',\r\n        );\r\n      } else {\r\n        Debug.log('❌ No sprites loaded, game will use fallbacks');\r\n      }\r\n    } catch (error) {\r\n      Debug.log('❌ Sprite loading system failed:', error);\r\n      this.spritesLoaded = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the renderer with a canvas. Scaling is handled by ScalingManager.\r\n   * @param canvas The HTMLCanvasElement to use for rendering.\r\n   */\r\n  public init(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d');\r\n\r\n    if (!this.ctx) {\r\n      throw new Error('Failed to get 2D context from canvas');\r\n    }\r\n\r\n    // Store canvas dimensions (these will be updated by ScalingManager)\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n\r\n    // The ScalingManager handles all scaling setup including:\r\n    // - Device pixel ratio scaling\r\n    // - Integer scaling for sharp fonts\r\n    // - Canvas size and display size\r\n    // - Context transformation matrix\r\n    \r\n    Debug.log(`Renderer initialized with canvas: ${this.width}x${this.height} (scaling handled by ScalingManager)`);\r\n  }\r\n\r\n  /**\r\n   * Clear the canvas.\r\n   */\r\n  public clear(): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.clearRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  /**\r\n   * Draw the playfield background (neon cityscape or fallback color).\r\n   */\r\n  public drawBackground(): void {\r\n    if (!this.ctx) return;\r\n\r\n    if (this.backgroundSprite && this.spritesLoaded) {\r\n      // Draw the background image scaled to fit the playfield (360x640)\r\n      this.ctx.drawImage(this.backgroundSprite, 0, 0, 360, 640);\r\n    } else {\r\n      // Fallback to solid color background if image not loaded\r\n      this.ctx.fillStyle = '#1a1a1a';\r\n      this.ctx.fillRect(0, 0, 360, 640);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the game (main entry point for all drawing).\r\n   */\r\n  public render(): void {\r\n    if (!this.ctx) return;\r\n\r\n    // TODO: Implement rendering\r\n    // - Clear canvas\r\n    // - Draw background\r\n    // - Draw game objects\r\n    // - Draw UI elements\r\n    // - Apply visual effects\r\n  }\r\n\r\n  /**\r\n   * Draw a tilting bar with neon cyberpunk styling using tiled sprites.\r\n   * @param bar The TiltingBar instance to draw.\r\n   */\r\n  public drawTiltingBar(bar: TiltingBar): void {\r\n    if (!this.ctx) return;\r\n    \r\n    const endpoints = bar.getEndpoints();\r\n\r\n    // Save context\r\n    this.ctx.save();\r\n\r\n    // Draw glow effect FIRST (behind the sprites)\r\n    this.ctx.shadowColor = bar.glowColor;\r\n    this.ctx.shadowBlur = 20;\r\n    this.ctx.lineWidth = bar.thickness + 4;\r\n    this.ctx.strokeStyle = bar.glowColor;\r\n    this.ctx.globalAlpha = 0.3;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y);\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y);\r\n    this.ctx.stroke();\r\n\r\n    // Reset shadow effects for sprite rendering\r\n    this.ctx.shadowBlur = 0;\r\n    this.ctx.shadowColor = 'transparent';\r\n    this.ctx.globalAlpha = 1;\r\n\r\n    // Use sprite atlas if available, otherwise fallback to line rendering\r\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\r\n    if (this.spritesLoaded && atlasLoaded) {\r\n      const barFrame = spriteAtlas.getFrame('bar_normal');\r\n\r\n      if (barFrame) {\r\n        // Calculate bar properties\r\n        const barLength = Math.sqrt(\r\n          Math.pow(endpoints.end.x - endpoints.start.x, 2) +\r\n            Math.pow(endpoints.end.y - endpoints.start.y, 2),\r\n        );\r\n        const barAngle = Math.atan2(\r\n          endpoints.end.y - endpoints.start.y,\r\n          endpoints.end.x - endpoints.start.x,\r\n        );\r\n\r\n        // Calculate scaling and tiling\r\n        const spriteScale = bar.thickness / barFrame.frame.h; // Scale to match bar thickness\r\n        const scaledSpriteWidth = barFrame.frame.w * spriteScale;\r\n        const tilesNeeded = Math.ceil(barLength / scaledSpriteWidth);\r\n\r\n        // Calculate the center point of the actual bar (between endpoints)\r\n        const barCenterX = (endpoints.start.x + endpoints.end.x) / 2;\r\n        const barCenterY = (endpoints.start.y + endpoints.end.y) / 2;\r\n\r\n        // Set up transformation matrix for rotation and positioning\r\n        this.ctx.translate(barCenterX, barCenterY);\r\n        this.ctx.rotate(barAngle);\r\n\r\n        // Tile the bar sprite along the length\r\n        for (let i = 0; i < tilesNeeded; i++) {\r\n          const tileX = i * scaledSpriteWidth - barLength / 2;\r\n          const tileY = -bar.thickness / 2;\r\n\r\n          // Clip the last tile if it extends beyond the bar length\r\n          const remainingLength = barLength - i * scaledSpriteWidth;\r\n          const tileWidth = Math.min(scaledSpriteWidth, remainingLength);\r\n\r\n          if (tileWidth > 0) {\r\n            // Save context for potential clipping\r\n            this.ctx.save();\r\n\r\n            // Clip if this is a partial tile\r\n            if (tileWidth < scaledSpriteWidth) {\r\n              this.ctx.beginPath();\r\n              this.ctx.rect(tileX, tileY, tileWidth, bar.thickness);\r\n              this.ctx.clip();\r\n            }\r\n\r\n            // Draw the sprite tile\r\n            spriteAtlas.drawSprite(\r\n              this.ctx,\r\n              'bar_normal',\r\n              tileX,\r\n              tileY,\r\n              spriteScale,\r\n            );\r\n\r\n            this.ctx.restore();\r\n          }\r\n        }\r\n\r\n        // Reset transformation for pivot point\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        // Fallback to line rendering if sprite not found\r\n        this.renderBarFallback(endpoints, bar);\r\n      }\r\n    } else {\r\n      // Fallback to line rendering if atlas not loaded\r\n      this.renderBarFallback(endpoints, bar);\r\n    }\r\n\r\n    // Draw center pivot point (always rendered)\r\n    this.ctx.fillStyle = bar.color;\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(bar.position.x, bar.position.y, 6, 0, Math.PI * 2);\r\n    this.ctx.fill();\r\n\r\n    // Restore context\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Fallback bar rendering using lines\r\n   */\r\n  private renderBarFallback(endpoints: { start: { x: number; y: number }; end: { x: number; y: number } }, bar: TiltingBar): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.lineWidth = bar.thickness;\r\n    this.ctx.strokeStyle = bar.color;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y);\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  /**\r\n   * Draw an obstacle with neon cyberpunk styling\r\n   */\r\n  public drawObstacle(obstacle: { position: { x: number; y: number }; size: { x: number; y: number }; type?: string; isActive?: boolean }): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.save();\r\n\r\n    const centerX = obstacle.position.x + obstacle.size.x / 2;\r\n    const centerY = obstacle.position.y + obstacle.size.y / 2;\r\n\r\n    switch (obstacle.type) {\r\n    case 'electrical_hazard':\r\n      // Draw electrical hazard with sparking effect\r\n      this.ctx.shadowColor = '#b600f9'; // Neon Purple\r\n      this.ctx.shadowBlur = obstacle.isActive ? 15 : 5;\r\n      this.ctx.fillStyle = obstacle.isActive ? '#b600f9' : '#660066'; // Neon Purple\r\n      this.ctx.strokeStyle = '#d466ff'; // Lighter purple\r\n      this.ctx.lineWidth = 2;\r\n\r\n      // Draw main hazard rectangle\r\n      this.ctx.fillRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      this.ctx.strokeRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n\r\n      // Draw sparks if active\r\n      if (obstacle.isActive) {\r\n        this.drawElectricalSparks(centerX, centerY, obstacle.size.x);\r\n      }\r\n\r\n      // Draw warning symbol\r\n      this.ctx.fillStyle = '#00ff99'; // Acid Green\r\n      this.ctx.font = '12px monospace';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText('⚡', centerX, centerY + 4);\r\n      break;\r\n\r\n    case 'barrier':\r\n      // Draw solid barrier\r\n      this.ctx.shadowColor = '#00f0ff'; // Electric Blue\r\n      this.ctx.shadowBlur = 10;\r\n      this.ctx.fillStyle = '#006677'; // Darker blue\r\n      this.ctx.strokeStyle = '#00f0ff'; // Electric Blue\r\n      this.ctx.lineWidth = 2;\r\n\r\n      this.ctx.fillRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      this.ctx.strokeRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      break;\r\n\r\n    case 'hole':\r\n      // Draw hole/pit\r\n      this.ctx.shadowColor = '#b600f9'; // Neon Purple\r\n      this.ctx.shadowBlur = 8;\r\n      this.ctx.fillStyle = '#220000'; // Dark red\r\n      this.ctx.strokeStyle = '#b600f9'; // Neon Purple\r\n      this.ctx.lineWidth = 2;\r\n\r\n      this.ctx.fillRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      this.ctx.strokeRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      break;\r\n\r\n    default:\r\n      // Draw generic obstacle\r\n      this.ctx.strokeStyle = '#ffffff';\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeRect(\r\n        obstacle.position.x,\r\n        obstacle.position.y,\r\n        obstacle.size.x,\r\n        obstacle.size.y,\r\n      );\r\n      break;\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw electrical sparks effect\r\n   */\r\n  private drawElectricalSparks(\r\n    centerX: number,\r\n    centerY: number,\r\n    size: number,\r\n  ): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.save();\r\n    this.ctx.strokeStyle = '#ffffff';\r\n    this.ctx.lineWidth = 1;\r\n    this.ctx.globalAlpha = 0.8;\r\n\r\n    // Draw random spark lines\r\n    for (let i = 0; i < 5; i++) {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const length = Math.random() * size * 0.5;\r\n      const startX = centerX + Math.cos(angle) * 5;\r\n      const startY = centerY + Math.sin(angle) * 5;\r\n      const endX = startX + Math.cos(angle) * length;\r\n      const endY = startY + Math.sin(angle) * length;\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(startX, startY);\r\n      this.ctx.lineTo(endX, endY);\r\n      this.ctx.stroke();\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw target port with neon cyberpunk styling\r\n   */\r\n  public drawTargetPort(port: { position: { x: number; y: number }; radius: number; color: string; isCompleted?: boolean }): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.save();\r\n\r\n    const centerX = port.position.x;\r\n    const centerY = port.position.y;\r\n\r\n    // Draw outer glow\r\n    this.ctx.shadowColor = port.color;\r\n    this.ctx.shadowBlur = 20;\r\n    this.ctx.fillStyle = port.color;\r\n    this.ctx.globalAlpha = 0.3;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(centerX, centerY, port.radius + 10, 0, Math.PI * 2);\r\n    this.ctx.fill();\r\n\r\n    this.ctx.globalAlpha = 1;\r\n    this.ctx.shadowBlur = 0;\r\n\r\n    // Draw port circle\r\n    this.ctx.fillStyle = port.isCompleted ? '#333333' : port.color;\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2);\r\n    this.ctx.fill();\r\n\r\n    // Draw port outline\r\n    this.ctx.strokeStyle = port.isCompleted ? '#666666' : port.color;\r\n    this.ctx.lineWidth = 3;\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(centerX, centerY, port.radius, 0, Math.PI * 2);\r\n    this.ctx.stroke();\r\n\r\n    // Draw port symbol\r\n    this.ctx.fillStyle = '#ffffff';\r\n    this.ctx.font = '16px monospace';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillText(port.isCompleted ? '✓' : '○', centerX, centerY + 6);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw a hole using sprite atlas or fallback to neon cyberpunk styling\r\n   */\r\n  public drawHole(\r\n    hole: Hole,\r\n    isCompleted: boolean = false,\r\n    debugMode: boolean = false,\r\n  ): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.save();\r\n\r\n    const centerX = hole.position.x;\r\n    const centerY = hole.position.y;\r\n    const isGoalHole = hole.isGoal;\r\n    const isPowerUpHole = hole.powerUpType !== undefined;\r\n    const isSaucerActive = hole.saucerState?.isActive || false;\r\n\r\n    // Make holes 20% bigger for better visibility\r\n    const enlargedRadius = hole.radius * 1.2;\r\n\r\n    // Choose colors based on hole type\r\n    let activeColor: string;\r\n    let darkColor: string;\r\n    let darkerColor: string;\r\n\r\n    if (isGoalHole) {\r\n      activeColor = '#ff6600'; // Neon Orange for goals\r\n      darkColor = '#441100';\r\n      darkerColor = '#220000';\r\n    } else if (isPowerUpHole) {\r\n      // Power-up hole colors based on type\r\n      const powerUpColors = {\r\n        'SLOW_MO_SURGE': { active: '#00ffff', dark: '#004444', darker: '#002222' }, // Cyan\r\n        'MAGNETIC_GUIDE': { active: '#ff00ff', dark: '#440044', darker: '#220022' }, // Magenta\r\n        'CIRCUIT_PATCH': { active: '#00ff00', dark: '#004400', darker: '#002200' }, // Green\r\n        'OVERCLOCK_BOOST': { active: '#ff6600', dark: '#441100', darker: '#220000' }, // Orange\r\n        'SCAN_REVEAL': { active: '#ffff00', dark: '#444400', darker: '#222200' }, // Yellow\r\n      };\r\n      const colors = powerUpColors[hole.powerUpType as unknown as keyof typeof powerUpColors] || powerUpColors['SLOW_MO_SURGE'];\r\n      activeColor = colors.active;\r\n      darkColor = colors.dark;\r\n      darkerColor = colors.darker;\r\n    } else {\r\n      activeColor = '#00ff99'; // Acid Green for regular holes\r\n      darkColor = '#004400';\r\n      darkerColor = '#002200';\r\n    }\r\n\r\n    // Use sprite atlas if available, otherwise fallback to procedural rendering\r\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\r\n    // Logging disabled to reduce spam\r\n    if (this.spritesLoaded && atlasLoaded) {\r\n      // Choose sprite based on hole type\r\n      let spriteName: string;\r\n      if (hole.animationState?.isAnimated) {\r\n        // Animated hole - use normal hole sprite with scale animation\r\n        spriteName = 'ball_whole_normal';\r\n        \r\n        // Don't render if in hidden phase or scale is essentially 0\r\n        if (hole.animationState.phase === 'hidden' || hole.animationState.currentScale < 0.001) {\r\n          this.ctx.restore();\r\n          return;\r\n        }\r\n      } else if (isGoalHole) {\r\n        spriteName = 'ball_whole_powerup';\r\n      } else if (isPowerUpHole) {\r\n        // Use specific power-up sprites from the power-up atlas\r\n        const powerUpSprites = {\r\n          'SLOW_MO_SURGE': ['hourglass', 'hourglass_alt'], // Time bonus sprites\r\n          'MAGNETIC_GUIDE': ['magnet', 'magnet_alt', 'hourglass_alt'], // Occasionally time bonus\r\n          'CIRCUIT_PATCH': ['chip', 'chip_alt'],\r\n          'OVERCLOCK_BOOST': ['starburst', 'starburst_alt', 'hourglass'], // Occasionally time bonus\r\n          'SCAN_REVEAL': ['eye', 'eye_alt'],\r\n        };\r\n        \r\n        // Select sprite based on hole ID for consistent randomization\r\n        const sprites = powerUpSprites[hole.powerUpType as unknown as keyof typeof powerUpSprites] || ['vortex'];\r\n        const spriteIndex = hole.id.charCodeAt(hole.id.length - 1) % sprites.length;\r\n        spriteName = sprites[spriteIndex];\r\n      } else {\r\n        spriteName = 'ball_whole_normal';\r\n      }\r\n      const frameData = spriteAtlas.getFrame(spriteName);\r\n\r\n      if (frameData) {\r\n        // Calculate scaling to fit the enlarged hole radius\r\n        const targetSize = enlargedRadius * 2;\r\n        let spriteScale = targetSize / Math.max(frameData.frame.w, frameData.frame.h);\r\n        \r\n        // Apply animation scale for animated holes\r\n        if (hole.animationState?.isAnimated) {\r\n          spriteScale *= hole.animationState.currentScale;\r\n        }\r\n\r\n        // Draw outer glow first (behind sprite) - only in debug mode\r\n        if (debugMode) {\r\n          this.ctx.strokeStyle = activeColor;\r\n          this.ctx.lineWidth = 3;\r\n          this.ctx.globalAlpha = 0.5;\r\n\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(centerX, centerY, enlargedRadius + 5, 0, Math.PI * 2);\r\n          this.ctx.stroke();\r\n\r\n          this.ctx.globalAlpha = 1;\r\n        }\r\n\r\n        // Draw hole sprite\r\n        if (isCompleted) {\r\n          // Dimmed for completed holes\r\n          this.ctx.globalAlpha = 0.6;\r\n        }\r\n\r\n        spriteAtlas.drawSprite(\r\n          this.ctx,\r\n          spriteName,\r\n          centerX - (frameData.frame.w * spriteScale) / 2, // Center horizontally\r\n          centerY - (frameData.frame.h * spriteScale) / 2, // Center vertically\r\n          spriteScale,\r\n        );\r\n\r\n        this.ctx.globalAlpha = 1;\r\n\r\n        // Add completion indicator if needed\r\n        if (isCompleted) {\r\n          // Draw completion overlay\r\n          this.ctx.fillStyle = activeColor;\r\n          this.ctx.globalAlpha = 0.3;\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\r\n          this.ctx.fill();\r\n\r\n          this.ctx.globalAlpha = 1;\r\n\r\n          // Draw checkmark\r\n          this.ctx.fillStyle = activeColor;\r\n          this.ctx.font = '12px monospace';\r\n          this.ctx.textAlign = 'center';\r\n          this.ctx.fillText('✓', centerX, centerY + 4);\r\n        }\r\n\r\n        // Power-up holes now use sprites instead of text icons\r\n      } else {\r\n        // Fallback to procedural rendering if sprite not found\r\n        this.renderHoleFallback(\r\n          hole,\r\n          isCompleted,\r\n          centerX,\r\n          centerY,\r\n          isGoalHole,\r\n          activeColor,\r\n          darkColor,\r\n          darkerColor,\r\n          debugMode,\r\n          enlargedRadius,\r\n        );\r\n      }\r\n\r\n      // Draw saucer effects if active\r\n      if (isSaucerActive && isPowerUpHole) {\r\n        this.drawSaucerEffects(centerX, centerY, enlargedRadius, activeColor, hole);\r\n      }\r\n    } else {\r\n      // Fallback to procedural rendering if atlas not loaded\r\n      \r\n      // Don't render animated holes if in hidden phase or scale is essentially 0\r\n      if (hole.animationState?.isAnimated && (hole.animationState.phase === 'hidden' || hole.animationState.currentScale < 0.001)) {\r\n        this.ctx.restore();\r\n        return;\r\n      }\r\n      \r\n      this.renderHoleFallback(\r\n        hole,\r\n        isCompleted,\r\n        centerX,\r\n        centerY,\r\n        isGoalHole,\r\n        activeColor,\r\n        darkColor,\r\n        darkerColor,\r\n        debugMode,\r\n        enlargedRadius,\r\n      );\r\n\r\n      // Draw saucer effects if active\r\n      if (isSaucerActive && isPowerUpHole) {\r\n        this.drawSaucerEffects(centerX, centerY, enlargedRadius, activeColor, hole);\r\n      }\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Fallback hole rendering using procedural graphics\r\n   */\r\n  private renderHoleFallback(\r\n    hole: Hole,\r\n    isCompleted: boolean,\r\n    centerX: number,\r\n    centerY: number,\r\n    isGoalHole: boolean,\r\n    activeColor: string,\r\n    darkColor: string,\r\n    darkerColor: string,\r\n    debugMode: boolean,\r\n    enlargedRadius: number,\r\n  ): void {\r\n    if (!this.ctx) return;\r\n\r\n    // Draw outer glow - only in debug mode\r\n    if (debugMode) {\r\n      this.ctx.strokeStyle = activeColor;\r\n      this.ctx.lineWidth = 3;\r\n      this.ctx.globalAlpha = 0.5;\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, enlargedRadius + 5, 0, Math.PI * 2);\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.globalAlpha = 1;\r\n    }\r\n\r\n    // Draw hole interior\r\n    if (isCompleted) {\r\n      // Completed hole - show success state\r\n      this.ctx.shadowColor = activeColor;\r\n      this.ctx.shadowBlur = 15;\r\n      this.ctx.fillStyle = darkerColor;\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n\r\n      // Draw completion indicator\r\n      this.ctx.fillStyle = darkerColor;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, enlargedRadius / 2, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n\r\n      // Draw colored outline\r\n      this.ctx.strokeStyle = activeColor;\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, enlargedRadius - 2, 0, Math.PI * 2);\r\n      this.ctx.stroke();\r\n\r\n      // Draw checkmark\r\n      this.ctx.fillStyle = activeColor;\r\n      this.ctx.font = '12px monospace';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText('✓', centerX, centerY + 4);\r\n    } else {\r\n      // Active hole - show glowing state\r\n      let glowIntensity = 1;\r\n      let scaleMultiplier = 1;\r\n      \r\n      // Special handling for animated holes\r\n      if (hole.animationState?.isAnimated) {\r\n        const animState = hole.animationState;\r\n        \r\n        // Use current scale for both size and glow intensity\r\n        scaleMultiplier = animState.currentScale;\r\n        glowIntensity = animState.currentScale;\r\n        \r\n        // Don't render if scale is essentially 0 or in hidden phase\r\n        if (animState.currentScale < 0.001 || animState.phase === 'hidden') {\r\n          return;\r\n        }\r\n        \r\n        // Use orange color for animated holes\r\n        activeColor = '#ff6600';\r\n        darkColor = '#441100';\r\n        darkerColor = '#220000';\r\n      }\r\n      \r\n      this.ctx.shadowColor = activeColor;\r\n      this.ctx.shadowBlur = (isGoalHole ? 15 : 10) * glowIntensity;\r\n      this.ctx.fillStyle = activeColor;\r\n      this.ctx.globalAlpha = (isGoalHole ? 0.8 : 0.6) * glowIntensity;\r\n\r\n      const scaledRadius = (enlargedRadius - 2) * scaleMultiplier;\r\n      \r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, scaledRadius, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n\r\n      this.ctx.globalAlpha = 1;\r\n\r\n      // Draw inner dark area\r\n      this.ctx.fillStyle = darkColor;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, (enlargedRadius / 2) * scaleMultiplier, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n\r\n      // Draw colored outline\r\n      this.ctx.strokeStyle = activeColor;\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.globalAlpha = glowIntensity;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, scaledRadius, 0, Math.PI * 2);\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.globalAlpha = 1;\r\n\r\n      // Draw symbol - different for goal vs regular holes vs animated holes\r\n      this.ctx.fillStyle = '#ffffff';\r\n      this.ctx.font = '10px monospace';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.globalAlpha = glowIntensity;\r\n      \r\n      if (hole.animationState?.isAnimated) {\r\n        // Animated hole gets special symbol\r\n        this.ctx.fillText('◉', centerX, centerY + 3);\r\n      } else {\r\n        this.ctx.fillText(isGoalHole ? '🎯' : '●', centerX, centerY + 3);\r\n      }\r\n\r\n      // Add power-up icon if this is a power-up hole\r\n      if (hole.powerUpType) {\r\n        const powerUpIcons = {\r\n          'SLOW_MO_SURGE': '⏰',\r\n          'MAGNETIC_GUIDE': '🧲',\r\n          'CIRCUIT_PATCH': '🛡️',\r\n          'OVERCLOCK_BOOST': '⚡',\r\n          'SCAN_REVEAL': '🔍',\r\n        };\r\n        \r\n        const icon = powerUpIcons[hole.powerUpType as unknown as keyof typeof powerUpIcons] || '?';\r\n        \r\n        // Draw icon with glow effect\r\n        this.ctx.shadowColor = activeColor;\r\n        this.ctx.shadowBlur = 8 * glowIntensity;\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = '14px Interceptor';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(icon, centerX, centerY + 5);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n      }\r\n      \r\n      this.ctx.globalAlpha = 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw saucer effects for power-up holes\r\n   */\r\n  private drawSaucerEffects(centerX: number, centerY: number, radius: number, color: string, hole: Hole): void {\r\n    if (!this.ctx || !hole.saucerState) return;\r\n\r\n    this.ctx.save();\r\n\r\n    const saucerState = hole.saucerState;\r\n    const time = Date.now() * 0.01;\r\n\r\n    // Different effects based on phase\r\n    if (saucerState.phase === 'sinking') {\r\n      // Sinking phase - pulsing glow with downward motion\r\n      const pulseIntensity = 0.7 + 0.3 * Math.sin(time * 4);\r\n      this.ctx.shadowColor = color;\r\n      this.ctx.shadowBlur = 25 * pulseIntensity;\r\n      this.ctx.globalAlpha = 0.8 * pulseIntensity;\r\n\r\n      // Draw sinking animation rings\r\n      const sinkProgress = saucerState.sinkDepth;\r\n      for (let i = 0; i < 3; i++) {\r\n        const ringRadius = radius + 4 + i * 4;\r\n        const ringAlpha = 0.6 * (1 - i * 0.3) * (1 - sinkProgress * 0.5);\r\n        this.ctx.globalAlpha = ringAlpha;\r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(centerX, centerY + sinkProgress * 4, ringRadius, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n      }\r\n\r\n\r\n\r\n    } else if (saucerState.phase === 'waiting') {\r\n      // Waiting phase - steady glow with pulsing\r\n      const pulseIntensity = 0.6 + 0.2 * Math.sin(time * 2);\r\n      this.ctx.shadowColor = color;\r\n      this.ctx.shadowBlur = 20 * pulseIntensity;\r\n      this.ctx.globalAlpha = 0.7 * pulseIntensity;\r\n\r\n      // Draw steady rings\r\n      this.ctx.strokeStyle = color;\r\n      this.ctx.lineWidth = 3;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, radius + 8, 0, Math.PI * 2);\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(centerX, centerY, radius + 4, 0, Math.PI * 2);\r\n      this.ctx.stroke();\r\n\r\n      // Draw spinning effect\r\n      const spinAngle = time * 1.5;\r\n      const spinRadius = radius + 6;\r\n      \r\n      this.ctx.strokeStyle = color;\r\n      this.ctx.lineWidth = 1;\r\n      this.ctx.globalAlpha = 0.8;\r\n      \r\n      for (let i = 0; i < 4; i++) {\r\n        const angle = spinAngle + (i * Math.PI / 2);\r\n        const x1 = centerX + Math.cos(angle) * spinRadius;\r\n        const y1 = centerY + Math.sin(angle) * spinRadius;\r\n        const x2 = centerX + Math.cos(angle) * (spinRadius + 6);\r\n        const y2 = centerY + Math.sin(angle) * (spinRadius + 6);\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n      }\r\n\r\n\r\n\r\n    } else if (saucerState.phase === 'ejecting') {\r\n      // Ejecting phase - intense glow with upward motion\r\n      const ejectProgress = Math.min((Date.now() - saucerState.startTime) / 200, 1);\r\n      const pulseIntensity = 0.8 + 0.4 * Math.sin(time * 6);\r\n      this.ctx.shadowColor = color;\r\n      this.ctx.shadowBlur = 30 * pulseIntensity;\r\n      this.ctx.globalAlpha = 0.9 * pulseIntensity;\r\n\r\n      // Draw ejection rings moving upward\r\n      for (let i = 0; i < 3; i++) {\r\n        const ringRadius = radius + 2 + i * 3;\r\n        const ringY = centerY - ejectProgress * 10 * (i + 1);\r\n        const ringAlpha = 0.7 * (1 - i * 0.3) * (1 - ejectProgress * 0.3);\r\n        this.ctx.globalAlpha = ringAlpha;\r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(centerX, ringY, ringRadius, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n      }\r\n\r\n\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw danger zone with neon cyberpunk styling\r\n   */\r\n  public drawDangerZone(zone: { position: { x: number; y: number }; radius: number; width?: number; height?: number; isActive?: boolean }): void {\r\n    if (!this.ctx) return;\r\n\r\n    this.ctx.save();\r\n\r\n    const centerX = zone.position.x + (zone.width || zone.radius * 2) / 2;\r\n    const centerY = zone.position.y + (zone.height || zone.radius * 2) / 2;\r\n\r\n    // Draw pulsing danger zone\r\n    this.ctx.shadowColor = '#b600f9'; // Neon Purple\r\n    this.ctx.shadowBlur = 20;\r\n    this.ctx.fillStyle = '#220000'; // Dark red\r\n    this.ctx.globalAlpha = 0.7;\r\n\r\n    this.ctx.fillRect(\r\n      zone.position.x,\r\n      zone.position.y,\r\n      zone.width || zone.radius * 2,\r\n      zone.height || zone.radius * 2,\r\n    );\r\n\r\n    this.ctx.globalAlpha = 1;\r\n\r\n    // Draw border\r\n    this.ctx.strokeStyle = '#b600f9'; // Neon Purple\r\n    this.ctx.lineWidth = 3;\r\n    this.ctx.strokeRect(\r\n      zone.position.x,\r\n      zone.position.y,\r\n      zone.width || zone.radius * 2,\r\n      zone.height || zone.radius * 2,\r\n    );\r\n\r\n    // Draw warning symbol\r\n    this.ctx.fillStyle = '#000000';\r\n    this.ctx.font = '20px monospace';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillText('⚠', centerX, centerY + 8);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw a ball using sprite image or fallback to chrome rendering\r\n   */\r\n  public drawChromeBall(\r\n    ball: { position: { x: number; y: number }; radius: number },\r\n    animationState?: { scale: number; opacity: number },\r\n    spriteName: string = 'ball_normal',\r\n  ): void {\r\n    if (!this.ctx) return;\r\n    \r\n    this.ctx.save();\r\n\r\n    const x = ball.position.x;\r\n    const y = ball.position.y;\r\n    const radius = ball.radius;\r\n    const scale = animationState?.scale || 1;\r\n    const opacity = animationState?.opacity || 1;\r\n\r\n    // Set global opacity for animation\r\n    this.ctx.globalAlpha = opacity;\r\n\r\n    // Use sprite atlas if loaded, otherwise fallback to procedural rendering\r\n    const atlasLoaded = spriteAtlas.isAtlasLoaded();\r\n    if (this.spritesLoaded && atlasLoaded) {\r\n      // Draw sprite-based ball from atlas\r\n      // Apply 10% size reduction for saucer sprite\r\n      const saucerSizeMultiplier = spriteName === 'ball_saucer' ? 0.9 : 1.0;\r\n      const targetSize = radius * 2 * scale * saucerSizeMultiplier;\r\n      const spriteFrame = spriteAtlas.getFrame(spriteName);\r\n\r\n      if (spriteFrame) {\r\n        // Calculate scale to fit the ball size (64x64 sprite to ball diameter)\r\n        const spriteScale = targetSize / spriteFrame.frame.w;\r\n\r\n        // Draw shadow behind sprite\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(\r\n          x + radius * scale * 0.1,\r\n          y + radius * scale * 0.1,\r\n          radius * scale,\r\n          0,\r\n          Math.PI * 2,\r\n        );\r\n        this.ctx.fill();\r\n\r\n        // Draw the ball sprite from atlas, centered on ball position\r\n        spriteAtlas.drawSprite(\r\n          this.ctx,\r\n          spriteName,\r\n          x - targetSize / 2, // Center horizontally\r\n          y - targetSize / 2, // Center vertically\r\n          spriteScale, // Scale factor to match ball size\r\n        );\r\n      } else {\r\n        // Fallback if sprite not found - render procedurally inline\r\n        // Apply 10% size reduction for saucer sprite\r\n        const saucerSizeMultiplier = spriteName === 'ball_saucer' ? 0.9 : 1.0;\r\n        const scaledRadius = radius * scale * saucerSizeMultiplier;\r\n\r\n        // Create main ball gradient (chrome base)\r\n        const mainGradient = this.ctx.createRadialGradient(\r\n          x - scaledRadius * 0.3,\r\n          y - scaledRadius * 0.3,\r\n          0,\r\n          x,\r\n          y,\r\n          scaledRadius,\r\n        );\r\n        mainGradient.addColorStop(0, '#ffffff'); // Bright highlight\r\n        mainGradient.addColorStop(0.1, '#e6e6e6'); // Light chrome\r\n        mainGradient.addColorStop(0.3, '#cccccc'); // Medium chrome\r\n        mainGradient.addColorStop(0.6, '#999999'); // Dark chrome\r\n        mainGradient.addColorStop(0.8, '#666666'); // Darker chrome\r\n        mainGradient.addColorStop(1, '#333333'); // Shadow edge\r\n\r\n        // Draw main ball shadow (behind ball)\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(\r\n          x + scaledRadius * 0.1,\r\n          y + scaledRadius * 0.1,\r\n          scaledRadius,\r\n          0,\r\n          Math.PI * 2,\r\n        );\r\n        this.ctx.fill();\r\n\r\n        // Draw main chrome ball\r\n        this.ctx.fillStyle = mainGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, scaledRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n\r\n        // Add bright highlight\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 1)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(\r\n          x - scaledRadius * 0.35,\r\n          y - scaledRadius * 0.35,\r\n          scaledRadius * 0.08,\r\n          0,\r\n          Math.PI * 2,\r\n        );\r\n        this.ctx.fill();\r\n      }\r\n    } else {\r\n      // Fallback to procedural chrome rendering\r\n      // Apply 10% size reduction for saucer sprite\r\n      const saucerSizeMultiplier = spriteName === 'ball_saucer' ? 0.9 : 1.0;\r\n      const scaledRadius = radius * scale * saucerSizeMultiplier;\r\n\r\n      // Create main ball gradient (chrome base)\r\n      const mainGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.3,\r\n        y - scaledRadius * 0.3,\r\n        0,\r\n        x,\r\n        y,\r\n        scaledRadius,\r\n      );\r\n      mainGradient.addColorStop(0, '#ffffff'); // Bright highlight\r\n      mainGradient.addColorStop(0.1, '#e6e6e6'); // Light chrome\r\n      mainGradient.addColorStop(0.3, '#cccccc'); // Medium chrome\r\n      mainGradient.addColorStop(0.6, '#999999'); // Dark chrome\r\n      mainGradient.addColorStop(0.8, '#666666'); // Darker chrome\r\n      mainGradient.addColorStop(1, '#333333'); // Shadow edge\r\n\r\n      // Draw main ball shadow (behind ball)\r\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x + scaledRadius * 0.1,\r\n        y + scaledRadius * 0.1,\r\n        scaledRadius,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n\r\n      // Draw main chrome ball\r\n      this.ctx.fillStyle = mainGradient;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, scaledRadius, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n\r\n      // Create secondary reflection gradient\r\n      const reflectionGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.4,\r\n        y - scaledRadius * 0.4,\r\n        0,\r\n        x - scaledRadius * 0.2,\r\n        y - scaledRadius * 0.2,\r\n        scaledRadius * 0.6,\r\n      );\r\n      reflectionGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');\r\n      reflectionGradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.3)');\r\n      reflectionGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n      // Draw secondary reflection\r\n      this.ctx.fillStyle = reflectionGradient;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x - scaledRadius * 0.2,\r\n        y - scaledRadius * 0.2,\r\n        scaledRadius * 0.6,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n\r\n      // Create primary highlight\r\n      const highlightGradient = this.ctx.createRadialGradient(\r\n        x - scaledRadius * 0.3,\r\n        y - scaledRadius * 0.3,\r\n        0,\r\n        x - scaledRadius * 0.3,\r\n        y - scaledRadius * 0.3,\r\n        scaledRadius * 0.4,\r\n      );\r\n      highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\r\n      highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.8)');\r\n      highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n      // Draw primary highlight\r\n      this.ctx.fillStyle = highlightGradient;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x - scaledRadius * 0.3,\r\n        y - scaledRadius * 0.3,\r\n        scaledRadius * 0.4,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n\r\n      // Add small specular highlights\r\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x - scaledRadius * 0.4,\r\n        y - scaledRadius * 0.4,\r\n        scaledRadius * 0.15,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n\r\n      // Add tiny bright spot\r\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 1)';\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x - scaledRadius * 0.35,\r\n        y - scaledRadius * 0.35,\r\n        scaledRadius * 0.08,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n\r\n      // Add environment reflection (cyberpunk colors)\r\n      const envGradient = this.ctx.createRadialGradient(\r\n        x + scaledRadius * 0.3,\r\n        y + scaledRadius * 0.2,\r\n        0,\r\n        x + scaledRadius * 0.3,\r\n        y + scaledRadius * 0.2,\r\n        scaledRadius * 0.5,\r\n      );\r\n      envGradient.addColorStop(0, 'rgba(0, 255, 255, 0.2)'); // Cyan reflection\r\n      envGradient.addColorStop(0.3, 'rgba(255, 0, 102, 0.1)'); // Pink reflection\r\n      envGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n      this.ctx.fillStyle = envGradient;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(\r\n        x + scaledRadius * 0.3,\r\n        y + scaledRadius * 0.2,\r\n        scaledRadius * 0.5,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      this.ctx.fill();\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw a sprite from the atlas with optional scaling and positioning\r\n   */\r\n  public drawAtlasSprite(\r\n    spriteName: string,\r\n    x: number,\r\n    y: number,\r\n    scale: number = 1,\r\n    centered: boolean = true,\r\n  ): boolean {\r\n    if (!this.ctx || !spriteAtlas.isAtlasLoaded()) return false;\r\n\r\n    const frameData = spriteAtlas.getFrame(spriteName);\r\n    if (!frameData) return false;\r\n\r\n    const drawX = centered ? x - (frameData.frame.w * scale) / 2 : x;\r\n    const drawY = centered ? y - (frameData.frame.h * scale) / 2 : y;\r\n\r\n    // Apply tint if set\r\n    if (this.currentTint) {\r\n      this.ctx.save();\r\n      this.ctx.globalCompositeOperation = 'multiply';\r\n      this.ctx.fillStyle = this.currentTint;\r\n      this.ctx.globalAlpha = 0.3;\r\n    }\r\n\r\n    const result = spriteAtlas.drawSprite(this.ctx, spriteName, drawX, drawY, scale);\r\n\r\n    // Restore context if tint was applied\r\n    if (this.currentTint) {\r\n      this.ctx.restore();\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Set tint color for sprites\r\n   */\r\n  public setTint(color: string): void {\r\n    this.currentTint = color;\r\n  }\r\n\r\n  /**\r\n   * Clear tint color\r\n   */\r\n  public clearTint(): void {\r\n    this.currentTint = null;\r\n  }\r\n\r\n  /**\r\n   * Draw a flipper using atlas sprites\r\n   */\r\n  public drawFlipper(flipper: { position: { x: number; y: number } }, isLeft: boolean): void {\r\n    if (!this.ctx) return;\r\n\r\n    const spriteName = isLeft ? 'flipper_left_down' : 'flipper_right_down';\r\n    this.drawAtlasSprite(spriteName, flipper.position.x, flipper.position.y, 2);\r\n  }\r\n\r\n  /**\r\n   * Draw a bumper using atlas sprites with animation\r\n   */\r\n  public drawBumper(bumper: { position: { x: number; y: number } }, isActive: boolean = false): void {\r\n    if (!this.ctx) return;\r\n\r\n    const spriteName = isActive ? 'round_bumper_active' : 'round_bumper_idle';\r\n    this.drawAtlasSprite(spriteName, bumper.position.x, bumper.position.y, 1.5);\r\n  }\r\n\r\n  /**\r\n   * Draw a spinner with rotation animation\r\n   */\r\n  public drawSpinner(spinner: { position: { x: number; y: number } }, animationFrame: number = 1): void {\r\n    if (!this.ctx) return;\r\n\r\n    // Cycle through spinner animation frames (1-4)\r\n    const frame = Math.max(1, Math.min(4, animationFrame));\r\n    const spriteName = `spinner_${frame}`;\r\n    this.drawAtlasSprite(spriteName, spinner.position.x, spinner.position.y, 2);\r\n  }\r\n\r\n  /**\r\n   * Get canvas context\r\n   */\r\n  public getContext(): CanvasRenderingContext2D | null {\r\n    return this.ctx;\r\n  }\r\n\r\n  /**\r\n   * Get canvas dimensions\r\n   */\r\n  public getDimensions(): { width: number; height: number } {\r\n    return { width: this.width, height: this.height };\r\n  }\r\n\r\n  /**\r\n   * Resize the renderer\r\n   */\r\n  public resize(width: number, height: number): void {\r\n    if (!this.canvas) return;\r\n\r\n    this.width = width;\r\n    this.height = height;\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n\r\n    Debug.log(`Renderer resized to: ${width}x${height}`);\r\n  }\r\n}\r\n","// Circuit Breaker - Advanced Physics Engine\r\n// Robust Verlet integration with constraint solving and accurate collision detection\r\n\r\nimport { Debug } from '../utils/Debug';\r\nimport { TiltingBar } from '../core/TiltingBar';\r\n\r\nexport interface PhysicsObject {\r\n  id: string;\r\n  position: { x: number; y: number };\r\n  previousPosition: { x: number; y: number };\r\n  acceleration: { x: number; y: number };\r\n  velocity: { x: number; y: number };\r\n  radius: number;\r\n  mass: number;\r\n  inverseMass: number; // 1/mass for performance\r\n  restitution: number; // Bounciness (0-1)\r\n  friction: number; // Surface friction (0-1)\r\n  isStatic: boolean;\r\n  constraints: Constraint[];\r\n\r\n  // For backward compatibility\r\n  x?: number;\r\n  y?: number;\r\n  vx?: number;\r\n  vy?: number;\r\n  type?: 'dynamic' | 'static';\r\n  rotation?: number;\r\n  width?: number;\r\n  height?: number;\r\n\r\n  // Rolling physics state\r\n  isRollingOnBar?: boolean;\r\n}\r\n\r\nexport interface Constraint {\r\n  type: 'distance' | 'position' | 'angle';\r\n  objectA: PhysicsObject;\r\n  objectB?: PhysicsObject;\r\n  targetDistance?: number;\r\n  targetPosition?: { x: number; y: number };\r\n  targetAngle?: number;\r\n  stiffness: number;\r\n  restLength?: number;\r\n}\r\n\r\nexport interface CollisionManifold {\r\n  objectA: PhysicsObject;\r\n  objectB: PhysicsObject;\r\n  normal: { x: number; y: number };\r\n  penetration: number;\r\n  contactPoint: { x: number; y: number };\r\n}\r\n\r\ninterface SpatialCell {\r\n  objects: PhysicsObject[];\r\n}\r\n\r\nexport class PhysicsEngine {\r\n  private gravity: { x: number; y: number } = { x: 0, y: 400 };\r\n  private airResistance: number = 0.999;\r\n  private objects: PhysicsObject[] = [];\r\n  private constraints: Constraint[] = [];\r\n  private spatialGrid: Map<string, SpatialCell> = new Map();\r\n  private gridSize: number = 60;\r\n  private tiltingBar: TiltingBar | null = null;\r\n  private bounds = { width: 360, height: 640 };\r\n\r\n  // Simulation parameters (optimized for performance)\r\n  private deltaTime: number = 1 / 60;\r\n  private timeScale: number = 1.0;\r\n\r\n  // Performance tracking\r\n  private debug: boolean = false;\r\n  private collisionManifolds: CollisionManifold[] = [];\r\n\r\n  // Audio callback for collision sounds\r\n  private audioCallback: ((velocity: number, type: string) => void) | null =\r\n    null;\r\n\r\n  // Audio cooldown timers to prevent rapid-fire collision sounds (in milliseconds)\r\n  private audioTimeouts: Map<string, number> = new Map();\r\n  private readonly AUDIO_COOLDOWN_MS = 150; // 150ms cooldown between same collision type sounds\r\n\r\n  constructor() {\r\n    Debug.log('⚡ Advanced PhysicsEngine initialized with Verlet integration');\r\n  }\r\n\r\n  /**\r\n   * Set the tilting bar reference for collision detection\r\n   */\r\n  public setTiltingBar(bar: TiltingBar): void {\r\n    this.tiltingBar = bar;\r\n  }\r\n\r\n  /**\r\n   * Set audio callback for collision sounds\r\n   */\r\n  public setAudioCallback(\r\n    callback: (velocity: number, type: string) => void,\r\n  ): void {\r\n    this.audioCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Play audio with cooldown to prevent rapid-fire sounds\r\n   */\r\n  private playAudioWithCooldown(\r\n    velocity: number,\r\n    type: string,\r\n    objectId: string,\r\n  ): void {\r\n    if (!this.audioCallback) return;\r\n\r\n    const now = Date.now();\r\n    const cooldownKey = `${objectId}_${type}`;\r\n    const lastAudioTime = this.audioTimeouts.get(cooldownKey) || 0;\r\n\r\n    // Only play if enough time has passed since last audio of this type for this object\r\n    if (now - lastAudioTime >= this.AUDIO_COOLDOWN_MS) {\r\n      this.audioCallback(velocity, type);\r\n      this.audioTimeouts.set(cooldownKey, now);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a physics object with proper initialization\r\n   */\r\n  public createObject(config: {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n    mass?: number;\r\n    restitution?: number;\r\n    friction?: number;\r\n    isStatic?: boolean;\r\n  }): PhysicsObject {\r\n    const mass = config.mass || 1;\r\n    const obj: PhysicsObject = {\r\n      id: config.id,\r\n      position: { x: config.x, y: config.y },\r\n      previousPosition: { x: config.x, y: config.y },\r\n      acceleration: { x: 0, y: 0 },\r\n      velocity: { x: 0, y: 0 },\r\n      radius: config.radius,\r\n      mass: mass,\r\n      inverseMass: config.isStatic ? 0 : 1 / mass,\r\n      restitution: config.restitution || 0.7,\r\n      friction: config.friction || 0.3,\r\n      isStatic: config.isStatic || false,\r\n      constraints: [],\r\n      // Backward compatibility\r\n      x: config.x,\r\n      y: config.y,\r\n      vx: 0,\r\n      vy: 0,\r\n    };\r\n\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Add a physics object to the simulation\r\n   */\r\n  public addObject(obj: PhysicsObject): void {\r\n    // Ensure proper initialization if not created with createObject\r\n    if (!obj.previousPosition) {\r\n      obj.previousPosition = {\r\n        x: obj.position?.x || obj.x || 0,\r\n        y: obj.position?.y || obj.y || 0,\r\n      };\r\n    }\r\n    if (!obj.acceleration) {\r\n      obj.acceleration = { x: 0, y: 0 };\r\n    }\r\n    if (!obj.velocity) {\r\n      obj.velocity = { x: 0, y: 0 };\r\n    }\r\n    if (!obj.inverseMass) {\r\n      obj.inverseMass = obj.isStatic ? 0 : 1 / (obj.mass || 1);\r\n    }\r\n    if (!obj.constraints) {\r\n      obj.constraints = [];\r\n    }\r\n\r\n    this.objects.push(obj);\r\n    this.updateSpatialGrid();\r\n    Debug.log(`Added physics object: ${obj.id}`);\r\n  }\r\n\r\n  /**\r\n   * Remove a physics object by id\r\n   */\r\n  public removeObject(id: string): void {\r\n    this.objects = this.objects.filter(obj => obj.id !== id);\r\n    this.updateSpatialGrid();\r\n    Debug.log(`Removed physics object: ${id}`);\r\n  }\r\n\r\n  /**\r\n   * Add a constraint between objects\r\n   */\r\n  public addConstraint(constraint: Constraint): void {\r\n    this.constraints.push(constraint);\r\n    Debug.log(`Added constraint: ${constraint.type}`);\r\n  }\r\n\r\n  /**\r\n   * Main physics update (optimized for performance)\r\n   */\r\n  public update(frameTime: number): void {\r\n    // Convert milliseconds to seconds and apply time scaling\r\n    const dt = frameTime / 1000; // Convert to seconds\r\n    this.simulateStep(dt);\r\n\r\n    // Update backward compatibility properties\r\n    this.updateBackwardCompatibility();\r\n  }\r\n\r\n  /**\r\n   * Single physics simulation step (optimized)\r\n   */\r\n  private simulateStep(dt: number): void {\r\n    // Apply time scale for slow motion effects\r\n    dt *= this.timeScale;\r\n    // Clear collision manifolds and rolling flags\r\n    this.collisionManifolds = [];\r\n    for (const obj of this.objects) {\r\n      obj.isRollingOnBar = false;\r\n    }\r\n\r\n    // Update spatial grid only when needed\r\n    if (this.objects.length > 0) {\r\n      this.updateSpatialGrid();\r\n    }\r\n\r\n    // Integrate positions using simplified Verlet integration\r\n    this.integratePositions(dt);\r\n\r\n    // Single iteration of constraints and collisions for performance\r\n    this.solveConstraints();\r\n    this.detectAndResolveCollisions();\r\n\r\n    // Handle tilting bar collisions and rolling physics\r\n    this.handleTiltingBarCollisions();\r\n\r\n    // Handle boundary collisions\r\n    this.handleBoundaryCollisions();\r\n\r\n    // Update velocities from position changes\r\n    this.updateVelocities(dt);\r\n  }\r\n\r\n  /**\r\n   * Simplified Verlet integration for position updates\r\n   */\r\n  private integratePositions(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue;\r\n\r\n      // Check if ball is held (e.g., in a saucer)\r\n      if (this.isBallHeld(obj.id)) {\r\n        // Get target position for held ball\r\n        const targetPos = this.getHeldBallTarget(obj.id);\r\n        if (targetPos) {\r\n          // Check if ball is in sinking phase for more aggressive movement\r\n          const isSinking = this.isBallSinking && this.isBallSinking(obj.id);\r\n          \r\n          if (isSinking) {\r\n            // During sinking: aggressive movement toward hole, allow natural falling\r\n            const aggressiveFactor = 0.15; // Faster convergence during sinking\r\n            const fallGravity = 0.3; // Additional downward force during sinking\r\n            \r\n            // Move toward hole center aggressively\r\n            obj.position.x += (targetPos.x - obj.position.x) * aggressiveFactor;\r\n            obj.position.y += (targetPos.y - obj.position.y) * aggressiveFactor + fallGravity;\r\n          } else {\r\n            // In waiting/ejecting phases: smooth movement\r\n            const smoothingFactor = 0.1; // Smooth movement\r\n            obj.position.x += (targetPos.x - obj.position.x) * smoothingFactor;\r\n            obj.position.y += (targetPos.y - obj.position.y) * smoothingFactor;\r\n          }\r\n        }\r\n        \r\n        // Keep ball in place by maintaining consistent previous position\r\n        // This prevents jittery movement when physics tries to move the ball\r\n        obj.previousPosition.x = obj.position.x;\r\n        obj.previousPosition.y = obj.position.y;\r\n        continue;\r\n      }\r\n\r\n      // Calculate current velocity\r\n      const velX = obj.position.x - obj.previousPosition.x;\r\n      const velY = obj.position.y - obj.previousPosition.y;\r\n\r\n      // Store current position as previous\r\n      obj.previousPosition.x = obj.position.x;\r\n      obj.previousPosition.y = obj.position.y;\r\n\r\n      // Update position with velocity and gravity\r\n      const gravityX = this.gravity.x * dt * dt;\r\n      const gravityY = this.gravity.y * dt * dt;\r\n      obj.position.x += velX * this.airResistance + gravityX;\r\n      obj.position.y += velY * this.airResistance + gravityY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocities from position changes\r\n   */\r\n  private updateVelocities(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue;\r\n\r\n      obj.velocity.x = (obj.position.x - obj.previousPosition.x) / dt;\r\n      obj.velocity.y = (obj.position.y - obj.previousPosition.y) / dt;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve all constraints\r\n   */\r\n  private solveConstraints(): void {\r\n    for (const constraint of this.constraints) {\r\n      this.solveConstraint(constraint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve individual constraint\r\n   */\r\n  private solveConstraint(constraint: Constraint): void {\r\n    switch (constraint.type) {\r\n    case 'distance':\r\n      this.solveDistanceConstraint(constraint);\r\n      break;\r\n    case 'position':\r\n      this.solvePositionConstraint(constraint);\r\n      break;\r\n    case 'angle':\r\n      this.solveAngleConstraint(constraint);\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve distance constraint between two objects\r\n   */\r\n  private solveDistanceConstraint(constraint: Constraint): void {\r\n    if (!constraint.objectB || !constraint.targetDistance) return;\r\n\r\n    const objA = constraint.objectA;\r\n    const objB = constraint.objectB;\r\n\r\n    const dx = objB.position.x - objA.position.x;\r\n    const dy = objB.position.y - objA.position.y;\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (distance === 0) return;\r\n\r\n    const difference = constraint.targetDistance - distance;\r\n    const percent = difference / distance / 2;\r\n    const offsetX = dx * percent * constraint.stiffness;\r\n    const offsetY = dy * percent * constraint.stiffness;\r\n\r\n    if (!objA.isStatic) {\r\n      objA.position.x -= offsetX * objA.inverseMass;\r\n      objA.position.y -= offsetY * objA.inverseMass;\r\n    }\r\n\r\n    if (!objB.isStatic) {\r\n      objB.position.x += offsetX * objB.inverseMass;\r\n      objB.position.y += offsetY * objB.inverseMass;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve position constraint (pin object to position)\r\n   */\r\n  private solvePositionConstraint(constraint: Constraint): void {\r\n    if (!constraint.targetPosition) return;\r\n\r\n    const obj = constraint.objectA;\r\n    if (obj.isStatic) return;\r\n\r\n    const dx = constraint.targetPosition.x - obj.position.x;\r\n    const dy = constraint.targetPosition.y - obj.position.y;\r\n\r\n    obj.position.x += dx * constraint.stiffness;\r\n    obj.position.y += dy * constraint.stiffness;\r\n  }\r\n\r\n  /**\r\n   * Solve angle constraint (maintain angle between objects)\r\n   */\r\n  private solveAngleConstraint(_constraint: Constraint): void {\r\n    // Implementation for angle constraints if needed\r\n    // This is more complex and depends on specific requirements\r\n  }\r\n\r\n  /**\r\n   * Detect and resolve collisions between objects (optimized)\r\n   */\r\n  private detectAndResolveCollisions(): void {\r\n    // Only check collisions if we have multiple objects\r\n    if (this.objects.length < 2) return;\r\n\r\n    for (let i = 0; i < this.objects.length; i++) {\r\n      const obj = this.objects[i];\r\n      if (obj.isStatic) continue;\r\n\r\n      // Check only against objects after this one to avoid duplicate checks\r\n      for (let j = i + 1; j < this.objects.length; j++) {\r\n        const otherObj = this.objects[j];\r\n\r\n        // Quick distance check before expensive collision detection\r\n        const dx = otherObj.position.x - obj.position.x;\r\n        const dy = otherObj.position.y - obj.position.y;\r\n        const maxDistance = obj.radius + otherObj.radius + 5; // Small buffer\r\n\r\n        if (dx * dx + dy * dy < maxDistance * maxDistance) {\r\n          const manifold = this.detectCollision(obj, otherObj);\r\n          if (manifold) {\r\n            this.collisionManifolds.push(manifold);\r\n            this.resolveCollisionSimple(manifold);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect collision between two objects\r\n   */\r\n  private detectCollision(\r\n    objA: PhysicsObject,\r\n    objB: PhysicsObject,\r\n  ): CollisionManifold | null {\r\n    const dx = objB.position.x - objA.position.x;\r\n    const dy = objB.position.y - objA.position.y;\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n    const minDistance = objA.radius + objB.radius;\r\n\r\n    if (distance < minDistance) {\r\n      const penetration = minDistance - distance;\r\n      const normal =\r\n        distance > 0 ? { x: dx / distance, y: dy / distance } : { x: 1, y: 0 };\r\n\r\n      return {\r\n        objectA: objA,\r\n        objectB: objB,\r\n        normal: normal,\r\n        penetration: penetration,\r\n        contactPoint: {\r\n          x: objA.position.x + normal.x * objA.radius,\r\n          y: objA.position.y + normal.y * objA.radius,\r\n        },\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Resolve collision using impulse-based method\r\n   */\r\n  // private resolveCollision(manifold: CollisionManifold): void {\r\n  //   const objA = manifold.objectA;\r\n  //   const objB = manifold.objectB;\r\n\r\n  //   // Position correction to prevent sinking\r\n  //   const correction =\r\n  //     (manifold.penetration / (objA.inverseMass + objB.inverseMass)) * 0.8;\r\n  //   objA.position.x -= manifold.normal.x * correction * objA.inverseMass;\r\n  //   objA.position.y -= manifold.normal.y * correction * objA.inverseMass;\r\n  //   objB.position.x += manifold.normal.x * correction * objB.inverseMass;\r\n  //   objB.position.y += manifold.normal.y * correction * objB.inverseMass;\r\n\r\n  //   // Velocity correction\r\n  //   const relativeVelocity = {\r\n  //     x: objB.velocity.x - objA.velocity.x,\r\n  //     y: objB.velocity.y - objA.velocity.y,\r\n  //   };\r\n\r\n  //   const velocityAlongNormal =\r\n  //     relativeVelocity.x * manifold.normal.x +\r\n  //     relativeVelocity.y * manifold.normal.y;\r\n\r\n  //   if (velocityAlongNormal > 0) return; // Objects separating\r\n\r\n  //   const restitution = Math.min(objA.restitution, objB.restitution);\r\n  //   const impulseScalar =\r\n  //     (-(1 + restitution) * velocityAlongNormal) /\r\n  //     (objA.inverseMass + objB.inverseMass);\r\n\r\n  //   const impulse = {\r\n  //       x: impulseScalar * manifold.normal.x,\r\n  //       y: impulseScalar * manifold.normal.y,\r\n  //   };\r\n\r\n  //   // Apply impulse to velocities (which affects next frame's position)\r\n  //   if (!objA.isStatic) {\r\n  //     objA.previousPosition.x -= impulse.x * objA.inverseMass;\r\n  //     objA.previousPosition.y -= impulse.y * objA.inverseMass;\r\n  //   }\r\n\r\n  //   if (!objB.isStatic) {\r\n  //     objB.previousPosition.x += impulse.x * objB.inverseMass;\r\n  //     objB.previousPosition.y += impulse.y * objB.inverseMass;\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Simplified collision resolution for better performance\r\n   */\r\n  private resolveCollisionSimple(manifold: CollisionManifold): void {\r\n    const objA = manifold.objectA;\r\n    const objB = manifold.objectB;\r\n\r\n    // Simple position separation\r\n    const separationX = manifold.normal.x * manifold.penetration * 0.5;\r\n    const separationY = manifold.normal.y * manifold.penetration * 0.5;\r\n\r\n    if (!objA.isStatic) {\r\n      objA.position.x -= separationX;\r\n      objA.position.y -= separationY;\r\n    }\r\n\r\n    if (!objB.isStatic) {\r\n      objB.position.x += separationX;\r\n      objB.position.y += separationY;\r\n    }\r\n\r\n    // Simple velocity reflection\r\n    const relativeVelocity = {\r\n      x: objB.velocity.x - objA.velocity.x,\r\n      y: objB.velocity.y - objA.velocity.y,\r\n    };\r\n\r\n    const velocityAlongNormal =\r\n      relativeVelocity.x * manifold.normal.x +\r\n      relativeVelocity.y * manifold.normal.y;\r\n\r\n    if (velocityAlongNormal > 0) return; // Objects separating\r\n\r\n    const restitution = Math.min(objA.restitution, objB.restitution) * 0.8; // Reduced for stability\r\n    const impulse = velocityAlongNormal * restitution;\r\n\r\n    if (!objA.isStatic) {\r\n      objA.previousPosition.x += manifold.normal.x * impulse * 0.5;\r\n      objA.previousPosition.y += manifold.normal.y * impulse * 0.5;\r\n    }\r\n\r\n    if (!objB.isStatic) {\r\n      objB.previousPosition.x -= manifold.normal.x * impulse * 0.5;\r\n      objB.previousPosition.y -= manifold.normal.y * impulse * 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle tilting bar collisions with realistic rolling physics\r\n   */\r\n  private handleTiltingBarCollisions(): void {\r\n    if (!this.tiltingBar) return;\r\n\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue;\r\n\r\n      // Skip balls that are held (e.g., in saucers)\r\n      if (this.isBallHeld(obj.id)) continue;\r\n\r\n      const endpoints = this.tiltingBar.getEndpoints();\r\n      const closestPointOnCenterLine = this.getClosestPointOnLineSegment(\r\n        obj.position,\r\n        endpoints.start,\r\n        endpoints.end,\r\n      );\r\n      const distanceToCenterLine = Math.sqrt(\r\n        (obj.position.x - closestPointOnCenterLine.x) ** 2 +\r\n          (obj.position.y - closestPointOnCenterLine.y) ** 2,\r\n      );\r\n\r\n      // Account for bar thickness - collision happens when ball touches the bar surface\r\n      const barThickness = this.tiltingBar.thickness || 12;\r\n      const barSurfaceDistance = barThickness / 2;\r\n      const collisionDistance = obj.radius + barSurfaceDistance;\r\n\r\n      if (distanceToCenterLine < collisionDistance) {\r\n        // Calculate bar vectors\r\n        const barVec = {\r\n          x: endpoints.end.x - endpoints.start.x,\r\n          y: endpoints.end.y - endpoints.start.y,\r\n        };\r\n        const barLength = Math.sqrt(barVec.x * barVec.x + barVec.y * barVec.y);\r\n        const barTangent = { x: barVec.x / barLength, y: barVec.y / barLength }; // Along the bar\r\n        const barNormal = { x: -barVec.y / barLength, y: barVec.x / barLength }; // Perpendicular to bar\r\n\r\n        // Ensure normal points away from bar (upward)\r\n        if (barNormal.y > 0) {\r\n          barNormal.x = -barNormal.x;\r\n          barNormal.y = -barNormal.y;\r\n        }\r\n\r\n        // Calculate the actual collision point on the bar surface\r\n        const barSurfacePoint = {\r\n          x: closestPointOnCenterLine.x + barNormal.x * barSurfaceDistance,\r\n          y: closestPointOnCenterLine.y + barNormal.y * barSurfaceDistance,\r\n        };\r\n\r\n        // Position correction - place ball exactly at collision distance from bar surface\r\n        obj.position.x = barSurfacePoint.x + barNormal.x * obj.radius;\r\n        obj.position.y = barSurfacePoint.y + barNormal.y * obj.radius;\r\n\r\n        // Current velocity\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y,\r\n        };\r\n\r\n        const velocityAlongNormal =\r\n          velocity.x * barNormal.x + velocity.y * barNormal.y;\r\n        const velocityAlongTangent =\r\n          velocity.x * barTangent.x + velocity.y * barTangent.y;\r\n\r\n        // Check if ball is moving into the bar (collision) or resting on it\r\n        if (velocityAlongNormal < -0.5) {\r\n          // High-speed collision - reflect velocity\r\n          const restitution = obj.restitution * 0.8; // Reduced bounce on bar\r\n          const friction = this.tiltingBar.friction || 0.3;\r\n\r\n          const reflectedVelocity = {\r\n            x: velocity.x - 2 * velocityAlongNormal * barNormal.x,\r\n            y: velocity.y - 2 * velocityAlongNormal * barNormal.y,\r\n          };\r\n\r\n          // Apply restitution and friction\r\n          reflectedVelocity.x *= restitution * (1 - friction);\r\n          reflectedVelocity.y *= restitution;\r\n\r\n          // Update previous position to reflect new velocity\r\n          obj.previousPosition.x = obj.position.x - reflectedVelocity.x;\r\n          obj.previousPosition.y = obj.position.y - reflectedVelocity.y;\r\n\r\n          // Play bounce sound based on collision velocity (with cooldown)\r\n          const collisionVelocity = Math.sqrt(\r\n            velocity.x * velocity.x + velocity.y * velocity.y,\r\n          );\r\n          this.playAudioWithCooldown(collisionVelocity, 'bounce', obj.id);\r\n        } else {\r\n          // Ball is resting on or gently touching the bar - apply rolling physics\r\n          this.applyRollingPhysics(\r\n            obj,\r\n            barTangent,\r\n            barNormal,\r\n            velocityAlongTangent,\r\n            this.deltaTime,\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply realistic rolling physics when ball is on the tilted bar\r\n   */\r\n  private applyRollingPhysics(\r\n    obj: PhysicsObject,\r\n    barTangent: { x: number; y: number },\r\n    _barNormal: { x: number; y: number },\r\n    currentTangentVelocity: number,\r\n    dt: number,\r\n  ): void {\r\n    // Calculate the component of gravity along the bar slope\r\n    const gravityAlongSlope =\r\n      this.gravity.x * barTangent.x + this.gravity.y * barTangent.y;\r\n\r\n    // Rolling resistance and friction\r\n    const rollingFriction = this.tiltingBar?.friction || 0.05;\r\n    const rollingResistance = 0.01; // Small resistance to rolling (reduced for smoother motion)\r\n\r\n    // Calculate acceleration along the slope\r\n    let slopeAcceleration = gravityAlongSlope;\r\n\r\n    // Apply rolling resistance (opposes motion)\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const resistanceForce =\r\n        -Math.sign(currentTangentVelocity) *\r\n        rollingResistance *\r\n        Math.abs(this.gravity.y);\r\n      slopeAcceleration += resistanceForce;\r\n    }\r\n\r\n    // Apply friction if ball is moving along the slope\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const frictionForce =\r\n        -Math.sign(currentTangentVelocity) *\r\n        rollingFriction *\r\n        Math.abs(this.gravity.y);\r\n      slopeAcceleration += frictionForce;\r\n    }\r\n\r\n    // Calculate new velocity along the slope\r\n    const newTangentVelocity = currentTangentVelocity + slopeAcceleration * dt;\r\n\r\n    // Apply the new velocity (only along the tangent, no normal component)\r\n    const newVelocity = {\r\n      x: newTangentVelocity * barTangent.x,\r\n      y: newTangentVelocity * barTangent.y,\r\n    };\r\n\r\n    // Update previous position to reflect rolling motion\r\n    obj.previousPosition.x = obj.position.x - newVelocity.x;\r\n    obj.previousPosition.y = obj.position.y - newVelocity.y;\r\n\r\n    // Update velocity for backward compatibility\r\n    obj.velocity.x = newVelocity.x;\r\n    obj.velocity.y = newVelocity.y;\r\n\r\n    // Mark that this object is currently rolling on the bar (for debugging/gameplay)\r\n    obj.isRollingOnBar = true;\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently in contact with the tilting bar\r\n   */\r\n  public isBallOnBar(ballId: string): boolean {\r\n    const ball = this.objects.find(obj => obj.id === ballId);\r\n    if (!ball || !this.tiltingBar) return false;\r\n\r\n    const endpoints = this.tiltingBar.getEndpoints();\r\n    const closestPoint = this.getClosestPointOnLineSegment(\r\n      ball.position,\r\n      endpoints.start,\r\n      endpoints.end,\r\n    );\r\n    const distance = Math.sqrt(\r\n      (ball.position.x - closestPoint.x) ** 2 +\r\n        (ball.position.y - closestPoint.y) ** 2,\r\n    );\r\n\r\n    const barThickness = this.tiltingBar.thickness || 12;\r\n    const collisionDistance = ball.radius + barThickness / 2;\r\n\r\n    return distance <= collisionDistance + 2; // Small tolerance\r\n  }\r\n\r\n  /**\r\n   * Handle boundary collisions\r\n   */\r\n  private handleBoundaryCollisions(): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue;\r\n\r\n      // Skip balls that are held (e.g., in saucers)\r\n      if (this.isBallHeld(obj.id)) continue;\r\n\r\n      // Floor collision\r\n      if (obj.position.y + obj.radius > this.bounds.height) {\r\n        obj.position.y = this.bounds.height - obj.radius;\r\n\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y,\r\n        };\r\n\r\n        if (velocity.y > 0) {\r\n          obj.previousPosition.y =\r\n            obj.position.y + velocity.y * obj.restitution;\r\n          obj.previousPosition.x = obj.position.x - velocity.x * 0.8; // Floor friction\r\n\r\n          // Removed audio for floor collision - no sound on boundary hits\r\n        }\r\n      }\r\n\r\n      // Left wall collision\r\n      if (obj.position.x - obj.radius < 0) {\r\n        obj.position.x = obj.radius;\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y,\r\n        };\r\n        if (velocity.x < 0) {\r\n          obj.previousPosition.x =\r\n            obj.position.x + velocity.x * obj.restitution;\r\n\r\n          // Removed audio for wall collision - no sound on boundary hits\r\n        }\r\n      }\r\n\r\n      // Right wall collision\r\n      if (obj.position.x + obj.radius > this.bounds.width) {\r\n        obj.position.x = this.bounds.width - obj.radius;\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y,\r\n        };\r\n        if (velocity.x > 0) {\r\n          obj.previousPosition.x =\r\n            obj.position.x + velocity.x * obj.restitution;\r\n\r\n          // Removed audio for wall collision - no sound on boundary hits\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a ball should be held in place (e.g., in a saucer)\r\n   */\r\n  public isBallHeld(_ballId: string): boolean {\r\n    // This will be called from the Game class to check saucer state\r\n    return false; // Default implementation - Game class will override this\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently sinking into a saucer\r\n   */\r\n  public isBallSinking(_ballId: string): boolean {\r\n    // This will be called from the Game class to check sinking state\r\n    return false; // Default implementation - Game class will override this\r\n  }\r\n\r\n  /**\r\n   * Get the target position for a held ball (e.g., saucer center)\r\n   */\r\n  public getHeldBallTarget(_ballId: string): { x: number; y: number } | null {\r\n    // This will be called from the Game class to get saucer position\r\n    return null; // Default implementation - Game class will override this\r\n  }\r\n\r\n  /**\r\n   * Update backward compatibility properties\r\n   */\r\n  private updateBackwardCompatibility(): void {\r\n    for (const obj of this.objects) {\r\n      obj.x = obj.position.x;\r\n      obj.y = obj.position.y;\r\n      obj.vx = obj.velocity.x;\r\n      obj.vy = obj.velocity.y;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update spatial partitioning grid (optimized)\r\n   */\r\n  private updateSpatialGrid(): void {\r\n    // Skip spatial grid for small number of objects\r\n    if (this.objects.length <= 3) return;\r\n\r\n    this.spatialGrid.clear();\r\n\r\n    for (const obj of this.objects) {\r\n      const cells = this.getObjectCells(obj);\r\n      for (const cellKey of cells) {\r\n        if (!this.spatialGrid.has(cellKey)) {\r\n          this.spatialGrid.set(cellKey, { objects: [] });\r\n        }\r\n        const cell = this.spatialGrid.get(cellKey);\r\n        if (cell) {\r\n          cell.objects.push(obj);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get grid cells that an object occupies\r\n   */\r\n  private getObjectCells(obj: PhysicsObject): string[] {\r\n    const cells: string[] = [];\r\n    const radius = obj.radius;\r\n    const minX = Math.floor((obj.position.x - radius) / this.gridSize);\r\n    const maxX = Math.floor((obj.position.x + radius) / this.gridSize);\r\n    const minY = Math.floor((obj.position.y - radius) / this.gridSize);\r\n    const maxY = Math.floor((obj.position.y + radius) / this.gridSize);\r\n\r\n    for (let x = minX; x <= maxX; x++) {\r\n      for (let y = minY; y <= maxY; y++) {\r\n        cells.push(`${x},${y}`);\r\n      }\r\n    }\r\n    return cells;\r\n  }\r\n\r\n  /**\r\n   * Get objects in nearby cells for collision detection\r\n   */\r\n  // private getNearbyObjects(obj: PhysicsObject): PhysicsObject[] {\r\n  //   const nearby: PhysicsObject[] = [];\r\n  //   const cells = this.getObjectCells(obj);\r\n\r\n  //   for (const cellKey of cells) {\r\n  //     const cell = this.spatialGrid.get(cellKey);\r\n  //     if (cell) {\r\n  //       for (const otherObj of cell.objects) {\r\n  //         if (otherObj.id !== obj.id && !nearby.includes(otherObj)) {\r\n  //           nearby.push(otherObj);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return nearby;\r\n  // }\r\n\r\n  /**\r\n   * Get closest point on line segment to a point\r\n   */\r\n  private getClosestPointOnLineSegment(\r\n    point: { x: number; y: number },\r\n    lineStart: { x: number; y: number },\r\n    lineEnd: { x: number; y: number },\r\n  ): { x: number; y: number } {\r\n    const dx = lineEnd.x - lineStart.x;\r\n    const dy = lineEnd.y - lineStart.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (length === 0) return lineStart;\r\n\r\n    const t = Math.max(\r\n      0,\r\n      Math.min(\r\n        1,\r\n        ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) /\r\n          (length * length),\r\n      ),\r\n    );\r\n\r\n    return {\r\n      x: lineStart.x + t * dx,\r\n      y: lineStart.y + t * dy,\r\n    };\r\n  }\r\n\r\n  // Public API methods\r\n  public getObjects(): PhysicsObject[] {\r\n    return this.objects;\r\n  }\r\n\r\n  public setGravity(x: number, y: number): void {\r\n    this.gravity.x = x;\r\n    this.gravity.y = y;\r\n    Debug.log(`Gravity set to: (${x}, ${y})`);\r\n  }\r\n\r\n  public setAirResistance(resistance: number): void {\r\n    this.airResistance = Math.max(0, Math.min(1, resistance));\r\n    Debug.log(`Air resistance set to: ${this.airResistance}`);\r\n  }\r\n\r\n  public setBounds(width: number, height: number): void {\r\n    this.bounds.width = width;\r\n    this.bounds.height = height;\r\n    Debug.log(`Physics bounds set to: ${width}x${height}`);\r\n  }\r\n\r\n  public setDebug(enabled: boolean): void {\r\n    this.debug = enabled;\r\n  }\r\n\r\n  public getDebug(): boolean {\r\n    return this.debug;\r\n  }\r\n\r\n  public getCollisionManifolds(): CollisionManifold[] {\r\n    return this.collisionManifolds;\r\n  }\r\n\r\n  public getConstraints(): Constraint[] {\r\n    return this.constraints;\r\n  }\r\n\r\n  // Legacy compatibility methods\r\n  public getFriction(): number {\r\n    return 0.98; // Return a default value for compatibility\r\n  }\r\n\r\n  public getBounceEnergy(): number {\r\n    return 0.7; // Return a default value for compatibility\r\n  }\r\n\r\n  public getGravity(): number {\r\n    return this.gravity.y; // Return Y gravity for compatibility\r\n  }\r\n\r\n  public setFriction(_friction: number): void {\r\n    Debug.log(\r\n      'Legacy friction setting ignored - use per-object friction instead',\r\n    );\r\n  }\r\n\r\n  public setBounceEnergy(_energy: number): void {\r\n    Debug.log(\r\n      'Legacy bounce energy setting ignored - use per-object restitution instead',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set time scale for physics simulation (for slow motion effects)\r\n   */\r\n  public setTimeScale(scale: number): void {\r\n    this.timeScale = Math.max(0.1, Math.min(scale, 2.0)); // Clamp between 0.1 and 2.0\r\n  }\r\n}\r\n","import { Vector2 } from '../utils/MathUtils';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface TiltingBarConfig {\r\n  position: Vector2;\r\n  width: number;\r\n  height: number;\r\n  maxRotation: number; // Maximum rotation angle in radians\r\n  rotationSpeed: number; // How fast the bar rotates\r\n  friction: number; // Surface friction for ball interactions\r\n}\r\n\r\nexport class TiltingBar {\r\n  public position: Vector2;\r\n  public rotation: number = 0;\r\n  public targetRotation: number = 0;\r\n  public leftSideHeight: number = 590; // Absolute Y position for left side (start at bottom)\r\n  public rightSideHeight: number = 590; // Absolute Y position for right side (start at bottom)\r\n  public minSideHeight: number = 50; // Minimum height (top of screen area)\r\n  public maxSideHeight: number = 590; // Maximum height (bottom of screen)\r\n  public sideSpeed: number = 100; // Speed of side height changes\r\n  public width: number;\r\n  public height: number;\r\n  public maxRotation: number;\r\n  public rotationSpeed: number;\r\n  public friction: number;\r\n  private speedMultiplier: number = 1.0; // For power-up effects\r\n  private saucerHeightConstraint: number | null = null; // Constraint when ball is in saucer\r\n\r\n  // Visual properties\r\n  public color: string = '#00f0ff'; // Electric Blue\r\n  public glowColor: string = '#b600f9'; // Neon Purple\r\n  public thickness: number = 12; // Increased thickness for better collision\r\n\r\n  constructor(config: TiltingBarConfig) {\r\n    this.position = { ...config.position };\r\n    this.width = config.width;\r\n    this.height = config.height;\r\n    this.maxRotation = config.maxRotation;\r\n    this.rotationSpeed = config.rotationSpeed;\r\n    this.friction = config.friction;\r\n  }\r\n\r\n  /**\r\n   * Set the target rotation angle (will be clamped to maxRotation)\r\n   */\r\n  public setTargetRotation(angle: number): void {\r\n    this.targetRotation = Math.max(\r\n      -this.maxRotation,\r\n      Math.min(this.maxRotation, angle),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Move left side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveLeftSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.leftSideHeight -= input * this.sideSpeed * this.speedMultiplier * (1 / 60); // Move up (negative) or down (positive)\r\n      \r\n      // Apply saucer height constraint if active\r\n      const effectiveMinHeight = this.saucerHeightConstraint !== null \r\n        ? Math.max(this.minSideHeight, this.saucerHeightConstraint)\r\n        : this.minSideHeight;\r\n      \r\n      this.leftSideHeight = Math.max(\r\n        effectiveMinHeight,\r\n        Math.min(this.maxSideHeight, this.leftSideHeight),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move right side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveRightSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.rightSideHeight -= input * this.sideSpeed * this.speedMultiplier * (1 / 60); // Move up (negative) or down (positive)\r\n      \r\n      // Apply saucer height constraint if active\r\n      const effectiveMinHeight = this.saucerHeightConstraint !== null \r\n        ? Math.max(this.minSideHeight, this.saucerHeightConstraint)\r\n        : this.minSideHeight;\r\n      \r\n      this.rightSideHeight = Math.max(\r\n        effectiveMinHeight,\r\n        Math.min(this.maxSideHeight, this.rightSideHeight),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current tilt as a percentage (-1 to 1)\r\n   */\r\n  public getTiltPercentage(): number {\r\n    return this.rotation / this.maxRotation;\r\n  }\r\n\r\n  /**\r\n   * Update the bar's rotation based on current side heights\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    // Calculate rotation based on height difference\r\n    const heightDifference = this.rightSideHeight - this.leftSideHeight;\r\n    const maxHeightRange = this.maxSideHeight - this.minSideHeight;\r\n    this.rotation = (heightDifference / maxHeightRange) * this.maxRotation;\r\n\r\n    // Also update targetRotation for compatibility\r\n    this.targetRotation = this.rotation;\r\n  }\r\n\r\n  /**\r\n   * Get the endpoints of the bar for collision detection\r\n   */\r\n  public getEndpoints(): { start: Vector2; end: Vector2 } {\r\n    const halfWidth = this.width / 2;\r\n\r\n    return {\r\n      start: {\r\n        x: this.position.x - halfWidth,\r\n        y: this.leftSideHeight,\r\n      },\r\n      end: {\r\n        x: this.position.x + halfWidth,\r\n        y: this.rightSideHeight,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the normal vector of the bar surface\r\n   */\r\n  public getNormal(): Vector2 {\r\n    const endpoints = this.getEndpoints();\r\n    const dx = endpoints.end.x - endpoints.start.x;\r\n    const dy = endpoints.end.y - endpoints.start.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (length === 0) return { x: 0, y: -1 }; // Default upward normal\r\n\r\n    // Normal perpendicular to the bar, pointing upward\r\n    return {\r\n      x: -dy / length,\r\n      y: dx / length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if a point is near the bar (for collision detection)\r\n   */\r\n  public isPointNearBar(point: Vector2, radius: number): boolean {\r\n    const endpoints = this.getEndpoints();\r\n    const distance = this.distanceToLineSegment(\r\n      point,\r\n      endpoints.start,\r\n      endpoints.end,\r\n    );\r\n    const collisionThreshold = radius + this.thickness / 2 + 2; // Add small buffer for better detection\r\n    return distance <= collisionThreshold;\r\n  }\r\n\r\n  /**\r\n   * Calculate distance from point to line segment\r\n   */\r\n  private distanceToLineSegment(\r\n    point: Vector2,\r\n    start: Vector2,\r\n    end: Vector2,\r\n  ): number {\r\n    const dx = end.x - start.x;\r\n    const dy = end.y - start.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (length === 0)\r\n      return Math.sqrt((point.x - start.x) ** 2 + (point.y - start.y) ** 2);\r\n\r\n    const t = Math.max(\r\n      0,\r\n      Math.min(\r\n        1,\r\n        ((point.x - start.x) * dx + (point.y - start.y) * dy) /\r\n          (length * length),\r\n      ),\r\n    );\r\n    const projection = {\r\n      x: start.x + t * dx,\r\n      y: start.y + t * dy,\r\n    };\r\n\r\n    return Math.sqrt(\r\n      (point.x - projection.x) ** 2 + (point.y - projection.y) ** 2,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get collision response for a ball hitting the bar\r\n   */\r\n  public getCollisionResponse(\r\n    ballPosition: Vector2,\r\n    ballVelocity: Vector2,\r\n    ballRadius: number,\r\n  ): { velocity: Vector2; position: Vector2 } {\r\n    const endpoints = this.getEndpoints();\r\n    const normal = this.getNormal();\r\n\r\n    // Calculate penetration depth\r\n    const distanceToBar = this.distanceToLineSegment(\r\n      ballPosition,\r\n      endpoints.start,\r\n      endpoints.end,\r\n    );\r\n    const penetrationDepth = ballRadius + this.thickness / 2 - distanceToBar;\r\n\r\n    // Push ball out of the bar\r\n    const correctedPosition = {\r\n      x: ballPosition.x + normal.x * penetrationDepth,\r\n      y: ballPosition.y + normal.y * penetrationDepth,\r\n    };\r\n\r\n    // Reflect velocity along the normal (only if moving into the bar)\r\n    const dotProduct = ballVelocity.x * normal.x + ballVelocity.y * normal.y;\r\n\r\n    let newVelocity = ballVelocity;\r\n    if (dotProduct < 0) {\r\n      // Ball is moving into the bar\r\n      const reflection = {\r\n        x: ballVelocity.x - 2 * dotProduct * normal.x,\r\n        y: ballVelocity.y - 2 * dotProduct * normal.y,\r\n      };\r\n\r\n      // Apply friction and bounce energy\r\n      const frictionFactor = 1 - this.friction;\r\n      const bounceEnergy = 0.8; // Slight energy loss on bounce\r\n      newVelocity = {\r\n        x: reflection.x * frictionFactor * bounceEnergy,\r\n        y: reflection.y * bounceEnergy,\r\n      };\r\n    }\r\n\r\n    return {\r\n      velocity: newVelocity,\r\n      position: correctedPosition,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set speed multiplier for power-up effects\r\n   */\r\n  public setSpeedMultiplier(multiplier: number): void {\r\n    this.speedMultiplier = multiplier;\r\n  }\r\n\r\n  /**\r\n   * Get current speed multiplier\r\n   */\r\n  public getSpeedMultiplier(): number {\r\n    return this.speedMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Set height constraint when ball is in saucer (prevents bar from moving above ball)\r\n   */\r\n  public setSaucerHeightConstraint(ballY: number): void {\r\n    this.saucerHeightConstraint = ballY;\r\n    \r\n    // If current bar position is above the constraint, adjust it\r\n    if (this.leftSideHeight < ballY) {\r\n      this.leftSideHeight = ballY;\r\n    }\r\n    if (this.rightSideHeight < ballY) {\r\n      this.rightSideHeight = ballY;\r\n    }\r\n    \r\n    logger.debug(`🛸 Set saucer height constraint: ${ballY}`, null, 'TiltingBar');\r\n  }\r\n\r\n  /**\r\n   * Clear height constraint when ball leaves saucer\r\n   */\r\n  public clearSaucerHeightConstraint(): void {\r\n    this.saucerHeightConstraint = null;\r\n    logger.debug('🛸 Cleared saucer height constraint', null, 'TiltingBar');\r\n  }\r\n\r\n  /**\r\n   * Check if saucer height constraint is active\r\n   */\r\n  public hasSaucerHeightConstraint(): boolean {\r\n    return this.saucerHeightConstraint !== null;\r\n  }\r\n\r\n  /**\r\n   * Reset the tilting bar to its starting position (both sides at bottom)\r\n   */\r\n  public reset(): void {\r\n    this.leftSideHeight = this.maxSideHeight; // Reset to bottom position (590)\r\n    this.rightSideHeight = this.maxSideHeight; // Reset to bottom position (590)\r\n    this.rotation = 0; // Reset rotation to horizontal\r\n    this.targetRotation = 0; // Reset target rotation\r\n    this.speedMultiplier = 1.0; // Reset speed multiplier\r\n    this.saucerHeightConstraint = null; // Clear saucer constraint\r\n    logger.info('🔄 Tilting bar reset to starting position', null, 'TiltingBar');\r\n  }\r\n}\r\n","// Circuit Breaker - Scaling Manager\r\n// Handles dynamic canvas scaling while maintaining integer font scaling\r\n\r\nimport { logger } from './Logger';\r\n\r\nexport interface ScalingConfig {\r\n  baseWidth: number;\r\n  baseHeight: number;\r\n  minScale: number;\r\n  maxScale: number;\r\n  forceIntegerScaling: boolean;\r\n}\r\n\r\nexport interface ScalingResult {\r\n  scale: number;\r\n  displayWidth: number;\r\n  displayHeight: number;\r\n  canvasWidth: number;\r\n  canvasHeight: number;\r\n  offsetX: number;\r\n  offsetY: number;\r\n}\r\n\r\nexport class ScalingManager {\r\n  private static instance: ScalingManager;\r\n  private config: ScalingConfig;\r\n  private currentScale: number = 1;\r\n  private resizeCallbacks: Array<(result: ScalingResult) => void> = [];\r\n\r\n  private constructor(config: ScalingConfig) {\r\n    this.config = config;\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  public static getInstance(config?: ScalingConfig): ScalingManager {\r\n    if (!ScalingManager.instance) {\r\n      if (!config) {\r\n        throw new Error('ScalingManager must be initialized with config first');\r\n      }\r\n      ScalingManager.instance = new ScalingManager(config);\r\n    }\r\n    return ScalingManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal scaling based on window size\r\n   */\r\n  public calculateScaling(): ScalingResult {\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n    \r\n    // Calculate scale factors for both dimensions\r\n    const scaleX = windowWidth / this.config.baseWidth;\r\n    const scaleY = windowHeight / this.config.baseHeight;\r\n    \r\n    // Use the smaller scale to ensure the game fits in the window\r\n    let scale = Math.min(scaleX, scaleY);\r\n    \r\n    // Apply min/max constraints\r\n    scale = Math.max(this.config.minScale, Math.min(this.config.maxScale, scale));\r\n    \r\n    // Force integer scaling if enabled (important for pixel-perfect fonts)\r\n    if (this.config.forceIntegerScaling) {\r\n      scale = Math.floor(scale);\r\n      // Ensure we have at least 1x scale\r\n      scale = Math.max(1, scale);\r\n    }\r\n    \r\n    // Calculate final dimensions\r\n    const displayWidth = this.config.baseWidth * scale;\r\n    const displayHeight = this.config.baseHeight * scale;\r\n    \r\n    // Calculate centering offsets\r\n    const offsetX = (windowWidth - displayWidth) / 2;\r\n    const offsetY = (windowHeight - displayHeight) / 2;\r\n    \r\n    // Canvas dimensions account for device pixel ratio\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const canvasWidth = displayWidth * dpr;\r\n    const canvasHeight = displayHeight * dpr;\r\n\r\n    const result: ScalingResult = {\r\n      scale,\r\n      displayWidth,\r\n      displayHeight,\r\n      canvasWidth,\r\n      canvasHeight,\r\n      offsetX,\r\n      offsetY,\r\n    };\r\n\r\n    this.currentScale = scale;\r\n    \r\n    logger.debug(`📐 Scaling calculated: ${scale}x (${displayWidth}x${displayHeight})`, {\r\n      window: `${windowWidth}x${windowHeight}`,\r\n      scaleFactors: `X:${scaleX.toFixed(2)}, Y:${scaleY.toFixed(2)}`,\r\n      forceInteger: this.config.forceIntegerScaling,\r\n      finalScale: scale,\r\n    }, 'ScalingManager');\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Apply scaling to a canvas element\r\n   */\r\n  public applyScaling(canvas: HTMLCanvasElement, container?: HTMLElement): ScalingResult {\r\n    const scaling = this.calculateScaling();\r\n    const dpr = window.devicePixelRatio || 1;\r\n\r\n    // Set canvas internal dimensions (high-DPI aware)\r\n    canvas.width = scaling.canvasWidth;\r\n    canvas.height = scaling.canvasHeight;\r\n\r\n    // Set canvas display dimensions\r\n    canvas.style.width = `${scaling.displayWidth}px`;\r\n    canvas.style.height = `${scaling.displayHeight}px`;\r\n\r\n    // Center the canvas in its container\r\n    if (container) {\r\n      container.style.position = 'relative';\r\n      canvas.style.position = 'absolute';\r\n      canvas.style.left = `${scaling.offsetX}px`;\r\n      canvas.style.top = `${scaling.offsetY}px`;\r\n    }\r\n\r\n    // Configure canvas context for high-DPI and scaling\r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {\r\n      // Reset transform\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      \r\n      // Apply device pixel ratio scaling\r\n      ctx.scale(dpr, dpr);\r\n      \r\n      // Apply game scaling\r\n      ctx.scale(scaling.scale, scaling.scale);\r\n\r\n      // Enable crisp pixel rendering\r\n      ctx.imageSmoothingEnabled = false;\r\n      \r\n      logger.debug(`🎨 Canvas scaled: ${scaling.canvasWidth}x${scaling.canvasHeight} -> ${scaling.displayWidth}x${scaling.displayHeight}`, null, 'ScalingManager');\r\n    }\r\n\r\n    return scaling;\r\n  }\r\n\r\n  /**\r\n   * Register a callback for resize events\r\n   */\r\n  public onResize(callback: (result: ScalingResult) => void): void {\r\n    this.resizeCallbacks.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove a resize callback\r\n   */\r\n  public offResize(callback: (result: ScalingResult) => void): void {\r\n    const index = this.resizeCallbacks.indexOf(callback);\r\n    if (index > -1) {\r\n      this.resizeCallbacks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current scale factor\r\n   */\r\n  public getCurrentScale(): number {\r\n    return this.currentScale;\r\n  }\r\n\r\n  /**\r\n   * Convert screen coordinates to game coordinates\r\n   */\r\n  public screenToGame(screenX: number, screenY: number): { x: number; y: number } {\r\n    const scaling = this.calculateScaling();\r\n    \r\n    // Adjust for container offset\r\n    const adjustedX = screenX - scaling.offsetX;\r\n    const adjustedY = screenY - scaling.offsetY;\r\n    \r\n    // Convert to game coordinates\r\n    const gameX = adjustedX / scaling.scale;\r\n    const gameY = adjustedY / scaling.scale;\r\n    \r\n    return { x: gameX, y: gameY };\r\n  }\r\n\r\n  /**\r\n   * Convert game coordinates to screen coordinates\r\n   */\r\n  public gameToScreen(gameX: number, gameY: number): { x: number; y: number } {\r\n    const scaling = this.calculateScaling();\r\n    \r\n    // Convert to screen coordinates\r\n    const screenX = gameX * scaling.scale + scaling.offsetX;\r\n    const screenY = gameY * scaling.scale + scaling.offsetY;\r\n    \r\n    return { x: screenX, y: screenY };\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners for window resize\r\n   */\r\n  private setupEventListeners(): void {\r\n    let resizeTimeout: NodeJS.Timeout;\r\n    \r\n    window.addEventListener('resize', () => {\r\n      // Debounce resize events\r\n      clearTimeout(resizeTimeout);\r\n      resizeTimeout = setTimeout(() => {\r\n        const scaling = this.calculateScaling();\r\n        \r\n        // Notify all callbacks\r\n        this.resizeCallbacks.forEach(callback => {\r\n          try {\r\n            callback(scaling);\r\n          } catch (error) {\r\n            logger.error('❌ Error in resize callback:', error, 'ScalingManager');\r\n          }\r\n        });\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  public updateConfig(config: Partial<ScalingConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.debug('🔧 ScalingManager config updated', null, 'ScalingManager');\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   */\r\n  public getConfig(): ScalingConfig {\r\n    return { ...this.config };\r\n  }\r\n} ","import { logger } from '../utils/Logger';\r\nimport { ScalingManager } from '../utils/ScalingManager';\r\nimport { TiltingBar } from '../core/TiltingBar';\r\n\r\nexport interface InputState {\r\n  keys: { [key: string]: boolean };\r\n  mouse: {\r\n    x: number;\r\n    y: number;\r\n    isDown: boolean;\r\n    button: number;\r\n  };\r\n  tiltInput: number; // -1 to 1 for bar tilt\r\n  touches: Map<number, { x: number; y: number }>; // Track multiple touches by identifier\r\n}\r\n\r\nexport class InputManager {\r\n  private inputState: InputState = {\r\n    keys: {},\r\n    mouse: {\r\n      x: 0,\r\n      y: 0,\r\n      isDown: false,\r\n      button: 0,\r\n    },\r\n    tiltInput: 0,\r\n    touches: new Map(), // Initialize touch tracking\r\n  };\r\n\r\n  private previousKeys: { [key: string]: boolean } = {};\r\n  private canvas: HTMLCanvasElement | null = null;\r\n  private tiltingBar: TiltingBar | null = null;\r\n  private keyBindings = {\r\n    leftSideUp: ['KeyA'],\r\n    leftSideDown: ['KeyZ'],\r\n    rightSideUp: ['ArrowUp', 'KeyL'],\r\n    rightSideDown: ['ArrowDown', 'Comma'],\r\n    start: ['Space'],\r\n    reset: ['KeyR'],\r\n    pause: ['KeyP', 'Escape'],\r\n  };\r\n\r\n  constructor() {\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Initialize input manager with canvas reference and tilting bar\r\n   */\r\n  public init(canvas: HTMLCanvasElement, tiltingBar: TiltingBar): void {\r\n    this.canvas = canvas;\r\n    this.tiltingBar = tiltingBar;\r\n    this.setupCanvasListeners();\r\n  }\r\n\r\n  /**\r\n   * Get current input state\r\n   */\r\n  public getInputState(): InputState {\r\n    return { ...this.inputState };\r\n  }\r\n\r\n  /**\r\n   * Get tilt input value (-1 to 1)\r\n   */\r\n  public getTiltInput(): number {\r\n    return this.inputState.tiltInput;\r\n  }\r\n\r\n  /**\r\n   * Get left side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getLeftSideInput(): number {\r\n    let leftSideInput = 0;\r\n    \r\n    // Check discrete keyboard inputs first\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1;\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1;\r\n    }\r\n    \r\n    // If no keyboard input, use touch control logic (supports multi-touch)\r\n    if (this.canvas && leftSideInput === 0 && this.tiltingBar) {\r\n      const touchInput = this.calculateTouchSideInput('left');\r\n      leftSideInput = touchInput;\r\n    }\r\n    \r\n    return leftSideInput;\r\n  }\r\n\r\n  /**\r\n   * Get right side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getRightSideInput(): number {\r\n    let rightSideInput = 0;\r\n    \r\n    // Check discrete keyboard inputs first\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1;\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1;\r\n    }\r\n    \r\n    // If no keyboard input, use touch control logic (supports multi-touch)\r\n    if (this.canvas && rightSideInput === 0 && this.tiltingBar) {\r\n      const touchInput = this.calculateTouchSideInput('right');\r\n      rightSideInput = touchInput;\r\n    }\r\n    \r\n    return rightSideInput;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action is pressed\r\n   */\r\n  public isActionPressed(action: keyof typeof this.keyBindings): boolean {\r\n    return this.keyBindings[action].some(key => this.inputState.keys[key]);\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action was just pressed (not held)\r\n   */\r\n  public isActionJustPressed(action: keyof typeof this.keyBindings): boolean {\r\n    const isPressed = this.keyBindings[action].some(\r\n      key => this.inputState.keys[key] && !this.previousKeys[key],\r\n    );\r\n\r\n    // Debug logging for start key\r\n    if (action === 'start' && isPressed) {\r\n      logger.debug('🔑 Start key (SPACE) just pressed!', null, 'InputManager');\r\n    }\r\n\r\n    return isPressed;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific key was just pressed (not held) by key code\r\n   */\r\n  public isKeyJustPressed(keyCode: string): boolean {\r\n    return this.inputState.keys[keyCode] && !this.previousKeys[keyCode];\r\n  }\r\n\r\n  /**\r\n   * Calculate touch input for left or right side based on touch position relative to bar\r\n   * Now supports multi-touch - checks all active touches for the specified side\r\n   */\r\n  private calculateTouchSideInput(side: 'left' | 'right'): number {\r\n    if (!this.canvas || !this.tiltingBar) return 0;\r\n\r\n    let strongestInput = 0;\r\n\r\n    // Check all active touches (multi-touch support)\r\n    for (const [_touchId, touchPos] of this.inputState.touches) {\r\n      try {\r\n        // Get touch position in game coordinates\r\n        const scalingManager = ScalingManager.getInstance();\r\n        const gamePos = scalingManager.screenToGame(touchPos.x, touchPos.y);\r\n        \r\n        // Get screen/game dimensions\r\n        const gameWidth = 360; // Game's base width\r\n        const centerX = gameWidth / 2;\r\n        \r\n        // Determine if touch is on the correct side of screen\r\n        const touchIsOnLeftSide = gamePos.x < centerX;\r\n        const touchIsOnRightSide = gamePos.x >= centerX;\r\n        \r\n        // Only process touch if it's on the correct side\r\n        if ((side === 'left' && !touchIsOnLeftSide) || (side === 'right' && !touchIsOnRightSide)) {\r\n          continue;\r\n        }\r\n        \r\n        // Get bar endpoints to find the Y position of the requested side\r\n        const barEndpoints = this.tiltingBar.getEndpoints();\r\n        const barYPosition = side === 'left' ? barEndpoints.start.y : barEndpoints.end.y;\r\n        \r\n        // Calculate difference between touch Y and bar Y\r\n        const touchYDiff = gamePos.y - barYPosition;\r\n        \r\n        // Convert Y difference to input value\r\n        // Negative Y diff (touch above bar) = positive input (move up)\r\n        // Positive Y diff (touch below bar) = negative input (move down)\r\n        const maxInputDistance = 100; // Maximum distance for full input\r\n        let inputValue = -touchYDiff / maxInputDistance; // Negative to flip direction\r\n        \r\n        // Clamp to [-1, 1] range\r\n        inputValue = Math.max(-1, Math.min(1, inputValue));\r\n        \r\n        // Apply dead zone to prevent jitter when touching very close to bar\r\n        const deadZone = 0.1;\r\n        if (Math.abs(inputValue) < deadZone) {\r\n          inputValue = 0;\r\n        }\r\n        \r\n        // Use the strongest input from all touches on this side\r\n        if (Math.abs(inputValue) > Math.abs(strongestInput)) {\r\n          strongestInput = inputValue;\r\n        }\r\n        \r\n      } catch (error) {\r\n        // Fallback method if ScalingManager fails\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const canvasX = touchPos.x - rect.left;\r\n        const canvasY = touchPos.y - rect.top;\r\n        \r\n        // Simple approximation using canvas coordinates\r\n        const centerX = rect.width / 2;\r\n        const touchIsOnLeftSide = canvasX < centerX;\r\n        const touchIsOnRightSide = canvasX >= centerX;\r\n        \r\n        if ((side === 'left' && !touchIsOnLeftSide) || (side === 'right' && !touchIsOnRightSide)) {\r\n          continue;\r\n        }\r\n        \r\n        // Estimate bar position (roughly at 90% down from top)\r\n        const estimatedBarY = rect.height * 0.9;\r\n        const touchYDiff = canvasY - estimatedBarY;\r\n        const maxInputDistance = rect.height * 0.2; // 20% of canvas height\r\n        \r\n        let inputValue = -touchYDiff / maxInputDistance;\r\n        inputValue = Math.max(-1, Math.min(1, inputValue));\r\n        \r\n        const deadZone = 0.1;\r\n        if (Math.abs(inputValue) < deadZone) {\r\n          inputValue = 0;\r\n        }\r\n        \r\n        // Use the strongest input from all touches on this side\r\n        if (Math.abs(inputValue) > Math.abs(strongestInput)) {\r\n          strongestInput = inputValue;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // If no multi-touch input found, fallback to mouse/single touch\r\n    if (strongestInput === 0 && this.inputState.mouse.isDown) {\r\n      return this.calculateSingleTouchSideInput(side);\r\n    }\r\n\r\n    return strongestInput;\r\n  }\r\n\r\n  /**\r\n   * Calculate touch input for single touch (fallback method)\r\n   */\r\n  private calculateSingleTouchSideInput(side: 'left' | 'right'): number {\r\n    if (!this.canvas || !this.tiltingBar) return 0;\r\n\r\n    try {\r\n      // Get touch position in game coordinates\r\n      const scalingManager = ScalingManager.getInstance();\r\n      const gamePos = scalingManager.screenToGame(this.inputState.mouse.x, this.inputState.mouse.y);\r\n      \r\n      // Get screen/game dimensions\r\n      const gameWidth = 360; // Game's base width\r\n      const centerX = gameWidth / 2;\r\n      \r\n      // Determine if touch is on the correct side of screen\r\n      const touchIsOnLeftSide = gamePos.x < centerX;\r\n      const touchIsOnRightSide = gamePos.x >= centerX;\r\n      \r\n      // Only process touch if it's on the correct side\r\n      if ((side === 'left' && !touchIsOnLeftSide) || (side === 'right' && !touchIsOnRightSide)) {\r\n        return 0;\r\n      }\r\n      \r\n      // Get bar endpoints to find the Y position of the requested side\r\n      const barEndpoints = this.tiltingBar.getEndpoints();\r\n      const barYPosition = side === 'left' ? barEndpoints.start.y : barEndpoints.end.y;\r\n      \r\n      // Calculate difference between touch Y and bar Y\r\n      const touchYDiff = gamePos.y - barYPosition;\r\n      \r\n      // Convert Y difference to input value\r\n      const maxInputDistance = 100; // Maximum distance for full input\r\n      let inputValue = -touchYDiff / maxInputDistance; // Negative to flip direction\r\n      \r\n      // Clamp to [-1, 1] range\r\n      inputValue = Math.max(-1, Math.min(1, inputValue));\r\n      \r\n      // Apply dead zone\r\n      const deadZone = 0.1;\r\n      if (Math.abs(inputValue) < deadZone) {\r\n        inputValue = 0;\r\n      }\r\n      \r\n      return inputValue;\r\n      \r\n    } catch (error) {\r\n      // Fallback method if ScalingManager fails\r\n      const rect = this.canvas.getBoundingClientRect();\r\n      const canvasX = this.inputState.mouse.x - rect.left;\r\n      const canvasY = this.inputState.mouse.y - rect.top;\r\n      \r\n      // Simple approximation using canvas coordinates\r\n      const centerX = rect.width / 2;\r\n      const touchIsOnLeftSide = canvasX < centerX;\r\n      const touchIsOnRightSide = canvasX >= centerX;\r\n      \r\n      if ((side === 'left' && !touchIsOnLeftSide) || (side === 'right' && !touchIsOnRightSide)) {\r\n        return 0;\r\n      }\r\n      \r\n      // Estimate bar position (roughly at 90% down from top)\r\n      const estimatedBarY = rect.height * 0.9;\r\n      const touchYDiff = canvasY - estimatedBarY;\r\n      const maxInputDistance = rect.height * 0.2; // 20% of canvas height\r\n      \r\n      let inputValue = -touchYDiff / maxInputDistance;\r\n      inputValue = Math.max(-1, Math.min(1, inputValue));\r\n      \r\n      const deadZone = 0.1;\r\n      if (Math.abs(inputValue) < deadZone) {\r\n        inputValue = 0;\r\n      }\r\n      \r\n      return inputValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all keys that were just pressed this frame\r\n   */\r\n  public getJustPressedKeys(): string[] {\r\n    const justPressed: string[] = [];\r\n    for (const key in this.inputState.keys) {\r\n      if (this.inputState.keys[key] && !this.previousKeys[key]) {\r\n        justPressed.push(key);\r\n      }\r\n    }\r\n    return justPressed;\r\n  }\r\n\r\n  /**\r\n   * Check if mouse was just clicked (not held)\r\n   */\r\n  public isMouseJustPressed(): boolean {\r\n    return this.inputState.mouse.isDown && !this.previousMouseState;\r\n  }\r\n\r\n  /**\r\n   * Check if mouse was just released\r\n   */\r\n  public isMouseJustReleased(): boolean {\r\n    return !this.inputState.mouse.isDown && this.previousMouseState;\r\n  }\r\n\r\n  /**\r\n   * Get current mouse position in game coordinates\r\n   */\r\n  public getMousePosition(): { x: number; y: number } | null {\r\n    if (!this.canvas) return null;\r\n    \r\n    try {\r\n      const scalingManager = ScalingManager.getInstance();\r\n      return scalingManager.screenToGame(this.inputState.mouse.x, this.inputState.mouse.y);\r\n    } catch (error) {\r\n      // Fallback to old method if ScalingManager not initialized\r\n      const rect = this.canvas.getBoundingClientRect();\r\n      return {\r\n        x: this.inputState.mouse.x - rect.left,\r\n        y: this.inputState.mouse.y - rect.top,\r\n      };\r\n    }\r\n  }\r\n\r\n  private previousMouseState: boolean = false;\r\n\r\n  /**\r\n   * Update input state (called each frame)\r\n   */\r\n  public update(): void {\r\n    // Calculate tilt input based on independent left/right side controls\r\n    let leftSideInput = 0;\r\n    let rightSideInput = 0;\r\n\r\n    // Left side controls (A raises, Z lowers)\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1;\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1;\r\n    }\r\n\r\n    // Right side controls (Up raises, Down lowers)\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1;\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1;\r\n    }\r\n\r\n    // Calculate overall tilt based on difference between sides\r\n    // Positive tilt = right side higher than left side\r\n    const tiltInput = (rightSideInput - leftSideInput) * 0.5;\r\n\r\n    // Keep the old tilt calculation for backwards compatibility (if needed)\r\n    // New touch system uses position-based controls instead\r\n    this.inputState.tiltInput = Math.max(-1, Math.min(1, tiltInput));\r\n  }\r\n\r\n  /**\r\n   * Call this at the end of each frame to update previous key state\r\n   */\r\n  public endFrame(): void {\r\n    // Store previous key state for just-pressed detection\r\n    this.previousKeys = { ...this.inputState.keys };\r\n    // Store previous mouse state for just-pressed detection\r\n    this.previousMouseState = this.inputState.mouse.isDown;\r\n  }\r\n\r\n  /**\r\n   * Setup global event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Keyboard events\r\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n\r\n    // Prevent default behavior for game keys\r\n    document.addEventListener('keydown', e => {\r\n      const allKeys = Object.values(this.keyBindings).flat();\r\n      if (allKeys.includes(e.code)) {\r\n        e.preventDefault();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup canvas-specific event listeners\r\n   */\r\n  private setupCanvasListeners(): void {\r\n    if (!this.canvas) return;\r\n\r\n    // Mouse events\r\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n    this.canvas.addEventListener(\r\n      'mouseleave',\r\n      this.handleMouseLeave.bind(this),\r\n    );\r\n\r\n    // Touch events for mobile support with passive options for better performance\r\n    this.canvas.addEventListener(\r\n      'touchstart',\r\n      this.handleTouchStart.bind(this),\r\n      { passive: false }, // Need to prevent default for touch control\r\n    );\r\n    this.canvas.addEventListener(\r\n      'touchend', \r\n      this.handleTouchEnd.bind(this),\r\n      { passive: false },\r\n    );\r\n    this.canvas.addEventListener(\r\n      'touchmove', \r\n      this.handleTouchMove.bind(this),\r\n      { passive: false },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle keydown events\r\n   */\r\n  private handleKeyDown(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = true;\r\n  }\r\n\r\n  /**\r\n   * Handle keyup events\r\n   */\r\n  private handleKeyUp(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = false;\r\n  }\r\n\r\n  /**\r\n   * Handle mouse down events\r\n   */\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = true;\r\n    this.inputState.mouse.button = event.button;\r\n    this.updateMousePosition(event);\r\n  }\r\n\r\n  /**\r\n   * Handle mouse up events\r\n   */\r\n  private handleMouseUp(_event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = false;\r\n    this.inputState.mouse.button = -1;\r\n  }\r\n\r\n  /**\r\n   * Handle mouse move events\r\n   */\r\n  private handleMouseMove(event: MouseEvent): void {\r\n    this.updateMousePosition(event);\r\n  }\r\n\r\n  /**\r\n   * Handle mouse leave events\r\n   */\r\n  private handleMouseLeave(): void {\r\n    this.inputState.mouse.isDown = false;\r\n    this.inputState.mouse.button = -1;\r\n  }\r\n\r\n  /**\r\n   * Handle touch start events (supports multi-touch)\r\n   */\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    event.preventDefault();\r\n    \r\n    // Track all new touches\r\n    for (let i = 0; i < event.touches.length; i++) {\r\n      const touch = event.touches[i];\r\n      this.inputState.touches.set(touch.identifier, {\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n    }\r\n    \r\n    // Maintain backwards compatibility with mouse state\r\n    if (event.touches.length > 0) {\r\n      this.inputState.mouse.isDown = true;\r\n      this.updateTouchPosition(event.touches[0]);\r\n      \r\n      // Only log touch start in debug builds\r\n      if (process.env.NODE_ENV === 'development') {\r\n        logger.debug('🤏 Touch start detected', { \r\n          touchCount: event.touches.length,\r\n          activeTouches: this.inputState.touches.size,\r\n          leftInput: this.getLeftSideInput(),\r\n          rightInput: this.getRightSideInput(),\r\n        }, 'InputManager');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch end events (supports multi-touch)\r\n   */\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    event.preventDefault();\r\n    \r\n    // Remove ended touches by finding which touches are no longer in the touches array\r\n    const activeTouchIds = new Set(Array.from(event.touches).map(t => t.identifier));\r\n    \r\n    // Remove touches that are no longer active\r\n    for (const [touchId] of this.inputState.touches) {\r\n      if (!activeTouchIds.has(touchId)) {\r\n        this.inputState.touches.delete(touchId);\r\n      }\r\n    }\r\n    \r\n    // Update mouse state based on remaining touches\r\n    if (event.touches.length === 0) {\r\n      this.inputState.mouse.isDown = false;\r\n    } else {\r\n      // Update mouse position to first remaining touch\r\n      this.updateTouchPosition(event.touches[0]);\r\n    }\r\n    \r\n    // Only log touch end in debug builds\r\n    if (process.env.NODE_ENV === 'development') {\r\n      logger.debug('🤏 Touch end detected', {\r\n        remainingTouches: this.inputState.touches.size,\r\n      }, 'InputManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch move events (supports multi-touch)\r\n   */\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    event.preventDefault();\r\n    \r\n    // Update all active touches\r\n    for (let i = 0; i < event.touches.length; i++) {\r\n      const touch = event.touches[i];\r\n      this.inputState.touches.set(touch.identifier, {\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n    }\r\n    \r\n    // Maintain backwards compatibility with mouse position\r\n    if (event.touches.length > 0) {\r\n      this.updateTouchPosition(event.touches[0]);\r\n      \r\n      // Only log when there's actual input and in debug builds\r\n      if (process.env.NODE_ENV === 'development') {\r\n        const leftInput = this.getLeftSideInput();\r\n        const rightInput = this.getRightSideInput();\r\n        if ((leftInput !== 0 || rightInput !== 0) && Math.random() < 0.01) { // 1% chance when active\r\n          logger.debug('🤏 Touch move active', { \r\n            touchCount: event.touches.length,\r\n            activeTouches: this.inputState.touches.size,\r\n            leftInput: leftInput.toFixed(2),\r\n            rightInput: rightInput.toFixed(2),\r\n          }, 'InputManager');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from mouse event\r\n   */\r\n  private updateMousePosition(event: MouseEvent): void {\r\n    this.inputState.mouse.x = event.clientX;\r\n    this.inputState.mouse.y = event.clientY;\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from touch event\r\n   */\r\n  private updateTouchPosition(touch: Touch): void {\r\n    this.inputState.mouse.x = touch.clientX;\r\n    this.inputState.mouse.y = touch.clientY;\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  public dispose(): void {\r\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\r\n    document.removeEventListener('keyup', this.handleKeyUp.bind(this));\r\n\r\n    if (this.canvas) {\r\n      this.canvas.removeEventListener(\r\n        'mousedown',\r\n        this.handleMouseDown.bind(this),\r\n      );\r\n      this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this));\r\n      this.canvas.removeEventListener(\r\n        'mousemove',\r\n        this.handleMouseMove.bind(this),\r\n      );\r\n      this.canvas.removeEventListener(\r\n        'mouseleave',\r\n        this.handleMouseLeave.bind(this),\r\n      );\r\n      this.canvas.removeEventListener(\r\n        'touchstart',\r\n        this.handleTouchStart.bind(this),\r\n        { passive: false } as any,\r\n      );\r\n      this.canvas.removeEventListener(\r\n        'touchend',\r\n        this.handleTouchEnd.bind(this),\r\n        { passive: false } as any,\r\n      );\r\n      this.canvas.removeEventListener(\r\n        'touchmove',\r\n        this.handleTouchMove.bind(this),\r\n        { passive: false } as any,\r\n      );\r\n    }\r\n  }\r\n}\r\n","// Circuit Breaker - Math Utilities\r\n// Common mathematical functions for game calculations\r\n\r\nexport interface Vector2 {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport class MathUtils {\r\n  /**\r\n   * Clamp a value between min and max\r\n   */\r\n  public static clamp(value: number, min: number, max: number): number {\r\n    return Math.min(Math.max(value, min), max);\r\n  }\r\n\r\n  /**\r\n   * Linear interpolation between two values\r\n   */\r\n  public static lerp(start: number, end: number, factor: number): number {\r\n    return start + (end - start) * factor;\r\n  }\r\n\r\n  /**\r\n   * Convert degrees to radians\r\n   */\r\n  public static toRadians(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  /**\r\n   * Convert radians to degrees\r\n   */\r\n  public static toDegrees(radians: number): number {\r\n    return radians * (180 / Math.PI);\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two points (coordinate version)\r\n   */\r\n  public static distance(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n  ): number {\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two Vector2 points\r\n   */\r\n  public static distanceVec(a: Vector2, b: Vector2): number {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * Calculate angle between two points\r\n   */\r\n  public static angle(x1: number, y1: number, x2: number, y2: number): number {\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n  }\r\n\r\n  /**\r\n   * Normalize a vector\r\n   */\r\n  public static normalize(vector: Vector2): Vector2 {\r\n    const length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\r\n    if (length === 0) return { x: 0, y: 0 };\r\n    return { x: vector.x / length, y: vector.y / length };\r\n  }\r\n\r\n  /**\r\n   * Dot product of two vectors\r\n   */\r\n  public static dot(a: Vector2, b: Vector2): number {\r\n    return a.x * b.x + a.y * b.y;\r\n  }\r\n\r\n  /**\r\n   * Check if two circles are colliding\r\n   */\r\n  public static circleCollision(\r\n    x1: number,\r\n    y1: number,\r\n    r1: number,\r\n    x2: number,\r\n    y2: number,\r\n    r2: number,\r\n  ): boolean {\r\n    const distance = this.distance(x1, y1, x2, y2);\r\n    return distance < r1 + r2;\r\n  }\r\n\r\n  /**\r\n   * Check if a point is inside a circle\r\n   */\r\n  public static pointInCircle(\r\n    px: number,\r\n    py: number,\r\n    cx: number,\r\n    cy: number,\r\n    radius: number,\r\n  ): boolean {\r\n    const distance = this.distance(px, py, cx, cy);\r\n    return distance <= radius;\r\n  }\r\n\r\n  /**\r\n   * Check if a point is inside a rectangle\r\n   */\r\n  public static pointInRect(\r\n    px: number,\r\n    py: number,\r\n    rx: number,\r\n    ry: number,\r\n    rw: number,\r\n    rh: number,\r\n  ): boolean {\r\n    return px >= rx && px <= rx + rw && py >= ry && py <= ry + rh;\r\n  }\r\n\r\n  /**\r\n   * Generate a random number between min and max\r\n   */\r\n  public static random(min: number, max: number): number {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  /**\r\n   * Generate a random integer between min and max (inclusive)\r\n   */\r\n  public static randomInt(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  /**\r\n   * Easing functions for smooth animations\r\n   */\r\n  public static easeInOut(t: number): number {\r\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n  }\r\n\r\n  public static easeIn(t: number): number {\r\n    return t * t;\r\n  }\r\n\r\n  public static easeOut(t: number): number {\r\n    return t * (2 - t);\r\n  }\r\n\r\n  /**\r\n   * Spring easing function with overshoot - creates a bouncy \"spring\" effect\r\n   */\r\n  public static easeSpring(t: number): number {\r\n    const s = 1.70158; // Back easing overshoot amount\r\n    return t * t * ((s + 1) * t - s);\r\n  }\r\n\r\n  /**\r\n   * Ease out back function - starts fast and overshoots with a bounce back\r\n   * Creates a smooth animation that goes slightly past the target and snaps back\r\n   */\r\n  public static easeOutBack(x: number): number {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n    \r\n    return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);\r\n  }\r\n\r\n  /**\r\n   * Ease in back function - starts slow then accelerates with anticipation\r\n   * Creates a smooth animation that pulls back slightly before accelerating forward\r\n   */\r\n  public static easeInBack(x: number): number {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n    \r\n    return c3 * x * x * x - c1 * x * x;\r\n  }\r\n\r\n  /**\r\n   * Elastic easing function - creates a spring-like bouncing effect\r\n   */\r\n  public static easeElastic(t: number): number {\r\n    if (t === 0) return 0;\r\n    if (t === 1) return 1;\r\n    \r\n    const p = 0.3;\r\n    const s = p / 4;\r\n    \r\n    return Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\r\n  }\r\n}\r\n","// Circuit Breaker - Power-Up Type Definitions\r\n// Separate file to avoid circular dependencies\r\n\r\nexport enum PowerUpType {\r\n  SLOW_MO_SURGE = 'slow_mo_surge',\r\n  MAGNETIC_GUIDE = 'magnetic_guide',\r\n  CIRCUIT_PATCH = 'circuit_patch',\r\n  OVERCLOCK_BOOST = 'overclock_boost',\r\n  SCAN_REVEAL = 'scan_reveal',\r\n}\r\n\r\nexport enum BallType {\r\n  STANDARD = 'standard',\r\n  HEAVY = 'heavy',\r\n  LIGHT = 'light',\r\n  NEON_SPLIT = 'neon_split',\r\n} ","// Circuit Breaker - Level System\r\n// Hole-based navigation system where players guide the ball through holes to reach the goal\r\n\r\nimport { Vector2, MathUtils } from '../utils/MathUtils';\r\nimport { logger } from '../utils/Logger';\r\nimport { PowerUpType } from './PowerUpTypes';\r\n\r\nexport interface Hole {\r\n  id: string;\r\n  position: Vector2;\r\n  radius: number;\r\n  isGoal: boolean;\r\n  isActive: boolean;\r\n  powerUpType?: PowerUpType; // Optional power-up type for power-up holes\r\n  \r\n  // Saucer behavior for power-up holes\r\n  saucerState?: {\r\n    isActive: boolean;\r\n    ballId?: string;\r\n    startTime: number;\r\n    phase: 'sinking' | 'waiting' | 'ejecting';\r\n    sinkDuration: number;\r\n    waitDuration: number;\r\n    kickDirection: { x: number; y: number };\r\n    kickForce: number;\r\n    sinkDepth: number; // How deep the ball sinks (0-1)\r\n  };\r\n  \r\n  // Animation state for animated holes\r\n  animationState?: {\r\n    isAnimated: boolean;\r\n    phase: 'animating_in' | 'idle' | 'animating_out' | 'hidden';\r\n    startTime: number;\r\n    animatingInDuration: number; // 0.5 seconds with easeOutBack (bouncy entrance)\r\n    idleDuration: number; // 3-10 seconds\r\n    animatingOutDuration: number; // 0.5 seconds with easeInBack (smooth acceleration out)\r\n    hiddenDuration: number; // Invisible/inactive duration\r\n    currentScale: number; // 0.0 to 1.0 scale multiplier\r\n  };\r\n  \r\n  // Track recently kicked balls to prevent re-entry\r\n  recentlyKickedBalls?: Set<string>;\r\n}\r\n\r\nexport interface LevelData {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  holes: Hole[];\r\n  goalHoles: Hole[]; // Changed from single goalHole to multiple goalHoles\r\n  ballStartPosition: Vector2;\r\n  difficulty: number;\r\n  bonusMultiplier: number;\r\n  requiredGoals: number; // Number of goals that must be reached to complete level\r\n}\r\n\r\nexport class Level {\r\n  private levelData: LevelData;\r\n  private isCompleted: boolean = false;\r\n  private elapsedTime: number = 0;\r\n  private timerStarted: boolean = false;\r\n  private timerStopped: boolean = false;\r\n  private completedGoals: Set<string> = new Set(); // Track completed goal holes\r\n  private onSoundEffect?: (soundName: string) => void;\r\n\r\n  constructor(levelData: LevelData, onSoundEffect?: (soundName: string) => void) {\r\n    this.levelData = levelData;\r\n    this.onSoundEffect = onSoundEffect;\r\n    logger.info(\r\n      `📋 Level ${levelData.id} loaded: ${levelData.name} (${levelData.goalHoles.length} goals)`,\r\n      null,\r\n      'Level',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Start the level (but not the timer - timer starts on first player input)\r\n   */\r\n  public start(): void {\r\n    this.elapsedTime = 0;\r\n    this.timerStarted = false;\r\n    this.timerStopped = false;\r\n    this.isCompleted = false;\r\n    logger.info(`🏁 Level ${this.levelData.id} started - waiting for first player input to start timer`, null, 'Level');\r\n  }\r\n\r\n  /**\r\n   * Start the timer (called when player first moves the bar)\r\n   */\r\n  public startTimer(): void {\r\n    if (!this.timerStarted && !this.timerStopped) {\r\n      this.timerStarted = true;\r\n      logger.info(`⏰ Timer started for Level ${this.levelData.id}`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the timer (called when level is completed)\r\n   */\r\n  public stopTimer(): void {\r\n    if (this.timerStarted && !this.timerStopped) {\r\n      this.timerStopped = true;\r\n      logger.info(`⏱️ Timer stopped for Level ${this.levelData.id} - Final time: ${this.getFormattedTime()}`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add time bonus (subtract time from elapsed time)\r\n   */\r\n  public addTimeBonus(bonusSeconds: number): void {\r\n    if (this.timerStarted && !this.timerStopped) {\r\n      const bonusMs = bonusSeconds * 1000;\r\n      this.elapsedTime = Math.max(0, this.elapsedTime - bonusMs);\r\n      logger.info(`⚡ Time bonus applied: -${bonusSeconds}s - New time: ${this.getFormattedTime()}`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current elapsed time in milliseconds\r\n   */\r\n  public getElapsedTime(): number {\r\n    return this.elapsedTime;\r\n  }\r\n\r\n  /**\r\n   * Get formatted time string (MM:SS.sss)\r\n   */\r\n  public getFormattedTime(): string {\r\n    const totalSeconds = this.elapsedTime / 1000;\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    return `${minutes}:${seconds.toFixed(3).padStart(6, '0')}`;\r\n  }\r\n\r\n  /**\r\n   * Check if timer is running\r\n   */\r\n  public isTimerRunning(): boolean {\r\n    return this.timerStarted && !this.timerStopped;\r\n  }\r\n\r\n  /**\r\n   * Check if timer has been started\r\n   */\r\n  public hasTimerStarted(): boolean {\r\n    return this.timerStarted;\r\n  }\r\n\r\n  /**\r\n   * Update level state - only increment timer if it's running\r\n   */\r\n  public update(deltaTime: number): void {\r\n    // Only increment elapsed time if timer is running\r\n    if (this.timerStarted && !this.timerStopped) {\r\n      this.elapsedTime += deltaTime;\r\n    }\r\n\r\n    // Update animated holes\r\n    this.updateAnimatedHoles(Date.now());\r\n\r\n    // Update hole glow effects\r\n    this.levelData.holes.forEach(hole => {\r\n      if (hole.isGoal) {\r\n        // Goal hole pulses with a bright glow\r\n        hole.isActive = true;\r\n      } else if (!hole.animationState?.isAnimated) {\r\n        // Regular holes are always active (unless they're animated)\r\n        hole.isActive = true;\r\n      }\r\n      // Animated holes manage their own isActive state\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if ball falls into any hole\r\n   */\r\n  public checkHoleCollision(\r\n    ballPosition: Vector2,\r\n    _ballRadius: number,\r\n    ballId?: string,\r\n  ): Hole | null {\r\n    for (const hole of this.levelData.holes) {\r\n      if (!hole.isActive) continue;\r\n\r\n      // Skip completed goal holes - balls can no longer fall into them\r\n      if (hole.isGoal && this.completedGoals.has(hole.id)) {\r\n        continue;\r\n      }\r\n\r\n      // Skip holes that are currently in saucer mode\r\n      if (hole.saucerState?.isActive) {\r\n        continue;\r\n      }\r\n\r\n      // Skip holes if this ball was recently kicked from them\r\n      if (ballId && hole.recentlyKickedBalls?.has(ballId)) {\r\n        continue;\r\n      }\r\n\r\n      const dx = ballPosition.x - hole.position.x;\r\n      const dy = ballPosition.y - hole.position.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      // Ball falls into hole only when ball center crosses into hole boundary\r\n      if (distance <= hole.radius) {\r\n        logger.info(`🕳️ Ball fell into hole: ${hole.id}`, null, 'Level');\r\n        return hole;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if ball reaches the goal hole\r\n   */\r\n  public checkGoalReached(ballPosition: Vector2, _ballRadius: number): boolean {\r\n    for (const goalHole of this.levelData.goalHoles) {\r\n      // Skip goal holes that are already completed\r\n      if (this.completedGoals.has(goalHole.id)) {\r\n        continue;\r\n      }\r\n\r\n      const dx = ballPosition.x - goalHole.position.x;\r\n      const dy = ballPosition.y - goalHole.position.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      // Ball reaches goal only when ball center crosses into goal hole boundary\r\n      if (distance <= goalHole.radius) {\r\n        logger.info(`🎯 Ball reached goal hole: ${goalHole.id}`, null, 'Level');\r\n        this.completedGoals.add(goalHole.id);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if ball falls off the screen (failure condition)\r\n   */\r\n  public checkBallFallOff(\r\n    ballPosition: Vector2,\r\n    screenBounds: Vector2,\r\n  ): boolean {\r\n    return ballPosition.y > screenBounds.y + 50; // 50px buffer below screen\r\n  }\r\n\r\n  /**\r\n   * Check if level is complete\r\n   */\r\n  public checkLevelComplete(): boolean {\r\n    // Level is complete when all required goals are reached\r\n    if (\r\n      !this.isCompleted &&\r\n      this.completedGoals.size >= this.levelData.requiredGoals\r\n    ) {\r\n      this.markComplete();\r\n      return true;\r\n    }\r\n    return this.isCompleted;\r\n  }\r\n\r\n  /**\r\n   * Get number of completed goals\r\n   */\r\n  public getCompletedGoals(): number {\r\n    return this.completedGoals.size;\r\n  }\r\n\r\n  /**\r\n   * Get required number of goals\r\n   */\r\n  public getRequiredGoals(): number {\r\n    return this.levelData.requiredGoals;\r\n  }\r\n\r\n  /**\r\n   * Check if all goals are completed\r\n   */\r\n  public areAllGoalsCompleted(): boolean {\r\n    return this.completedGoals.size >= this.levelData.requiredGoals;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific goal hole has been completed\r\n   */\r\n  public isGoalCompleted(goalId: string): boolean {\r\n    return this.completedGoals.has(goalId);\r\n  }\r\n\r\n  /**\r\n   * Get goal hole at a specific position\r\n   */\r\n  public getGoalHoleAtPosition(ballPosition: Vector2): Hole | null {\r\n    for (const goalHole of this.levelData.goalHoles) {\r\n      const dx = ballPosition.x - goalHole.position.x;\r\n      const dy = ballPosition.y - goalHole.position.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      if (distance <= goalHole.radius) {\r\n        return goalHole;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Mark level as complete\r\n   */\r\n  public markComplete(): void {\r\n    if (!this.isCompleted) {\r\n      this.isCompleted = true;\r\n      this.stopTimer(); // Stop the timer when level is completed\r\n      logger.info(`🏆 Level ${this.levelData.id} completed!`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate level score based on time and completion\r\n   */\r\n  public calculateScore(): number {\r\n    const baseScore = 1000; // Base score for completing level\r\n\r\n    // Time bonus (faster completion = higher score)\r\n    const timeBonus = Math.max(0, (60000 - this.elapsedTime) / 100); // 60 seconds max bonus\r\n\r\n    return Math.floor((baseScore + timeBonus) * this.levelData.bonusMultiplier);\r\n  }\r\n\r\n  /**\r\n   * Get level progress (0-1)\r\n   */\r\n  public getProgress(): number {\r\n    // Progress based on ball's Y position (higher = more progress)\r\n    // This will be calculated by the game based on ball position\r\n    return this.isCompleted ? 1.0 : 0.0;\r\n  }\r\n\r\n  /**\r\n   * Get level data\r\n   */\r\n  public getLevelData(): LevelData {\r\n    return this.levelData;\r\n  }\r\n\r\n  /**\r\n   * Get all holes in the level\r\n   */\r\n  public getHoles(): Hole[] {\r\n    return this.levelData.holes;\r\n  }\r\n\r\n  /**\r\n   * Start saucer behavior for a power-up hole\r\n   */\r\n  public startSaucerBehavior(holeId: string, ballId: string, currentTime: number): void {\r\n    const hole = this.levelData.holes.find(h => h.id === holeId);\r\n    if (!hole || !hole.powerUpType) return;\r\n\r\n    // Calculate kick direction (upward and slightly random)\r\n    const kickAngle = Math.PI * 0.75 + (Math.random() - 0.5) * 0.5; // 135° ± 15°\r\n    const kickDirection = {\r\n      x: Math.cos(kickAngle),\r\n      y: Math.sin(kickAngle),\r\n    };\r\n\r\n    hole.saucerState = {\r\n      isActive: true,\r\n      ballId: ballId,\r\n      startTime: currentTime,\r\n      phase: 'sinking', // Natural sinking phase\r\n      sinkDuration: 600, // 0.6 seconds for aggressive sinking\r\n      waitDuration: 1000 + Math.random() * 4000, // 1-5 seconds to wait\r\n      kickDirection: kickDirection,\r\n      kickForce: 200 + Math.random() * 150, // Lighter kick force (200-350)\r\n      sinkDepth: 0, // Start at surface, sink gradually\r\n    };\r\n\r\n    logger.info(`🛸 Started saucer behavior for hole: ${holeId} - ball sinking naturally`, null, 'Level');\r\n  }\r\n\r\n  /**\r\n   * Get the target position for a ball in a saucer (center aligned with saucer)\r\n   */\r\n  public getSaucerBallPosition(holeId: string): { x: number; y: number } | null {\r\n    const hole = this.levelData.holes.find(h => h.id === holeId);\r\n    if (!hole || !hole.saucerState?.isActive) return null;\r\n\r\n    // Ball center aligns exactly with saucer center in all phases\r\n    return {\r\n      x: hole.position.x,\r\n      y: hole.position.y,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update saucer behavior and return kick data if ready\r\n   */\r\n  public updateSaucerBehavior(currentTime: number): { ballId: string; direction: { x: number; y: number }; force: number; holeId: string } | null {\r\n    for (const hole of this.levelData.holes) {\r\n      if (!hole.saucerState?.isActive) continue;\r\n\r\n      const saucerState = hole.saucerState;\r\n\r\n      if (saucerState.phase === 'sinking') {\r\n        // Ball is sinking into the hole naturally and aggressively\r\n        const sinkElapsed = currentTime - saucerState.startTime;\r\n        const sinkProgress = Math.min(sinkElapsed / saucerState.sinkDuration, 1);\r\n        \r\n        // Aggressive easing - starts slow, accelerates rapidly (like falling into divot)\r\n        const aggressiveProgress = sinkProgress * sinkProgress * (3 - 2 * sinkProgress); // Smooth step\r\n        const acceleratedProgress = aggressiveProgress * aggressiveProgress; // Square for more aggressive feel\r\n        \r\n        // Update sink depth with aggressive curve\r\n        saucerState.sinkDepth = acceleratedProgress;\r\n        \r\n        // Transition to waiting phase when sinking is complete\r\n        if (sinkProgress >= 1) {\r\n          saucerState.phase = 'waiting';\r\n          saucerState.startTime = currentTime; // Reset timer for waiting phase\r\n          saucerState.sinkDepth = 1; // Fully sunk\r\n          logger.info(`🛸 Ball fully sunk into saucer hole: ${hole.id}`, null, 'Level');\r\n        }\r\n      } else if (saucerState.phase === 'waiting') {\r\n        // Ball is waiting in the saucer (centered on saucer sprite)\r\n        const waitElapsed = currentTime - saucerState.startTime;\r\n        if (waitElapsed >= saucerState.waitDuration) {\r\n          // Transition to ejecting phase\r\n          saucerState.phase = 'ejecting';\r\n          saucerState.startTime = currentTime; // Reset timer for ejecting phase\r\n          logger.info(`🚀 Saucer ejecting phase started for hole: ${hole.id}`, null, 'Level');\r\n        }\r\n      } else if (saucerState.phase === 'ejecting') {\r\n        // Ball is being ejected\r\n        const ejectElapsed = currentTime - saucerState.startTime;\r\n        if (ejectElapsed >= 200) { // 0.2 seconds to complete ejection\r\n          // Saucer is ready to kick the ball\r\n          const kickData = {\r\n            ballId: saucerState.ballId!,\r\n            direction: saucerState.kickDirection,\r\n            force: saucerState.kickForce,\r\n            holeId: hole.id,\r\n          };\r\n\r\n          // Remove the power-up hole entirely from the playfield\r\n          const holeIndex = this.levelData.holes.indexOf(hole);\r\n          if (holeIndex !== -1) {\r\n            this.levelData.holes.splice(holeIndex, 1);\r\n          }\r\n          \r\n          logger.info(`🚀 Power-up hole completely removed from playfield: ${hole.id}`, null, 'Level');\r\n          return kickData;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently in a saucer\r\n   */\r\n  public isBallInSaucer(ballId: string): boolean {\r\n    return this.levelData.holes.some(hole => \r\n      hole.saucerState?.isActive && hole.saucerState.ballId === ballId,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deactivate a specific hole (used for power-up holes after collection)\r\n   */\r\n  public deactivateHole(holeId: string): void {\r\n    const hole = this.levelData.holes.find(h => h.id === holeId);\r\n    if (hole) {\r\n      hole.isActive = false;\r\n      logger.info(`🚫 Deactivated hole: ${holeId}`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update animated holes\r\n   */\r\n  public updateAnimatedHoles(currentTime: number): void {\r\n    for (const hole of this.levelData.holes) {\r\n      if (!hole.animationState?.isAnimated) continue;\r\n\r\n      const animState = hole.animationState;\r\n      const elapsed = currentTime - animState.startTime;\r\n      \r\n      // Skip if animation hasn't started yet\r\n      if (elapsed < 0) {\r\n        // Only log once when waiting\r\n        if (Math.abs(elapsed) > 500 && Math.abs(elapsed) < 600) {\r\n          console.log(`⏰ Hole ${hole.id} waiting to start: ${Math.abs(elapsed)}ms remaining`);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      switch (animState.phase) {\r\n      case 'animating_in': {\r\n        // Scale up from 0% to 100% over duration with easeOutBack easing\r\n        const inProgress = Math.min(elapsed / animState.animatingInDuration, 1);\r\n        const newScale = MathUtils.easeOutBack(inProgress); // Apply easeOutBack easing for smooth overshoot\r\n          \r\n        animState.currentScale = newScale;\r\n          \r\n        if (elapsed >= animState.animatingInDuration) {\r\n          // Transition to idle phase\r\n          animState.phase = 'idle';\r\n          animState.startTime = currentTime;\r\n          animState.currentScale = 1.0; // Full scale\r\n          hole.isActive = true; // Hole becomes active when fully appeared\r\n          logger.info(`🌟 Animated hole entered idle phase: ${hole.id}`, null, 'Level');\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'idle':\r\n        // Hold at full scale\r\n        animState.currentScale = 1.0;\r\n          \r\n        if (elapsed >= animState.idleDuration) {\r\n          // Transition to animating out phase\r\n          animState.phase = 'animating_out';\r\n          animState.startTime = currentTime;\r\n          hole.isActive = false; // Hole becomes inactive when starting to disappear\r\n            \r\n          // Play sound effect for hole starting to disappear\r\n          if (this.onSoundEffect) {\r\n            this.onSoundEffect('hole_disappear');\r\n          }\r\n            \r\n          logger.info(`🌟 Animated hole starting to animate out: ${hole.id}`, null, 'Level');\r\n        }\r\n        break;\r\n\r\n      case 'animating_out': {\r\n        // Scale down from 100% to 0% over duration with easeInBack easing\r\n        const outProgress = Math.min(elapsed / animState.animatingOutDuration, 1);\r\n        const newOutScale = 1.0 - MathUtils.easeInBack(outProgress); // Apply easeInBack easing for smooth acceleration out\r\n          \r\n        animState.currentScale = newOutScale;\r\n          \r\n        if (elapsed >= animState.animatingOutDuration) {\r\n          // Transition to hidden phase\r\n          animState.phase = 'hidden';\r\n          animState.startTime = currentTime;\r\n          animState.currentScale = 0.0;\r\n          hole.isActive = false; // Hole becomes inactive when hidden\r\n          logger.info(`🌟 Animated hole entered hidden phase: ${hole.id}`, null, 'Level');\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'hidden':\r\n        // Hole is hidden and inactive\r\n        hole.isActive = false;\r\n        animState.currentScale = 0.0;\r\n          \r\n        if (elapsed >= animState.hiddenDuration) {\r\n          // Transition back to animating in phase - cycle repeats\r\n          animState.phase = 'animating_in';\r\n          animState.startTime = currentTime;\r\n          animState.currentScale = 0.0;\r\n            \r\n          // Randomize idle duration for next cycle\r\n          animState.idleDuration = 3000 + Math.random() * 7000; // 3-10 seconds\r\n            \r\n          // Play sound effect for hole starting to appear\r\n          if (this.onSoundEffect) {\r\n            this.onSoundEffect('hole_appear');\r\n          }\r\n            \r\n          logger.info(`🔄 Animated hole starting new cycle: ${hole.id}`, null, 'Level');\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an animated hole at a random position\r\n   */\r\n  public createAnimatedHole(holeId: string, position: Vector2): void {\r\n    const BALL_RADIUS = 14;\r\n    const HOLE_RADIUS = BALL_RADIUS;\r\n    \r\n    const animatedHole: Hole = {\r\n      id: holeId,\r\n      position: position,\r\n      radius: HOLE_RADIUS,\r\n      isGoal: false,\r\n      isActive: false, // Start inactive, becomes active after animating in\r\n      animationState: {\r\n        isAnimated: true,\r\n        phase: 'hidden', // Start hidden, not immediately visible\r\n        startTime: Date.now(),\r\n        animatingInDuration: 500, // 0.5 seconds with easeOutBack (bouncy entrance)\r\n        idleDuration: 3000 + Math.random() * 7000, // 3-10 seconds visible\r\n        animatingOutDuration: 500, // 0.5 seconds with easeInBack (smooth acceleration out)\r\n        hiddenDuration: 5000 + Math.random() * 15000, // 5-20 seconds hidden\r\n        currentScale: 0.0, // Start at 0% scale\r\n      },\r\n    };\r\n\r\n    this.levelData.holes.push(animatedHole);\r\n    logger.info(`🌟 Created cycling animated hole: ${holeId} at position (${position.x}, ${position.y})`, null, 'Level');\r\n  }\r\n\r\n  /**\r\n   * Get all animated holes\r\n   */\r\n  public getAnimatedHoles(): Hole[] {\r\n    return this.levelData.holes.filter(hole => hole.animationState?.isAnimated);\r\n  }\r\n\r\n  /**\r\n   * Reset level state\r\n   */\r\n  public reset(): void {\r\n    this.isCompleted = false;\r\n    this.elapsedTime = 0;\r\n    this.timerStarted = false;\r\n    this.timerStopped = false;\r\n    this.completedGoals.clear();\r\n\r\n    // Reset all holes\r\n    this.levelData.holes.forEach(hole => {\r\n      hole.isActive = true;\r\n    });\r\n\r\n    logger.info(`🔄 Level ${this.levelData.id} reset`, null, 'Level');\r\n  }\r\n\r\n  /**\r\n   * Debug function: Force complete all required goals to win the level instantly\r\n   */\r\n  public debugForceComplete(): void {\r\n    // Complete all required goal holes\r\n    for (const goalHole of this.levelData.goalHoles) {\r\n      this.completedGoals.add(goalHole.id);\r\n      if (this.completedGoals.size >= this.levelData.requiredGoals) {\r\n        break; // Only complete the required number of goals\r\n      }\r\n    }\r\n\r\n    // Mark level as complete\r\n    this.markComplete();\r\n\r\n    logger.info(`🧪 DEBUG: Level ${this.levelData.id} force completed! (${this.completedGoals.size}/${this.levelData.requiredGoals} goals)`, null, 'Level');\r\n  }\r\n}\r\n\r\nexport class LevelManager {\r\n  private levels: Map<number, LevelData> = new Map();\r\n  private currentLevel: Level | null = null;\r\n  private unlockedLevels: Set<number> = new Set([1]); // Level 1 is unlocked by default\r\n\r\n  constructor() {\r\n    logger.info('📚 LevelManager initialized', null, 'LevelManager');\r\n    this.loadLevels();\r\n  }\r\n\r\n  /**\r\n   * Generate holes for a level with increasing density from bottom to top\r\n   */\r\n  private generateHoles(levelId: number): { holes: Hole[]; goalHoles: Hole[] } {\r\n    const holes: Hole[] = [];\r\n    const PLAYFIELD_WIDTH = 360;\r\n    const BALL_RADIUS = 14;\r\n    const HOLE_RADIUS = BALL_RADIUS; // Holes are exactly ball size\r\n    const BUFFER = 8; // Minimum spacing between holes\r\n\r\n    // Bar starts at Y=590, so holes should start at least 10px above that\r\n    const BAR_START_POSITION = 590;\r\n    const HOLE_START_Y = BAR_START_POSITION - 10; // Y=580\r\n    const TOP_BOUNDARY = 50; // Top of playfield\r\n    const GOAL_AREA_HEIGHT = 100; // Reserve top 100px for goal\r\n\r\n    // Power-up hole configurations - limit to 1-2 power-ups per level\r\n    const maxPowerUpsPerLevel = Math.min(2, Math.max(1, Math.floor(levelId / 2))); // 1 for level 1-2, 2 for level 3+\r\n    const powerUpHoleConfigs = [\r\n      { type: PowerUpType.SLOW_MO_SURGE, spawnChance: 0.15, color: '#00ffff' },\r\n      { type: PowerUpType.MAGNETIC_GUIDE, spawnChance: 0.12, color: '#ff00ff' },\r\n      { type: PowerUpType.CIRCUIT_PATCH, spawnChance: 0.08, color: '#00ff00' },\r\n      { type: PowerUpType.OVERCLOCK_BOOST, spawnChance: 0.10, color: '#ff6600' },\r\n      { type: PowerUpType.SCAN_REVEAL, spawnChance: 0.06, color: '#ffff00' },\r\n    ];\r\n\r\n    // Generate goal holes near the top (Y: 50-150)\r\n    const goalHoles: Hole[] = [];\r\n    const numGoals = levelId + 1; // Level 1 = 2 goals, Level 2 = 3 goals, etc.\r\n\r\n    for (let i = 0; i < numGoals; i++) {\r\n      let attempts = 0;\r\n      let validPosition = false;\r\n\r\n      while (!validPosition && attempts < 100) {\r\n        const goalX = 50 + Math.random() * (PLAYFIELD_WIDTH - 100);\r\n        const goalY = TOP_BOUNDARY + Math.random() * GOAL_AREA_HEIGHT;\r\n\r\n        // Check if position is valid (not too close to other goal holes)\r\n        validPosition = true;\r\n        for (const existingGoal of goalHoles) {\r\n          const dx = goalX - existingGoal.position.x;\r\n          const dy = goalY - existingGoal.position.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < HOLE_RADIUS * 3 + BUFFER) {\r\n            // More spacing for goal holes\r\n            validPosition = false;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (validPosition) {\r\n          goalHoles.push({\r\n            id: `goal-${levelId}-${i}`,\r\n            position: { x: goalX, y: goalY },\r\n            radius: HOLE_RADIUS,\r\n            isGoal: true,\r\n            isActive: true,\r\n          });\r\n        }\r\n\r\n        attempts++;\r\n      }\r\n    }\r\n\r\n    // Add goal holes to the holes array\r\n    holes.push(...goalHoles);\r\n\r\n    // Generate regular holes with INCREASING density toward the top\r\n    const sections = 10; // Divide playfield into sections\r\n    const playableHeight = HOLE_START_Y - (TOP_BOUNDARY + GOAL_AREA_HEIGHT); // Y=580 to Y=150\r\n    const sectionHeight = playableHeight / sections;\r\n\r\n    // Difficulty scaling - sparse at bottom, dense at top\r\n    const baseDensity = 0.05 + (levelId - 1) * 0.01; // Very sparse at bottom\r\n    const maxDensity = 0.3 + (levelId - 1) * 0.08; // Dense at top\r\n\r\n    // Track power-up holes to limit them\r\n    let powerUpHolesCreated = 0;\r\n\r\n    for (let section = 0; section < sections; section++) {\r\n      // Section 0 is at bottom (Y=580), section 9 is near top (Y=150)\r\n      const sectionY = HOLE_START_Y - (section + 1) * sectionHeight;\r\n\r\n      // Density increases as we go toward the top (higher section number = higher density)\r\n      const sectionDensity = baseDensity + (section / sections) * maxDensity;\r\n      const holesInSection = Math.floor(sectionDensity * 12); // 12 holes max per section\r\n\r\n      for (let i = 0; i < holesInSection; i++) {\r\n        let attempts = 0;\r\n        let validPosition = false;\r\n\r\n        while (!validPosition && attempts < 50) {\r\n          const x =\r\n            HOLE_RADIUS + Math.random() * (PLAYFIELD_WIDTH - 2 * HOLE_RADIUS);\r\n          const y = sectionY + Math.random() * sectionHeight;\r\n\r\n          // Check if position is valid (not too close to other holes)\r\n          validPosition = true;\r\n          for (const existingHole of holes) {\r\n            const dx = x - existingHole.position.x;\r\n            const dy = y - existingHole.position.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance < HOLE_RADIUS * 2 + BUFFER) {\r\n              validPosition = false;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (validPosition) {\r\n            // Determine if this hole should be a power-up hole\r\n            let powerUpType: PowerUpType | undefined = undefined;\r\n            \r\n            // Only create power-up holes if we haven't reached the limit\r\n            if (powerUpHolesCreated < maxPowerUpsPerLevel) {\r\n              // Check each power-up type for this hole\r\n              for (const config of powerUpHoleConfigs) {\r\n                if (Math.random() < config.spawnChance) {\r\n                  powerUpType = config.type;\r\n                  powerUpHolesCreated++;\r\n                  break; // Only one power-up per hole\r\n                }\r\n              }\r\n            }\r\n            \r\n            holes.push({\r\n              id: `hole-${levelId}-${section}-${i}`,\r\n              position: { x, y },\r\n              radius: HOLE_RADIUS,\r\n              isGoal: false,\r\n              isActive: true,\r\n              powerUpType: powerUpType,\r\n            });\r\n          }\r\n\r\n          attempts++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Generate animated holes based on level - start with 2-3 holes in first few levels\r\n    const numAnimatedHoles = levelId <= 2 ? 2 : levelId <= 4 ? 3 : levelId + 1; // 2 holes on levels 1-2, 3 holes on levels 3-4, then scale up\r\n    \r\n    for (let i = 0; i < numAnimatedHoles; i++) {\r\n      let attempts = 0;\r\n      let validPosition = false;\r\n\r\n      while (!validPosition && attempts < 50) {\r\n        // Place animated holes only in the TOP HALF of the playfield\r\n        const animX = HOLE_RADIUS + Math.random() * (PLAYFIELD_WIDTH - 2 * HOLE_RADIUS);\r\n        const topHalfStart = TOP_BOUNDARY + GOAL_AREA_HEIGHT + 20; // Y=170\r\n        const topHalfEnd = topHalfStart + (HOLE_START_Y - topHalfStart) / 2; // Middle of playfield\r\n        const animY = topHalfStart + Math.random() * (topHalfEnd - topHalfStart);\r\n\r\n        // Check if position is valid (not too close to other holes)\r\n        validPosition = true;\r\n        for (const existingHole of holes) {\r\n          const dx = animX - existingHole.position.x;\r\n          const dy = animY - existingHole.position.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < HOLE_RADIUS * 3 + BUFFER) {\r\n            // Extra spacing for animated holes\r\n            validPosition = false;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (validPosition) {\r\n          // Create animated hole with cycling behavior\r\n          const animatedHole: Hole = {\r\n            id: `animated-hole-${levelId}-${i}`,\r\n            position: { x: animX, y: animY },\r\n            radius: HOLE_RADIUS,\r\n            isGoal: false,\r\n            isActive: false, // Start inactive, becomes active after animating in\r\n            animationState: {\r\n              isAnimated: true,\r\n              phase: 'hidden', // Start hidden, not immediately visible\r\n              startTime: Date.now() + (i * 2000 + Math.random() * 3000), // Staggered start times (2-5s)\r\n              animatingInDuration: 500, // 0.5 seconds with easeOutBack (bouncy entrance)\r\n              idleDuration: 3000 + Math.random() * 7000, // 3-10 seconds visible\r\n              animatingOutDuration: 500, // 0.5 seconds with easeInBack (smooth acceleration out)\r\n              hiddenDuration: 5000 + Math.random() * 15000, // 5-20 seconds hidden\r\n              currentScale: 0.0, // Start at 0% scale\r\n            },\r\n          };\r\n\r\n          holes.push(animatedHole);\r\n          logger.info(`🌟 Created animated hole ${animatedHole.id} - starts in ${(animatedHole.animationState!.startTime - Date.now())/1000}s`, null, 'Level');\r\n        }\r\n\r\n        attempts++;\r\n      }\r\n    }\r\n\r\n    logger.info(\r\n      `🕳️ Generated ${holes.length} holes for level ${levelId} (${powerUpHolesCreated} power-up holes, ${numAnimatedHoles} cycling animated holes, sparse at bottom, dense at top)`,\r\n      null,\r\n      'Level',\r\n    );\r\n\r\n    return { holes, goalHoles };\r\n  }\r\n\r\n  /**\r\n   * Load all level definitions\r\n   */\r\n  private loadLevels(): void {\r\n    // Generate 5 levels with increasing difficulty\r\n    for (let levelId = 1; levelId <= 5; levelId++) {\r\n      const { holes, goalHoles } = this.generateHoles(levelId);\r\n\r\n      const levelData: LevelData = {\r\n        id: levelId,\r\n        name: `Circuit Level ${levelId}`,\r\n        description: `Navigate through the holes to reach the goal circuit. Difficulty: ${levelId}/5`,\r\n        holes,\r\n        goalHoles,\r\n        ballStartPosition: { x: 343, y: 584 }, // On the tilting bar (bar starts at Y=590, ball should be slightly above)\r\n        difficulty: levelId,\r\n        bonusMultiplier: 1.0 + (levelId - 1) * 0.2,\r\n        requiredGoals: goalHoles.length,\r\n      };\r\n\r\n      this.levels.set(levelId, levelData);\r\n    }\r\n\r\n    logger.info(`📚 Loaded ${this.levels.size} levels`, null, 'LevelManager');\r\n  }\r\n\r\n  /**\r\n   * Load a specific level\r\n   */\r\n  public loadLevel(levelId: number, onSoundEffect?: (soundName: string) => void): Level | null {\r\n    const levelData = this.levels.get(levelId);\r\n    if (!levelData) {\r\n      logger.warn(`⚠️ Level ${levelId} not found`, null, 'Level');\r\n      return null;\r\n    }\r\n\r\n    if (!this.isLevelUnlocked(levelId)) {\r\n      logger.warn(`🔒 Level ${levelId} is locked`, null, 'Level');\r\n      return null;\r\n    }\r\n\r\n    this.currentLevel = new Level(levelData, onSoundEffect);\r\n    return this.currentLevel;\r\n  }\r\n\r\n  /**\r\n   * Check if level is unlocked\r\n   */\r\n  public isLevelUnlocked(levelId: number): boolean {\r\n    return this.unlockedLevels.has(levelId);\r\n  }\r\n\r\n  /**\r\n   * Unlock a level\r\n   */\r\n  public unlockLevel(levelId: number): void {\r\n    if (!this.unlockedLevels.has(levelId)) {\r\n      this.unlockedLevels.add(levelId);\r\n      logger.info(`🔓 Level ${levelId} unlocked`, null, 'Level');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current level\r\n   */\r\n  public getCurrentLevel(): Level | null {\r\n    return this.currentLevel;\r\n  }\r\n\r\n  /**\r\n   * Get available levels\r\n   */\r\n  public getAvailableLevels(): number[] {\r\n    return Array.from(this.levels.keys());\r\n  }\r\n\r\n  /**\r\n   * Get unlocked levels\r\n   */\r\n  public getUnlockedLevels(): number[] {\r\n    return Array.from(this.unlockedLevels);\r\n  }\r\n\r\n  /**\r\n   * Get level data\r\n   */\r\n  public getLevelData(levelId: number): LevelData | null {\r\n    return this.levels.get(levelId) || null;\r\n  }\r\n\r\n  /**\r\n   * Regenerate all levels for a new run/game\r\n   */\r\n  public regenerateLevels(): void {\r\n    logger.info('🔄 Regenerating all levels for new run...', null, 'LevelManager');\r\n    \r\n    // Clear existing levels\r\n    this.levels.clear();\r\n    \r\n    // Generate fresh levels\r\n    this.loadLevels();\r\n    \r\n    logger.info('✅ All levels regenerated with new layouts', null, 'LevelManager');\r\n  }\r\n}\r\n","// Circuit Breaker - Audio Manager\r\n// Handles sound effects, background music, and audio processing using Web Audio API\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\n// Type definitions for browser compatibility\r\ninterface WebkitAudioContext extends AudioContext {}\r\ninterface AudioContextConstructor {\r\n  new (): AudioContext | WebkitAudioContext;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    webkitAudioContext?: AudioContextConstructor;\r\n  }\r\n}\r\n\r\nexport interface AudioConfig {\r\n  masterVolume: number;\r\n  sfxVolume: number;\r\n  musicVolume: number;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface SoundEffect {\r\n  id: string;\r\n  buffer: AudioBuffer | null;\r\n  volume: number;\r\n  loop: boolean;\r\n  pitch: number;\r\n}\r\n\r\nexport class AudioManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private masterGain: GainNode | null = null;\r\n  private sfxGain: GainNode | null = null;\r\n  private musicGain: GainNode | null = null;\r\n  private config: AudioConfig = {\r\n    masterVolume: 0.7,\r\n    sfxVolume: 0.8,\r\n    musicVolume: 0.4,\r\n    enabled: true,\r\n  };\r\n\r\n  private soundEffects: Map<string, SoundEffect> = new Map();\r\n  private loadedSounds: Map<string, AudioBuffer> = new Map();\r\n  private currentMusic: AudioBufferSourceNode | null = null;\r\n  private currentMusicGain: GainNode | null = null;\r\n  private musicAnalyser: AnalyserNode | null = null;\r\n  private isInitialized: boolean = false;\r\n\r\n  constructor() {\r\n    logger.info('🔊 AudioManager initialized', null, 'AudioManager');\r\n  }\r\n\r\n  /**\r\n   * Initialize the audio system\r\n   */\r\n  public async init(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n\r\n    try {\r\n      // Create audio context\r\n      const AudioContextConstructor = (window.AudioContext ||\r\n        window.webkitAudioContext) as AudioContextConstructor;\r\n      this.audioContext = new AudioContextConstructor();\r\n\r\n      // Create gain nodes for volume control\r\n      this.masterGain = this.audioContext.createGain();\r\n      this.sfxGain = this.audioContext.createGain();\r\n      this.musicGain = this.audioContext.createGain();\r\n\r\n      // Create audio analyser for music visualization\r\n      this.musicAnalyser = this.audioContext.createAnalyser();\r\n      this.musicAnalyser.fftSize = 512; // Increased for better frequency resolution\r\n      this.musicAnalyser.smoothingTimeConstant = 0.3; // Less smoothing for more responsive beats\r\n\r\n      // Connect gain nodes\r\n      this.sfxGain.connect(this.masterGain);\r\n      this.musicGain.connect(this.musicAnalyser);\r\n      this.musicAnalyser.connect(this.masterGain);\r\n      this.masterGain.connect(this.audioContext.destination);\r\n\r\n      // Set initial volumes\r\n      this.masterGain.gain.value = this.config.masterVolume;\r\n      this.sfxGain.gain.value = this.config.sfxVolume;\r\n      this.musicGain.gain.value = this.config.musicVolume;\r\n\r\n      // Create procedural sound effects\r\n      await this.createProceduralSounds();\r\n\r\n      this.isInitialized = true;\r\n      logger.info('✅ Audio system initialized', null, 'AudioManager');\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize audio system:', error, 'AudioManager');\r\n      this.config.enabled = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create procedural sound effects using Web Audio API\r\n   */\r\n  private async createProceduralSounds(): Promise<void> {\r\n    if (!this.audioContext) return;\r\n\r\n    // Ball bounce sound - realistic metallic ping\r\n    const bounceBuffer = this.createBounceSound();\r\n    this.soundEffects.set('bounce', {\r\n      id: 'bounce',\r\n      buffer: bounceBuffer,\r\n      volume: 0.6,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Ball rolling sound - continuous rumble\r\n    const rollBuffer = this.createRollingSound();\r\n    this.soundEffects.set('roll', {\r\n      id: 'roll',\r\n      buffer: rollBuffer,\r\n      volume: 0.3,\r\n      loop: true,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Electrical zap sound - sharp electronic buzz\r\n    const zapBuffer = this.createElectricalZap();\r\n    this.soundEffects.set('zap', {\r\n      id: 'zap',\r\n      buffer: zapBuffer,\r\n      volume: 0.7,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Target port activation - satisfying chime\r\n    const targetBuffer = this.createTargetSound();\r\n    this.soundEffects.set('target', {\r\n      id: 'target',\r\n      buffer: targetBuffer,\r\n      volume: 0.8,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Level complete - triumphant fanfare\r\n    const completeBuffer = this.createLevelCompleteSound();\r\n    this.soundEffects.set('level_complete', {\r\n      id: 'level_complete',\r\n      buffer: completeBuffer,\r\n      volume: 0.9,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // UI click sound - subtle beep\r\n    const clickBuffer = this.createUIClickSound();\r\n    this.soundEffects.set('ui_click', {\r\n      id: 'ui_click',\r\n      buffer: clickBuffer,\r\n      volume: 0.5,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // UI hover sound - soft beep\r\n    const hoverBuffer = this.createUIHoverSound();\r\n    this.soundEffects.set('ui_hover', {\r\n      id: 'ui_hover',\r\n      buffer: hoverBuffer,\r\n      volume: 0.3,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // UI slide sound - smooth transition\r\n    const slideBuffer = this.createUISlideSound();\r\n    this.soundEffects.set('ui_slide', {\r\n      id: 'ui_slide',\r\n      buffer: slideBuffer,\r\n      volume: 0.4,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Game over sound - dramatic failure\r\n    const gameOverBuffer = this.createGameOverSound();\r\n    this.soundEffects.set('game_over', {\r\n      id: 'game_over',\r\n      buffer: gameOverBuffer,\r\n      volume: 0.8,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Power-up collect sound - satisfying chime\r\n    const powerupCollectBuffer = this.createPowerupCollectSound();\r\n    this.soundEffects.set('powerup_collect', {\r\n      id: 'powerup_collect',\r\n      buffer: powerupCollectBuffer,\r\n      volume: 0.7,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Power-up activate sound - electronic buzz\r\n    const powerupActivateBuffer = this.createPowerupActivateSound();\r\n    this.soundEffects.set('powerup_activate', {\r\n      id: 'powerup_activate',\r\n      buffer: powerupActivateBuffer,\r\n      volume: 0.6,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Shield break sound - glass shatter\r\n    const shieldBreakBuffer = this.createShieldBreakSound();\r\n    this.soundEffects.set('shield_break', {\r\n      id: 'shield_break',\r\n      buffer: shieldBreakBuffer,\r\n      volume: 0.8,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Shield activate sound - protective hum\r\n    const shieldActivateBuffer = this.createShieldActivateSound();\r\n    this.soundEffects.set('shield_activate', {\r\n      id: 'shield_activate',\r\n      buffer: shieldActivateBuffer,\r\n      volume: 0.6,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Hole appear sound - ethereal whoosh\r\n    const holeAppearBuffer = this.createHoleAppearSound();\r\n    this.soundEffects.set('hole_appear', {\r\n      id: 'hole_appear',\r\n      buffer: holeAppearBuffer,\r\n      volume: 0.5,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    // Hole disappear sound - reverse whoosh\r\n    const holeDisappearBuffer = this.createHoleDisappearSound();\r\n    this.soundEffects.set('hole_disappear', {\r\n      id: 'hole_disappear',\r\n      buffer: holeDisappearBuffer,\r\n      volume: 0.5,\r\n      loop: false,\r\n      pitch: 1.0,\r\n    });\r\n\r\n    logger.info(\r\n      `🎵 Created ${this.soundEffects.size} procedural sound effects`,\r\n      null,\r\n      'AudioManager',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create realistic ball bounce sound\r\n   */\r\n  private createBounceSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.2; // 200ms\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 8); // Quick decay\r\n\r\n      // Metallic ping with harmonics\r\n      const fundamental = Math.sin(2 * Math.PI * 800 * t) * 0.5;\r\n      const harmonic2 = Math.sin(2 * Math.PI * 1600 * t) * 0.3;\r\n      const harmonic3 = Math.sin(2 * Math.PI * 2400 * t) * 0.2;\r\n\r\n      // Add some noise for realism\r\n      const noise = (Math.random() - 0.5) * 0.1;\r\n\r\n      data[i] = (fundamental + harmonic2 + harmonic3 + noise) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create ball rolling sound\r\n   */\r\n  private createRollingSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 1.0; // 1 second loop\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n\r\n      // Low frequency rumble with random variations\r\n      const rumble = Math.sin(2 * Math.PI * 60 * t) * 0.3;\r\n      const highFreq = Math.sin(2 * Math.PI * 200 * t) * 0.1;\r\n      const noise = (Math.random() - 0.5) * 0.2;\r\n\r\n      data[i] = rumble + highFreq + noise;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create electrical zap sound\r\n   */\r\n  private createElectricalZap(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.3;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 6);\r\n\r\n      // Sharp, buzzing electrical sound\r\n      const buzz = Math.sin(2 * Math.PI * 1200 * t) * 0.4;\r\n      const crackle = Math.sin(2 * Math.PI * 3000 * t) * 0.3;\r\n      const noise = (Math.random() - 0.5) * 0.5;\r\n\r\n      data[i] = (buzz + crackle + noise) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create target port activation sound\r\n   */\r\n  private createTargetSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.5;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 4);\r\n\r\n      // Pleasant chime sound\r\n      const chime1 = Math.sin(2 * Math.PI * 523 * t) * 0.5; // C5\r\n      const chime2 = Math.sin(2 * Math.PI * 659 * t) * 0.3; // E5\r\n      const chime3 = Math.sin(2 * Math.PI * 784 * t) * 0.2; // G5\r\n\r\n      data[i] = (chime1 + chime2 + chime3) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create level complete sound\r\n   */\r\n  private createLevelCompleteSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 1.0;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    // Simple ascending melody\r\n    const notes = [523, 659, 784, 1047]; // C5, E5, G5, C6\r\n    const noteLength = length / notes.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const noteIndex = Math.floor(i / noteLength);\r\n      const t = (i % noteLength) / sampleRate;\r\n      const envelope = Math.exp(-t * 2);\r\n\r\n      const freq = notes[noteIndex] || notes[notes.length - 1];\r\n      const tone = Math.sin(2 * Math.PI * freq * t) * envelope * 0.5;\r\n\r\n      data[i] = tone;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create UI click sound\r\n   */\r\n  private createUIClickSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.1;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 20);\r\n\r\n      const click = Math.sin(2 * Math.PI * 1000 * t) * envelope * 0.3;\r\n      data[i] = click;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create UI hover sound\r\n   */\r\n  private createUIHoverSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.05;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 30);\r\n\r\n      const hover = Math.sin(2 * Math.PI * 800 * t) * envelope * 0.2;\r\n      data[i] = hover;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create UI slide sound\r\n   */\r\n  private createUISlideSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.15;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 8);\r\n\r\n      // Smooth sliding sound with slight frequency variation\r\n      const freq = 600 + Math.sin(t * 10) * 100;\r\n      const slide = Math.sin(2 * Math.PI * freq * t) * envelope * 0.25;\r\n      data[i] = slide;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create game over sound\r\n   */\r\n  private createGameOverSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 1.5;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 2);\r\n\r\n      // Dramatic descending tone with noise\r\n      const freq = 400 - t * 200; // Descending frequency\r\n      const tone = Math.sin(2 * Math.PI * Math.max(50, freq) * t) * 0.4;\r\n      const noise = (Math.random() - 0.5) * 0.3;\r\n      const distortion = Math.sin(2 * Math.PI * 100 * t) * 0.2;\r\n\r\n      data[i] = (tone + noise + distortion) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create power-up collect sound\r\n   */\r\n  private createPowerupCollectSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.4;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 5);\r\n\r\n      // Pleasant ascending chime\r\n      const freq = 800 + t * 400; // Ascending frequency\r\n      const chime1 = Math.sin(2 * Math.PI * freq * t) * 0.4;\r\n      const chime2 = Math.sin(2 * Math.PI * (freq * 1.5) * t) * 0.2;\r\n      const sparkle = Math.sin(2 * Math.PI * 2000 * t) * 0.1;\r\n\r\n      data[i] = (chime1 + chime2 + sparkle) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create power-up activate sound\r\n   */\r\n  private createPowerupActivateSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.3;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 8);\r\n\r\n      // Electronic activation buzz\r\n      const buzz = Math.sin(2 * Math.PI * 600 * t) * 0.3;\r\n      const crackle = Math.sin(2 * Math.PI * 1800 * t) * 0.2;\r\n      const noise = (Math.random() - 0.5) * 0.2;\r\n\r\n      data[i] = (buzz + crackle + noise) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create shield break sound\r\n   */\r\n  private createShieldBreakSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.5;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 4);\r\n\r\n      // Glass shatter effect\r\n      const glass = Math.sin(2 * Math.PI * 1200 * t) * 0.3;\r\n      const shatter = Math.sin(2 * Math.PI * 800 * t) * 0.2;\r\n      const noise = (Math.random() - 0.5) * 0.4;\r\n      const echo = Math.sin(2 * Math.PI * 400 * t) * 0.1;\r\n\r\n      data[i] = (glass + shatter + noise + echo) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create shield activate sound\r\n   */\r\n  private createShieldActivateSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.6;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.exp(-t * 3);\r\n\r\n      // Protective shield hum\r\n      const hum = Math.sin(2 * Math.PI * 200 * t) * 0.3;\r\n      const resonance = Math.sin(2 * Math.PI * 400 * t) * 0.2;\r\n      const protection = Math.sin(2 * Math.PI * 100 * t) * 0.1;\r\n\r\n      data[i] = (hum + resonance + protection) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create hole appear sound - ethereal whoosh\r\n   */\r\n  private createHoleAppearSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.4;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.sin(Math.PI * t); // Bell-shaped envelope\r\n\r\n      // Ascending pitch whoosh\r\n      const frequency = 200 + Math.pow(t, 2) * 400; // 200Hz to 600Hz\r\n      const whoosh = Math.sin(2 * Math.PI * frequency * t) * 0.4;\r\n      \r\n      // Add some sparkle\r\n      const sparkle = Math.sin(2 * Math.PI * (800 + Math.random() * 200) * t) * 0.2;\r\n      \r\n      // Ethereal reverb-like effect\r\n      const reverb = Math.sin(2 * Math.PI * 300 * t) * 0.1;\r\n\r\n      data[i] = (whoosh + sparkle + reverb) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Create hole disappear sound - reverse whoosh\r\n   */\r\n  private createHoleDisappearSound(): AudioBuffer | null {\r\n    if (!this.audioContext) return null;\r\n\r\n    const sampleRate = this.audioContext.sampleRate;\r\n    const duration = 0.4;\r\n    const length = sampleRate * duration;\r\n    const buffer = this.audioContext.createBuffer(1, length, sampleRate);\r\n    const data = buffer.getChannelData(0);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const t = i / sampleRate;\r\n      const envelope = Math.sin(Math.PI * t); // Bell-shaped envelope\r\n\r\n      // Descending pitch whoosh (reverse of appear)\r\n      const frequency = 600 - Math.pow(t, 2) * 400; // 600Hz to 200Hz\r\n      const whoosh = Math.sin(2 * Math.PI * frequency * t) * 0.4;\r\n      \r\n      // Add some fading sparkle\r\n      const sparkle = Math.sin(2 * Math.PI * (400 - t * 200) * t) * 0.2;\r\n      \r\n      // Fading reverb-like effect\r\n      const reverb = Math.sin(2 * Math.PI * 150 * t) * 0.1;\r\n\r\n      data[i] = (whoosh + sparkle + reverb) * envelope;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * Play a sound effect\r\n   */\r\n  public playSound(\r\n    soundId: string,\r\n    volume: number = 1.0,\r\n    pitch: number = 1.0,\r\n  ): void {\r\n    if (!this.config.enabled || !this.audioContext || !this.isInitialized)\r\n      return;\r\n\r\n    const sound = this.soundEffects.get(soundId);\r\n    if (!sound || !sound.buffer) {\r\n      logger.warn(`🔇 Sound not found: ${soundId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const source = this.audioContext.createBufferSource();\r\n      const gainNode = this.audioContext.createGain();\r\n\r\n      source.buffer = sound.buffer;\r\n      source.loop = sound.loop;\r\n      source.playbackRate.value = pitch;\r\n\r\n      gainNode.gain.value = sound.volume * volume;\r\n\r\n      source.connect(gainNode);\r\n      if (this.sfxGain) {\r\n        gainNode.connect(this.sfxGain);\r\n      }\r\n\r\n      source.start();\r\n\r\n      // Auto-cleanup for non-looping sounds\r\n      if (!sound.loop) {\r\n        source.addEventListener('ended', () => {\r\n          source.disconnect();\r\n          gainNode.disconnect();\r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.error(`❌ Error playing sound ${soundId}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play ball bounce sound with velocity-based pitch\r\n   */\r\n  public playBounceSound(velocity: number): void {\r\n    const normalizedVelocity = Math.min(velocity / 500, 1.0);\r\n    const volume = 0.3 + normalizedVelocity * 0.7;\r\n    const pitch = 0.8 + normalizedVelocity * 0.4;\r\n\r\n    this.playSound('bounce', volume, pitch);\r\n  }\r\n\r\n  /**\r\n   * Play rolling sound (continuous)\r\n   */\r\n  public playRollingSound(): void {\r\n    // Only play if not already playing\r\n    this.playSound('roll', 0.5);\r\n  }\r\n\r\n  /**\r\n   * Stop all sounds\r\n   */\r\n  public stopAllSounds(): void {\r\n    if (!this.audioContext) return;\r\n\r\n    try {\r\n      // Stop current music\r\n      if (this.currentMusic) {\r\n        this.currentMusic.stop();\r\n        this.currentMusic = null;\r\n      }\r\n\r\n      // Note: Individual sound effects will stop automatically\r\n      logger.info('🔇 All sounds stopped');\r\n    } catch (error) {\r\n      logger.error('❌ Error stopping sounds:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set master volume\r\n   */\r\n  public setMasterVolume(volume: number): void {\r\n    this.config.masterVolume = Math.max(0, Math.min(1, volume));\r\n    if (this.masterGain) {\r\n      this.masterGain.gain.value = this.config.masterVolume;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set sound effects volume\r\n   */\r\n  public setSFXVolume(volume: number): void {\r\n    this.config.sfxVolume = Math.max(0, Math.min(1, volume));\r\n    if (this.sfxGain) {\r\n      this.sfxGain.gain.value = this.config.sfxVolume;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set music volume\r\n   */\r\n  public setMusicVolume(volume: number): void {\r\n    this.config.musicVolume = Math.max(0, Math.min(1, volume));\r\n    if (this.musicGain) {\r\n      this.musicGain.gain.value = this.config.musicVolume;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable/disable audio\r\n   */\r\n  public setEnabled(enabled: boolean): void {\r\n    this.config.enabled = enabled;\r\n    if (!enabled) {\r\n      this.stopAllSounds();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get audio configuration\r\n   */\r\n  public getConfig(): AudioConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Resume audio context (required for user interaction)\r\n   */\r\n  public async resumeContext(): Promise<void> {\r\n    if (this.audioContext && this.audioContext.state === 'suspended') {\r\n      await this.audioContext.resume();\r\n      logger.info('🔊 Audio context resumed', null, 'AudioManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if audio context is suspended\r\n   */\r\n  public isContextSuspended(): boolean {\r\n    return this.audioContext?.state === 'suspended';\r\n  }\r\n\r\n  /**\r\n   * Check if audio is available\r\n   */\r\n  public isAvailable(): boolean {\r\n    return this.isInitialized && this.config.enabled;\r\n  }\r\n\r\n  /**\r\n   * Get the correct base URL for assets\r\n   */\r\n  private getBaseUrl(): string {\r\n    // For GitHub Pages deployment, use the base URL from the current location\r\n    const baseUrl = window.location.pathname.includes('/circuit-breaker/')\r\n      ? '/circuit-breaker/'\r\n      : '/';\r\n    return baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Load an MP3 file from the public/assets/audio folder\r\n   */\r\n  public async loadMusic(filename: string): Promise<AudioBuffer | null> {\r\n    if (!this.audioContext) return null;\r\n\r\n    try {\r\n      const baseUrl = this.getBaseUrl();\r\n      const audioUrl = `${baseUrl}assets/audio/${filename}`;\r\n      logger.info(`🎵 Attempting to load audio from: ${audioUrl}`);\r\n\r\n      const response = await fetch(audioUrl);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load ${filename}: ${response.status}`);\r\n      }\r\n\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\r\n\r\n      // Cache the loaded music\r\n      this.loadedSounds.set(filename, audioBuffer);\r\n\r\n      logger.info(`🎵 Loaded music: ${filename}`);\r\n      return audioBuffer;\r\n    } catch (error) {\r\n      logger.error(`❌ Error loading music ${filename}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play background music\r\n   */\r\n  public async playMusic(\r\n    filename: string,\r\n    loop: boolean = true,\r\n    volume: number = 1.0,\r\n  ): Promise<void> {\r\n    if (!this.config.enabled || !this.audioContext || !this.isInitialized)\r\n      return;\r\n\r\n    // Stop current music if playing\r\n    this.stopMusic();\r\n\r\n    try {\r\n      // Load music if not already cached\r\n      let audioBuffer = this.loadedSounds.get(filename);\r\n      if (!audioBuffer) {\r\n        const loadedBuffer = await this.loadMusic(filename);\r\n        if (!loadedBuffer) return;\r\n        audioBuffer = loadedBuffer;\r\n      }\r\n\r\n      // Create source and gain nodes\r\n      const source = this.audioContext.createBufferSource();\r\n      const gainNode = this.audioContext.createGain();\r\n\r\n      source.buffer = audioBuffer;\r\n      source.loop = loop;\r\n      gainNode.gain.value = volume;\r\n\r\n      // Connect nodes\r\n      source.connect(gainNode);\r\n      if (this.musicGain) {\r\n        gainNode.connect(this.musicGain);\r\n      }\r\n\r\n      // Store references for later control\r\n      this.currentMusic = source;\r\n      this.currentMusicGain = gainNode;\r\n\r\n      // Start playing\r\n      source.start();\r\n\r\n      // Handle music ending (for non-looping tracks)\r\n      if (!loop) {\r\n        source.addEventListener('ended', () => {\r\n          this.currentMusic = null;\r\n          this.currentMusicGain = null;\r\n        });\r\n      }\r\n\r\n      logger.info(`🎵 Playing music: ${filename} (loop: ${loop})`);\r\n    } catch (error) {\r\n      logger.error(`❌ Error playing music ${filename}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop current background music\r\n   */\r\n  public stopMusic(): void {\r\n    if (this.currentMusic) {\r\n      try {\r\n        this.currentMusic.stop();\r\n        this.currentMusic.disconnect();\r\n        if (this.currentMusicGain) {\r\n          this.currentMusicGain.disconnect();\r\n        }\r\n      } catch (error) {\r\n        // Ignore errors when stopping already stopped music\r\n      }\r\n      this.currentMusic = null;\r\n      this.currentMusicGain = null;\r\n      logger.info('🔇 Music stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fade out current music and optionally start new music\r\n   */\r\n  public async fadeToMusic(\r\n    newFilename: string | null = null,\r\n    fadeTime: number = 1.0,\r\n  ): Promise<void> {\r\n    if (!this.currentMusicGain || !this.audioContext) {\r\n      if (newFilename) {\r\n        await this.playMusic(newFilename);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Fade out current music\r\n    const fadeSteps = 60; // 60 steps for smooth fade\r\n    const fadeInterval = (fadeTime * 1000) / fadeSteps;\r\n    const volumeStep = this.currentMusicGain.gain.value / fadeSteps;\r\n\r\n    for (let i = 0; i < fadeSteps; i++) {\r\n      setTimeout(() => {\r\n        if (this.currentMusicGain) {\r\n          this.currentMusicGain.gain.value = Math.max(\r\n            0,\r\n            this.currentMusicGain.gain.value - volumeStep,\r\n          );\r\n        }\r\n      }, i * fadeInterval);\r\n    }\r\n\r\n    // Stop current music after fade\r\n    setTimeout(() => {\r\n      this.stopMusic();\r\n\r\n      // Start new music if specified\r\n      if (newFilename) {\r\n        this.playMusic(newFilename);\r\n      }\r\n    }, fadeTime * 1000);\r\n  }\r\n\r\n  /**\r\n   * Check if music is currently playing\r\n   */\r\n  public isMusicPlaying(): boolean {\r\n    const isPlaying = this.currentMusic !== null;\r\n    \r\n    // Debug: Log music status occasionally\r\n    const now = Date.now();\r\n    if (now % 3000 < 16) { // Log every 3 seconds\r\n      console.log(`🎵 Music Status: ${isPlaying ? 'Playing' : 'Not Playing'}, Analyser: ${this.musicAnalyser ? 'Active' : 'Inactive'}`);\r\n    }\r\n    \r\n    return isPlaying;\r\n  }\r\n\r\n  /**\r\n   * Get current music audio levels for visualization\r\n   */\r\n  public getMusicLevels(): { bass: number; mid: number; treble: number; overall: number } {\r\n    if (!this.musicAnalyser || !this.isMusicPlaying()) {\r\n      return { bass: 0, mid: 0, treble: 0, overall: 0 };\r\n    }\r\n\r\n    const bufferLength = this.musicAnalyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    this.musicAnalyser.getByteFrequencyData(dataArray);\r\n\r\n    // Calculate frequency ranges - emphasize bass for beat detection\r\n    const bassRange = Math.floor(bufferLength * 0.15); // 0-15% of frequencies (more bass)\r\n    const midRange = Math.floor(bufferLength * 0.25); // 15-40% of frequencies\r\n\r\n    let bassSum = 0;\r\n    let midSum = 0;\r\n    let trebleSum = 0;\r\n    let overallSum = 0;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      const value = dataArray[i] / 255; // Normalize to 0-1\r\n      overallSum += value;\r\n\r\n      if (i < bassRange) {\r\n        bassSum += value;\r\n      } else if (i < bassRange + midRange) {\r\n        midSum += value;\r\n      } else {\r\n        trebleSum += value;\r\n      }\r\n    }\r\n\r\n    return {\r\n      bass: bassSum / bassRange,\r\n      mid: midSum / midRange,\r\n      treble: trebleSum / (bufferLength - bassRange - midRange),\r\n      overall: (bassSum * 0.6 + midSum * 0.3 + trebleSum * 0.1) / bufferLength // Emphasize bass for beats\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get a single audio level value for simple visualization\r\n   */\r\n  public getAudioLevel(): number {\r\n    const levels = this.getMusicLevels();\r\n    \r\n    // Debug: Log levels occasionally to see if they're changing\r\n    const now = Date.now();\r\n    if (now % 2000 < 16) { // Log every 2 seconds\r\n      console.log(`🔊 Audio Levels - Bass: ${levels.bass.toFixed(3)}, Mid: ${levels.mid.toFixed(3)}, Treble: ${levels.treble.toFixed(3)}, Overall: ${levels.overall.toFixed(3)}`);\r\n    }\r\n    \r\n    return levels.overall;\r\n  }\r\n}\r\n","import { AudioManager } from '../audio/AudioManager';\r\n\r\nexport interface ButtonConfig {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  label: string;\r\n  onClick: () => void;\r\n  audioManager: AudioManager;\r\n  soundKey?: string;\r\n  nineSlice?: HTMLImageElement | null;\r\n}\r\n\r\nexport class Button {\r\n  private config: ButtonConfig;\r\n  private isHovered = false;\r\n  private isPressed = false;\r\n\r\n  constructor(config: ButtonConfig) {\r\n    this.config = config;\r\n    // Register event listeners elsewhere (UI manager or main loop)\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    const { x, y, width, height, label, nineSlice } = this.config;\r\n    // Draw 9-slice background if provided, else fallback\r\n    if (nineSlice) {\r\n      // Placeholder: draw as simple rect for now, 9-slice logic to be added\r\n      ctx.drawImage(nineSlice, x, y, width, height);\r\n    } else {\r\n      ctx.save();\r\n      ctx.fillStyle = this.isPressed ? '#00f0ff' : this.isHovered ? '#b600f9' : '#222';\r\n      ctx.strokeStyle = '#00f0ff';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.roundRect(x, y, width, height, 8);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n    // Draw label\r\n    ctx.save();\r\n    ctx.fillStyle = '#fff';\r\n    ctx.font = '18px Interceptor, monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(label, x + width / 2, y + height / 2);\r\n    ctx.restore();\r\n  }\r\n\r\n  public handlePointerMove(px: number, py: number) {\r\n    const { x, y, width, height, audioManager } = this.config;\r\n    const wasHovered = this.isHovered;\r\n    this.isHovered = px >= x && px <= x + width && py >= y && py <= y + height;\r\n    if (this.isHovered && !wasHovered) {\r\n      audioManager.playSound(this.config.soundKey || 'ui_hover');\r\n    }\r\n  }\r\n\r\n  public handlePointerDown(_px: number, _py: number) {\r\n    if (this.isHovered) {\r\n      this.isPressed = true;\r\n    }\r\n  }\r\n\r\n  public handlePointerUp(_px: number, _py: number) {\r\n    if (this.isHovered && this.isPressed) {\r\n      this.config.audioManager.playSound(this.config.soundKey || 'ui_click');\r\n      this.config.onClick();\r\n    }\r\n    this.isPressed = false;\r\n  }\r\n\r\n  public setLabel(label: string): void {\r\n    this.config.label = label;\r\n  }\r\n} ","import { AudioManager } from '../audio/AudioManager';\r\n\r\nexport interface SliderConfig {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  min: number;\r\n  max: number;\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  audioManager: AudioManager;\r\n  soundKey?: string;\r\n  nineSlice?: HTMLImageElement | null;\r\n}\r\n\r\nexport class Slider {\r\n  private config: SliderConfig;\r\n  private isDragging = false;\r\n\r\n  constructor(config: SliderConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    const { x, y, width, min, max, value, nineSlice } = this.config;\r\n    // Draw 9-slice background if provided, else fallback\r\n    if (nineSlice) {\r\n      ctx.drawImage(nineSlice, x, y, width, 16);\r\n    } else {\r\n      ctx.save();\r\n      ctx.fillStyle = '#222';\r\n      ctx.strokeStyle = '#00f0ff';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.roundRect(x, y, width, 16, 8);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n    // Draw handle\r\n    const percent = (value - min) / (max - min);\r\n    const handleX = x + percent * width;\r\n    ctx.save();\r\n    ctx.fillStyle = '#b600f9';\r\n    ctx.beginPath();\r\n    ctx.arc(handleX, y + 8, 10, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n\r\n  public handlePointerDown(px: number, py: number) {\r\n    const { x, y, width } = this.config;\r\n    if (py >= y && py <= y + 16 && px >= x && px <= x + width) {\r\n      this.isDragging = true;\r\n      this.updateValueFromPointer(px);\r\n    }\r\n  }\r\n\r\n  public handlePointerMove(px: number, _py: number) {\r\n    if (this.isDragging) {\r\n      this.updateValueFromPointer(px);\r\n    }\r\n  }\r\n\r\n  public handlePointerUp(_px: number, _py: number) {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n      this.config.audioManager.playSound(this.config.soundKey || 'ui_click');\r\n    }\r\n  }\r\n\r\n  private updateValueFromPointer(px: number) {\r\n    const { x, width, min, max, onChange, audioManager } = this.config;\r\n    let percent = (px - x) / width;\r\n    percent = Math.max(0, Math.min(1, percent));\r\n    const newValue = min + percent * (max - min);\r\n    if (newValue !== this.config.value) {\r\n      this.config.value = newValue;\r\n      onChange(newValue);\r\n      audioManager.playSound(this.config.soundKey || 'ui_slide');\r\n    }\r\n  }\r\n\r\n  public setValue(value: number): void {\r\n    this.config.value = Math.max(this.config.min, Math.min(this.config.max, value));\r\n  }\r\n} ","import { Button } from './Button';\r\nimport { Slider } from './Slider';\r\nimport { AudioManager } from '../audio/AudioManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface SettingsMenuConfig {\r\n  audioManager: AudioManager;\r\n  onClose: () => void;\r\n  onBackToMenu?: () => void;\r\n  isFromPauseMenu?: boolean;\r\n}\r\n\r\nexport class SettingsMenu {\r\n  private config: SettingsMenuConfig;\r\n  private isVisible = false;\r\n  private buttons: Button[] = [];\r\n  private sliders: Slider[] = [];\r\n  private masterVolumeSlider!: Slider;\r\n  private musicVolumeSlider!: Slider;\r\n  private sfxVolumeSlider!: Slider;\r\n  private muteButton!: Button;\r\n  private closeButton!: Button;\r\n  private backToMenuButton?: Button;\r\n\r\n  constructor(config: SettingsMenuConfig) {\r\n    this.config = config;\r\n    this.createControls();\r\n  }\r\n\r\n  private createControls(): void {\r\n    const { audioManager, onClose, onBackToMenu, isFromPauseMenu } = this.config;\r\n\r\n    // Volume sliders\r\n    this.masterVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 200,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().masterVolume,\r\n      onChange: (value) => {\r\n        audioManager.setMasterVolume(value);\r\n        logger.debug(`Master volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    this.musicVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 250,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().musicVolume,\r\n      onChange: (value) => {\r\n        audioManager.setMusicVolume(value);\r\n        logger.debug(`Music volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    this.sfxVolumeSlider = new Slider({\r\n      x: 80,\r\n      y: 300,\r\n      width: 200,\r\n      min: 0,\r\n      max: 1,\r\n      value: audioManager.getConfig().sfxVolume,\r\n      onChange: (value) => {\r\n        audioManager.setSFXVolume(value);\r\n        logger.debug(`SFX volume set to: ${value}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_slide',\r\n    });\r\n\r\n    // Mute button\r\n    this.muteButton = new Button({\r\n      x: 80,\r\n      y: 350,\r\n      width: 200,\r\n      height: 40,\r\n      label: audioManager.getConfig().enabled ? 'Mute Audio' : 'Unmute Audio',\r\n      onClick: () => {\r\n        const newEnabled = !audioManager.getConfig().enabled;\r\n        audioManager.setEnabled(newEnabled);\r\n        this.muteButton.setLabel(newEnabled ? 'Mute Audio' : 'Unmute Audio');\r\n        logger.debug(`Audio ${newEnabled ? 'enabled' : 'disabled'}`, null, 'SettingsMenu');\r\n      },\r\n      audioManager,\r\n      soundKey: 'ui_click',\r\n    });\r\n\r\n    // Close button\r\n    this.closeButton = new Button({\r\n      x: 80,\r\n      y: 420,\r\n      width: 200,\r\n      height: 40,\r\n      label: 'Close',\r\n      onClick: onClose,\r\n      audioManager,\r\n      soundKey: 'ui_click',\r\n    });\r\n\r\n    // Back to menu button (only if from pause menu)\r\n    if (isFromPauseMenu && onBackToMenu) {\r\n      this.backToMenuButton = new Button({\r\n        x: 80,\r\n        y: 470,\r\n        width: 200,\r\n        height: 40,\r\n        label: 'Back to Menu',\r\n        onClick: onBackToMenu,\r\n        audioManager,\r\n        soundKey: 'ui_click',\r\n      });\r\n    }\r\n\r\n    // Collect all controls for event handling\r\n    this.sliders = [this.masterVolumeSlider, this.musicVolumeSlider, this.sfxVolumeSlider];\r\n    this.buttons = [this.muteButton, this.closeButton];\r\n    if (this.backToMenuButton) {\r\n      this.buttons.push(this.backToMenuButton);\r\n    }\r\n  }\r\n\r\n  public show(): void {\r\n    this.isVisible = true;\r\n    logger.info('Settings menu opened', null, 'SettingsMenu');\r\n  }\r\n\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    logger.info('Settings menu closed', null, 'SettingsMenu');\r\n  }\r\n\r\n  public isMenuVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Draw semi-transparent background\r\n    ctx.save();\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n    ctx.restore();\r\n\r\n    // Draw menu panel\r\n    ctx.save();\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.strokeStyle = '#00f0ff';\r\n    ctx.lineWidth = 3;\r\n    ctx.beginPath();\r\n    ctx.roundRect(50, 100, 260, 440, 12);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.restore();\r\n\r\n    // Draw title\r\n    ctx.save();\r\n    ctx.fillStyle = '#00f0ff';\r\n    ctx.font = '24px Cyberpunks, monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('SETTINGS', 180, 140);\r\n    ctx.restore();\r\n\r\n    // Draw labels\r\n    ctx.save();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px Interceptor, monospace';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Master Volume:', 80, 190);\r\n    ctx.fillText('Music Volume:', 80, 240);\r\n    ctx.fillText('SFX Volume:', 80, 290);\r\n    ctx.restore();\r\n\r\n    // Draw controls\r\n    this.sliders.forEach(slider => slider.draw(ctx));\r\n    this.buttons.forEach(button => button.draw(ctx));\r\n  }\r\n\r\n  public handlePointerMove(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerMove(x, y));\r\n  }\r\n\r\n  public handlePointerDown(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerDown(x, y));\r\n    this.sliders.forEach(slider => slider.handlePointerDown(x, y));\r\n  }\r\n\r\n  public handlePointerUp(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n    this.buttons.forEach(button => button.handlePointerUp(x, y));\r\n    this.sliders.forEach(slider => slider.handlePointerUp(x, y));\r\n  }\r\n\r\n  public updateVolumeDisplays(): void {\r\n    const config = this.config.audioManager.getConfig();\r\n    this.masterVolumeSlider.setValue(config.masterVolume);\r\n    this.musicVolumeSlider.setValue(config.musicVolume);\r\n    this.sfxVolumeSlider.setValue(config.sfxVolume);\r\n    this.muteButton.setLabel(config.enabled ? 'Mute Audio' : 'Unmute Audio');\r\n  }\r\n\r\n  public get isFromPauseMenu(): boolean {\r\n    return !!this.config.isFromPauseMenu;\r\n  }\r\n} ","// Circuit Breaker - Save/Load Menu Component\r\n// Handles save slot management and game progress display\r\n\r\nimport { SaveSlot, GameProgress } from '../core/StorageManager';\r\nimport { Achievement } from '../core/AchievementManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface SaveLoadMenuConfig {\r\n  onClose: () => void;\r\n  onLoadGame: (slotId: number) => void;\r\n  onNewGame: (slotId: number) => void;\r\n  onDeleteSlot: (slotId: number) => void;\r\n  getSaveSlots: () => SaveSlot[];\r\n  getCurrentProgress: () => GameProgress | null;\r\n  getAchievements: () => Achievement[];\r\n}\r\n\r\nexport class SaveLoadMenu {\r\n  private config: SaveLoadMenuConfig;\r\n  private selectedSlot: number = 0;\r\n  private isConfirmingDelete: boolean = false;\r\n  private deleteSlotId: number = -1;\r\n  private isVisible: boolean = false;\r\n\r\n  // UI state\r\n  private hoveredSlot: number = -1;\r\n  private scrollOffset: number = 0;\r\n  private message: string = '';\r\n  private messageTimer: number = 0;\r\n  private messageType: 'info' | 'success' | 'error' = 'info';\r\n\r\n  constructor(config: SaveLoadMenuConfig) {\r\n    this.config = config;\r\n    logger.info('💾 SaveLoadMenu initialized', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Show the save/load menu\r\n   */\r\n  public show(): void {\r\n    this.isVisible = true;\r\n    this.selectedSlot = 0;\r\n    this.isConfirmingDelete = false;\r\n    this.deleteSlotId = -1;\r\n    this.hoveredSlot = -1;\r\n    this.scrollOffset = 0;\r\n    this.clearMessage();\r\n    logger.info('💾 Save/Load menu opened', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Hide the save/load menu\r\n   */\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    logger.info('💾 Save/Load menu closed', null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Check if menu is visible\r\n   */\r\n  public isMenuVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer move events\r\n   */\r\n  public handlePointerMove(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Check slot hover\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slotEndY = slotStartY + slotHeight;\r\n\r\n      if (y >= slotStartY && y <= slotEndY && x >= 50 && x <= 310) {\r\n        this.hoveredSlot = i;\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.hoveredSlot = -1;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events\r\n   */\r\n  public handlePointerDown(x: number, y: number): void {\r\n    if (!this.isVisible) return;\r\n\r\n    if (this.isConfirmingDelete) {\r\n      this.handleDeleteConfirmationClick(x, y);\r\n      return;\r\n    }\r\n\r\n    // Check slot selection\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slotEndY = slotStartY + slotHeight;\r\n\r\n      if (y >= slotStartY && y <= slotEndY && x >= 50 && x <= 310) {\r\n        this.selectedSlot = i;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Check button clicks\r\n    this.handleButtonClick(x, y);\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events\r\n   */\r\n  public handlePointerUp(_x: number, _y: number): void {\r\n    if (!this.isVisible) return;\r\n  }\r\n\r\n  /**\r\n   * Handle keyboard input\r\n   */\r\n  public handleKeyPress(key: string): boolean {\r\n    if (!this.isVisible) return false;\r\n\r\n    switch (key) {\r\n    case 'Escape':\r\n      if (this.isConfirmingDelete) {\r\n        this.cancelDelete();\r\n      } else {\r\n        this.config.onClose();\r\n      }\r\n      return true;\r\n\r\n    case 'Enter':\r\n      if (this.isConfirmingDelete) {\r\n        this.confirmDelete();\r\n      } else {\r\n        this.loadSelectedSlot();\r\n      }\r\n      return true;\r\n\r\n    case 'KeyN':\r\n      if (!this.isConfirmingDelete) {\r\n        this.newGameInSelectedSlot();\r\n      }\r\n      return true;\r\n\r\n    case 'KeyD':\r\n      if (!this.isConfirmingDelete) {\r\n        this.deleteSelectedSlot();\r\n      }\r\n      return true;\r\n\r\n    case 'ArrowUp':\r\n      this.selectedSlot = Math.max(0, this.selectedSlot - 1);\r\n      return true;\r\n\r\n    case 'ArrowDown':\r\n      this.selectedSlot = Math.min(2, this.selectedSlot + 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Render the save/load menu\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible) return;\r\n\r\n    // Semi-transparent background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Menu background\r\n    ctx.fillStyle = '#1a1a2e';\r\n    ctx.fillRect(20, 50, 320, 540);\r\n\r\n    // Title\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '24px \"Cyberpunks\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('SAVE/LOAD GAME', 180, 90);\r\n\r\n    if (this.isConfirmingDelete) {\r\n      this.renderDeleteConfirmation(ctx);\r\n    } else {\r\n      this.renderSaveSlots(ctx);\r\n      this.renderButtons(ctx);\r\n      this.renderProgressInfo(ctx);\r\n      this.renderMessage(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render save slots\r\n   */\r\n  private renderSaveSlots(ctx: CanvasRenderingContext2D): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slotY = this.getSlotYPosition();\r\n    const slotHeight = 80;\r\n    const startY = 150 + slotY;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const slotStartY = startY + (i * (slotHeight + 10));\r\n      const slot = slots.find(s => s.id === i);\r\n      const isSelected = this.selectedSlot === i;\r\n      const isHovered = this.hoveredSlot === i;\r\n\r\n      // Slot background\r\n      if (isSelected) {\r\n        ctx.fillStyle = '#4a90e2';\r\n      } else if (isHovered) {\r\n        ctx.fillStyle = '#2a2a4e';\r\n      } else {\r\n        ctx.fillStyle = '#2a2a3e';\r\n      }\r\n      ctx.fillRect(50, slotStartY, 260, slotHeight);\r\n\r\n      // Slot border\r\n      ctx.strokeStyle = isSelected ? '#ffffff' : '#444444';\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeRect(50, slotStartY, 260, slotHeight);\r\n\r\n      if (slot) {\r\n        // Slot has data\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.font = '16px \"Interceptor\"';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText(`Save ${i + 1}`, 70, slotStartY + 25);\r\n\r\n        // Level and score info\r\n        ctx.fillStyle = '#cccccc';\r\n        ctx.font = '14px \"Interceptor\"';\r\n        ctx.fillText(`Level: ${slot.progress.currentLevel}`, 70, slotStartY + 45);\r\n        ctx.fillText(`Score: ${slot.progress.totalScore.toLocaleString()}`, 70, slotStartY + 65);\r\n\r\n        // Last played date\r\n        const date = new Date(slot.lastPlayed);\r\n        ctx.fillStyle = '#888888';\r\n        ctx.font = '12px \"Interceptor\"';\r\n        ctx.fillText(date.toLocaleDateString(), 200, slotStartY + 25);\r\n        ctx.fillText(date.toLocaleTimeString(), 200, slotStartY + 45);\r\n      } else {\r\n        // Empty slot\r\n        ctx.fillStyle = '#666666';\r\n        ctx.font = '16px \"Interceptor\"';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('Empty Slot', 180, slotStartY + 45);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render action buttons\r\n   */\r\n  private renderButtons(ctx: CanvasRenderingContext2D): void {\r\n    const buttonY = 450;\r\n    const buttonHeight = 40;\r\n    const buttonWidth = 80;\r\n\r\n    // Load button\r\n    ctx.fillStyle = '#4a90e2';\r\n    ctx.fillRect(60, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('LOAD', 100, buttonY + 25);\r\n\r\n    // New Game button\r\n    ctx.fillStyle = '#50c878';\r\n    ctx.fillRect(150, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('NEW', 190, buttonY + 25);\r\n\r\n    // Delete button\r\n    ctx.fillStyle = '#e74c3c';\r\n    ctx.fillRect(240, buttonY, buttonWidth, buttonHeight);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('DELETE', 280, buttonY + 25);\r\n\r\n    // Instructions\r\n    ctx.fillStyle = '#888888';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Use arrow keys to navigate, Enter to select', 180, buttonY + 70);\r\n    ctx.fillText('ESC to close', 180, buttonY + 85);\r\n  }\r\n\r\n  /**\r\n   * Render progress information\r\n   */\r\n  private renderProgressInfo(ctx: CanvasRenderingContext2D): void {\r\n    const currentProgress = this.config.getCurrentProgress();\r\n    if (!currentProgress) return;\r\n\r\n    const infoY = 550;\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'left';\r\n\r\n    // Progress stats\r\n    ctx.fillText(`Total Play Time: ${this.formatPlayTime(currentProgress.playTime)}`, 60, infoY);\r\n    ctx.fillText(`Games Played: ${currentProgress.gamesPlayed}`, 60, infoY + 20);\r\n    ctx.fillText(`Goals Reached: ${currentProgress.totalGoalsReached}`, 60, infoY + 40);\r\n    ctx.fillText(`Balls Lost: ${currentProgress.totalBallsLost}`, 60, infoY + 60);\r\n\r\n    // Achievement progress\r\n    const achievements = this.config.getAchievements();\r\n    const unlockedCount = achievements.filter(a => a.unlocked).length;\r\n    ctx.fillText(`Achievements: ${unlockedCount}/${achievements.length}`, 200, infoY);\r\n  }\r\n\r\n  /**\r\n   * Render delete confirmation dialog\r\n   */\r\n  private renderDeleteConfirmation(ctx: CanvasRenderingContext2D): void {\r\n    // Confirmation background\r\n    ctx.fillStyle = '#2a2a3e';\r\n    ctx.fillRect(80, 200, 200, 150);\r\n\r\n    // Border\r\n    ctx.strokeStyle = '#e74c3c';\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(80, 200, 200, 150);\r\n\r\n    // Warning text\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('DELETE SAVE SLOT?', 180, 230);\r\n    ctx.fillText(`Save ${this.deleteSlotId + 1}`, 180, 250);\r\n\r\n    ctx.fillStyle = '#ff6b6b';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.fillText('This action cannot be undone!', 180, 270);\r\n\r\n    // Buttons\r\n    ctx.fillStyle = '#e74c3c';\r\n    ctx.fillRect(100, 280, 60, 30);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.fillText('YES', 130, 300);\r\n\r\n    ctx.fillStyle = '#4a90e2';\r\n    ctx.fillRect(200, 280, 60, 30);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.fillText('NO', 230, 300);\r\n  }\r\n\r\n  /**\r\n   * Handle button clicks\r\n   */\r\n  private handleButtonClick(x: number, y: number): void {\r\n    const buttonY = 450;\r\n    const buttonHeight = 40;\r\n    const buttonWidth = 80;\r\n\r\n    if (y >= buttonY && y <= buttonY + buttonHeight) {\r\n      // Load button\r\n      if (x >= 60 && x <= 60 + buttonWidth) {\r\n        this.loadSelectedSlot();\r\n      }\r\n      // New Game button\r\n      else if (x >= 150 && x <= 150 + buttonWidth) {\r\n        this.newGameInSelectedSlot();\r\n      }\r\n      // Delete button\r\n      else if (x >= 240 && x <= 240 + buttonWidth) {\r\n        this.deleteSelectedSlot();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle delete confirmation clicks\r\n   */\r\n  private handleDeleteConfirmationClick(x: number, y: number): void {\r\n    // Yes button\r\n    if (x >= 100 && x <= 160 && y >= 280 && y <= 310) {\r\n      this.confirmDelete();\r\n    }\r\n    // No button\r\n    else if (x >= 200 && x <= 260 && y >= 280 && y <= 310) {\r\n      this.cancelDelete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load the selected save slot\r\n   */\r\n  private loadSelectedSlot(): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slot = slots.find(s => s.id === this.selectedSlot);\r\n    \r\n    if (slot) {\r\n      logger.info(`📂 Loading save slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage(`Loading save slot ${this.selectedSlot + 1}...`, 'info', 1000);\r\n      setTimeout(() => {\r\n        this.config.onLoadGame(this.selectedSlot);\r\n        this.hide();\r\n      }, 1000);\r\n    } else {\r\n      logger.warn(`⚠️ No save data in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage('No save data in this slot', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new game in the selected slot\r\n   */\r\n  private newGameInSelectedSlot(): void {\r\n    logger.info(`🆕 Starting new game in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n    this.showMessage(`Starting new game in slot ${this.selectedSlot + 1}...`, 'success', 1000);\r\n    setTimeout(() => {\r\n      this.config.onNewGame(this.selectedSlot);\r\n      this.hide();\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * Delete the selected save slot\r\n   */\r\n  private deleteSelectedSlot(): void {\r\n    const slots = this.config.getSaveSlots();\r\n    const slot = slots.find(s => s.id === this.selectedSlot);\r\n    \r\n    if (slot) {\r\n      this.isConfirmingDelete = true;\r\n      this.deleteSlotId = this.selectedSlot;\r\n      logger.info(`🗑️ Confirming deletion of save slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n    } else {\r\n      logger.warn(`⚠️ No save data to delete in slot ${this.selectedSlot}`, null, 'SaveLoadMenu');\r\n      this.showMessage('No save data to delete', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirm slot deletion\r\n   */\r\n  private confirmDelete(): void {\r\n    logger.info(`🗑️ Deleting save slot ${this.deleteSlotId}`, null, 'SaveLoadMenu');\r\n    this.config.onDeleteSlot(this.deleteSlotId);\r\n    this.showMessage(`Save slot ${this.deleteSlotId + 1} deleted`, 'success');\r\n    this.cancelDelete();\r\n  }\r\n\r\n  /**\r\n   * Cancel slot deletion\r\n   */\r\n  private cancelDelete(): void {\r\n    this.isConfirmingDelete = false;\r\n    this.deleteSlotId = -1;\r\n  }\r\n\r\n  /**\r\n   * Get slot Y position with scroll offset\r\n   */\r\n  private getSlotYPosition(): number {\r\n    return this.scrollOffset;\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show a message to the user\r\n   */\r\n  private showMessage(text: string, type: 'info' | 'success' | 'error' = 'info', duration: number = 3000): void {\r\n    this.message = text;\r\n    this.messageType = type;\r\n    this.messageTimer = Date.now() + duration;\r\n    logger.info(`💾 Save/Load Menu: ${text}`, null, 'SaveLoadMenu');\r\n  }\r\n\r\n  /**\r\n   * Clear the current message\r\n   */\r\n  private clearMessage(): void {\r\n    this.message = '';\r\n    this.messageTimer = 0;\r\n  }\r\n\r\n  /**\r\n   * Update message timer\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    if (this.message && this.messageTimer > 0 && Date.now() > this.messageTimer) {\r\n      this.clearMessage();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render message overlay\r\n   */\r\n  private renderMessage(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.message) return;\r\n\r\n    // Message background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n    ctx.fillRect(60, 400, 240, 40);\r\n\r\n    // Message border\r\n    const borderColor = this.messageType === 'error' ? '#e74c3c' : \r\n      this.messageType === 'success' ? '#50c878' : '#4a90e2';\r\n    ctx.strokeStyle = borderColor;\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeRect(60, 400, 240, 40);\r\n\r\n    // Message text\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '14px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(this.message, 180, 425);\r\n  }\r\n} ","// Circuit Breaker - Achievement Notification Component\r\n// Shows popup notifications when achievements are unlocked\r\n\r\nimport { Achievement } from '../core/AchievementManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface AchievementNotificationConfig {\r\n  onComplete: () => void;\r\n}\r\n\r\nexport class AchievementNotification {\r\n  private config: AchievementNotificationConfig;\r\n  private achievement: Achievement | null = null;\r\n  private isVisible: boolean = false;\r\n  private startTime: number = 0;\r\n  private animationPhase: 'slideIn' | 'show' | 'slideOut' = 'slideIn';\r\n  private slideInDuration: number = 500;\r\n  private slideOutDuration: number = 500;\r\n  private showDuration: number = 3000;\r\n\r\n  constructor(config: AchievementNotificationConfig) {\r\n    this.config = config;\r\n    logger.info('🏆 AchievementNotification initialized', null, 'AchievementNotification');\r\n  }\r\n\r\n  /**\r\n   * Show an achievement notification\r\n   */\r\n  public show(achievement: Achievement): void {\r\n    this.achievement = achievement;\r\n    this.isVisible = true;\r\n    this.startTime = Date.now();\r\n    this.animationPhase = 'slideIn';\r\n    logger.info(`🏆 Showing achievement notification: ${achievement.name}`, null, 'AchievementNotification');\r\n  }\r\n\r\n  /**\r\n   * Hide the notification\r\n   */\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    this.achievement = null;\r\n    this.animationPhase = 'slideIn';\r\n  }\r\n\r\n  /**\r\n   * Check if notification is visible\r\n   */\r\n  public isNotificationVisible(): boolean {\r\n    return this.isVisible;\r\n  }\r\n\r\n  /**\r\n   * Update notification animation\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    if (!this.isVisible || !this.achievement) return;\r\n\r\n    const elapsed = Date.now() - this.startTime;\r\n\r\n    // Handle animation phases\r\n    if (this.animationPhase === 'slideIn' && elapsed >= this.slideInDuration) {\r\n      this.animationPhase = 'show';\r\n      this.startTime = Date.now();\r\n    } else if (this.animationPhase === 'show' && elapsed >= this.showDuration) {\r\n      this.animationPhase = 'slideOut';\r\n      this.startTime = Date.now();\r\n    } else if (this.animationPhase === 'slideOut' && elapsed >= this.slideOutDuration) {\r\n      this.hide();\r\n      this.config.onComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the achievement notification\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible || !this.achievement) return;\r\n\r\n    const elapsed = Date.now() - this.startTime;\r\n    let progress = 0;\r\n    let yOffset = 0;\r\n\r\n    // Calculate animation progress and position\r\n    switch (this.animationPhase) {\r\n    case 'slideIn':\r\n      progress = Math.min(elapsed / this.slideInDuration, 1);\r\n      yOffset = (1 - progress) * 100; // Slide down from above\r\n      break;\r\n    case 'show':\r\n      progress = 1;\r\n      yOffset = 0;\r\n      break;\r\n    case 'slideOut':\r\n      progress = Math.min(elapsed / this.slideOutDuration, 1);\r\n      yOffset = progress * 100; // Slide up and out\r\n      break;\r\n    }\r\n\r\n    // Apply easing\r\n    const easeProgress = this.easeOutBack(progress);\r\n\r\n    // Notification position (top-right corner)\r\n    const notificationWidth = 300;\r\n    const notificationHeight = 80;\r\n    const x = 360 - notificationWidth - 20 + (1 - easeProgress) * notificationWidth;\r\n    const y = 20 + yOffset;\r\n\r\n    // Background with gradient\r\n    const gradient = ctx.createLinearGradient(x, y, x, y + notificationHeight);\r\n    gradient.addColorStop(0, '#2a2a3e');\r\n    gradient.addColorStop(1, '#1a1a2e');\r\n    \r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(x, y, notificationWidth, notificationHeight);\r\n\r\n    // Border with rarity color\r\n    const rarityColors = {\r\n      common: '#cccccc',\r\n      rare: '#4a90e2',\r\n      epic: '#9b59b6',\r\n      legendary: '#f39c12',\r\n    };\r\n    \r\n    ctx.strokeStyle = rarityColors[this.achievement.rarity] || '#cccccc';\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(x, y, notificationWidth, notificationHeight);\r\n\r\n    // Achievement icon\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '24px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(this.achievement.icon, x + 30, y + 45);\r\n\r\n    // Achievement name\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '16px \"Interceptor\"';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(this.achievement.name, x + 60, y + 30);\r\n\r\n    // Achievement description\r\n    ctx.fillStyle = '#cccccc';\r\n    ctx.font = '12px \"Interceptor\"';\r\n    ctx.fillText(this.achievement.description, x + 60, y + 50);\r\n\r\n    // Rarity badge\r\n    const rarityText = this.achievement.rarity.toUpperCase();\r\n    ctx.fillStyle = rarityColors[this.achievement.rarity] || '#cccccc';\r\n    ctx.font = '10px \"Interceptor\"';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(rarityText, x + notificationWidth - 40, y + 25);\r\n\r\n    // Progress bar for progress-based achievements\r\n    if (this.achievement.maxProgress && this.achievement.progress !== undefined) {\r\n      const progressBarWidth = 80;\r\n      const progressBarHeight = 6;\r\n      const progressBarX = x + notificationWidth - progressBarWidth - 20;\r\n      const progressBarY = y + notificationHeight - 20;\r\n\r\n      // Background\r\n      ctx.fillStyle = '#444444';\r\n      ctx.fillRect(progressBarX, progressBarY, progressBarWidth, progressBarHeight);\r\n\r\n      // Progress\r\n      const progressPercent = this.achievement.progress / this.achievement.maxProgress;\r\n      ctx.fillStyle = rarityColors[this.achievement.rarity] || '#4a90e2';\r\n      ctx.fillRect(progressBarX, progressBarY, progressBarWidth * progressPercent, progressBarHeight);\r\n\r\n      // Progress text\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.font = '10px \"Interceptor\"';\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(\r\n        `${this.achievement.progress}/${this.achievement.maxProgress}`,\r\n        progressBarX + progressBarWidth / 2,\r\n        progressBarY - 5,\r\n      );\r\n    }\r\n\r\n    // Sparkle effect for legendary achievements\r\n    if (this.achievement.rarity === 'legendary') {\r\n      this.renderSparkles(ctx, x, y, notificationWidth, notificationHeight, elapsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render sparkle effects for legendary achievements\r\n   */\r\n  private renderSparkles(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, elapsed: number): void {\r\n    const sparkleCount = 8;\r\n    const sparkleSize = 2;\r\n    \r\n    for (let i = 0; i < sparkleCount; i++) {\r\n      const angle = (elapsed * 0.001 + i * Math.PI * 2 / sparkleCount) % (Math.PI * 2);\r\n      const radius = 30 + Math.sin(elapsed * 0.002 + i) * 10;\r\n      const sparkleX = x + width / 2 + Math.cos(angle) * radius;\r\n      const sparkleY = y + height / 2 + Math.sin(angle) * radius;\r\n      \r\n      const alpha = 0.5 + 0.5 * Math.sin(elapsed * 0.003 + i);\r\n      ctx.fillStyle = `rgba(255, 215, 0, ${alpha})`;\r\n      ctx.fillRect(sparkleX - sparkleSize / 2, sparkleY - sparkleSize / 2, sparkleSize, sparkleSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Easing function for smooth animations\r\n   */\r\n  private easeOutBack(t: number): number {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n    return 1 + c3 * Math.pow(t - 1, 3) + c1 * Math.pow(t - 1, 2);\r\n  }\r\n} ","// Circuit Breaker - Stats Menu Component\r\n// Displays comprehensive game statistics and analytics\r\n\r\nimport { StatsManager } from '../core/StatsManager';\r\nimport { fontManager } from '../utils/FontManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface StatsMenuConfig {\r\n  onClose: () => void;\r\n  statsManager: StatsManager;\r\n}\r\n\r\nexport class StatsMenu {\r\n  private config: StatsMenuConfig;\r\n  private currentTab: 'overview' | 'levels' | 'performance' | 'sessions' = 'overview';\r\n  private scrollOffset: number = 0;\r\n  private readonly TAB_HEIGHT = 40;\r\n  private readonly SCROLL_SPEED = 20;\r\n\r\n  constructor(config: StatsMenuConfig) {\r\n    this.config = config;\r\n    logger.info('📊 StatsMenu initialized', null, 'StatsMenu');\r\n  }\r\n\r\n  /**\r\n   * Render the stats menu\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!ctx) return;\r\n\r\n    // Draw background overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw main container\r\n    this.drawContainer(ctx);\r\n    \r\n    // Draw header\r\n    this.drawHeader(ctx);\r\n    \r\n    // Draw tabs\r\n    this.drawTabs(ctx);\r\n    \r\n    // Draw content based on current tab\r\n    this.drawContent(ctx);\r\n    \r\n    // Draw footer\r\n    this.drawFooter(ctx);\r\n  }\r\n\r\n  /**\r\n   * Handle input\r\n   */\r\n  public handleInput(key: string): void {\r\n    switch (key) {\r\n    case 'Escape':\r\n      this.config.onClose();\r\n      break;\r\n    case 'Digit1':\r\n    case '1':\r\n      this.currentTab = 'overview';\r\n      break;\r\n    case 'Digit2':\r\n    case '2':\r\n      this.currentTab = 'levels';\r\n      break;\r\n    case 'Digit3':\r\n    case '3':\r\n      this.currentTab = 'performance';\r\n      break;\r\n    case 'Digit4':\r\n    case '4':\r\n      this.currentTab = 'sessions';\r\n      break;\r\n    case 'ArrowUp':\r\n      this.scrollOffset = Math.max(0, this.scrollOffset - this.SCROLL_SPEED);\r\n      break;\r\n    case 'ArrowDown':\r\n      this.scrollOffset += this.SCROLL_SPEED;\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw main container\r\n   */\r\n  private drawContainer(ctx: CanvasRenderingContext2D): void {\r\n    const containerWidth = 340;\r\n    const containerHeight = 580;\r\n    const containerX = (360 - containerWidth) / 2;\r\n    const containerY = 30;\r\n\r\n    // Draw container background\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.fillRect(containerX, containerY, containerWidth, containerHeight);\r\n\r\n    // Draw neon border\r\n    ctx.strokeStyle = '#b600f9';\r\n    ctx.lineWidth = 2;\r\n    ctx.shadowColor = '#b600f9';\r\n    ctx.shadowBlur = 10;\r\n    ctx.strokeRect(containerX, containerY, containerWidth, containerHeight);\r\n    ctx.shadowBlur = 0;\r\n  }\r\n\r\n  /**\r\n   * Draw header\r\n   */\r\n  private drawHeader(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'display', 20, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('GAME STATISTICS', Math.round(180), Math.round(60));\r\n\r\n    // Draw subtitle\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.fillText('ANALYTICS & PERFORMANCE DATA', Math.round(180), Math.round(75));\r\n  }\r\n\r\n  /**\r\n   * Draw tabs\r\n   */\r\n  private drawTabs(ctx: CanvasRenderingContext2D): void {\r\n    const tabs = [\r\n      { key: 'overview', label: 'OVERVIEW', number: '1' },\r\n      { key: 'levels', label: 'LEVELS', number: '2' },\r\n      { key: 'performance', label: 'PERFORMANCE', number: '3' },\r\n      { key: 'sessions', label: 'SESSIONS', number: '4' },\r\n    ];\r\n\r\n    const tabWidth = 85;\r\n    const tabY = 90;\r\n\r\n    tabs.forEach((tab, index) => {\r\n      const tabX = 10 + index * tabWidth;\r\n      const isActive = this.currentTab === tab.key;\r\n\r\n      // Draw tab background\r\n      ctx.fillStyle = isActive ? '#b600f9' : '#333333';\r\n      ctx.fillRect(Math.round(tabX), Math.round(tabY), tabWidth - 2, this.TAB_HEIGHT);\r\n\r\n      // Draw tab border\r\n      ctx.strokeStyle = isActive ? '#ffffff' : '#666666';\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeRect(Math.round(tabX), Math.round(tabY), tabWidth - 2, this.TAB_HEIGHT);\r\n\r\n      // Draw tab text\r\n      ctx.fillStyle = isActive ? '#ffffff' : '#cccccc';\r\n      fontManager.setFont(ctx, 'primary', 8, 'bold');\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(tab.label, Math.round(tabX + (tabWidth - 2) / 2), Math.round(tabY + 15));\r\n      ctx.fillText(`[${tab.number}]`, Math.round(tabX + (tabWidth - 2) / 2), Math.round(tabY + 28));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draw content based on current tab\r\n   */\r\n  private drawContent(ctx: CanvasRenderingContext2D): void {\r\n    const contentY = 155;\r\n    const contentHeight = 405;\r\n\r\n    // Set up clipping for scrollable content\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(10, contentY, 340, contentHeight);\r\n    ctx.clip();\r\n\r\n    // Apply scroll offset\r\n    ctx.translate(0, -this.scrollOffset);\r\n\r\n    switch (this.currentTab) {\r\n    case 'overview':\r\n      this.drawOverviewContent(ctx, contentY);\r\n      break;\r\n    case 'levels':\r\n      this.drawLevelsContent(ctx, contentY);\r\n      break;\r\n    case 'performance':\r\n      this.drawPerformanceContent(ctx, contentY);\r\n      break;\r\n    case 'sessions':\r\n      this.drawSessionsContent(ctx, contentY);\r\n      break;\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Draw overview content\r\n   */\r\n  private drawOverviewContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    const summary = this.config.statsManager.getStatsSummary();\r\n\r\n    let y = startY;\r\n\r\n    // Draw summary stats\r\n    this.drawStatRow(ctx, 'TOTAL PLAY TIME', summary.totalPlayTime, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'GAMES PLAYED', summary.gamesPlayed.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'COMPLETION RATE', summary.completionRate, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'AVERAGE SCORE', summary.averageScore.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'FAVORITE LEVEL', `Level ${summary.favoriteLevel}`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MOST CHALLENGING', `Level ${summary.mostChallengingLevel}`, y);\r\n    y += 35;\r\n\r\n    // Draw achievement progress\r\n    this.drawProgressBar(ctx, 'ACHIEVEMENT PROGRESS', stats.achievementProgress, y);\r\n    y += 30;\r\n    this.drawStatRow(ctx, 'ACHIEVEMENTS UNLOCKED', `${stats.achievementsUnlocked}/${stats.totalAchievements}`, y);\r\n    y += 35;\r\n\r\n    // Draw high scores\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('HIGH SCORES & RECORDS', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'HIGHEST SCORE', stats.highestScore.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'HIGHEST LEVEL', stats.highestLevel.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LONGEST SESSION', this.formatPlayTime(stats.longestSession), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'FASTEST COMPLETION', this.formatPlayTime(stats.fastestLevelCompletion), y);\r\n  }\r\n\r\n  /**\r\n   * Draw levels content\r\n   */\r\n  private drawLevelsContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('LEVEL STATISTICS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // Draw level headers\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('LEVEL', Math.round(20), Math.round(y));\r\n    ctx.fillText('ATTEMPTS', Math.round(80), Math.round(y));\r\n    ctx.fillText('COMPLETIONS', Math.round(140), Math.round(y));\r\n    ctx.fillText('RATE', Math.round(200), Math.round(y));\r\n    ctx.fillText('BEST TIME', Math.round(250), Math.round(y));\r\n    ctx.fillText('BEST SCORE', Math.round(320), Math.round(y));\r\n    y += 20;\r\n\r\n    // Draw level data\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 9);\r\n\r\n    for (const [levelId, levelStats] of stats.levelStats) {\r\n      if (y - startY > 400) break; // Limit visible levels\r\n\r\n      ctx.fillText(`Level ${levelId}`, Math.round(20), Math.round(y));\r\n      ctx.fillText(levelStats.attempts.toString(), Math.round(80), Math.round(y));\r\n      ctx.fillText(levelStats.completions.toString(), Math.round(140), Math.round(y));\r\n      ctx.fillText(`${levelStats.completionRate.toFixed(1)}%`, Math.round(200), Math.round(y));\r\n      ctx.fillText(this.formatPlayTime(levelStats.bestTime), Math.round(250), Math.round(y));\r\n      ctx.fillText(levelStats.bestScore.toString(), Math.round(320), Math.round(y));\r\n      y += 18;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw performance content\r\n   */\r\n  private drawPerformanceContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const performance = this.config.statsManager.getPerformanceStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('PERFORMANCE METRICS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // FPS stats\r\n    this.drawStatRow(ctx, 'AVERAGE FPS', `${performance.averageFPS.toFixed(1)}`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MIN FPS', performance.minFPS.toString(), y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'MAX FPS', performance.maxFPS.toString(), y);\r\n    y += 35;\r\n\r\n    // Load times\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('LOAD TIMES', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'GAME START', `${performance.loadTimes.gameStart}ms`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LEVEL LOAD', `${performance.loadTimes.levelLoad}ms`, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'ASSET LOAD', `${performance.loadTimes.assetLoad}ms`, y);\r\n    y += 35;\r\n\r\n    // Device info\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.fillText('DEVICE INFORMATION', Math.round(20), Math.round(y));\r\n    y += 20;\r\n\r\n    this.drawStatRow(ctx, 'PLATFORM', performance.deviceInfo.platform, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'RESOLUTION', performance.deviceInfo.screenResolution, y);\r\n    y += 25;\r\n    this.drawStatRow(ctx, 'LANGUAGE', performance.deviceInfo.language, y);\r\n    y += 25;\r\n\r\n    // User agent (truncated)\r\n    const userAgent = performance.deviceInfo.userAgent.length > 30 \r\n      ? performance.deviceInfo.userAgent.substring(0, 30) + '...'\r\n      : performance.deviceInfo.userAgent;\r\n    this.drawStatRow(ctx, 'BROWSER', userAgent, y);\r\n  }\r\n\r\n  /**\r\n   * Draw sessions content\r\n   */\r\n  private drawSessionsContent(ctx: CanvasRenderingContext2D, startY: number): void {\r\n    const stats = this.config.statsManager.getStats();\r\n    let y = startY + 15; // Add padding below tabs\r\n\r\n    ctx.fillStyle = '#00ff99';\r\n    fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('RECENT SESSIONS', Math.round(20), Math.round(y));\r\n    y += 25;\r\n\r\n    // Session headers\r\n    ctx.fillStyle = '#b600f9';\r\n    fontManager.setFont(ctx, 'primary', 9, 'bold');\r\n    ctx.fillText('DURATION', Math.round(20), Math.round(y));\r\n    ctx.fillText('GOALS', Math.round(80), Math.round(y));\r\n    ctx.fillText('BALLS LOST', Math.round(120), Math.round(y));\r\n    ctx.fillText('SCORE', Math.round(180), Math.round(y));\r\n    ctx.fillText('STATUS', Math.round(240), Math.round(y));\r\n    y += 15;\r\n\r\n    // Session data\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 8);\r\n\r\n    for (const session of stats.recentSessions) {\r\n      if (y - startY > 400) break; // Limit visible sessions\r\n\r\n      const duration = this.formatPlayTime(session.duration);\r\n      const status = session.completed ? 'COMPLETE' : 'INCOMPLETE';\r\n      const statusColor = session.completed ? '#00ff99' : '#ff6666';\r\n\r\n      ctx.fillText(duration, Math.round(20), Math.round(y));\r\n      ctx.fillText(session.goalsReached.toString(), Math.round(80), Math.round(y));\r\n      ctx.fillText(session.ballsLost.toString(), Math.round(120), Math.round(y));\r\n      ctx.fillText(session.score.toString(), Math.round(180), Math.round(y));\r\n      \r\n      ctx.fillStyle = statusColor;\r\n      ctx.fillText(status, Math.round(240), Math.round(y));\r\n      ctx.fillStyle = '#ffffff';\r\n      \r\n      y += 16;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a stat row\r\n   */\r\n  private drawStatRow(ctx: CanvasRenderingContext2D, label: string, value: string, y: number): void {\r\n    ctx.fillStyle = '#cccccc';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(label, Math.round(20), Math.round(y));\r\n\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(value, Math.round(330), Math.round(y));\r\n  }\r\n\r\n  /**\r\n   * Draw a progress bar\r\n   */\r\n  private drawProgressBar(ctx: CanvasRenderingContext2D, label: string, percentage: number, y: number): void {\r\n    // Draw label\r\n    ctx.fillStyle = '#cccccc';\r\n    fontManager.setFont(ctx, 'primary', 10);\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(label, Math.round(20), Math.round(y));\r\n\r\n    // Draw percentage\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(`${percentage.toFixed(1)}%`, Math.round(330), Math.round(y));\r\n\r\n    y += 15;\r\n\r\n    // Draw progress bar background\r\n    ctx.fillStyle = '#333333';\r\n    ctx.fillRect(Math.round(20), Math.round(y), 300, 8);\r\n\r\n    // Draw progress bar fill\r\n    const fillWidth = (percentage / 100) * 300;\r\n    ctx.fillStyle = '#00ff99';\r\n    ctx.fillRect(Math.round(20), Math.round(y), fillWidth, 8);\r\n\r\n    // Draw progress bar border\r\n    ctx.strokeStyle = '#666666';\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(Math.round(20), Math.round(y), 300, 8);\r\n  }\r\n\r\n  /**\r\n   * Draw footer\r\n   */\r\n  private drawFooter(ctx: CanvasRenderingContext2D): void {\r\n    const footerY = 580;\r\n\r\n    // Draw instructions\r\n    ctx.fillStyle = '#888888';\r\n    fontManager.setFont(ctx, 'primary', 9);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('1-4: Switch tabs | ↑↓: Scroll | ESC: Close', Math.round(180), Math.round(footerY));\r\n\r\n    // Draw last updated\r\n    const stats = this.config.statsManager.getStats();\r\n    const lastUpdated = new Date(stats.lastUpdated).toLocaleString();\r\n    ctx.fillText(`Last updated: ${lastUpdated}`, Math.round(180), Math.round(footerY + 15));\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    if (ms === 0) return 'N/A';\r\n    \r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((ms % (1000 * 60)) / 1000);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else if (minutes > 0) {\r\n      return `${minutes}m ${seconds}s`;\r\n    } else {\r\n      return `${seconds}s`;\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Win Screen Component\r\n// Displays unified scoring breakdown and level completion information\r\n\r\nimport { fontManager } from '../utils/FontManager';\r\nimport { logger } from '../utils/Logger';\r\nimport { LevelScoreData } from '../core/UnifiedScoringSystem';\r\n\r\nexport interface WinScreenConfig {\r\n  onContinue: () => void;\r\n  levelTime: number; // milliseconds (for compatibility)\r\n  sessionTotal: number; // milliseconds (for compatibility)\r\n  levelId: number;\r\n  score: number; // Level points from unified scoring system\r\n  levelScoreData?: LevelScoreData; // New unified scoring data\r\n  totalScore?: number; // Total score across all levels\r\n}\r\n\r\nexport class WinScreen {\r\n  private config: WinScreenConfig;\r\n  private animationTime: number = 0;\r\n\r\n  constructor(config: WinScreenConfig) {\r\n    this.config = config;\r\n    logger.info(`🏆 WinScreen initialized for Level ${config.levelId}`, null, 'WinScreen');\r\n  }\r\n\r\n  /**\r\n   * Update the win screen animation\r\n   */\r\n  public update(deltaTime: number): void {\r\n    this.animationTime += deltaTime;\r\n    \r\n    // No auto-advance - wait for player input only\r\n  }\r\n\r\n  /**\r\n   * Render the win screen\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!ctx) return;\r\n\r\n    // Draw background overlay with fade-in\r\n    const backgroundAlpha = Math.min(this.animationTime / 500, 0.95); // Fade in over 500ms\r\n    ctx.fillStyle = `rgba(0, 0, 0, ${backgroundAlpha})`;\r\n    ctx.fillRect(0, 0, 360, 640);\r\n\r\n    // Draw main container\r\n    this.drawContainer(ctx);\r\n    \r\n    // Draw header\r\n    this.drawHeader(ctx);\r\n    \r\n    // Draw level info\r\n    this.drawLevelInfo(ctx);\r\n    \r\n    // Draw timing information\r\n    this.drawTimingInfo(ctx);\r\n    \r\n    // Draw continue prompt\r\n    this.drawContinuePrompt(ctx);\r\n  }\r\n\r\n  /**\r\n   * Handle input\r\n   */\r\n  public handleInput(key: string): void {\r\n    // Any key continues (ignore empty keys)\r\n    if (key && key.trim() !== '') {\r\n      this.config.onContinue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw main container\r\n   */\r\n  private drawContainer(ctx: CanvasRenderingContext2D): void {\r\n    const containerWidth = 320;\r\n    const containerHeight = 400;\r\n    const containerX = (360 - containerWidth) / 2;\r\n    const containerY = (640 - containerHeight) / 2;\r\n\r\n    // Container slide-in animation\r\n    const slideProgress = Math.min(this.animationTime / 800, 1); // Slide in over 800ms\r\n    const slideOffset = (1 - this.easeOutCubic(slideProgress)) * 50;\r\n    const actualY = containerY + slideOffset;\r\n\r\n    // Draw container background\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.fillRect(containerX, actualY, containerWidth, containerHeight);\r\n\r\n    // Draw neon border with glow\r\n    ctx.strokeStyle = '#00f0ff'; // Electric Blue\r\n    ctx.lineWidth = 3;\r\n    ctx.shadowColor = '#00f0ff';\r\n    ctx.shadowBlur = 15;\r\n    ctx.strokeRect(containerX, actualY, containerWidth, containerHeight);\r\n    ctx.shadowBlur = 0;\r\n\r\n    // Draw inner border\r\n    ctx.strokeStyle = '#b600f9'; // Neon Purple\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(containerX + 5, actualY + 5, containerWidth - 10, containerHeight - 10);\r\n  }\r\n\r\n  /**\r\n   * Draw header\r\n   */\r\n  private drawHeader(ctx: CanvasRenderingContext2D): void {\r\n    const containerY = (640 - 400) / 2;\r\n    const slideProgress = Math.min(this.animationTime / 800, 1);\r\n    const slideOffset = (1 - this.easeOutCubic(slideProgress)) * 50;\r\n    const headerY = containerY + slideOffset + 40;\r\n\r\n    // Level completed text\r\n    ctx.fillStyle = '#00f0ff';\r\n    fontManager.setFont(ctx, 'display', 24, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('LEVEL COMPLETED', 180, headerY);\r\n\r\n    // Success indicator\r\n    ctx.fillStyle = '#00ff00';\r\n    fontManager.setFont(ctx, 'primary', 12);\r\n    ctx.fillText('✓ ALL GOALS REACHED', 180, headerY + 25);\r\n  }\r\n\r\n  /**\r\n   * Draw level information with unified scoring\r\n   */\r\n  private drawLevelInfo(ctx: CanvasRenderingContext2D): void {\r\n    const containerY = (640 - 400) / 2;\r\n    const slideProgress = Math.min(this.animationTime / 800, 1);\r\n    const slideOffset = (1 - this.easeOutCubic(slideProgress)) * 50;\r\n    const infoY = containerY + slideOffset + 100;\r\n\r\n    // Level number\r\n    ctx.fillStyle = '#ffffff';\r\n    fontManager.setFont(ctx, 'primary', 16, 'bold');\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(`LEVEL ${this.config.levelId}`, 180, infoY);\r\n\r\n    // Level points earned\r\n    ctx.fillStyle = '#ffff00';\r\n    fontManager.setFont(ctx, 'primary', 14);\r\n    ctx.fillText(`LEVEL POINTS: ${this.config.score.toFixed(1)}`, 180, infoY + 25);\r\n\r\n    // Total score if available\r\n    if (this.config.totalScore !== undefined) {\r\n      ctx.fillStyle = '#00ff00';\r\n      fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n      ctx.fillText(`TOTAL SCORE: ${this.config.totalScore.toFixed(1)}`, 180, infoY + 45);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw unified scoring breakdown with animation\r\n   */\r\n  private drawTimingInfo(ctx: CanvasRenderingContext2D): void {\r\n    const containerY = (640 - 400) / 2;\r\n    const slideProgress = Math.min(this.animationTime / 800, 1);\r\n    const slideOffset = (1 - this.easeOutCubic(slideProgress)) * 50;\r\n    const timingY = containerY + slideOffset + 190;\r\n\r\n    if (!this.config.levelScoreData) {\r\n      // Fallback to old display if no unified scoring data\r\n      this.drawLegacyTimingInfo(ctx, timingY);\r\n      return;\r\n    }\r\n\r\n    const scoreData = this.config.levelScoreData;\r\n\r\n    // Raw time (appears first)\r\n    const rawTimeDelay = 1000; // 1 second delay\r\n    if (this.animationTime > rawTimeDelay) {\r\n      const rawTimeAlpha = Math.min((this.animationTime - rawTimeDelay) / 500, 1);\r\n      ctx.fillStyle = `rgba(0, 240, 255, ${rawTimeAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 10);\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('RAW TIME:', 60, timingY);\r\n\r\n      ctx.fillStyle = `rgba(255, 255, 255, ${rawTimeAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12);\r\n      ctx.textAlign = 'right';\r\n      ctx.fillText(`${scoreData.rawTime.toFixed(3)}s`, 300, timingY);\r\n    }\r\n\r\n    // Time adjustments (appears second)\r\n    const adjustmentsDelay = 1500; // 1.5 seconds delay\r\n    if (this.animationTime > adjustmentsDelay && (scoreData.timeReductions > 0 || scoreData.assistPenalties > 0)) {\r\n      const adjustAlpha = Math.min((this.animationTime - adjustmentsDelay) / 500, 1);\r\n      \r\n      if (scoreData.timeReductions > 0) {\r\n        ctx.fillStyle = `rgba(0, 255, 0, ${adjustAlpha})`;\r\n        fontManager.setFont(ctx, 'primary', 9);\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText('TIME CUTS:', 60, timingY + 18);\r\n\r\n        ctx.fillStyle = `rgba(0, 255, 0, ${adjustAlpha})`;\r\n        fontManager.setFont(ctx, 'primary', 10);\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(`-${scoreData.timeReductions.toFixed(1)}s`, 300, timingY + 18);\r\n      }\r\n\r\n      if (scoreData.assistPenalties > 0) {\r\n        ctx.fillStyle = `rgba(255, 165, 0, ${adjustAlpha})`;\r\n        fontManager.setFont(ctx, 'primary', 9);\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText('ASSIST PENALTY:', 60, timingY + 33);\r\n\r\n        ctx.fillStyle = `rgba(255, 165, 0, ${adjustAlpha})`;\r\n        fontManager.setFont(ctx, 'primary', 10);\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(`+${scoreData.assistPenalties.toFixed(1)}s`, 300, timingY + 33);\r\n      }\r\n    }\r\n\r\n    // Adjusted time and calculation (appears third)\r\n    const calculationDelay = 2000; // 2 seconds delay\r\n    if (this.animationTime > calculationDelay) {\r\n      const calcAlpha = Math.min((this.animationTime - calculationDelay) / 500, 1);\r\n      \r\n      // Draw separator line\r\n      ctx.strokeStyle = `rgba(182, 0, 249, ${calcAlpha})`;\r\n      ctx.lineWidth = 1;\r\n      ctx.beginPath();\r\n      ctx.moveTo(60, timingY + 50);\r\n      ctx.lineTo(300, timingY + 50);\r\n      ctx.stroke();\r\n\r\n      // Adjusted time\r\n      ctx.fillStyle = `rgba(255, 255, 0, ${calcAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 10, 'bold');\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('ADJUSTED TIME:', 60, timingY + 68);\r\n\r\n      ctx.fillStyle = `rgba(255, 255, 0, ${calcAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n      ctx.textAlign = 'right';\r\n      ctx.fillText(`${scoreData.adjustedTime.toFixed(3)}s`, 300, timingY + 68);\r\n\r\n      // Scoring calculation\r\n      ctx.fillStyle = `rgba(136, 136, 136, ${calcAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 8);\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(`${scoreData.baseLevelValue} ÷ ${scoreData.adjustedTime.toFixed(3)} = ${scoreData.levelPoints.toFixed(1)}`, 180, timingY + 85);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw legacy timing information (fallback)\r\n   */\r\n  private drawLegacyTimingInfo(ctx: CanvasRenderingContext2D, timingY: number): void {\r\n    // Level time (appears first)\r\n    const levelTimeDelay = 1000; // 1 second delay\r\n    if (this.animationTime > levelTimeDelay) {\r\n      const levelTimeAlpha = Math.min((this.animationTime - levelTimeDelay) / 500, 1);\r\n      ctx.fillStyle = `rgba(0, 240, 255, ${levelTimeAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12);\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('LEVEL TIME:', 60, timingY);\r\n\r\n      ctx.fillStyle = `rgba(255, 255, 255, ${levelTimeAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 16, 'bold');\r\n      ctx.textAlign = 'right';\r\n      ctx.fillText(this.formatTime(this.config.levelTime), 300, timingY);\r\n    }\r\n\r\n    // Session total (appears with merge animation)\r\n    const sessionTotalDelay = 1800; // 1.8 seconds delay\r\n    if (this.animationTime > sessionTotalDelay) {\r\n      const sessionAlpha = Math.min((this.animationTime - sessionTotalDelay) / 500, 1);\r\n      \r\n      // Draw separator line\r\n      ctx.strokeStyle = `rgba(182, 0, 249, ${sessionAlpha})`;\r\n      ctx.lineWidth = 1;\r\n      ctx.beginPath();\r\n      ctx.moveTo(60, timingY + 20);\r\n      ctx.lineTo(300, timingY + 20);\r\n      ctx.stroke();\r\n\r\n      // Previous session time\r\n      const previousSessionTime = this.config.sessionTotal - this.config.levelTime;\r\n      ctx.fillStyle = `rgba(136, 136, 136, ${sessionAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 10);\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('PREVIOUS:', 60, timingY + 40);\r\n\r\n      ctx.fillStyle = `rgba(136, 136, 136, ${sessionAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12);\r\n      ctx.textAlign = 'right';\r\n      ctx.fillText(this.formatTime(previousSessionTime), 300, timingY + 40);\r\n\r\n      // Session total\r\n      ctx.fillStyle = `rgba(0, 255, 0, ${sessionAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('SESSION TOTAL:', 60, timingY + 65);\r\n\r\n      ctx.fillStyle = `rgba(0, 255, 0, ${sessionAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 18, 'bold');\r\n      ctx.textAlign = 'right';\r\n      ctx.fillText(this.formatTime(this.config.sessionTotal), 300, timingY + 65);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw continue prompt\r\n   */\r\n  private drawContinuePrompt(ctx: CanvasRenderingContext2D): void {\r\n    const containerY = (640 - 400) / 2;\r\n    const slideProgress = Math.min(this.animationTime / 800, 1);\r\n    const slideOffset = (1 - this.easeOutCubic(slideProgress)) * 50;\r\n    const promptY = containerY + slideOffset + 320;\r\n\r\n    // Flashing continue prompt\r\n    const flashDelay = 2500; // 2.5 seconds delay\r\n    if (this.animationTime > flashDelay) {\r\n      const flashCycle = (this.animationTime - flashDelay) % 1000; // 1 second cycle\r\n      const flashAlpha = 0.5 + 0.5 * Math.sin(flashCycle / 1000 * Math.PI * 2);\r\n      \r\n      ctx.fillStyle = `rgba(255, 255, 255, ${flashAlpha})`;\r\n      fontManager.setFont(ctx, 'primary', 12, 'bold');\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText('PRESS ANY KEY TO CONTINUE', 180, promptY);\r\n\r\n      // Additional prompt for clarity\r\n      ctx.fillStyle = `rgba(136, 136, 136, ${flashAlpha * 0.8})`;\r\n      fontManager.setFont(ctx, 'primary', 8);\r\n      ctx.fillText('SPACE, ENTER, OR CLICK TO ADVANCE', 180, promptY + 15);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format time from milliseconds to MM:SS.sss\r\n   */\r\n  private formatTime(ms: number): string {\r\n    const totalSeconds = ms / 1000;\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    return `${minutes}:${seconds.toFixed(3).padStart(6, '0')}`;\r\n  }\r\n\r\n  /**\r\n   * Ease out cubic animation\r\n   */\r\n  private easeOutCubic(t: number): number {\r\n    return 1 - Math.pow(1 - t, 3);\r\n  }\r\n} ","// Circuit Breaker - Storage Manager\r\n// Handles save/load operations, data validation, and error recovery\r\n\r\nimport { logger } from '../utils/Logger';\r\nimport { LevelScoreData, ScoreSession } from './UnifiedScoringSystem';\r\n\r\nexport interface GameProgress {\r\n  version: string;\r\n  lastSaved: number;\r\n  currentLevel: number;\r\n  highestLevel: number;\r\n  totalScore: number; // Legacy score field - kept for compatibility\r\n  lives: number;\r\n  completedLevels: Set<number>;\r\n  highScores: Map<number, number>; // level -> score (legacy)\r\n  achievements: Set<string>;\r\n  settings: {\r\n    masterVolume: number;\r\n    musicVolume: number;\r\n    sfxVolume: number;\r\n    audioEnabled: boolean;\r\n  };\r\n  playTime: number; // Total play time in milliseconds\r\n  gamesPlayed: number;\r\n  totalBallsLost: number;\r\n  totalGoalsReached: number;\r\n  // New unified scoring system data\r\n  unifiedTotalScore?: number; // Total score from unified scoring system\r\n  scoreSessions?: ScoreSession[]; // Historical scoring sessions\r\n  bestLevelScores?: Map<number, LevelScoreData>; // level -> best score data\r\n  allTimeHighScore?: number; // Best unified total score ever achieved\r\n}\r\n\r\nexport interface SaveSlot {\r\n  id: number;\r\n  name: string;\r\n  lastPlayed: number;\r\n  progress: GameProgress;\r\n}\r\n\r\nexport class StorageManager {\r\n  private readonly STORAGE_KEY = 'circuit_breaker_save';\r\n  private readonly SAVE_SLOTS_KEY = 'circuit_breaker_slots';\r\n  private readonly CURRENT_VERSION = '1.0.0';\r\n  private readonly MAX_SAVE_SLOTS = 3;\r\n  private readonly AUTO_SAVE_INTERVAL = 30000; // 30 seconds\r\n\r\n  private autoSaveTimer: number | null = null;\r\n  private lastAutoSave: number = 0;\r\n\r\n  constructor() {\r\n    logger.info('💾 StorageManager initialized', null, 'StorageManager');\r\n  }\r\n\r\n  /**\r\n   * Create a new game progress object\r\n   */\r\n  public createNewProgress(): GameProgress {\r\n    return {\r\n      version: this.CURRENT_VERSION,\r\n      lastSaved: Date.now(),\r\n      currentLevel: 1,\r\n      highestLevel: 1,\r\n      totalScore: 0,\r\n      lives: 3,\r\n      completedLevels: new Set(),\r\n      highScores: new Map(),\r\n      achievements: new Set(),\r\n      settings: {\r\n        masterVolume: 0.7,\r\n        musicVolume: 0.4,\r\n        sfxVolume: 0.8,\r\n        audioEnabled: true,\r\n      },\r\n      playTime: 0,\r\n      gamesPlayed: 0,\r\n      totalBallsLost: 0,\r\n      totalGoalsReached: 0,\r\n      // Initialize new unified scoring fields\r\n      unifiedTotalScore: 0,\r\n      scoreSessions: [],\r\n      bestLevelScores: new Map(),\r\n      allTimeHighScore: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save game progress to localStorage\r\n   */\r\n  public saveProgress(progress: GameProgress, slotId: number = 0): boolean {\r\n    try {\r\n      // Update save timestamp\r\n      progress.lastSaved = Date.now();\r\n      progress.version = this.CURRENT_VERSION;\r\n\r\n      // Validate progress data\r\n      if (!this.validateProgress(progress)) {\r\n        logger.error('❌ Invalid progress data, save aborted', null, 'StorageManager');\r\n        return false;\r\n      }\r\n\r\n      // Convert Sets and Maps to arrays/objects for JSON serialization\r\n      const serializedProgress = this.serializeProgress(progress);\r\n\r\n      // Save to localStorage\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      localStorage.setItem(saveKey, JSON.stringify(serializedProgress));\r\n\r\n      // Update save slot metadata\r\n      this.updateSaveSlot(slotId, progress);\r\n\r\n      logger.info(`💾 Game progress saved to slot ${slotId}`, null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to save game progress:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load game progress from localStorage\r\n   */\r\n  public loadProgress(slotId: number = 0): GameProgress | null {\r\n    try {\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      const savedData = localStorage.getItem(saveKey);\r\n\r\n      if (!savedData) {\r\n        logger.info(`📂 No save data found in slot ${slotId}`, null, 'StorageManager');\r\n        return null;\r\n      }\r\n\r\n      // Parse and validate saved data\r\n      const parsedData = JSON.parse(savedData);\r\n      const progress = this.deserializeProgress(parsedData);\r\n\r\n      if (!this.validateProgress(progress)) {\r\n        logger.error('❌ Invalid save data, loading aborted', null, 'StorageManager');\r\n        return null;\r\n      }\r\n\r\n      // Check version compatibility\r\n      if (!this.isVersionCompatible(progress.version)) {\r\n        logger.warn('⚠️ Save data version mismatch, attempting migration', null, 'StorageManager');\r\n        const migratedProgress = this.migrateProgress(progress);\r\n        return migratedProgress;\r\n      }\r\n\r\n      logger.info(`📂 Game progress loaded from slot ${slotId}`, null, 'StorageManager');\r\n      return progress;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to load game progress:', error, 'StorageManager');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto-save game progress\r\n   */\r\n  public autoSave(progress: GameProgress, slotId: number = 0): boolean {\r\n    const now = Date.now();\r\n    \r\n    // Only auto-save if enough time has passed\r\n    if (now - this.lastAutoSave < this.AUTO_SAVE_INTERVAL) {\r\n      return false;\r\n    }\r\n\r\n    const success = this.saveProgress(progress, slotId);\r\n    if (success) {\r\n      this.lastAutoSave = now;\r\n      logger.debug('🔄 Auto-save completed', null, 'StorageManager');\r\n    }\r\n    \r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Start auto-save timer\r\n   */\r\n  public startAutoSave(progress: GameProgress, slotId: number = 0): void {\r\n    this.stopAutoSave();\r\n    \r\n    this.autoSaveTimer = window.setInterval(() => {\r\n      this.autoSave(progress, slotId);\r\n    }, this.AUTO_SAVE_INTERVAL);\r\n    \r\n    logger.debug('🔄 Auto-save timer started', null, 'StorageManager');\r\n  }\r\n\r\n  /**\r\n   * Stop auto-save timer\r\n   */\r\n  public stopAutoSave(): void {\r\n    if (this.autoSaveTimer) {\r\n      clearInterval(this.autoSaveTimer);\r\n      this.autoSaveTimer = null;\r\n      logger.debug('🔄 Auto-save timer stopped', null, 'StorageManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available save slots\r\n   */\r\n  public getSaveSlots(): SaveSlot[] {\r\n    try {\r\n      const slotsData = localStorage.getItem(this.SAVE_SLOTS_KEY);\r\n      if (!slotsData) return [];\r\n\r\n      const slots = JSON.parse(slotsData);\r\n      return slots.filter((slot: SaveSlot) => slot && slot.progress);\r\n    } catch (error) {\r\n      logger.error('❌ Failed to load save slots:', error, 'StorageManager');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a save slot\r\n   */\r\n  public deleteSaveSlot(slotId: number): boolean {\r\n    try {\r\n      const saveKey = `${this.STORAGE_KEY}_${slotId}`;\r\n      localStorage.removeItem(saveKey);\r\n      \r\n      // Remove from save slots metadata\r\n      const slots = this.getSaveSlots();\r\n      const updatedSlots = slots.filter(slot => slot.id !== slotId);\r\n      localStorage.setItem(this.SAVE_SLOTS_KEY, JSON.stringify(updatedSlots));\r\n      \r\n      logger.info(`🗑️ Save slot ${slotId} deleted`, null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to delete save slot:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all save data\r\n   */\r\n  public clearAllSaves(): boolean {\r\n    try {\r\n      // Clear all save slots\r\n      for (let i = 0; i < this.MAX_SAVE_SLOTS; i++) {\r\n        const saveKey = `${this.STORAGE_KEY}_${i}`;\r\n        localStorage.removeItem(saveKey);\r\n      }\r\n      \r\n      // Clear save slots metadata\r\n      localStorage.removeItem(this.SAVE_SLOTS_KEY);\r\n      \r\n      logger.info('🗑️ All save data cleared', null, 'StorageManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to clear save data:', error, 'StorageManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate progress data\r\n   */\r\n  private validateProgress(progress: GameProgress): boolean {\r\n    if (!progress || typeof progress !== 'object') return false;\r\n    \r\n    // Check required fields\r\n    const requiredFields = [\r\n      'version', 'lastSaved', 'currentLevel', 'highestLevel',\r\n      'totalScore', 'lives', 'completedLevels', 'highScores',\r\n      'achievements', 'settings', 'playTime', 'gamesPlayed',\r\n      'totalBallsLost', 'totalGoalsReached',\r\n    ];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!(field in progress)) {\r\n        logger.error(`❌ Missing required field: ${field}`, null, 'StorageManager');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Validate data types and ranges\r\n    if (progress.currentLevel < 1 || progress.highestLevel < 1) return false;\r\n    if (progress.totalScore < 0) return false;\r\n    if (progress.lives < 0 || progress.lives > 10) return false;\r\n    if (progress.playTime < 0) return false;\r\n    if (progress.gamesPlayed < 0) return false;\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Serialize progress for storage\r\n   */\r\n  private serializeProgress(progress: GameProgress): any {\r\n    return {\r\n      ...progress,\r\n      completedLevels: Array.from(progress.completedLevels),\r\n      highScores: Object.fromEntries(progress.highScores),\r\n      achievements: Array.from(progress.achievements),\r\n      // Serialize new unified scoring data\r\n      bestLevelScores: progress.bestLevelScores ? Object.fromEntries(progress.bestLevelScores) : {},\r\n      scoreSessions: progress.scoreSessions || [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deserialize progress from storage\r\n   */\r\n  private deserializeProgress(data: any): GameProgress {\r\n    return {\r\n      ...data,\r\n      completedLevels: new Set(data.completedLevels || []),\r\n      highScores: new Map(Object.entries(data.highScores || {})),\r\n      achievements: new Set(data.achievements || []),\r\n      // Deserialize new unified scoring data\r\n      bestLevelScores: data.bestLevelScores ? new Map(Object.entries(data.bestLevelScores)) : new Map(),\r\n      scoreSessions: data.scoreSessions || [],\r\n      unifiedTotalScore: data.unifiedTotalScore || 0,\r\n      allTimeHighScore: data.allTimeHighScore || 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if save version is compatible\r\n   */\r\n  private isVersionCompatible(_version: string): boolean {\r\n    // For now, accept any version and migrate if needed\r\n    // In the future, this could be more strict\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Migrate progress data to current version\r\n   */\r\n  private migrateProgress(progress: GameProgress): GameProgress {\r\n    // Add any missing fields with defaults\r\n    const migrated = {\r\n      ...this.createNewProgress(),\r\n      ...progress,\r\n    };\r\n    \r\n    // Ensure all required fields exist\r\n    if (!migrated.completedLevels) migrated.completedLevels = new Set();\r\n    if (!migrated.highScores) migrated.highScores = new Map();\r\n    if (!migrated.achievements) migrated.achievements = new Set();\r\n    if (!migrated.settings) migrated.settings = this.createNewProgress().settings;\r\n    \r\n    logger.info('🔄 Progress data migrated to current version', null, 'StorageManager');\r\n    return migrated;\r\n  }\r\n\r\n  /**\r\n   * Update save slot metadata\r\n   */\r\n  private updateSaveSlot(slotId: number, progress: GameProgress): void {\r\n    try {\r\n      const slots = this.getSaveSlots();\r\n      const existingSlotIndex = slots.findIndex(slot => slot.id === slotId);\r\n      \r\n      const slotData: SaveSlot = {\r\n        id: slotId,\r\n        name: `Save ${slotId + 1}`,\r\n        lastPlayed: Date.now(),\r\n        progress: progress,\r\n      };\r\n      \r\n      if (existingSlotIndex >= 0) {\r\n        slots[existingSlotIndex] = slotData;\r\n      } else {\r\n        slots.push(slotData);\r\n      }\r\n      \r\n      // Sort by last played (newest first)\r\n      slots.sort((a, b) => b.lastPlayed - a.lastPlayed);\r\n      \r\n      localStorage.setItem(this.SAVE_SLOTS_KEY, JSON.stringify(slots));\r\n    } catch (error) {\r\n      logger.error('❌ Failed to update save slot metadata:', error, 'StorageManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update unified scoring data in progress\r\n   */\r\n  public updateUnifiedScoringData(\r\n    progress: GameProgress, \r\n    scoreSession: ScoreSession, \r\n    levelScores: LevelScoreData[]\r\n  ): void {\r\n    // Update unified total score\r\n    progress.unifiedTotalScore = scoreSession.totalScore;\r\n    \r\n    // Update all-time high score\r\n    if (scoreSession.totalScore > (progress.allTimeHighScore || 0)) {\r\n      progress.allTimeHighScore = scoreSession.totalScore;\r\n      logger.info(`🏆 New all-time high score: ${scoreSession.totalScore.toFixed(1)}`, null, 'StorageManager');\r\n    }\r\n    \r\n    // Add this session to history\r\n    if (!progress.scoreSessions) progress.scoreSessions = [];\r\n    progress.scoreSessions.push(scoreSession);\r\n    \r\n    // Keep only the last 10 sessions to manage storage\r\n    if (progress.scoreSessions.length > 10) {\r\n      progress.scoreSessions = progress.scoreSessions.slice(-10);\r\n    }\r\n    \r\n    // Update best scores for each level\r\n    if (!progress.bestLevelScores) progress.bestLevelScores = new Map();\r\n    \r\n    for (const levelScore of levelScores) {\r\n      const currentBest = progress.bestLevelScores.get(levelScore.levelId);\r\n      if (!currentBest || levelScore.levelPoints > currentBest.levelPoints) {\r\n        progress.bestLevelScores.set(levelScore.levelId, levelScore);\r\n        logger.info(`🎯 New best score for Level ${levelScore.levelId}: ${levelScore.levelPoints.toFixed(1)}`, null, 'StorageManager');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get best level score for a specific level\r\n   */\r\n  public getBestLevelScore(progress: GameProgress, levelId: number): LevelScoreData | null {\r\n    if (!progress.bestLevelScores) return null;\r\n    return progress.bestLevelScores.get(levelId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get unified scoring statistics\r\n   */\r\n  public getUnifiedScoringStats(progress: GameProgress): {\r\n    allTimeHighScore: number;\r\n    averageSessionScore: number;\r\n    totalSessions: number;\r\n    bestLevelCount: number;\r\n  } {\r\n    const allTimeHighScore = progress.allTimeHighScore || 0;\r\n    const sessions = progress.scoreSessions || [];\r\n    const totalSessions = sessions.length;\r\n    const averageSessionScore = totalSessions > 0 \r\n      ? sessions.reduce((sum, session) => sum + session.totalScore, 0) / totalSessions \r\n      : 0;\r\n    const bestLevelCount = progress.bestLevelScores ? progress.bestLevelScores.size : 0;\r\n    \r\n    return {\r\n      allTimeHighScore,\r\n      averageSessionScore,\r\n      totalSessions,\r\n      bestLevelCount,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get storage usage information\r\n   */\r\n  public getStorageInfo(): { used: number; available: number; percentage: number } {\r\n    try {\r\n      let used = 0;\r\n      const keys = Object.keys(localStorage);\r\n      \r\n      for (const key of keys) {\r\n        if (key.startsWith(this.STORAGE_KEY) || key === this.SAVE_SLOTS_KEY) {\r\n          used += localStorage.getItem(key)?.length || 0;\r\n        }\r\n      }\r\n      \r\n      // Estimate available storage (localStorage typically 5-10MB)\r\n      const available = 5 * 1024 * 1024; // 5MB estimate\r\n      const percentage = (used / available) * 100;\r\n      \r\n      return { used, available, percentage };\r\n    } catch (error) {\r\n      logger.error('❌ Failed to get storage info:', error, 'StorageManager');\r\n      return { used: 0, available: 0, percentage: 0 };\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Achievement Manager\r\n// Tracks player accomplishments and provides achievement notifications\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface Achievement {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  unlocked: boolean;\r\n  unlockedAt?: number;\r\n  progress?: number;\r\n  maxProgress?: number;\r\n  category: 'gameplay' | 'completion' | 'skill' | 'collection';\r\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\r\n}\r\n\r\nexport interface AchievementNotification {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  timestamp: number;\r\n  category: string;\r\n  rarity: string;\r\n}\r\n\r\nexport class AchievementManager {\r\n  private achievements: Map<string, Achievement> = new Map();\r\n  private notifications: AchievementNotification[] = [];\r\n  private onAchievementUnlocked?: (achievement: Achievement) => void;\r\n\r\n  constructor() {\r\n    this.initializeAchievements();\r\n    logger.info('🏆 AchievementManager initialized', null, 'AchievementManager');\r\n  }\r\n\r\n  /**\r\n   * Initialize all available achievements\r\n   */\r\n  private initializeAchievements(): void {\r\n    // Gameplay achievements\r\n    this.addAchievement({\r\n      id: 'first_goal',\r\n      name: 'First Contact',\r\n      description: 'Reach your first goal',\r\n      icon: '🎯',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'common',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'level_complete',\r\n      name: 'Circuit Master',\r\n      description: 'Complete a level',\r\n      icon: '⚡',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'common',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'perfect_level',\r\n      name: 'Perfect Circuit',\r\n      description: 'Complete a level without losing any balls',\r\n      icon: '💎',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'rare',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'speed_runner',\r\n      name: 'Speed Runner',\r\n      description: 'Complete a level in under 30 seconds',\r\n      icon: '🏃',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'rare',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'survivor',\r\n      name: 'Survivor',\r\n      description: 'Complete 5 levels in a single game',\r\n      icon: '🛡️',\r\n      unlocked: false,\r\n      category: 'gameplay',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'high_scorer',\r\n      name: 'High Scorer',\r\n      description: 'Score 10,000 points in a single game',\r\n      icon: '🏆',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'goal_hunter',\r\n      name: 'Goal Hunter',\r\n      description: 'Reach 50 goals total',\r\n      icon: '🎯',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'rare',\r\n      progress: 0,\r\n      maxProgress: 50,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'level_explorer',\r\n      name: 'Level Explorer',\r\n      description: 'Unlock 10 levels',\r\n      icon: '🗺️',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'rare',\r\n      progress: 0,\r\n      maxProgress: 10,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'persistent_player',\r\n      name: 'Persistent Player',\r\n      description: 'Play 10 games',\r\n      icon: '🎮',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'common',\r\n      progress: 0,\r\n      maxProgress: 10,\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'time_investor',\r\n      name: 'Time Investor',\r\n      description: 'Play for 1 hour total',\r\n      icon: '⏰',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'common',\r\n      progress: 0,\r\n      maxProgress: 3600000, // 1 hour in milliseconds\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'ball_conservationist',\r\n      name: 'Ball Conservationist',\r\n      description: 'Complete a level with only 1 ball',\r\n      icon: '🔵',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'epic',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'chain_reaction',\r\n      name: 'Chain Reaction',\r\n      description: 'Reach 3 goals in quick succession',\r\n      icon: '⚡',\r\n      unlocked: false,\r\n      category: 'skill',\r\n      rarity: 'legendary',\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'veteran_player',\r\n      name: 'Veteran Player',\r\n      description: 'Play for 5 hours total',\r\n      icon: '👴',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'epic',\r\n      progress: 0,\r\n      maxProgress: 18000000, // 5 hours in milliseconds\r\n    });\r\n\r\n    this.addAchievement({\r\n      id: 'master_circuit',\r\n      name: 'Master Circuit',\r\n      description: 'Complete all levels',\r\n      icon: '👑',\r\n      unlocked: false,\r\n      category: 'completion',\r\n      rarity: 'legendary',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add an achievement to the system\r\n   */\r\n  private addAchievement(achievement: Achievement): void {\r\n    this.achievements.set(achievement.id, achievement);\r\n  }\r\n\r\n  /**\r\n   * Set callback for achievement unlocks\r\n   */\r\n  public setAchievementCallback(callback: (achievement: Achievement) => void): void {\r\n    this.onAchievementUnlocked = callback;\r\n  }\r\n\r\n  /**\r\n   * Check and update achievements based on game events\r\n   */\r\n  public checkAchievements(gameStats: {\r\n    currentLevel: number;\r\n    totalScore: number;\r\n    lives: number;\r\n    goalsReached: number;\r\n    levelsCompleted: number;\r\n    gamesPlayed: number;\r\n    totalPlayTime: number;\r\n    ballsLost: number;\r\n    perfectLevels: number;\r\n    quickCompletions: number;\r\n  }): void {\r\n    // Check first goal achievement\r\n    if (gameStats.goalsReached >= 1) {\r\n      this.unlockAchievement('first_goal');\r\n    }\r\n\r\n    // Check level completion achievements\r\n    if (gameStats.levelsCompleted >= 1) {\r\n      this.unlockAchievement('level_complete');\r\n    }\r\n\r\n    // Check perfect level achievement\r\n    if (gameStats.perfectLevels >= 1) {\r\n      this.unlockAchievement('perfect_level');\r\n    }\r\n\r\n    // Check speed runner achievement\r\n    if (gameStats.quickCompletions >= 1) {\r\n      this.unlockAchievement('speed_runner');\r\n    }\r\n\r\n    // Check survivor achievement\r\n    if (gameStats.levelsCompleted >= 5) {\r\n      this.unlockAchievement('survivor');\r\n    }\r\n\r\n    // Check high scorer achievement\r\n    if (gameStats.totalScore >= 10000) {\r\n      this.unlockAchievement('high_scorer');\r\n    }\r\n\r\n    // Check ball conservationist achievement\r\n    if (gameStats.lives >= 2 && gameStats.levelsCompleted >= 1) {\r\n      this.unlockAchievement('ball_conservationist');\r\n    }\r\n\r\n    // Update progress-based achievements\r\n    this.updateProgressAchievement('goal_hunter', gameStats.goalsReached);\r\n    this.updateProgressAchievement('level_explorer', gameStats.currentLevel);\r\n    this.updateProgressAchievement('persistent_player', gameStats.gamesPlayed);\r\n    this.updateProgressAchievement('time_investor', gameStats.totalPlayTime);\r\n    this.updateProgressAchievement('veteran_player', gameStats.totalPlayTime);\r\n\r\n    // Check master circuit achievement\r\n    if (gameStats.currentLevel >= 20) { // Assuming 20 levels total\r\n      this.unlockAchievement('master_circuit');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock an achievement\r\n   */\r\n  public unlockAchievement(achievementId: string): boolean {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || achievement.unlocked) {\r\n      return false;\r\n    }\r\n\r\n    achievement.unlocked = true;\r\n    achievement.unlockedAt = Date.now();\r\n\r\n    // Create notification\r\n    const notification: AchievementNotification = {\r\n      id: achievement.id,\r\n      name: achievement.name,\r\n      description: achievement.description,\r\n      icon: achievement.icon,\r\n      timestamp: Date.now(),\r\n      category: achievement.category,\r\n      rarity: achievement.rarity,\r\n    };\r\n\r\n    this.notifications.push(notification);\r\n\r\n    // Call callback if set\r\n    if (this.onAchievementUnlocked) {\r\n      this.onAchievementUnlocked(achievement);\r\n    }\r\n\r\n    logger.info(`🏆 Achievement unlocked: ${achievement.name}`, null, 'AchievementManager');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Update progress for progress-based achievements\r\n   */\r\n  private updateProgressAchievement(achievementId: string, currentProgress: number): void {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || achievement.unlocked || !achievement.maxProgress) {\r\n      return;\r\n    }\r\n\r\n    achievement.progress = Math.min(currentProgress, achievement.maxProgress);\r\n\r\n    // Check if achievement should be unlocked\r\n    if (achievement.progress >= achievement.maxProgress) {\r\n      this.unlockAchievement(achievementId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all achievements\r\n   */\r\n  public getAllAchievements(): Achievement[] {\r\n    return Array.from(this.achievements.values());\r\n  }\r\n\r\n  /**\r\n   * Get unlocked achievements\r\n   */\r\n  public getUnlockedAchievements(): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.unlocked);\r\n  }\r\n\r\n  /**\r\n   * Get achievements by category\r\n   */\r\n  public getAchievementsByCategory(category: string): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.category === category);\r\n  }\r\n\r\n  /**\r\n   * Get achievements by rarity\r\n   */\r\n  public getAchievementsByRarity(rarity: string): Achievement[] {\r\n    return Array.from(this.achievements.values()).filter(a => a.rarity === rarity);\r\n  }\r\n\r\n  /**\r\n   * Get recent notifications\r\n   */\r\n  public getRecentNotifications(limit: number = 5): AchievementNotification[] {\r\n    return this.notifications\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Clear old notifications\r\n   */\r\n  public clearOldNotifications(olderThan: number = 24 * 60 * 60 * 1000): void { // 24 hours\r\n    const cutoff = Date.now() - olderThan;\r\n    this.notifications = this.notifications.filter(n => n.timestamp > cutoff);\r\n  }\r\n\r\n  /**\r\n   * Get achievement progress\r\n   */\r\n  public getAchievementProgress(achievementId: string): { current: number; max: number; percentage: number } | null {\r\n    const achievement = this.achievements.get(achievementId);\r\n    \r\n    if (!achievement || !achievement.maxProgress) {\r\n      return null;\r\n    }\r\n\r\n    const current = achievement.progress || 0;\r\n    const percentage = (current / achievement.maxProgress) * 100;\r\n\r\n    return {\r\n      current,\r\n      max: achievement.maxProgress,\r\n      percentage: Math.min(percentage, 100),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get achievement statistics\r\n   */\r\n  public getAchievementStats(): {\r\n    total: number;\r\n    unlocked: number;\r\n    percentage: number;\r\n    byCategory: Record<string, { total: number; unlocked: number }>;\r\n    byRarity: Record<string, { total: number; unlocked: number }>;\r\n    } {\r\n    const achievements = Array.from(this.achievements.values());\r\n    const unlocked = achievements.filter(a => a.unlocked);\r\n    \r\n    const byCategory: Record<string, { total: number; unlocked: number }> = {};\r\n    const byRarity: Record<string, { total: number; unlocked: number }> = {};\r\n\r\n    // Initialize counters\r\n    for (const achievement of achievements) {\r\n      if (!byCategory[achievement.category]) {\r\n        byCategory[achievement.category] = { total: 0, unlocked: 0 };\r\n      }\r\n      if (!byRarity[achievement.rarity]) {\r\n        byRarity[achievement.rarity] = { total: 0, unlocked: 0 };\r\n      }\r\n\r\n      byCategory[achievement.category].total++;\r\n      byRarity[achievement.rarity].total++;\r\n\r\n      if (achievement.unlocked) {\r\n        byCategory[achievement.category].unlocked++;\r\n        byRarity[achievement.rarity].unlocked++;\r\n      }\r\n    }\r\n\r\n    return {\r\n      total: achievements.length,\r\n      unlocked: unlocked.length,\r\n      percentage: achievements.length > 0 ? (unlocked.length / achievements.length) * 100 : 0,\r\n      byCategory,\r\n      byRarity,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load achievements from save data\r\n   */\r\n  public loadAchievements(unlockedAchievementIds: string[]): void {\r\n    for (const achievementId of unlockedAchievementIds) {\r\n      const achievement = this.achievements.get(achievementId);\r\n      if (achievement) {\r\n        achievement.unlocked = true;\r\n        achievement.unlockedAt = Date.now();\r\n      }\r\n    }\r\n    \r\n    logger.info(`📂 Loaded ${unlockedAchievementIds.length} achievements from save`, null, 'AchievementManager');\r\n  }\r\n\r\n  /**\r\n   * Get unlocked achievement IDs for saving\r\n   */\r\n  public getUnlockedAchievementIds(): string[] {\r\n    return Array.from(this.achievements.values())\r\n      .filter(a => a.unlocked)\r\n      .map(a => a.id);\r\n  }\r\n\r\n  /**\r\n   * Reset all achievements (for testing)\r\n   */\r\n  public resetAchievements(): void {\r\n    for (const achievement of this.achievements.values()) {\r\n      achievement.unlocked = false;\r\n      achievement.unlockedAt = undefined;\r\n      achievement.progress = 0;\r\n    }\r\n    \r\n    this.notifications = [];\r\n    logger.info('🔄 All achievements reset', null, 'AchievementManager');\r\n  }\r\n} ","// Circuit Breaker - Stats Manager\r\n// Tracks gameplay metrics, performance data, and user behavior analytics\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface LevelStats {\r\n  levelId: number;\r\n  attempts: number;\r\n  completions: number;\r\n  bestTime: number; // milliseconds\r\n  bestScore: number;\r\n  totalPlayTime: number; // milliseconds\r\n  ballsLost: number;\r\n  goalsReached: number;\r\n  averageAttempts: number;\r\n  completionRate: number; // percentage\r\n  lastPlayed: number; // timestamp\r\n}\r\n\r\nexport interface PerformanceStats {\r\n  averageFPS: number;\r\n  minFPS: number;\r\n  maxFPS: number;\r\n  fpsSamples: number[];\r\n  memoryUsage?: number; // if available\r\n  loadTimes: {\r\n    gameStart: number;\r\n    levelLoad: number;\r\n    assetLoad: number;\r\n  };\r\n  deviceInfo: {\r\n    userAgent: string;\r\n    screenResolution: string;\r\n    platform: string;\r\n    language: string;\r\n  };\r\n}\r\n\r\nexport interface SessionStats {\r\n  sessionId: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  duration: number; // milliseconds\r\n  levelsPlayed: number[];\r\n  goalsReached: number;\r\n  ballsLost: number;\r\n  score: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface GameStats {\r\n  version: string;\r\n  lastUpdated: number;\r\n  \r\n  // Global gameplay stats\r\n  totalPlayTime: number; // milliseconds\r\n  totalSessions: number;\r\n  totalGamesStarted: number;\r\n  totalGamesCompleted: number;\r\n  totalGoalsReached: number;\r\n  totalBallsLost: number;\r\n  totalDeaths: number;\r\n  \r\n  // High scores and records\r\n  highestScore: number;\r\n  highestLevel: number;\r\n  longestSession: number; // milliseconds\r\n  fastestLevelCompletion: number; // milliseconds\r\n  \r\n  // Completion stats\r\n  levelsCompleted: number;\r\n  totalLevelAttempts: number;\r\n  averageCompletionRate: number; // percentage\r\n  \r\n  // Level-specific stats\r\n  levelStats: Map<number, LevelStats>;\r\n  \r\n  // Performance stats\r\n  performance: PerformanceStats;\r\n  \r\n  // Recent sessions (last 10)\r\n  recentSessions: SessionStats[];\r\n  \r\n  // Achievement stats\r\n  achievementsUnlocked: number;\r\n  totalAchievements: number;\r\n  achievementProgress: number; // percentage\r\n}\r\n\r\nexport interface StatsEvent {\r\n  type: 'game_start' | 'game_complete' | 'level_start' | 'level_complete' | \r\n        'goal_reached' | 'ball_lost' | 'death' | 'pause' | 'resume' | \r\n        'session_start' | 'session_end' | 'fps_update' | 'achievement_unlocked' | 'powerup_collected';\r\n  timestamp: number;\r\n  data?: any;\r\n}\r\n\r\nexport class StatsManager {\r\n  private stats: GameStats;\r\n  private currentSession: SessionStats | null = null;\r\n  private fpsSamples: number[] = [];\r\n  private readonly MAX_FPS_SAMPLES = 100;\r\n  private readonly STATS_KEY = 'circuit_breaker_stats';\r\n  private readonly VERSION = '1.0.0';\r\n\r\n  constructor() {\r\n    this.stats = this.loadStats();\r\n    this.initializePerformanceStats();\r\n    logger.info('📊 StatsManager initialized', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Record a gameplay event\r\n   */\r\n  public recordEvent(event: StatsEvent): void {\r\n    try {\r\n      switch (event.type) {\r\n      case 'game_start':\r\n        this.handleGameStart(event);\r\n        break;\r\n      case 'game_complete':\r\n        this.handleGameComplete(event);\r\n        break;\r\n      case 'level_start':\r\n        this.handleLevelStart(event);\r\n        break;\r\n      case 'level_complete':\r\n        this.handleLevelComplete(event);\r\n        break;\r\n      case 'goal_reached':\r\n        this.handleGoalReached(event);\r\n        break;\r\n      case 'ball_lost':\r\n        this.handleBallLost(event);\r\n        break;\r\n      case 'death':\r\n        this.handleDeath(event);\r\n        break;\r\n      case 'session_start':\r\n        this.handleSessionStart(event);\r\n        break;\r\n      case 'session_end':\r\n        this.handleSessionEnd(event);\r\n        break;\r\n      case 'fps_update':\r\n        this.handleFPSUpdate(event);\r\n        break;\r\n      case 'achievement_unlocked':\r\n        this.handleAchievementUnlocked(event);\r\n        break;\r\n      }\r\n\r\n      // Auto-save stats periodically\r\n      this.saveStats();\r\n    } catch (error) {\r\n      logger.error('❌ Failed to record stats event:', error, 'StatsManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current game stats\r\n   */\r\n  public getStats(): GameStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Get stats for a specific level\r\n   */\r\n  public getLevelStats(levelId: number): LevelStats | null {\r\n    return this.stats.levelStats.get(levelId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get performance stats\r\n   */\r\n  public getPerformanceStats(): PerformanceStats {\r\n    return { ...this.stats.performance };\r\n  }\r\n\r\n  /**\r\n   * Get current session stats\r\n   */\r\n  public getCurrentSession(): SessionStats | null {\r\n    return this.currentSession ? { ...this.currentSession } : null;\r\n  }\r\n\r\n  /**\r\n   * Reset all stats\r\n   */\r\n  public resetStats(): void {\r\n    this.stats = this.createNewStats();\r\n    this.currentSession = null;\r\n    this.fpsSamples = [];\r\n    this.saveStats();\r\n    logger.info('🔄 All stats reset', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Export stats as JSON\r\n   */\r\n  public exportStats(): string {\r\n    const exportData = {\r\n      ...this.stats,\r\n      levelStats: Object.fromEntries(this.stats.levelStats),\r\n      exportDate: new Date().toISOString(),\r\n    };\r\n    return JSON.stringify(exportData, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Import stats from JSON\r\n   */\r\n  public importStats(jsonData: string): boolean {\r\n    try {\r\n      const importedStats = JSON.parse(jsonData);\r\n      \r\n      // Validate imported data\r\n      if (!this.validateStats(importedStats)) {\r\n        logger.error('❌ Invalid stats data format', null, 'StatsManager');\r\n        return false;\r\n      }\r\n\r\n      // Convert levelStats back to Map\r\n      if (importedStats.levelStats && typeof importedStats.levelStats === 'object') {\r\n        const levelStatsMap = new Map<number, LevelStats>();\r\n        for (const [key, value] of Object.entries(importedStats.levelStats)) {\r\n          levelStatsMap.set(parseInt(key), value as LevelStats);\r\n        }\r\n        importedStats.levelStats = levelStatsMap;\r\n      }\r\n\r\n      this.stats = importedStats;\r\n      this.saveStats();\r\n      logger.info('📥 Stats imported successfully', null, 'StatsManager');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to import stats:', error, 'StatsManager');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get stats summary for display\r\n   */\r\n  public getStatsSummary(): {\r\n    totalPlayTime: string;\r\n    gamesPlayed: number;\r\n    completionRate: string;\r\n    averageScore: number;\r\n    favoriteLevel: number;\r\n    mostChallengingLevel: number;\r\n    } {\r\n    const totalPlayTime = this.formatPlayTime(this.stats.totalPlayTime);\r\n    const gamesPlayed = this.stats.totalGamesStarted;\r\n    const completionRate = this.stats.averageCompletionRate.toFixed(1) + '%';\r\n    const averageScore = this.stats.totalGamesCompleted > 0 \r\n      ? Math.round(this.stats.highestScore / this.stats.totalGamesCompleted)\r\n      : 0;\r\n\r\n    // Find favorite level (most completed)\r\n    let favoriteLevel = 1;\r\n    let maxCompletions = 0;\r\n    for (const [levelId, levelStats] of this.stats.levelStats) {\r\n      if (levelStats.completions > maxCompletions) {\r\n        maxCompletions = levelStats.completions;\r\n        favoriteLevel = levelId;\r\n      }\r\n    }\r\n\r\n    // Find most challenging level (lowest completion rate)\r\n    let mostChallengingLevel = 1;\r\n    let lowestRate = 100;\r\n    for (const [levelId, levelStats] of this.stats.levelStats) {\r\n      if (levelStats.attempts > 0 && levelStats.completionRate < lowestRate) {\r\n        lowestRate = levelStats.completionRate;\r\n        mostChallengingLevel = levelId;\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalPlayTime,\r\n      gamesPlayed,\r\n      completionRate,\r\n      averageScore,\r\n      favoriteLevel,\r\n      mostChallengingLevel,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle game start event\r\n   */\r\n  private handleGameStart(event: StatsEvent): void {\r\n    this.stats.totalGamesStarted++;\r\n    this.stats.lastUpdated = event.timestamp;\r\n    logger.debug('📊 Game start recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle game complete event\r\n   */\r\n  private handleGameComplete(event: StatsEvent): void {\r\n    this.stats.totalGamesCompleted++;\r\n    this.stats.lastUpdated = event.timestamp;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.completed = true;\r\n      this.currentSession.endTime = event.timestamp;\r\n      this.currentSession.duration = event.timestamp - this.currentSession.startTime;\r\n    }\r\n    \r\n    logger.debug('📊 Game complete recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle level start event\r\n   */\r\n  private handleLevelStart(event: StatsEvent): void {\r\n    const levelId = event.data?.levelId || 1;\r\n    let levelStats = this.stats.levelStats.get(levelId);\r\n    \r\n    if (!levelStats) {\r\n      levelStats = this.createLevelStats(levelId);\r\n      this.stats.levelStats.set(levelId, levelStats);\r\n    }\r\n    \r\n    levelStats.attempts++;\r\n    levelStats.lastPlayed = event.timestamp;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.levelsPlayed.push(levelId);\r\n    }\r\n    \r\n    logger.debug(`📊 Level ${levelId} start recorded`, null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle level complete event\r\n   */\r\n  private handleLevelComplete(event: StatsEvent): void {\r\n    const levelId = event.data?.levelId || 1;\r\n    const completionTime = event.data?.completionTime || 0;\r\n    const score = event.data?.score || 0;\r\n    \r\n    const levelStats = this.stats.levelStats.get(levelId);\r\n    if (levelStats) {\r\n      levelStats.completions++;\r\n      levelStats.completionRate = (levelStats.completions / levelStats.attempts) * 100;\r\n      \r\n      if (completionTime > 0 && (levelStats.bestTime === 0 || completionTime < levelStats.bestTime)) {\r\n        levelStats.bestTime = completionTime;\r\n      }\r\n      \r\n      if (score > levelStats.bestScore) {\r\n        levelStats.bestScore = score;\r\n      }\r\n    }\r\n    \r\n    this.stats.levelsCompleted = Math.max(this.stats.levelsCompleted, levelId);\r\n    this.stats.highestLevel = Math.max(this.stats.highestLevel, levelId);\r\n    \r\n    logger.debug(`📊 Level ${levelId} complete recorded`, null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle goal reached event\r\n   */\r\n  private handleGoalReached(_event: StatsEvent): void {\r\n    this.stats.totalGoalsReached++;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.goalsReached++;\r\n    }\r\n    \r\n    logger.debug('📊 Goal reached recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle ball lost event\r\n   */\r\n  private handleBallLost(_event: StatsEvent): void {\r\n    this.stats.totalBallsLost++;\r\n    \r\n    if (this.currentSession) {\r\n      this.currentSession.ballsLost++;\r\n    }\r\n    \r\n    logger.debug('📊 Ball lost recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle death event\r\n   */\r\n  private handleDeath(_event: StatsEvent): void {\r\n    this.stats.totalDeaths++;\r\n    logger.debug('📊 Death recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle session start event\r\n   */\r\n  private handleSessionStart(event: StatsEvent): void {\r\n    this.stats.totalSessions++;\r\n    \r\n    this.currentSession = {\r\n      sessionId: this.generateSessionId(),\r\n      startTime: event.timestamp,\r\n      duration: 0,\r\n      levelsPlayed: [],\r\n      goalsReached: 0,\r\n      ballsLost: 0,\r\n      score: 0,\r\n      completed: false,\r\n    };\r\n    \r\n    logger.debug('📊 Session start recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle session end event\r\n   */\r\n  private handleSessionEnd(event: StatsEvent): void {\r\n    if (this.currentSession) {\r\n      this.currentSession.endTime = event.timestamp;\r\n      this.currentSession.duration = event.timestamp - this.currentSession.startTime;\r\n      \r\n      // Add to recent sessions\r\n      this.stats.recentSessions.unshift(this.currentSession);\r\n      if (this.stats.recentSessions.length > 10) {\r\n        this.stats.recentSessions = this.stats.recentSessions.slice(0, 10);\r\n      }\r\n      \r\n      // Update longest session\r\n      if (this.currentSession.duration > this.stats.longestSession) {\r\n        this.stats.longestSession = this.currentSession.duration;\r\n      }\r\n      \r\n      this.currentSession = null;\r\n    }\r\n    \r\n    logger.debug('📊 Session end recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Handle FPS update event\r\n   */\r\n  private handleFPSUpdate(event: StatsEvent): void {\r\n    const fps = event.data?.fps || 0;\r\n    \r\n    this.fpsSamples.push(fps);\r\n    if (this.fpsSamples.length > this.MAX_FPS_SAMPLES) {\r\n      this.fpsSamples.shift();\r\n    }\r\n    \r\n    // Update performance stats\r\n    this.stats.performance.averageFPS = this.fpsSamples.reduce((a, b) => a + b, 0) / this.fpsSamples.length;\r\n    this.stats.performance.minFPS = Math.min(...this.fpsSamples);\r\n    this.stats.performance.maxFPS = Math.max(...this.fpsSamples);\r\n    this.stats.performance.fpsSamples = [...this.fpsSamples];\r\n  }\r\n\r\n  /**\r\n   * Handle achievement unlocked event\r\n   */\r\n  private handleAchievementUnlocked(_event: StatsEvent): void {\r\n    this.stats.achievementsUnlocked++;\r\n    this.stats.achievementProgress = (this.stats.achievementsUnlocked / this.stats.totalAchievements) * 100;\r\n    logger.debug('📊 Achievement unlocked recorded', null, 'StatsManager');\r\n  }\r\n\r\n  /**\r\n   * Create new stats object\r\n   */\r\n  private createNewStats(): GameStats {\r\n    return {\r\n      version: this.VERSION,\r\n      lastUpdated: Date.now(),\r\n      totalPlayTime: 0,\r\n      totalSessions: 0,\r\n      totalGamesStarted: 0,\r\n      totalGamesCompleted: 0,\r\n      totalGoalsReached: 0,\r\n      totalBallsLost: 0,\r\n      totalDeaths: 0,\r\n      highestScore: 0,\r\n      highestLevel: 1,\r\n      longestSession: 0,\r\n      fastestLevelCompletion: 0,\r\n      levelsCompleted: 0,\r\n      totalLevelAttempts: 0,\r\n      averageCompletionRate: 0,\r\n      levelStats: new Map(),\r\n      performance: this.createPerformanceStats(),\r\n      recentSessions: [],\r\n      achievementsUnlocked: 0,\r\n      totalAchievements: 0,\r\n      achievementProgress: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create performance stats object\r\n   */\r\n  private createPerformanceStats(): PerformanceStats {\r\n    return {\r\n      averageFPS: 0,\r\n      minFPS: 0,\r\n      maxFPS: 0,\r\n      fpsSamples: [],\r\n      loadTimes: {\r\n        gameStart: 0,\r\n        levelLoad: 0,\r\n        assetLoad: 0,\r\n      },\r\n      deviceInfo: {\r\n        userAgent: navigator.userAgent,\r\n        screenResolution: `${screen.width}x${screen.height}`,\r\n        platform: navigator.platform,\r\n        language: navigator.language,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create level stats object\r\n   */\r\n  private createLevelStats(levelId: number): LevelStats {\r\n    return {\r\n      levelId,\r\n      attempts: 0,\r\n      completions: 0,\r\n      bestTime: 0,\r\n      bestScore: 0,\r\n      totalPlayTime: 0,\r\n      ballsLost: 0,\r\n      goalsReached: 0,\r\n      averageAttempts: 0,\r\n      completionRate: 0,\r\n      lastPlayed: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize performance stats\r\n   */\r\n  private initializePerformanceStats(): void {\r\n    this.stats.performance = this.createPerformanceStats();\r\n  }\r\n\r\n  /**\r\n   * Generate unique session ID\r\n   */\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Load stats from localStorage\r\n   */\r\n  private loadStats(): GameStats {\r\n    try {\r\n      const savedStats = localStorage.getItem(this.STATS_KEY);\r\n      if (savedStats) {\r\n        const parsedStats = JSON.parse(savedStats);\r\n        \r\n        // Convert levelStats back to Map\r\n        if (parsedStats.levelStats && typeof parsedStats.levelStats === 'object') {\r\n          parsedStats.levelStats = new Map(Object.entries(parsedStats.levelStats));\r\n        }\r\n        \r\n        // Validate and migrate if needed\r\n        if (this.validateStats(parsedStats)) {\r\n          logger.info('📂 Stats loaded from storage', null, 'StatsManager');\r\n          return parsedStats;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('❌ Failed to load stats:', error, 'StatsManager');\r\n    }\r\n    \r\n    logger.info('🆕 Creating new stats', null, 'StatsManager');\r\n    return this.createNewStats();\r\n  }\r\n\r\n  /**\r\n   * Save stats to localStorage\r\n   */\r\n  private saveStats(): void {\r\n    try {\r\n      const statsToSave = {\r\n        ...this.stats,\r\n        levelStats: Object.fromEntries(this.stats.levelStats),\r\n      };\r\n      localStorage.setItem(this.STATS_KEY, JSON.stringify(statsToSave));\r\n    } catch (error) {\r\n      logger.error('❌ Failed to save stats:', error, 'StatsManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate stats data structure\r\n   */\r\n  private validateStats(stats: any): stats is GameStats {\r\n    return stats && \r\n           typeof stats.version === 'string' &&\r\n           typeof stats.lastUpdated === 'number' &&\r\n           typeof stats.totalPlayTime === 'number';\r\n  }\r\n\r\n  /**\r\n   * Format play time for display\r\n   */\r\n  private formatPlayTime(ms: number): string {\r\n    const hours = Math.floor(ms / (1000 * 60 * 60));\r\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Centralized Power-Up Configuration\r\n// Single source of truth for all power-up settings and effects\r\n\r\nimport { PowerUpType, BallType } from './PowerUpTypes';\r\n\r\nexport interface VisualEffectConfig {\r\n  type: 'overlay' | 'particle' | 'glow' | 'animation';\r\n  data: any;\r\n}\r\n\r\nexport interface PhysicsEffectConfig {\r\n  timeScale?: number;\r\n  magneticForce?: number;\r\n  barSpeedMultiplier?: number;\r\n  frictionModifier?: number;\r\n  massMultiplier?: number;\r\n}\r\n\r\nexport interface PowerUpConfig {\r\n  // Basic properties\r\n  name: string;\r\n  description: string;\r\n  baseDuration: number; // -1 for permanent until used\r\n  baseCharges: number;\r\n  \r\n  // Effect configurations\r\n  physics: PhysicsEffectConfig;\r\n  \r\n  // Visual effects\r\n  visualEffects: {\r\n    activation: VisualEffectConfig[];\r\n    active: VisualEffectConfig[];\r\n    deactivation: VisualEffectConfig[];\r\n  };\r\n  \r\n  // Audio effects\r\n  audio: {\r\n    activation?: string;\r\n    deactivation?: string;\r\n    ambient?: string;\r\n  };\r\n  \r\n  // Upgrade scaling\r\n  upgradeScaling: {\r\n    durationMultiplier?: number;\r\n    chargesMultiplier?: number;\r\n    effectMultiplier?: number;\r\n  };\r\n}\r\n\r\nexport const POWER_UP_CONFIGS: Record<PowerUpType, PowerUpConfig> = {\r\n  [PowerUpType.SLOW_MO_SURGE]: {\r\n    name: 'Slow-Mo Surge',\r\n    description: 'Slows down time for precise control',\r\n    baseDuration: 5000, // 5 seconds\r\n    baseCharges: 1,\r\n    physics: {\r\n      timeScale: 0.3, // 30% speed - unified value\r\n    },\r\n    visualEffects: {\r\n      activation: [\r\n        {\r\n          type: 'overlay',\r\n          data: {\r\n            color: 'rgba(0, 255, 255, 0.2)',\r\n            opacity: 0.3,\r\n            fadeIn: 300,\r\n          },\r\n        },\r\n      ],\r\n      active: [\r\n        {\r\n          type: 'overlay',\r\n          data: {\r\n            color: 'rgba(0, 255, 255, 0.4)',\r\n            opacity: 0.3,\r\n            pulse: true,\r\n            pulseSpeed: 0.01,\r\n          },\r\n        },\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'ball',\r\n            color: '#00ffff',\r\n            intensity: 1.5,\r\n            pulse: true,\r\n          },\r\n        },\r\n      ],\r\n      deactivation: [\r\n        {\r\n          type: 'overlay',\r\n          data: {\r\n            color: 'rgba(0, 255, 255, 0.2)',\r\n            opacity: 0.3,\r\n            fadeOut: 500,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    audio: {\r\n      activation: 'slowmo_activate',\r\n      deactivation: 'slowmo_deactivate',\r\n      ambient: 'slowmo_ambient',\r\n    },\r\n    upgradeScaling: {\r\n      durationMultiplier: 1.2,\r\n      chargesMultiplier: 1.0,\r\n      effectMultiplier: 1.0,\r\n    },\r\n  },\r\n\r\n  [PowerUpType.MAGNETIC_GUIDE]: {\r\n    name: 'Magnetic Guide',\r\n    description: 'Attracts the ball toward the target',\r\n    baseDuration: 5000, // 5 seconds\r\n    baseCharges: 1,\r\n    physics: {\r\n      magneticForce: 0.3,\r\n    },\r\n    visualEffects: {\r\n      activation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'hole',\r\n            color: '#ff00ff',\r\n            intensity: 0.5,\r\n            fadeIn: 200,\r\n          },\r\n        },\r\n      ],\r\n      active: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'hole',\r\n            color: '#ff00ff',\r\n            intensity: 1.0,\r\n            pulse: true,\r\n            pulseSpeed: 0.01,\r\n            pulseAmplitude: 0.3,\r\n          },\r\n        },\r\n        {\r\n          type: 'particle',\r\n          data: {\r\n            type: 'electric_arc',\r\n            from: 'ball',\r\n            to: 'hole',\r\n            color: '#ff00ff',\r\n            count: 3,\r\n            frequency: 100, // ms between particles\r\n          },\r\n        },\r\n      ],\r\n      deactivation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'hole',\r\n            color: '#ff00ff',\r\n            intensity: 0.5,\r\n            fadeOut: 300,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    audio: {\r\n      activation: 'magnetic_activate',\r\n      ambient: 'magnetic_ambient',\r\n    },\r\n    upgradeScaling: {\r\n      durationMultiplier: 1.1,\r\n      effectMultiplier: 1.3,\r\n    },\r\n  },\r\n\r\n  [PowerUpType.CIRCUIT_PATCH]: {\r\n    name: 'Circuit Patch',\r\n    description: 'Shields the ball from falling off once',\r\n    baseDuration: -1, // Permanent until used\r\n    baseCharges: 1,\r\n    physics: {\r\n      // No physics effects - handled as special case\r\n    },\r\n    visualEffects: {\r\n      activation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'ball',\r\n            color: '#00ff00',\r\n            intensity: 0.8,\r\n            type: 'shield_ring',\r\n            fadeIn: 400,\r\n          },\r\n        },\r\n      ],\r\n      active: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'ball',\r\n            color: '#00ff00',\r\n            intensity: 1.2,\r\n            type: 'shield_ring',\r\n            pulse: true,\r\n            pulseSpeed: 0.02,\r\n          },\r\n        },\r\n      ],\r\n      deactivation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'ball',\r\n            color: '#00ff00',\r\n            intensity: 2.0,\r\n            type: 'shield_explosion',\r\n            duration: 200,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    audio: {\r\n      activation: 'shield_activate',\r\n      deactivation: 'shield_used',\r\n    },\r\n    upgradeScaling: {\r\n      chargesMultiplier: 1.0,\r\n    },\r\n  },\r\n\r\n  [PowerUpType.OVERCLOCK_BOOST]: {\r\n    name: 'Overclock Boost',\r\n    description: 'Increases bar movement speed',\r\n    baseDuration: 4000, // 4 seconds\r\n    baseCharges: 1,\r\n    physics: {\r\n      barSpeedMultiplier: 1.5,\r\n    },\r\n    visualEffects: {\r\n      activation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'bar',\r\n            color: '#ff6600',\r\n            intensity: 1.0,\r\n            fadeIn: 200,\r\n          },\r\n        },\r\n      ],\r\n      active: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'bar',\r\n            color: '#ff6600',\r\n            intensity: 1.0,\r\n            pulse: true,\r\n            pulseSpeed: 0.02,\r\n            pulseAmplitude: 0.5,\r\n          },\r\n        },\r\n        {\r\n          type: 'particle',\r\n          data: {\r\n            type: 'spark',\r\n            target: 'bar_ends',\r\n            color: '#ff6600',\r\n            count: 5,\r\n            frequency: 200,\r\n          },\r\n        },\r\n      ],\r\n      deactivation: [\r\n        {\r\n          type: 'glow',\r\n          data: {\r\n            target: 'bar',\r\n            color: '#ff6600',\r\n            intensity: 1.5,\r\n            fadeOut: 400,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    audio: {\r\n      activation: 'overclock_activate',\r\n      deactivation: 'overclock_deactivate',\r\n      ambient: 'overclock_ambient',\r\n    },\r\n    upgradeScaling: {\r\n      durationMultiplier: 1.2,\r\n      effectMultiplier: 1.1,\r\n    },\r\n  },\r\n\r\n  [PowerUpType.SCAN_REVEAL]: {\r\n    name: 'Scan Reveal',\r\n    description: 'Shows the optimal path to the target',\r\n    baseDuration: 3000, // 3 seconds\r\n    baseCharges: 1,\r\n    physics: {\r\n      // No physics effects - pure visual\r\n    },\r\n    visualEffects: {\r\n      activation: [\r\n        {\r\n          type: 'animation',\r\n          data: {\r\n            type: 'scan_sweep',\r\n            color: '#00ffff',\r\n            speed: 3.0,\r\n            fadeIn: 100,\r\n          },\r\n        },\r\n      ],\r\n      active: [\r\n        {\r\n          type: 'overlay',\r\n          data: {\r\n            type: 'path_reveal',\r\n            color: '#00ffff',\r\n            opacity: 0.6,\r\n            animated: true,\r\n          },\r\n        },\r\n        {\r\n          type: 'animation',\r\n          data: {\r\n            type: 'scan_bar',\r\n            color: '#00ffff',\r\n            speed: 2.0,\r\n          },\r\n        },\r\n      ],\r\n      deactivation: [\r\n        {\r\n          type: 'overlay',\r\n          data: {\r\n            type: 'path_reveal',\r\n            color: '#00ffff',\r\n            opacity: 0.6,\r\n            fadeOut: 500,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    audio: {\r\n      activation: 'scan_activate',\r\n      deactivation: 'scan_deactivate',\r\n    },\r\n    upgradeScaling: {\r\n      durationMultiplier: 1.3,\r\n    },\r\n  },\r\n};\r\n\r\n// Ball type configurations\r\nexport interface BallTypeConfig {\r\n  name: string;\r\n  description: string;\r\n  physics: {\r\n    mass: number;\r\n    friction: number;\r\n    restitution: number;\r\n  };\r\n  visual: {\r\n    sprite: string;\r\n    glow?: {\r\n      color: string;\r\n      intensity: number;\r\n    };\r\n    trail?: {\r\n      color: string;\r\n      length: number;\r\n    };\r\n  };\r\n  unlockCondition: {\r\n    type: 'score' | 'achievement' | 'level';\r\n    value: number | string;\r\n  };\r\n}\r\n\r\nexport const BALL_TYPE_CONFIGS: Record<BallType, BallTypeConfig> = {\r\n  [BallType.STANDARD]: {\r\n    name: 'Standard Ball',\r\n    description: 'The classic ball with balanced physics',\r\n    physics: {\r\n      mass: 6,\r\n      friction: 0.18,\r\n      restitution: 0.65,\r\n    },\r\n    visual: {\r\n      sprite: 'ball_standard',\r\n    },\r\n    unlockCondition: {\r\n      type: 'score',\r\n      value: 0, // Always unlocked\r\n    },\r\n  },\r\n\r\n  [BallType.HEAVY]: {\r\n    name: 'Heavy Ball',\r\n    description: 'Harder to control but more stable',\r\n    physics: {\r\n      mass: 9, // 1.5x standard\r\n      friction: 0.216, // 1.2x standard\r\n      restitution: 0.52, // 0.8x standard\r\n    },\r\n    visual: {\r\n      sprite: 'ball_heavy',\r\n      glow: {\r\n        color: '#666666',\r\n        intensity: 0.8,\r\n      },\r\n    },\r\n    unlockCondition: {\r\n      type: 'score',\r\n      value: 50000,\r\n    },\r\n  },\r\n\r\n  [BallType.LIGHT]: {\r\n    name: 'Light Ball',\r\n    description: 'More responsive but less stable',\r\n    physics: {\r\n      mass: 4.2, // 0.7x standard\r\n      friction: 0.108, // 0.6x standard\r\n      restitution: 0.715, // 1.1x standard\r\n    },\r\n    visual: {\r\n      sprite: 'ball_light',\r\n      glow: {\r\n        color: '#ffffff',\r\n        intensity: 1.2,\r\n      },\r\n      trail: {\r\n        color: '#ffffff',\r\n        length: 5,\r\n      },\r\n    },\r\n    unlockCondition: {\r\n      type: 'achievement',\r\n      value: 'speed_demon',\r\n    },\r\n  },\r\n\r\n  [BallType.NEON_SPLIT]: {\r\n    name: 'Neon Split',\r\n    description: 'Unique physics with special effects',\r\n    physics: {\r\n      mass: 5.4, // 0.9x standard\r\n      friction: 0.162, // 0.9x standard\r\n      restitution: 0.65, // Same as standard\r\n    },\r\n    visual: {\r\n      sprite: 'ball_neon',\r\n      glow: {\r\n        color: '#00ffff',\r\n        intensity: 1.5,\r\n      },\r\n      trail: {\r\n        color: '#00ffff',\r\n        length: 8,\r\n      },\r\n    },\r\n    unlockCondition: {\r\n      type: 'level',\r\n      value: 15,\r\n    },\r\n  },\r\n};\r\n\r\n// Upgrade configurations\r\nexport interface UpgradeConfig {\r\n  name: string;\r\n  description: string;\r\n  maxLevel: number;\r\n  costs: number[]; // Cost for each level\r\n  effects: {\r\n    [key: string]: number[]; // Effect values per level\r\n  };\r\n}\r\n\r\nexport const UPGRADE_CONFIGS: Record<string, UpgradeConfig> = {\r\n  slowMoCharges: {\r\n    name: 'Slow-Mo Charges',\r\n    description: 'Increases maximum Slow-Mo Surge charges',\r\n    maxLevel: 3,\r\n    costs: [1000, 2500, 5000],\r\n    effects: {\r\n      maxCharges: [2, 3, 4],\r\n    },\r\n  },\r\n\r\n  barSpeedLevel: {\r\n    name: 'Bar Speed',\r\n    description: 'Increases base bar movement speed',\r\n    maxLevel: 5,\r\n    costs: [500, 1000, 2000, 4000, 8000],\r\n    effects: {\r\n      speedMultiplier: [1.1, 1.2, 1.3, 1.4, 1.5],\r\n    },\r\n  },\r\n\r\n  frictionLevel: {\r\n    name: 'Friction Reduction',\r\n    description: 'Reduces surface friction for smoother movement',\r\n    maxLevel: 4,\r\n    costs: [800, 1600, 3200, 6400],\r\n    effects: {\r\n      frictionModifier: [0.95, 0.9, 0.85, 0.8],\r\n    },\r\n  },\r\n\r\n  shieldLevel: {\r\n    name: 'Shield Capacity',\r\n    description: 'Increases maximum shield charges',\r\n    maxLevel: 3,\r\n    costs: [1500, 3000, 6000],\r\n    effects: {\r\n      maxCharges: [2, 3, 4],\r\n    },\r\n  },\r\n};\r\n\r\n// Helper functions\r\nexport function getPowerUpConfig(type: PowerUpType): PowerUpConfig {\r\n  return POWER_UP_CONFIGS[type];\r\n}\r\n\r\nexport function getBallTypeConfig(type: BallType): BallTypeConfig {\r\n  return BALL_TYPE_CONFIGS[type];\r\n}\r\n\r\nexport function getUpgradeConfig(upgradeType: string): UpgradeConfig {\r\n  return UPGRADE_CONFIGS[upgradeType];\r\n}\r\n\r\n// Configuration validation\r\nexport function validatePowerUpConfig(config: PowerUpConfig): boolean {\r\n  return (\r\n    config.name.length > 0 &&\r\n    config.baseDuration > 0 &&\r\n    config.baseCharges > 0 &&\r\n    config.visualEffects.activation.length > 0\r\n  );\r\n}\r\n\r\nexport function validateBallTypeConfig(config: BallTypeConfig): boolean {\r\n  return (\r\n    config.name.length > 0 &&\r\n    config.physics.mass > 0 &&\r\n    config.physics.friction >= 0 &&\r\n    config.physics.restitution >= 0 &&\r\n    config.visual.sprite.length > 0\r\n  );\r\n} ","// Circuit Breaker - Power-Up Event System\r\n// Handles event-driven architecture for power-up state changes\r\n\r\nimport { PowerUpType, PowerUpState } from './PowerUpManager';\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface PowerUpEventData {\r\n  type: PowerUpType;\r\n  state: PowerUpState;\r\n  timestamp: number;\r\n  context?: any;\r\n}\r\n\r\nexport type PowerUpEventCallback = (data: PowerUpEventData) => void;\r\n\r\nexport interface PowerUpEventCallbacks {\r\n  onActivated?: PowerUpEventCallback;\r\n  onDeactivated?: PowerUpEventCallback;\r\n  onExpired?: PowerUpEventCallback;\r\n  onChargeUsed?: PowerUpEventCallback;\r\n  onChargeAdded?: PowerUpEventCallback;\r\n  onEffectApplied?: PowerUpEventCallback;\r\n  onEffectRemoved?: PowerUpEventCallback;\r\n}\r\n\r\nexport class PowerUpEventSystem {\r\n  private eventCallbacks: Map<PowerUpType, PowerUpEventCallbacks> = new Map();\r\n  private globalCallbacks: PowerUpEventCallbacks = {};\r\n  private eventHistory: PowerUpEventData[] = [];\r\n  private maxHistorySize: number = 100;\r\n\r\n  /**\r\n   * Register callbacks for a specific power-up type\r\n   */\r\n  public registerPowerUpCallbacks(type: PowerUpType, callbacks: PowerUpEventCallbacks): void {\r\n    this.eventCallbacks.set(type, {\r\n      ...this.eventCallbacks.get(type),\r\n      ...callbacks,\r\n    });\r\n    \r\n    logger.debug(`🔗 Registered callbacks for ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Register global callbacks for all power-ups\r\n   */\r\n  public registerGlobalCallbacks(callbacks: PowerUpEventCallbacks): void {\r\n    this.globalCallbacks = {\r\n      ...this.globalCallbacks,\r\n      ...callbacks,\r\n    };\r\n    \r\n    logger.debug('🔗 Registered global power-up callbacks', null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Unregister callbacks for a specific power-up type\r\n   */\r\n  public unregisterPowerUpCallbacks(type: PowerUpType): void {\r\n    this.eventCallbacks.delete(type);\r\n    logger.debug(`🔗 Unregistered callbacks for ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Clear all global callbacks\r\n   */\r\n  public clearGlobalCallbacks(): void {\r\n    this.globalCallbacks = {};\r\n    logger.debug('🔗 Cleared global power-up callbacks', null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit power-up activated event\r\n   */\r\n  public emitActivated(type: PowerUpType, state: PowerUpState, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context,\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onActivated', eventData);\r\n    \r\n    logger.info(`⚡ Power-up activated: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit power-up deactivated event\r\n   */\r\n  public emitDeactivated(type: PowerUpType, state: PowerUpState, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context,\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onDeactivated', eventData);\r\n    \r\n    logger.info(`⚡ Power-up deactivated: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit power-up expired event\r\n   */\r\n  public emitExpired(type: PowerUpType, state: PowerUpState, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context,\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onExpired', eventData);\r\n    \r\n    logger.info(`⚡ Power-up expired: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit charge used event\r\n   */\r\n  public emitChargeUsed(type: PowerUpType, state: PowerUpState, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context,\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onChargeUsed', eventData);\r\n    \r\n    logger.debug(`⚡ Charge used: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit charge added event\r\n   */\r\n  public emitChargeAdded(type: PowerUpType, state: PowerUpState, amount: number, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context: { ...context, amount },\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onChargeAdded', eventData);\r\n    \r\n    logger.debug(`⚡ Charge added: ${type} (+${amount})`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit effect applied event\r\n   */\r\n  public emitEffectApplied(type: PowerUpType, state: PowerUpState, effect: any, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context: { ...context, effect },\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onEffectApplied', eventData);\r\n    \r\n    logger.debug(`⚡ Effect applied: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Emit effect removed event\r\n   */\r\n  public emitEffectRemoved(type: PowerUpType, state: PowerUpState, effect: any, context?: any): void {\r\n    const eventData: PowerUpEventData = {\r\n      type,\r\n      state: { ...state },\r\n      timestamp: Date.now(),\r\n      context: { ...context, effect },\r\n    };\r\n\r\n    this.addToHistory(eventData);\r\n    this.executeCallbacks('onEffectRemoved', eventData);\r\n    \r\n    logger.debug(`⚡ Effect removed: ${type}`, null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Execute callbacks for a specific event type\r\n   */\r\n  private executeCallbacks(eventType: keyof PowerUpEventCallbacks, eventData: PowerUpEventData): void {\r\n    try {\r\n      // Execute type-specific callbacks\r\n      const typeCallbacks = this.eventCallbacks.get(eventData.type);\r\n      if (typeCallbacks && typeCallbacks[eventType]) {\r\n        typeCallbacks[eventType]!(eventData);\r\n      }\r\n\r\n      // Execute global callbacks\r\n      if (this.globalCallbacks[eventType]) {\r\n        this.globalCallbacks[eventType]!(eventData);\r\n      }\r\n    } catch (error) {\r\n      logger.error(`❌ Error executing power-up event callbacks: ${error}`, null, 'PowerUpEventSystem');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add event to history\r\n   */\r\n  private addToHistory(eventData: PowerUpEventData): void {\r\n    this.eventHistory.push(eventData);\r\n    \r\n    // Keep history size manageable\r\n    if (this.eventHistory.length > this.maxHistorySize) {\r\n      this.eventHistory.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recent event history\r\n   */\r\n  public getEventHistory(limit: number = 50): PowerUpEventData[] {\r\n    return this.eventHistory.slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * Get events by type\r\n   */\r\n  public getEventsByType(type: PowerUpType, limit: number = 20): PowerUpEventData[] {\r\n    return this.eventHistory\r\n      .filter(event => event.type === type)\r\n      .slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * Get events by time range\r\n   */\r\n  public getEventsByTimeRange(startTime: number, endTime: number): PowerUpEventData[] {\r\n    return this.eventHistory.filter(\r\n      event => event.timestamp >= startTime && event.timestamp <= endTime,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear event history\r\n   */\r\n  public clearHistory(): void {\r\n    this.eventHistory = [];\r\n    logger.debug('🔄 Power-up event history cleared', null, 'PowerUpEventSystem');\r\n  }\r\n\r\n  /**\r\n   * Get statistics about power-up usage\r\n   */\r\n  public getUsageStatistics(): {\r\n    totalActivations: number;\r\n    activationsByType: Record<string, number>;\r\n    averageActivationTime: number;\r\n    mostUsedPowerUp: PowerUpType | null;\r\n    } {\r\n    const activations = this.eventHistory.filter(event => \r\n      event.type && event.timestamp,\r\n    );\r\n\r\n    const activationsByType: Record<string, number> = {};\r\n    let totalActivationTime = 0;\r\n    let activationCount = 0;\r\n\r\n    activations.forEach(event => {\r\n      const key = event.type.toString();\r\n      activationsByType[key] = (activationsByType[key] || 0) + 1;\r\n      \r\n      if (event.context && event.context.duration) {\r\n        totalActivationTime += event.context.duration;\r\n        activationCount++;\r\n      }\r\n    });\r\n\r\n    const mostUsedPowerUp = Object.entries(activationsByType)\r\n      .sort(([, a], [, b]) => b - a)[0]?.[0] as PowerUpType || null;\r\n\r\n    return {\r\n      totalActivations: activations.length,\r\n      activationsByType,\r\n      averageActivationTime: activationCount > 0 ? totalActivationTime / activationCount : 0,\r\n      mostUsedPowerUp,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Debug: Get all registered callbacks\r\n   */\r\n  public getRegisteredCallbacks(): {\r\n    typeSpecific: Map<PowerUpType, PowerUpEventCallbacks>;\r\n    global: PowerUpEventCallbacks;\r\n    } {\r\n    return {\r\n      typeSpecific: new Map(this.eventCallbacks),\r\n      global: { ...this.globalCallbacks },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset the event system\r\n   */\r\n  public reset(): void {\r\n    this.eventCallbacks.clear();\r\n    this.globalCallbacks = {};\r\n    this.eventHistory = [];\r\n    logger.debug('🔄 PowerUpEventSystem reset', null, 'PowerUpEventSystem');\r\n  }\r\n} ","// Circuit Breaker - Power-Up Management System\r\n// Handles power-up states, effects, and persistence with event-driven architecture\r\n\r\nimport { logger } from '../utils/Logger';\r\nimport { getPowerUpConfig, getBallTypeConfig, getUpgradeConfig } from './PowerUpConfig';\r\nimport { PowerUpEventSystem } from './PowerUpEventSystem';\r\nimport { PowerUpType, BallType } from './PowerUpTypes';\r\n\r\n// Re-export for backwards compatibility\r\nexport { PowerUpType, BallType };\r\n\r\nexport interface PowerUpState {\r\n  type: PowerUpType;\r\n  isActive: boolean;\r\n  startTime: number;\r\n  duration: number;\r\n  charges: number;\r\n  maxCharges: number;\r\n}\r\n\r\nexport interface PowerUpEffect {\r\n  timeScale?: number;\r\n  magneticForce?: number;\r\n  shieldActive?: boolean;\r\n  barSpeedMultiplier?: number;\r\n  scanActive?: boolean;\r\n}\r\n\r\nexport interface UpgradeProgress {\r\n  slowMoCharges: number;\r\n  barSpeedLevel: number;\r\n  frictionLevel: number;\r\n  shieldLevel: number;\r\n  unlockedThemes: string[];\r\n  unlockedBallTypes: BallType[];\r\n  currentTheme: string;\r\n  currentBallType: BallType;\r\n}\r\n\r\nexport class PowerUpManager {\r\n  private activePowerUps: Map<PowerUpType, PowerUpState> = new Map();\r\n  private powerUpEffects: PowerUpEffect = {};\r\n  private upgradeProgress: UpgradeProgress;\r\n  private currentTime: number = 0;\r\n  private eventSystem: PowerUpEventSystem;\r\n  \r\n  // Validation and error handling\r\n  private validationErrors: string[] = [];\r\n\r\n  constructor(eventSystem?: PowerUpEventSystem) {\r\n    this.eventSystem = eventSystem || new PowerUpEventSystem();\r\n    this.upgradeProgress = this.createDefaultUpgradeProgress();\r\n    this.initializeEventHandlers();\r\n    logger.info('⚡ PowerUpManager initialized with event system', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Initialize event handlers for power-up lifecycle\r\n   */\r\n  private initializeEventHandlers(): void {\r\n    // Register global callbacks for logging and stats\r\n    this.eventSystem.registerGlobalCallbacks({\r\n      onActivated: (data) => {\r\n        logger.info(`⚡ Power-up activated: ${data.type}`, null, 'PowerUpManager');\r\n      },\r\n      onDeactivated: (data) => {\r\n        logger.info(`⚡ Power-up deactivated: ${data.type}`, null, 'PowerUpManager');\r\n      },\r\n      onExpired: (data) => {\r\n        logger.info(`⚡ Power-up expired: ${data.type}`, null, 'PowerUpManager');\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create default upgrade progress\r\n   */\r\n  private createDefaultUpgradeProgress(): UpgradeProgress {\r\n    return {\r\n      slowMoCharges: 1,\r\n      barSpeedLevel: 0,\r\n      frictionLevel: 0,\r\n      shieldLevel: 0,\r\n      unlockedThemes: ['default'],\r\n      unlockedBallTypes: [BallType.STANDARD],\r\n      currentTheme: 'default',\r\n      currentBallType: BallType.STANDARD,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update power-up manager\r\n   */\r\n  public update(deltaTime: number): void {\r\n    this.currentTime += deltaTime;\r\n    this.updateActivePowerUps();\r\n    this.calculateCombinedEffects();\r\n    this.validateState();\r\n  }\r\n\r\n  /**\r\n   * Update active power-ups and remove expired ones\r\n   */\r\n  private updateActivePowerUps(): void {\r\n    const expiredPowerUps: PowerUpType[] = [];\r\n\r\n    this.activePowerUps.forEach((state, type) => {\r\n      if (state.isActive && state.duration > 0) {\r\n        const elapsed = this.currentTime - state.startTime;\r\n        if (elapsed >= state.duration) {\r\n          expiredPowerUps.push(type);\r\n        }\r\n      }\r\n    });\r\n\r\n    expiredPowerUps.forEach(type => {\r\n      this.expirePowerUp(type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate combined effects from all active power-ups\r\n   */\r\n  private calculateCombinedEffects(): void {\r\n    // Reset effects\r\n    this.powerUpEffects = {};\r\n\r\n    // Apply effects from active power-ups using centralized config\r\n    this.activePowerUps.forEach((state, type) => {\r\n      if (state.isActive) {\r\n        this.applyPowerUpEffect(type);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Apply individual power-up effect using centralized configuration\r\n   */\r\n  private applyPowerUpEffect(type: PowerUpType): void {\r\n    const config = getPowerUpConfig(type);\r\n    const physics = config.physics;\r\n\r\n    // Apply effects based on configuration\r\n    if (physics.timeScale !== undefined) {\r\n      this.powerUpEffects.timeScale = physics.timeScale;\r\n    }\r\n    if (physics.magneticForce !== undefined) {\r\n      this.powerUpEffects.magneticForce = physics.magneticForce;\r\n    }\r\n    if (physics.barSpeedMultiplier !== undefined) {\r\n      this.powerUpEffects.barSpeedMultiplier = physics.barSpeedMultiplier;\r\n    }\r\n\r\n    // Special cases\r\n    switch (type) {\r\n    case PowerUpType.CIRCUIT_PATCH:\r\n      this.powerUpEffects.shieldActive = true;\r\n      break;\r\n    case PowerUpType.SCAN_REVEAL:\r\n      this.powerUpEffects.scanActive = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a power-up with validation and events\r\n   */\r\n  public activatePowerUp(type: PowerUpType): boolean {\r\n    // Validate power-up type\r\n    if (!this.validatePowerUpType(type)) {\r\n      logger.error(`❌ Invalid power-up type: ${type}`, null, 'PowerUpManager');\r\n      return false;\r\n    }\r\n\r\n    const state = this.activePowerUps.get(type);\r\n    if (!state) {\r\n      logger.error(`❌ Power-up state not found: ${type}`, null, 'PowerUpManager');\r\n      return false;\r\n    }\r\n\r\n    if (state.charges <= 0) {\r\n      logger.warn(`⚠️ No charges available for: ${type}`, null, 'PowerUpManager');\r\n      return false;\r\n    }\r\n\r\n    // Deactivate if already active (refresh)\r\n    if (state.isActive) {\r\n      this.deactivatePowerUp(type);\r\n    }\r\n\r\n    // Use a charge\r\n    state.charges--;\r\n    this.eventSystem.emitChargeUsed(type, state);\r\n\r\n    // Activate the power-up\r\n    state.isActive = true;\r\n    state.startTime = this.currentTime;\r\n\r\n    // Update duration from config (may have been upgraded)\r\n    const config = getPowerUpConfig(type);\r\n    state.duration = this.getUpgradedDuration(type, config.baseDuration);\r\n\r\n    // Emit activation event\r\n    this.eventSystem.emitActivated(type, state, {\r\n      duration: state.duration,\r\n      remainingCharges: state.charges,\r\n    });\r\n\r\n    logger.info(`⚡ Power-up activated: ${type} (${state.charges} charges remaining)`, null, 'PowerUpManager');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Deactivate a power-up\r\n   */\r\n  public deactivatePowerUp(type: PowerUpType): void {\r\n    const state = this.activePowerUps.get(type);\r\n    if (state && state.isActive) {\r\n      state.isActive = false;\r\n      \r\n      // Emit deactivation event\r\n      this.eventSystem.emitDeactivated(type, state);\r\n      \r\n      logger.info(`⚡ Power-up deactivated: ${type}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expire a power-up (when duration runs out)\r\n   */\r\n  private expirePowerUp(type: PowerUpType): void {\r\n    const state = this.activePowerUps.get(type);\r\n    if (state && state.isActive) {\r\n      state.isActive = false;\r\n      \r\n      // Emit expiration event\r\n      this.eventSystem.emitExpired(type, state);\r\n      \r\n      logger.info(`⚡ Power-up expired: ${type}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add charges to a power-up with validation\r\n   */\r\n  public addCharges(type: PowerUpType, amount: number = 1): boolean {\r\n    if (!this.validatePowerUpType(type)) {\r\n      return false;\r\n    }\r\n\r\n    const state = this.activePowerUps.get(type);\r\n    if (!state) {\r\n      logger.error(`❌ Power-up state not found: ${type}`, null, 'PowerUpManager');\r\n      return false;\r\n    }\r\n\r\n    const oldCharges = state.charges;\r\n    state.charges = Math.min(state.charges + amount, state.maxCharges);\r\n    const actualAdded = state.charges - oldCharges;\r\n\r\n    if (actualAdded > 0) {\r\n      this.eventSystem.emitChargeAdded(type, state, actualAdded);\r\n      logger.info(`⚡ Added ${actualAdded} charges to ${type} (${state.charges}/${state.maxCharges})`, null, 'PowerUpManager');\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get power-up state\r\n   */\r\n  public getPowerUpState(type: PowerUpType): PowerUpState | undefined {\r\n    return this.activePowerUps.get(type);\r\n  }\r\n\r\n  /**\r\n   * Get all active power-ups\r\n   */\r\n  public getActivePowerUps(): Map<PowerUpType, PowerUpState> {\r\n    return new Map(this.activePowerUps);\r\n  }\r\n\r\n  /**\r\n   * Get current power-up effects\r\n   */\r\n  public getPowerUpEffects(): PowerUpEffect {\r\n    return { ...this.powerUpEffects };\r\n  }\r\n\r\n  /**\r\n   * Check if a power-up is active\r\n   */\r\n  public isPowerUpActive(type: PowerUpType): boolean {\r\n    const state = this.activePowerUps.get(type);\r\n    return state ? state.isActive : false;\r\n  }\r\n\r\n  /**\r\n   * Initialize power-ups for a new run\r\n   */\r\n  public initializeRun(): void {\r\n    this.activePowerUps.clear();\r\n\r\n    // Initialize each power-up type using centralized config\r\n    Object.values(PowerUpType).forEach(type => {\r\n      const config = getPowerUpConfig(type);\r\n      \r\n      this.activePowerUps.set(type, {\r\n        type,\r\n        isActive: false,\r\n        startTime: 0,\r\n        duration: config.baseDuration,\r\n        charges: 0, // Start with zero charges\r\n        maxCharges: this.getUpgradedMaxCharges(type, config.baseCharges),\r\n      });\r\n    });\r\n\r\n    // Clear validation errors\r\n    this.validationErrors = [];\r\n\r\n    logger.info('⚡ Power-ups initialized for new run (zero charges)', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Get upgraded duration for a power-up\r\n   */\r\n  private getUpgradedDuration(type: PowerUpType, baseDuration: number): number {\r\n    const config = getPowerUpConfig(type);\r\n    const multiplier = config.upgradeScaling.durationMultiplier || 1.0;\r\n    \r\n    // Apply upgrade multiplier based on upgrade progress\r\n    let upgradeLevel = 0;\r\n    switch (type) {\r\n    case PowerUpType.SLOW_MO_SURGE:\r\n      upgradeLevel = this.upgradeProgress.slowMoCharges;\r\n      break;\r\n      // Add other upgrade types as needed\r\n    }\r\n    \r\n    return baseDuration * Math.pow(multiplier, upgradeLevel);\r\n  }\r\n\r\n  /**\r\n   * Get upgraded max charges for a power-up\r\n   */\r\n  private getUpgradedMaxCharges(type: PowerUpType, baseCharges: number): number {\r\n    const config = getPowerUpConfig(type);\r\n    const multiplier = config.upgradeScaling.chargesMultiplier || 1.0;\r\n    \r\n    // Apply upgrade multiplier based on upgrade progress\r\n    let upgradeLevel = 0;\r\n    switch (type) {\r\n    case PowerUpType.SLOW_MO_SURGE:\r\n      upgradeLevel = this.upgradeProgress.slowMoCharges;\r\n      break;\r\n    case PowerUpType.CIRCUIT_PATCH:\r\n      upgradeLevel = this.upgradeProgress.shieldLevel;\r\n      break;\r\n      // Add other upgrade types as needed\r\n    }\r\n    \r\n    return Math.floor(baseCharges * Math.pow(multiplier, upgradeLevel));\r\n  }\r\n\r\n  /**\r\n   * Get upgrade progress\r\n   */\r\n  public getUpgradeProgress(): UpgradeProgress {\r\n    return { ...this.upgradeProgress };\r\n  }\r\n\r\n  /**\r\n   * Update upgrade progress\r\n   */\r\n  public updateUpgradeProgress(updates: Partial<UpgradeProgress>): void {\r\n    this.upgradeProgress = { ...this.upgradeProgress, ...updates };\r\n    \r\n    // Update max charges for affected power-ups\r\n    this.updateMaxChargesFromUpgrades();\r\n    \r\n    logger.info('⚡ Upgrade progress updated', null, 'PowerUpManager');\r\n  }\r\n\r\n  /**\r\n   * Update max charges based on current upgrades\r\n   */\r\n  private updateMaxChargesFromUpgrades(): void {\r\n    this.activePowerUps.forEach((state, type) => {\r\n      const config = getPowerUpConfig(type);\r\n      const newMaxCharges = this.getUpgradedMaxCharges(type, config.baseCharges);\r\n      \r\n      if (state.maxCharges !== newMaxCharges) {\r\n        state.maxCharges = newMaxCharges;\r\n        // If current charges exceed new max, keep them (don't reduce)\r\n        logger.debug(`⚡ Updated max charges for ${type}: ${newMaxCharges}`, null, 'PowerUpManager');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current ball type\r\n   */\r\n  public getCurrentBallType(): BallType {\r\n    return this.upgradeProgress.currentBallType;\r\n  }\r\n\r\n  /**\r\n   * Set current ball type\r\n   */\r\n  public setCurrentBallType(ballType: BallType): void {\r\n    if (this.upgradeProgress.unlockedBallTypes.includes(ballType)) {\r\n      this.upgradeProgress.currentBallType = ballType;\r\n      logger.info(`⚡ Ball type changed to: ${ballType}`, null, 'PowerUpManager');\r\n    } else {\r\n      logger.warn(`⚠️ Ball type not unlocked: ${ballType}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current theme\r\n   */\r\n  public getCurrentTheme(): string {\r\n    return this.upgradeProgress.currentTheme;\r\n  }\r\n\r\n  /**\r\n   * Set current theme\r\n   */\r\n  public setCurrentTheme(theme: string): void {\r\n    if (this.upgradeProgress.unlockedThemes.includes(theme)) {\r\n      this.upgradeProgress.currentTheme = theme;\r\n      logger.info(`⚡ Theme changed to: ${theme}`, null, 'PowerUpManager');\r\n    } else {\r\n      logger.warn(`⚠️ Theme not unlocked: ${theme}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock a ball type\r\n   */\r\n  public unlockBallType(ballType: BallType): void {\r\n    if (!this.upgradeProgress.unlockedBallTypes.includes(ballType)) {\r\n      this.upgradeProgress.unlockedBallTypes.push(ballType);\r\n      logger.info(`⚡ Ball type unlocked: ${ballType}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlock a theme\r\n   */\r\n  public unlockTheme(theme: string): void {\r\n    if (!this.upgradeProgress.unlockedThemes.includes(theme)) {\r\n      this.upgradeProgress.unlockedThemes.push(theme);\r\n      logger.info(`⚡ Theme unlocked: ${theme}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get ball physics properties based on current ball type\r\n   */\r\n  public getBallPhysicsProperties(): {\r\n    mass: number;\r\n    friction: number;\r\n    restitution: number;\r\n    } {\r\n    const ballConfig = getBallTypeConfig(this.upgradeProgress.currentBallType);\r\n    return { ...ballConfig.physics };\r\n  }\r\n\r\n  /**\r\n   * Get bar speed multiplier based on upgrades\r\n   */\r\n  public getBarSpeedMultiplier(): number {\r\n    const baseMultiplier = 1.0;\r\n    const upgradeConfig = getUpgradeConfig('barSpeedLevel');\r\n    const upgradeMultiplier = upgradeConfig.effects.speedMultiplier?.[this.upgradeProgress.barSpeedLevel] || 1.0;\r\n    const powerUpMultiplier = this.powerUpEffects.barSpeedMultiplier || 1.0;\r\n    \r\n    return baseMultiplier * upgradeMultiplier * powerUpMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Get friction modifier based on upgrades\r\n   */\r\n  public getFrictionModifier(): number {\r\n    const baseFriction = 1.0;\r\n    const upgradeConfig = getUpgradeConfig('frictionLevel');\r\n    const upgradeModifier = upgradeConfig.effects.frictionModifier?.[this.upgradeProgress.frictionLevel] || 1.0;\r\n    \r\n    return baseFriction * upgradeModifier;\r\n  }\r\n\r\n  /**\r\n   * Use shield (for Circuit Patch power-up)\r\n   */\r\n  public useShield(): boolean {\r\n    const state = this.activePowerUps.get(PowerUpType.CIRCUIT_PATCH);\r\n    if (state && state.charges > 0) {\r\n      state.charges--;\r\n      state.isActive = false;\r\n      \r\n      this.eventSystem.emitChargeUsed(PowerUpType.CIRCUIT_PATCH, state, { shieldUsed: true });\r\n      logger.info('🛡️ Shield used', null, 'PowerUpManager');\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Validate power-up type\r\n   */\r\n  private validatePowerUpType(type: PowerUpType): boolean {\r\n    const isValid = Object.values(PowerUpType).includes(type);\r\n    if (!isValid) {\r\n      this.validationErrors.push(`Invalid power-up type: ${type}`);\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  /**\r\n   * Validate current state\r\n   */\r\n  private validateState(): void {\r\n    // Clear old validation errors\r\n    this.validationErrors = [];\r\n    \r\n    // Validate each power-up state\r\n    this.activePowerUps.forEach((state, type) => {\r\n      if (state.charges < 0) {\r\n        this.validationErrors.push(`Negative charges for ${type}: ${state.charges}`);\r\n      }\r\n      if (state.charges > state.maxCharges) {\r\n        this.validationErrors.push(`Charges exceed max for ${type}: ${state.charges}/${state.maxCharges}`);\r\n      }\r\n      if (state.isActive && state.duration > 0) {\r\n        const elapsed = this.currentTime - state.startTime;\r\n        if (elapsed < 0) {\r\n          this.validationErrors.push(`Negative elapsed time for ${type}: ${elapsed}`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Log validation errors\r\n    if (this.validationErrors.length > 0) {\r\n      logger.error(`❌ Validation errors: ${this.validationErrors.join(', ')}`, null, 'PowerUpManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get validation errors\r\n   */\r\n  public getValidationErrors(): string[] {\r\n    return [...this.validationErrors];\r\n  }\r\n\r\n  /**\r\n   * Get event system for external access\r\n   */\r\n  public getEventSystem(): PowerUpEventSystem {\r\n    return this.eventSystem;\r\n  }\r\n\r\n  /**\r\n   * Get usage statistics\r\n   */\r\n  public getUsageStatistics(): {\r\n    totalActivations: number;\r\n    activationsByType: Record<string, number>;\r\n    averageActivationTime: number;\r\n    mostUsedPowerUp: PowerUpType | null;\r\n    currentActiveCount: number;\r\n    } {\r\n    const stats = this.eventSystem.getUsageStatistics();\r\n    const currentActiveCount = Array.from(this.activePowerUps.values())\r\n      .filter(state => state.isActive).length;\r\n    \r\n    return {\r\n      ...stats,\r\n      currentActiveCount,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset all power-ups (for new game)\r\n   */\r\n  public reset(): void {\r\n    this.activePowerUps.clear();\r\n    this.powerUpEffects = {};\r\n    this.currentTime = 0;\r\n    this.validationErrors = [];\r\n    this.eventSystem.clearHistory();\r\n    \r\n    logger.info('⚡ PowerUpManager reset', null, 'PowerUpManager');\r\n  }\r\n} ","// Circuit Breaker - Power-Up Effects System\r\n// Handles visual effects and physics effects separately with caching\r\n\r\nimport { PowerUpType, PowerUpState } from './PowerUpManager';\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine';\r\nimport { TiltingBar } from './TiltingBar';\r\nimport { logger } from '../utils/Logger';\r\nimport { getPowerUpConfig, VisualEffectConfig } from './PowerUpConfig';\r\n\r\nexport interface EffectContext {\r\n  physicsEngine: PhysicsEngine;\r\n  tiltingBar: TiltingBar;\r\n  currentTime: number;\r\n  deltaTime: number;\r\n  targetPosition?: { x: number; y: number };\r\n  targetPath?: { x: number; y: number }[];\r\n}\r\n\r\nexport interface VisualEffect {\r\n  type: 'overlay' | 'particle' | 'glow' | 'animation';\r\n  data: any;\r\n  id: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface PhysicsEffect {\r\n  type: PowerUpType;\r\n  timeScale?: number;\r\n  magneticForce?: number;\r\n  barSpeedMultiplier?: number;\r\n  applied: boolean;\r\n  timestamp: number;\r\n}\r\n\r\nexport class PowerUpEffects {\r\n  // Caching system\r\n  private visualEffectCache: Map<string, VisualEffect[]> = new Map();\r\n\r\n  private lastCacheUpdate: Map<PowerUpType, number> = new Map();\r\n  private cacheTimeout: number = 1000; // 1 second cache timeout\r\n\r\n  // Active effects tracking\r\n  private activePhysicsEffects: Map<PowerUpType, PhysicsEffect> = new Map();\r\n  private activeVisualEffects: Map<string, VisualEffect> = new Map();\r\n\r\n  // Path calculation cache\r\n  private pathCache: Map<string, { x: number; y: number }[]> = new Map();\r\n  private pathCacheTimeout: number = 5000; // 5 seconds for path cache\r\n\r\n  /**\r\n   * Apply physics effects for a power-up (called once on activation)\r\n   */\r\n  public applyPhysicsEffects(type: PowerUpType, context: EffectContext): void {\r\n    const config = getPowerUpConfig(type);\r\n    \r\n    // Remove any existing physics effect of this type\r\n    this.removePhysicsEffects(type, context);\r\n\r\n    const physicsEffect: PhysicsEffect = {\r\n      type,\r\n      applied: true,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    switch (type) {\r\n    case PowerUpType.SLOW_MO_SURGE:\r\n      physicsEffect.timeScale = config.physics.timeScale;\r\n      // Apply time scale to physics engine\r\n      if (context.physicsEngine.setTimeScale) {\r\n        context.physicsEngine.setTimeScale(config.physics.timeScale || 1.0);\r\n      }\r\n      break;\r\n\r\n    case PowerUpType.MAGNETIC_GUIDE:\r\n      physicsEffect.magneticForce = config.physics.magneticForce;\r\n      // Physics effects for magnetic guide are applied in update loop\r\n      break;\r\n\r\n    case PowerUpType.OVERCLOCK_BOOST:\r\n      physicsEffect.barSpeedMultiplier = config.physics.barSpeedMultiplier;\r\n      // Apply speed multiplier to tilting bar\r\n      context.tiltingBar.setSpeedMultiplier(config.physics.barSpeedMultiplier || 1.0);\r\n      break;\r\n\r\n    case PowerUpType.CIRCUIT_PATCH:\r\n      // Shield is handled as a special case - no physics effects\r\n      break;\r\n\r\n    case PowerUpType.SCAN_REVEAL:\r\n      // Scan reveal is purely visual - no physics effects\r\n      break;\r\n    }\r\n\r\n    this.activePhysicsEffects.set(type, physicsEffect);\r\n    logger.debug(`⚡ Physics effects applied: ${type}`, null, 'PowerUpEffects');\r\n  }\r\n\r\n  /**\r\n   * Remove physics effects for a power-up\r\n   */\r\n  public removePhysicsEffects(type: PowerUpType, context: EffectContext): void {\r\n    const effect = this.activePhysicsEffects.get(type);\r\n    if (!effect) return;\r\n\r\n    switch (type) {\r\n    case PowerUpType.SLOW_MO_SURGE:\r\n      // Reset time scale\r\n      if (context.physicsEngine.setTimeScale) {\r\n        context.physicsEngine.setTimeScale(1.0);\r\n      }\r\n      break;\r\n\r\n    case PowerUpType.OVERCLOCK_BOOST:\r\n      // Reset bar speed multiplier\r\n      context.tiltingBar.setSpeedMultiplier(1.0);\r\n      break;\r\n\r\n    case PowerUpType.MAGNETIC_GUIDE:\r\n      // Magnetic effects are removed automatically\r\n      break;\r\n\r\n    case PowerUpType.CIRCUIT_PATCH:\r\n    case PowerUpType.SCAN_REVEAL:\r\n      // No physics effects to remove\r\n      break;\r\n    }\r\n\r\n    this.activePhysicsEffects.delete(type);\r\n    logger.debug(`⚡ Physics effects removed: ${type}`, null, 'PowerUpEffects');\r\n  }\r\n\r\n  /**\r\n   * Update physics effects (called every frame for continuous effects)\r\n   */\r\n  public updatePhysicsEffects(context: EffectContext): void {\r\n    // Only update magnetic guide effects here\r\n    const magneticEffect = this.activePhysicsEffects.get(PowerUpType.MAGNETIC_GUIDE);\r\n    if (magneticEffect && context.targetPosition) {\r\n      this.updateMagneticEffect(magneticEffect, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update magnetic effect physics\r\n   */\r\n  private updateMagneticEffect(effect: PhysicsEffect, context: EffectContext): void {\r\n    if (!effect.magneticForce || !context.targetPosition) return;\r\n\r\n    const ball = context.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (!ball) return;\r\n\r\n    const distance = Math.sqrt(\r\n      Math.pow(ball.position.x - context.targetPosition.x, 2) + \r\n      Math.pow(ball.position.y - context.targetPosition.y, 2),\r\n    );\r\n    \r\n    // Only apply force when close to target\r\n    if (distance < 100) {\r\n      const force = effect.magneticForce * (1 - distance / 100);\r\n      const directionX = (context.targetPosition.x - ball.position.x) / distance;\r\n      const directionY = (context.targetPosition.y - ball.position.y) / distance;\r\n      \r\n      ball.acceleration.x += directionX * force * 100;\r\n      ball.acceleration.y += directionY * force * 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get visual effects for active power-ups (cached)\r\n   */\r\n  public getVisualEffects(\r\n    activePowerUps: Map<PowerUpType, PowerUpState>,\r\n    context: EffectContext,\r\n  ): VisualEffect[] {\r\n    const effects: VisualEffect[] = [];\r\n    const currentTime = Date.now();\r\n\r\n    activePowerUps.forEach((state, type) => {\r\n      if (state.isActive) {\r\n        const cacheKey = `${type}_${state.startTime}_${currentTime}`;\r\n        \r\n        // Check cache first\r\n        if (this.shouldUseCache(type, currentTime)) {\r\n          const cachedEffects = this.visualEffectCache.get(cacheKey);\r\n          if (cachedEffects) {\r\n            effects.push(...cachedEffects);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Generate new effects\r\n        const newEffects = this.generateVisualEffects(type, state, context);\r\n        \r\n        // Cache the results\r\n        this.visualEffectCache.set(cacheKey, newEffects);\r\n        this.lastCacheUpdate.set(type, currentTime);\r\n        \r\n        effects.push(...newEffects);\r\n      }\r\n    });\r\n\r\n    return effects;\r\n  }\r\n\r\n  /**\r\n   * Generate visual effects for a specific power-up\r\n   */\r\n  private generateVisualEffects(\r\n    type: PowerUpType,\r\n    state: PowerUpState,\r\n    context: EffectContext,\r\n  ): VisualEffect[] {\r\n    const config = getPowerUpConfig(type);\r\n    const effects: VisualEffect[] = [];\r\n    const currentTime = Date.now();\r\n    const elapsed = currentTime - state.startTime;\r\n\r\n    // Determine which visual effects to use based on state\r\n    let effectConfigs: VisualEffectConfig[] = [];\r\n    \r\n    if (elapsed < 500) {\r\n      // Activation effects\r\n      effectConfigs = config.visualEffects.activation;\r\n    } else if (state.isActive) {\r\n      // Active effects\r\n      effectConfigs = config.visualEffects.active;\r\n    } else {\r\n      // Deactivation effects\r\n      effectConfigs = config.visualEffects.deactivation;\r\n    }\r\n\r\n    // Convert config to visual effects\r\n    effectConfigs.forEach((effectConfig, index) => {\r\n      const effect: VisualEffect = {\r\n        type: effectConfig.type,\r\n        data: this.processEffectData(effectConfig.data, type, context),\r\n        id: `${type}_${index}_${currentTime}`,\r\n        timestamp: currentTime,\r\n      };\r\n\r\n      effects.push(effect);\r\n    });\r\n\r\n    return effects;\r\n  }\r\n\r\n  /**\r\n   * Process effect data with context-specific information\r\n   */\r\n  private processEffectData(data: any, type: PowerUpType, context: EffectContext): any {\r\n    const processedData = { ...data };\r\n\r\n    // Add dynamic values based on context\r\n    if (processedData.pulse) {\r\n      processedData.currentIntensity = processedData.intensity + \r\n        Math.sin(context.currentTime * (processedData.pulseSpeed || 0.01)) * \r\n        (processedData.pulseAmplitude || 0.3);\r\n    }\r\n\r\n    // Special processing for scan reveal\r\n    if (type === PowerUpType.SCAN_REVEAL && processedData.type === 'path_reveal') {\r\n      processedData.path = this.getOptimalPath(context);\r\n    }\r\n\r\n    return processedData;\r\n  }\r\n\r\n  /**\r\n   * Get optimal path for scan reveal (cached)\r\n   */\r\n  private getOptimalPath(context: EffectContext): { x: number; y: number }[] {\r\n    if (!context.targetPosition) return [];\r\n\r\n    const ball = context.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (!ball) return [];\r\n\r\n    const cacheKey = `${ball.position.x}_${ball.position.y}_${context.targetPosition.x}_${context.targetPosition.y}`;\r\n    const cached = this.pathCache.get(cacheKey);\r\n    \r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    // Calculate optimal path\r\n    const path = this.calculateOptimalPath(\r\n      ball.position,\r\n      context.targetPosition,\r\n      context.physicsEngine.getObjects(),\r\n    );\r\n\r\n    // Cache the path\r\n    this.pathCache.set(cacheKey, path);\r\n    \r\n    // Clean old cache entries\r\n    setTimeout(() => {\r\n      this.pathCache.delete(cacheKey);\r\n    }, this.pathCacheTimeout);\r\n\r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal path from ball to target\r\n   */\r\n  private calculateOptimalPath(\r\n    ballPosition: { x: number; y: number },\r\n    targetPosition: { x: number; y: number },\r\n    obstacles: any[],\r\n  ): { x: number; y: number }[] {\r\n    const path: { x: number; y: number }[] = [];\r\n    \r\n    // Add ball position\r\n    path.push({ ...ballPosition });\r\n    \r\n    // Simple path calculation with obstacle avoidance\r\n    const steps = 10;\r\n    const dx = targetPosition.x - ballPosition.x;\r\n    const dy = targetPosition.y - ballPosition.y;\r\n    \r\n    for (let i = 1; i <= steps; i++) {\r\n      const t = i / steps;\r\n      let x = ballPosition.x + dx * t;\r\n      let y = ballPosition.y + dy * t;\r\n      \r\n      // Simple obstacle avoidance\r\n      obstacles.forEach(obstacle => {\r\n        if (obstacle.id !== 'game-ball' && this.isPointNearObstacle(x, y, obstacle)) {\r\n          // Adjust path to avoid obstacle\r\n          const avoidanceOffset = 20;\r\n          x += (x < obstacle.position.x) ? -avoidanceOffset : avoidanceOffset;\r\n          y += (y < obstacle.position.y) ? -avoidanceOffset : avoidanceOffset;\r\n        }\r\n      });\r\n      \r\n      path.push({ x, y });\r\n    }\r\n    \r\n    // Add target position\r\n    path.push({ ...targetPosition });\r\n    \r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Check if point is near obstacle\r\n   */\r\n  private isPointNearObstacle(x: number, y: number, obstacle: any): boolean {\r\n    const distance = Math.sqrt(\r\n      Math.pow(x - obstacle.position.x, 2) + \r\n      Math.pow(y - obstacle.position.y, 2),\r\n    );\r\n    return distance < (obstacle.radius || 20) + 10;\r\n  }\r\n\r\n  /**\r\n   * Check if should use cache\r\n   */\r\n  private shouldUseCache(type: PowerUpType, currentTime: number): boolean {\r\n    const lastUpdate = this.lastCacheUpdate.get(type);\r\n    if (!lastUpdate) return false;\r\n    \r\n    return (currentTime - lastUpdate) < this.cacheTimeout;\r\n  }\r\n\r\n  /**\r\n   * Check if ball should be shielded from falling off\r\n   */\r\n  public shouldUseShield(\r\n    ballPosition: { x: number; y: number },\r\n    bounds: { width: number; height: number },\r\n  ): boolean {\r\n    // Check if ball is about to fall off the bottom\r\n    return ballPosition.y > bounds.height + 50;\r\n  }\r\n\r\n  /**\r\n   * Get active physics effects\r\n   */\r\n  public getActivePhysicsEffects(): Map<PowerUpType, PhysicsEffect> {\r\n    return new Map(this.activePhysicsEffects);\r\n  }\r\n\r\n  /**\r\n   * Clear visual effect cache\r\n   */\r\n  public clearVisualCache(): void {\r\n    this.visualEffectCache.clear();\r\n    this.lastCacheUpdate.clear();\r\n    logger.debug('🔄 Visual effect cache cleared', null, 'PowerUpEffects');\r\n  }\r\n\r\n  /**\r\n   * Clear path cache\r\n   */\r\n  public clearPathCache(): void {\r\n    this.pathCache.clear();\r\n    logger.debug('🔄 Path cache cleared', null, 'PowerUpEffects');\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics\r\n   */\r\n  public getCacheStats(): {\r\n    visualCacheSize: number;\r\n    pathCacheSize: number;\r\n    lastUpdates: Map<PowerUpType, number>;\r\n    } {\r\n    return {\r\n      visualCacheSize: this.visualEffectCache.size,\r\n      pathCacheSize: this.pathCache.size,\r\n      lastUpdates: new Map(this.lastCacheUpdate),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset all effects and caches\r\n   */\r\n  public reset(): void {\r\n    this.activePhysicsEffects.clear();\r\n    this.activeVisualEffects.clear();\r\n    this.clearVisualCache();\r\n    this.clearPathCache();\r\n    logger.debug('🔄 PowerUpEffects reset', null, 'PowerUpEffects');\r\n  }\r\n} ","// Circuit Breaker - Power-Up Debug System\r\n// Provides comprehensive debugging tools for power-up system\r\n\r\nimport { PowerUpManager, PowerUpType } from '../core/PowerUpManager';\r\nimport { PowerUpEffects } from '../core/PowerUpEffects';\r\nimport { PowerUpEventSystem } from '../core/PowerUpEventSystem';\r\nimport { logger } from './Logger';\r\n\r\nexport interface DebugConfig {\r\n  showOverlay: boolean;\r\n  showPerformanceStats: boolean;\r\n  showEventHistory: boolean;\r\n  showCacheStats: boolean;\r\n  showValidation: boolean;\r\n  logLevel: 'none' | 'error' | 'warn' | 'info' | 'debug';\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  frameTime: number;\r\n  visualEffectCount: number;\r\n  physicsEffectCount: number;\r\n  cacheHitRate: number;\r\n  memoryUsage: number;\r\n  eventCount: number;\r\n  lastUpdateTime: number;\r\n}\r\n\r\nexport class PowerUpDebugger {\r\n  private powerUpManager: PowerUpManager;\r\n  private powerUpEffects: PowerUpEffects;\r\n  private eventSystem: PowerUpEventSystem;\r\n  private config: DebugConfig;\r\n  private performanceMetrics: PerformanceMetrics;\r\n  private isVisible: boolean = false;\r\n  \r\n  // Performance tracking\r\n  private frameStartTime: number = 0;\r\n  private frameCount: number = 0;\r\n  private performanceHistory: number[] = [];\r\n  private maxHistoryLength: number = 60; // 1 second at 60fps\r\n  \r\n  // Console commands\r\n  private consoleCommands: Map<string, (args: string[]) => void> = new Map();\r\n\r\n  constructor(\r\n    powerUpManager: PowerUpManager,\r\n    powerUpEffects: PowerUpEffects,\r\n    eventSystem: PowerUpEventSystem,\r\n    config: Partial<DebugConfig> = {},\r\n  ) {\r\n    this.powerUpManager = powerUpManager;\r\n    this.powerUpEffects = powerUpEffects;\r\n    this.eventSystem = eventSystem;\r\n    this.config = {\r\n      showOverlay: false,\r\n      showPerformanceStats: false,\r\n      showEventHistory: false,\r\n      showCacheStats: false,\r\n      showValidation: false,\r\n      logLevel: 'warn',\r\n      ...config,\r\n    };\r\n    \r\n    this.performanceMetrics = {\r\n      frameTime: 0,\r\n      visualEffectCount: 0,\r\n      physicsEffectCount: 0,\r\n      cacheHitRate: 0,\r\n      memoryUsage: 0,\r\n      eventCount: 0,\r\n      lastUpdateTime: Date.now(),\r\n    };\r\n    \r\n    this.initializeConsoleCommands();\r\n    this.setupEventListeners();\r\n    \r\n    logger.info('🔧 PowerUpDebugger initialized', null, 'PowerUpDebugger');\r\n  }\r\n\r\n  /**\r\n   * Initialize console commands\r\n   */\r\n  private initializeConsoleCommands(): void {\r\n    this.consoleCommands.set('powerup.activate', (args) => {\r\n      const type = args[0] as PowerUpType;\r\n      if (type && Object.values(PowerUpType).includes(type)) {\r\n        this.powerUpManager.activatePowerUp(type);\r\n        console.log(`✓ Activated power-up: ${type}`);\r\n      } else {\r\n        console.log(`❌ Invalid power-up type: ${type}`);\r\n      }\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.deactivate', (args) => {\r\n      const type = args[0] as PowerUpType;\r\n      if (type && Object.values(PowerUpType).includes(type)) {\r\n        this.powerUpManager.deactivatePowerUp(type);\r\n        console.log(`✓ Deactivated power-up: ${type}`);\r\n      } else {\r\n        console.log(`❌ Invalid power-up type: ${type}`);\r\n      }\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.charges', (args) => {\r\n      const type = args[0] as PowerUpType;\r\n      const amount = parseInt(args[1]) || 1;\r\n      if (type && Object.values(PowerUpType).includes(type)) {\r\n        this.powerUpManager.addCharges(type, amount);\r\n        console.log(`✓ Added ${amount} charges to ${type}`);\r\n      } else {\r\n        console.log(`❌ Invalid power-up type: ${type}`);\r\n      }\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.stats', () => {\r\n      const stats = this.powerUpManager.getUsageStatistics();\r\n      console.log('📊 Power-up Statistics:', stats);\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.debug', (args) => {\r\n      const command = args[0];\r\n      switch (command) {\r\n      case 'show':\r\n        this.show();\r\n        break;\r\n      case 'hide':\r\n        this.hide();\r\n        break;\r\n      case 'toggle':\r\n        this.toggle();\r\n        break;\r\n      case 'clear':\r\n        this.clearHistory();\r\n        break;\r\n      default:\r\n        console.log('Usage: powerup.debug [show|hide|toggle|clear]');\r\n      }\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.cache', (args) => {\r\n      const command = args[0];\r\n      switch (command) {\r\n      case 'stats': {\r\n        const stats = this.powerUpEffects.getCacheStats();\r\n        console.log('📈 Cache Statistics:', stats);\r\n        break;\r\n      }\r\n      case 'clear':\r\n        this.powerUpEffects.clearVisualCache();\r\n        this.powerUpEffects.clearPathCache();\r\n        console.log('✓ Cache cleared');\r\n        break;\r\n      default:\r\n        console.log('Usage: powerup.cache [stats|clear]');\r\n      }\r\n    });\r\n\r\n    this.consoleCommands.set('powerup.validate', () => {\r\n      const errors = this.powerUpManager.getValidationErrors();\r\n      if (errors.length > 0) {\r\n        console.log('❌ Validation Errors:', errors);\r\n      } else {\r\n        console.log('✓ All power-ups are valid');\r\n      }\r\n    });\r\n\r\n    // Register commands globally\r\n    if (typeof window !== 'undefined') {\r\n      (window as any).powerupDebug = {\r\n        activate: (type: PowerUpType) => this.consoleCommands.get('powerup.activate')!([type]),\r\n        deactivate: (type: PowerUpType) => this.consoleCommands.get('powerup.deactivate')!([type]),\r\n        addCharges: (type: PowerUpType, amount: number) => this.consoleCommands.get('powerup.charges')!([type, amount.toString()]),\r\n        stats: () => this.consoleCommands.get('powerup.stats')!([]),\r\n        show: () => this.show(),\r\n        hide: () => this.hide(),\r\n        toggle: () => this.toggle(),\r\n        cache: () => this.consoleCommands.get('powerup.cache')!(['stats']),\r\n        validate: () => this.consoleCommands.get('powerup.validate')!([]),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners for performance monitoring\r\n   */\r\n  private setupEventListeners(): void {\r\n    this.eventSystem.registerGlobalCallbacks({\r\n      onActivated: () => this.performanceMetrics.eventCount++,\r\n      onDeactivated: () => this.performanceMetrics.eventCount++,\r\n      onExpired: () => this.performanceMetrics.eventCount++,\r\n      onChargeUsed: () => this.performanceMetrics.eventCount++,\r\n      onChargeAdded: () => this.performanceMetrics.eventCount++,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start performance measurement for a frame\r\n   */\r\n  public startFrameMeasurement(): void {\r\n    this.frameStartTime = performance.now();\r\n  }\r\n\r\n  /**\r\n   * End performance measurement for a frame\r\n   */\r\n  public endFrameMeasurement(): void {\r\n    const frameTime = performance.now() - this.frameStartTime;\r\n    this.performanceMetrics.frameTime = frameTime;\r\n    this.performanceMetrics.lastUpdateTime = Date.now();\r\n    \r\n    // Update performance history\r\n    this.performanceHistory.push(frameTime);\r\n    if (this.performanceHistory.length > this.maxHistoryLength) {\r\n      this.performanceHistory.shift();\r\n    }\r\n    \r\n    this.frameCount++;\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics\r\n   */\r\n  public updateMetrics(): void {\r\n    // Update cache stats\r\n    const cacheStats = this.powerUpEffects.getCacheStats();\r\n    this.performanceMetrics.visualEffectCount = cacheStats.visualCacheSize;\r\n    this.performanceMetrics.physicsEffectCount = this.powerUpEffects.getActivePhysicsEffects().size;\r\n    \r\n    // Calculate cache hit rate (simplified)\r\n    this.performanceMetrics.cacheHitRate = cacheStats.visualCacheSize > 0 ? \r\n      Math.min(cacheStats.visualCacheSize / 10, 1) : 0;\r\n    \r\n    // Estimate memory usage (simplified)\r\n    this.performanceMetrics.memoryUsage = \r\n      cacheStats.visualCacheSize * 100 + // Estimate 100 bytes per visual effect\r\n      cacheStats.pathCacheSize * 200 + // Estimate 200 bytes per path\r\n      this.eventSystem.getEventHistory().length * 50; // Estimate 50 bytes per event\r\n  }\r\n\r\n  /**\r\n   * Show debug overlay\r\n   */\r\n  public show(): void {\r\n    this.isVisible = true;\r\n    this.config.showOverlay = true;\r\n    logger.info('🔧 Debug overlay shown', null, 'PowerUpDebugger');\r\n  }\r\n\r\n  /**\r\n   * Hide debug overlay\r\n   */\r\n  public hide(): void {\r\n    this.isVisible = false;\r\n    this.config.showOverlay = false;\r\n    logger.info('🔧 Debug overlay hidden', null, 'PowerUpDebugger');\r\n  }\r\n\r\n  /**\r\n   * Toggle debug overlay\r\n   */\r\n  public toggle(): void {\r\n    if (this.isVisible) {\r\n      this.hide();\r\n    } else {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear debug history\r\n   */\r\n  public clearHistory(): void {\r\n    this.performanceHistory = [];\r\n    this.eventSystem.clearHistory();\r\n    this.frameCount = 0;\r\n    logger.info('🔧 Debug history cleared', null, 'PowerUpDebugger');\r\n  }\r\n\r\n  /**\r\n   * Render debug overlay\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isVisible || !this.config.showOverlay) return;\r\n\r\n    // Update metrics before rendering\r\n    this.updateMetrics();\r\n\r\n    // Set up overlay style\r\n    ctx.save();\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(10, 10, 300, 400);\r\n    \r\n    ctx.strokeStyle = '#00ffff';\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeRect(10, 10, 300, 400);\r\n\r\n    // Title\r\n    ctx.fillStyle = '#00ffff';\r\n    ctx.font = 'bold 16px monospace';\r\n    ctx.fillText('Power-Up Debug', 20, 35);\r\n\r\n    let yOffset = 60;\r\n    ctx.font = '12px monospace';\r\n    \r\n    // Performance stats\r\n    if (this.config.showPerformanceStats) {\r\n      ctx.fillStyle = '#ffff00';\r\n      ctx.fillText('Performance:', 20, yOffset);\r\n      yOffset += 20;\r\n      \r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.fillText(`Frame Time: ${this.performanceMetrics.frameTime.toFixed(2)}ms`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`FPS: ${this.getFPS().toFixed(1)}`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`Visual Effects: ${this.performanceMetrics.visualEffectCount}`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`Physics Effects: ${this.performanceMetrics.physicsEffectCount}`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`Cache Hit Rate: ${(this.performanceMetrics.cacheHitRate * 100).toFixed(1)}%`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`Memory Usage: ${this.formatBytes(this.performanceMetrics.memoryUsage)}`, 25, yOffset);\r\n      yOffset += 20;\r\n    }\r\n\r\n    // Active power-ups\r\n    ctx.fillStyle = '#ff9900';\r\n    ctx.fillText('Active Power-ups:', 20, yOffset);\r\n    yOffset += 20;\r\n    \r\n    const activePowerUps = this.powerUpManager.getActivePowerUps();\r\n    if (activePowerUps.size === 0) {\r\n      ctx.fillStyle = '#888888';\r\n      ctx.fillText('None', 25, yOffset);\r\n      yOffset += 15;\r\n    } else {\r\n      activePowerUps.forEach((state, type) => {\r\n        const color = state.isActive ? '#00ff00' : '#888888';\r\n        ctx.fillStyle = color;\r\n        const timeRemaining = state.duration > 0 ? \r\n          Math.max(0, state.duration - (this.performanceMetrics.lastUpdateTime - state.startTime)) : 0;\r\n        ctx.fillText(\r\n          `${type}: ${state.charges}/${state.maxCharges} (${(timeRemaining / 1000).toFixed(1)}s)`,\r\n          25,\r\n          yOffset,\r\n        );\r\n        yOffset += 15;\r\n      });\r\n    }\r\n    yOffset += 10;\r\n\r\n    // Cache stats\r\n    if (this.config.showCacheStats) {\r\n      ctx.fillStyle = '#ff00ff';\r\n      ctx.fillText('Cache Stats:', 20, yOffset);\r\n      yOffset += 20;\r\n      \r\n      const cacheStats = this.powerUpEffects.getCacheStats();\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.fillText(`Visual Cache: ${cacheStats.visualCacheSize}`, 25, yOffset);\r\n      yOffset += 15;\r\n      ctx.fillText(`Path Cache: ${cacheStats.pathCacheSize}`, 25, yOffset);\r\n      yOffset += 20;\r\n    }\r\n\r\n    // Validation errors\r\n    if (this.config.showValidation) {\r\n      const errors = this.powerUpManager.getValidationErrors();\r\n      if (errors.length > 0) {\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fillText('Validation Errors:', 20, yOffset);\r\n        yOffset += 20;\r\n        \r\n        errors.forEach((error, index) => {\r\n          if (index < 3) { // Show max 3 errors\r\n            ctx.fillText(`• ${error}`, 25, yOffset);\r\n            yOffset += 15;\r\n          }\r\n        });\r\n        if (errors.length > 3) {\r\n          ctx.fillText(`... and ${errors.length - 3} more`, 25, yOffset);\r\n          yOffset += 15;\r\n        }\r\n      } else {\r\n        ctx.fillStyle = '#00ff00';\r\n        ctx.fillText('✓ All Valid', 20, yOffset);\r\n        yOffset += 15;\r\n      }\r\n    }\r\n\r\n    // Event history\r\n    if (this.config.showEventHistory) {\r\n      ctx.fillStyle = '#00ffff';\r\n      ctx.fillText('Recent Events:', 20, yOffset);\r\n      yOffset += 20;\r\n      \r\n      const recentEvents = this.eventSystem.getEventHistory(3);\r\n      if (recentEvents.length === 0) {\r\n        ctx.fillStyle = '#888888';\r\n        ctx.fillText('None', 25, yOffset);\r\n      } else {\r\n        recentEvents.reverse().forEach((event) => {\r\n          const age = Date.now() - event.timestamp;\r\n          const color = age < 1000 ? '#00ff00' : age < 5000 ? '#ffff00' : '#888888';\r\n          ctx.fillStyle = color;\r\n          ctx.fillText(\r\n            `${event.type} (${(age / 1000).toFixed(1)}s ago)`,\r\n            25,\r\n            yOffset,\r\n          );\r\n          yOffset += 15;\r\n        });\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Get current FPS\r\n   */\r\n  private getFPS(): number {\r\n    if (this.performanceHistory.length < 2) return 0;\r\n    const avgFrameTime = this.performanceHistory.reduce((a, b) => a + b, 0) / this.performanceHistory.length;\r\n    return 1000 / avgFrameTime;\r\n  }\r\n\r\n  /**\r\n   * Format bytes for display\r\n   */\r\n  private formatBytes(bytes: number): string {\r\n    if (bytes === 0) return '0 B';\r\n    const k = 1024;\r\n    const sizes = ['B', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  /**\r\n   * Execute console command\r\n   */\r\n  public executeCommand(command: string, args: string[] = []): void {\r\n    const handler = this.consoleCommands.get(command);\r\n    if (handler) {\r\n      try {\r\n        handler(args);\r\n      } catch (error) {\r\n        console.error(`❌ Error executing command '${command}':`, error);\r\n      }\r\n    } else {\r\n      console.warn(`❌ Unknown command: ${command}`);\r\n      console.log('Available commands:', Array.from(this.consoleCommands.keys()));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get debug configuration\r\n   */\r\n  public getConfig(): DebugConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update debug configuration\r\n   */\r\n  public updateConfig(updates: Partial<DebugConfig>): void {\r\n    this.config = { ...this.config, ...updates };\r\n    logger.info('🔧 Debug config updated', null, 'PowerUpDebugger');\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  public getPerformanceMetrics(): PerformanceMetrics {\r\n    return { ...this.performanceMetrics };\r\n  }\r\n\r\n  /**\r\n   * Get performance history\r\n   */\r\n  public getPerformanceHistory(): number[] {\r\n    return [...this.performanceHistory];\r\n  }\r\n\r\n  /**\r\n   * Export debug data\r\n   */\r\n  public exportDebugData(): {\r\n    config: DebugConfig;\r\n    metrics: PerformanceMetrics;\r\n    powerUpStates: any;\r\n    eventHistory: any;\r\n    cacheStats: any;\r\n    validationErrors: string[];\r\n    } {\r\n    return {\r\n      config: this.getConfig(),\r\n      metrics: this.getPerformanceMetrics(),\r\n      powerUpStates: Object.fromEntries(this.powerUpManager.getActivePowerUps()),\r\n      eventHistory: this.eventSystem.getEventHistory(),\r\n      cacheStats: this.powerUpEffects.getCacheStats(),\r\n      validationErrors: this.powerUpManager.getValidationErrors(),\r\n    };\r\n  }\r\n} ","// Circuit Breaker - Point Fly-Off System\n// Visual feedback system for scoring events\n\nimport { Vector2 } from '../utils/MathUtils';\nimport { logger } from '../utils/Logger';\n\nexport interface PointFlyOffConfig {\n  points: number;\n  startPosition: Vector2;\n  color: string;\n  fontSize: number;\n  duration: number;\n  animation: 'fly-up' | 'arc' | 'explode' | 'fade';\n  fontFamily: string;\n}\n\nexport enum PointType {\n  GOAL_HIT = 'goal',\n  POWERUP_COLLECT = 'powerup',\n  LEVEL_COMPLETE = 'level',\n  BONUS = 'bonus',\n  ACHIEVEMENT = 'achievement',\n  COMBO = 'combo',\n  TIME_BONUS = 'time_bonus',\n  SAUCER_WAITING = 'saucer_waiting'\n}\n\nexport class PointFlyOff {\n  private config: PointFlyOffConfig;\n  private startTime: number;\n  private currentPosition: Vector2;\n  private isActive: boolean = true;\n  private initialVelocity: Vector2;\n  private id: string;\n\n  // Animation properties\n  private currentScale: number = 1;\n  private currentOpacity: number = 1;\n  private currentRotation: number = 0;\n\n  constructor(config: PointFlyOffConfig) {\n    this.config = config;\n    this.startTime = Date.now();\n    this.currentPosition = { ...config.startPosition };\n    this.id = `flyoff-${this.startTime}-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Set initial velocity based on animation type\n    this.initialVelocity = this.calculateInitialVelocity();\n\n    logger.debug(`✨ Point fly-off created: ${config.points} points at (${config.startPosition.x}, ${config.startPosition.y})`, null, 'PointFlyOff');\n  }\n\n  /**\n   * Calculate initial velocity based on animation type\n   */\n  private calculateInitialVelocity(): Vector2 {\n    switch (this.config.animation) {\n    case 'fly-up':\n      return { x: 0, y: -80 }; // Straight up\n      \n    case 'arc': {\n      // Random arc direction\n      const angle = (Math.random() - 0.5) * Math.PI * 0.6; // ±54 degrees\n      const speed = 60 + Math.random() * 40; // 60-100 pixels/second\n      return {\n        x: Math.sin(angle) * speed,\n        y: -Math.cos(angle) * speed,\n      };\n    }\n      \n    case 'explode': {\n      // Random explosion direction\n      const explosionAngle = Math.random() * Math.PI * 2;\n      const explosionSpeed = 40 + Math.random() * 60;\n      return {\n        x: Math.cos(explosionAngle) * explosionSpeed,\n        y: Math.sin(explosionAngle) * explosionSpeed,\n      };\n    }\n      \n    case 'fade':\n    default:\n      return { x: 0, y: -20 }; // Slight upward drift\n    }\n  }\n\n  /**\n   * Update the animation\n   */\n  public update(deltaTime: number): void {\n    if (!this.isActive) return;\n\n    const elapsed = Date.now() - this.startTime;\n    const progress = Math.min(elapsed / this.config.duration, 1);\n\n    if (progress >= 1) {\n      this.isActive = false;\n      return;\n    }\n\n    // Update position based on velocity and physics\n    this.updatePosition(deltaTime, progress);\n    \n    // Update visual properties\n    this.updateVisualProperties(progress);\n  }\n\n  /**\n   * Update position with physics-based movement\n   */\n  private updatePosition(deltaTime: number, progress: number): void {\n    const dt = deltaTime / 1000; // Convert to seconds\n\n    switch (this.config.animation) {\n    case 'fly-up': {\n      // Simple upward movement with deceleration\n      const upwardSpeed = this.initialVelocity.y * (1 - progress * 0.3);\n      this.currentPosition.y += upwardSpeed * dt;\n      break;\n    }\n\n    case 'arc': {\n      // Arc movement with gravity\n      const gravity = 150; // Pixels per second squared\n      this.currentPosition.x += this.initialVelocity.x * dt;\n      this.currentPosition.y += this.initialVelocity.y * dt;\n      this.initialVelocity.y += gravity * dt; // Apply gravity\n      break;\n    }\n\n    case 'explode': {\n      // Explosive movement with decay\n      const decay = 0.95;\n      this.currentPosition.x += this.initialVelocity.x * dt;\n      this.currentPosition.y += this.initialVelocity.y * dt;\n      this.initialVelocity.x *= decay;\n      this.initialVelocity.y *= decay;\n      break;\n    }\n\n    case 'fade':\n      // Minimal movement, mostly fading\n      this.currentPosition.y += this.initialVelocity.y * dt;\n      break;\n    }\n  }\n\n  /**\n   * Update visual properties (scale, opacity, rotation)\n   */\n  private updateVisualProperties(progress: number): void {\n    switch (this.config.animation) {\n    case 'fly-up':\n      // Scale up briefly, then shrink and fade\n      if (progress < 0.2) {\n        this.currentScale = 1 + progress * 2; // Scale up to 1.4x\n      } else {\n        this.currentScale = 1.4 - (progress - 0.2) * 1.75; // Scale back down\n      }\n      this.currentOpacity = 1 - Math.pow(progress, 1.5);\n      break;\n\n    case 'arc':\n      // Maintain scale, fade out gradually\n      this.currentScale = 1 + progress * 0.3; // Slight growth\n      this.currentOpacity = 1 - Math.pow(progress, 2);\n      break;\n\n    case 'explode':\n      // Rapid scale up and fade\n      this.currentScale = 1 + progress * 1.5;\n      this.currentOpacity = 1 - Math.pow(progress, 1.2);\n      this.currentRotation = progress * Math.PI * 4; // Spin during explosion\n      break;\n\n    case 'fade':\n      // Gentle scale and fade\n      this.currentScale = 1 + progress * 0.5;\n      this.currentOpacity = 1 - progress;\n      break;\n    }\n\n    // Ensure values stay in valid ranges\n    this.currentScale = Math.max(0, this.currentScale);\n    this.currentOpacity = Math.max(0, Math.min(1, this.currentOpacity));\n  }\n\n  /**\n   * Render the point fly-off\n   */\n  public render(ctx: CanvasRenderingContext2D): void {\n    if (!this.isActive || this.currentOpacity <= 0) return;\n\n    ctx.save();\n\n    // Apply transformations\n    ctx.globalAlpha = this.currentOpacity;\n    ctx.translate(this.currentPosition.x, this.currentPosition.y);\n    ctx.scale(this.currentScale, this.currentScale);\n    ctx.rotate(this.currentRotation);\n\n    // Set text properties\n    ctx.font = `${this.config.fontSize}px ${this.config.fontFamily}`;\n    ctx.fillStyle = this.config.color;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Add text shadow for better visibility\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';\n    ctx.shadowBlur = 4;\n    ctx.shadowOffsetX = 1;\n    ctx.shadowOffsetY = 1;\n\n    // Render the text based on type\n    let text: string;\n    if (this.config.color === '#00ffff') { // Time bonus color\n      text = `-${this.config.points} Secs`;\n    } else {\n      text = `+${this.config.points}`;\n    }\n    \n    ctx.fillText(text, 0, 0);\n\n    ctx.restore();\n  }\n\n  /**\n   * Check if the animation is still active\n   */\n  public isActiveAnimation(): boolean {\n    return this.isActive;\n  }\n\n  /**\n   * Get the unique ID of this fly-off\n   */\n  public getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Get current position\n   */\n  public getPosition(): Vector2 {\n    return { ...this.currentPosition };\n  }\n\n  /**\n   * Force complete the animation\n   */\n  public complete(): void {\n    this.isActive = false;\n  }\n\n  /**\n   * Get remaining time in milliseconds\n   */\n  public getRemainingTime(): number {\n    const elapsed = Date.now() - this.startTime;\n    return Math.max(0, this.config.duration - elapsed);\n  }\n}\n\n/**\n * Factory functions for creating common point fly-off types\n */\nexport class PointFlyOffFactory {\n  /**\n   * Create a goal hit fly-off\n   */\n  public static createGoalHit(points: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 20,\n      duration: 1500,\n      animation: 'fly-up',\n      fontFamily: 'Interceptor',\n    });\n  }\n\n  /**\n   * Create a power-up collection fly-off\n   */\n  public static createPowerUpCollect(points: number, position: Vector2, _powerUpColor: string = '#ff6600'): PointFlyOff {\n    return new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 16,\n      duration: 1200,\n      animation: 'arc',\n      fontFamily: 'Interceptor',\n    });\n  }\n\n  /**\n   * Create a level complete fly-off\n   */\n  public static createLevelComplete(points: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 24,\n      duration: 2000,\n      animation: 'explode',\n      fontFamily: 'Cyberpunks',\n    });\n  }\n\n  /**\n   * Create a bonus points fly-off\n   */\n  public static createBonus(points: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 18,\n      duration: 1300,\n      animation: 'arc',\n      fontFamily: 'Interceptor',\n    });\n  }\n\n  /**\n   * Create an achievement fly-off\n   */\n  public static createAchievement(points: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 22,\n      duration: 1800,\n      animation: 'explode',\n      fontFamily: 'Cyberpunks',\n    });\n  }\n\n  /**\n   * Create a combo multiplier fly-off\n   */\n  public static createCombo(points: number, position: Vector2, _multiplier: number): PointFlyOff {\n    const flyOff = new PointFlyOff({\n      points,\n      startPosition: position,\n      color: '#39ff14',\n      fontSize: 19,\n      duration: 1400,\n      animation: 'fly-up',\n      fontFamily: 'Interceptor',\n    });\n\n    // Add multiplier indicator (could extend this in the future)\n    return flyOff;\n  }\n\n  /**\n   * Create a time bonus fly-off\n   */\n  public static createTimeBonus(seconds: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points: seconds, // Store seconds as points for display\n      startPosition: position,\n      color: '#00ffff', // Cyan color for time bonuses\n      fontSize: 20,\n      duration: 2000,\n      animation: 'fly-up',\n      fontFamily: 'Interceptor',\n    });\n  }\n\n  /**\n   * Create a saucer waiting fly-off\n   */\n  public static createSaucerWaiting(points: number, position: Vector2): PointFlyOff {\n    return new PointFlyOff({\n      points: points,\n      startPosition: position,\n      color: '#00d26a', // Custom green color for saucer waiting points\n      fontSize: 12, // Smaller font for cascade effect\n      duration: 1200, // Shorter duration for rapid cascade\n      animation: 'fly-up',\n      fontFamily: 'Interceptor',\n    });\n  }\n} ","// Circuit Breaker - Point Fly-Off Manager\r\n// Manages multiple simultaneous point animations\r\n\r\nimport { Vector2 } from '../utils/MathUtils';\r\nimport { logger } from '../utils/Logger';\r\nimport { PointFlyOff, PointFlyOffFactory, PointType } from './PointFlyOff';\r\n\r\ninterface FlyOffEvent {\r\n  type: PointType;\r\n  points: number;\r\n  position: Vector2;\r\n  metadata?: any;\r\n}\r\n\r\nexport class PointFlyOffManager {\r\n  private activeFlyOffs: Map<string, PointFlyOff> = new Map();\r\n  private maxActiveFlyOffs: number = 20; // Performance limit\r\n  private totalPointsDisplayed: number = 0;\r\n\r\n  // Performance tracking\r\n  private frameTime: number = 0;\r\n  private averageFrameTime: number = 0;\r\n  private frameCount: number = 0;\r\n\r\n  constructor() {\r\n    logger.info('✨ PointFlyOffManager initialized', null, 'PointFlyOffManager');\r\n  }\r\n\r\n  /**\r\n   * Create and add a point fly-off animation\r\n   */\r\n  public createFlyOff(event: FlyOffEvent): string | null {\r\n    // Performance check - don't create too many animations\r\n    if (this.activeFlyOffs.size >= this.maxActiveFlyOffs) {\r\n      this.cleanupOldestFlyOff();\r\n    }\r\n\r\n    let flyOff: PointFlyOff;\r\n\r\n    // Create appropriate fly-off based on type\r\n    switch (event.type) {\r\n    case PointType.GOAL_HIT:\r\n      flyOff = PointFlyOffFactory.createGoalHit(event.points, event.position);\r\n      break;\r\n\r\n    case PointType.POWERUP_COLLECT: {\r\n      const powerUpColor = event.metadata?.color || '#ff6600';\r\n      flyOff = PointFlyOffFactory.createPowerUpCollect(event.points, event.position, powerUpColor);\r\n      break;\r\n    }\r\n\r\n    case PointType.LEVEL_COMPLETE:\r\n      flyOff = PointFlyOffFactory.createLevelComplete(event.points, event.position);\r\n      break;\r\n\r\n    case PointType.BONUS:\r\n      flyOff = PointFlyOffFactory.createBonus(event.points, event.position);\r\n      break;\r\n\r\n    case PointType.ACHIEVEMENT:\r\n      flyOff = PointFlyOffFactory.createAchievement(event.points, event.position);\r\n      break;\r\n\r\n    case PointType.COMBO: {\r\n      const multiplier = event.metadata?.multiplier || 1;\r\n      flyOff = PointFlyOffFactory.createCombo(event.points, event.position, multiplier);\r\n      break;\r\n    }\r\n\r\n    case PointType.TIME_BONUS:\r\n      flyOff = PointFlyOffFactory.createTimeBonus(event.points, event.position);\r\n      break;\r\n\r\n    case PointType.SAUCER_WAITING:\r\n      flyOff = PointFlyOffFactory.createSaucerWaiting(event.points, event.position);\r\n      break;\r\n\r\n    default:\r\n      logger.warn(`❌ Unknown point fly-off type: ${event.type}`, null, 'PointFlyOffManager');\r\n      return null;\r\n    }\r\n\r\n    const id = flyOff.getId();\r\n    this.activeFlyOffs.set(id, flyOff);\r\n    this.totalPointsDisplayed += event.points;\r\n\r\n    logger.debug(`✨ Created ${event.type} fly-off: +${event.points} points (ID: ${id})`, null, 'PointFlyOffManager');\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Update all active fly-off animations\r\n   */\r\n  public update(deltaTime: number): void {\r\n    const startTime = performance.now();\r\n\r\n    // Update all active animations\r\n    const completedIds: string[] = [];\r\n\r\n    for (const [id, flyOff] of this.activeFlyOffs) {\r\n      flyOff.update(deltaTime);\r\n\r\n      // Mark completed animations for removal\r\n      if (!flyOff.isActiveAnimation()) {\r\n        completedIds.push(id);\r\n      }\r\n    }\r\n\r\n    // Remove completed animations\r\n    for (const id of completedIds) {\r\n      this.activeFlyOffs.delete(id);\r\n    }\r\n\r\n    // Update performance tracking\r\n    this.frameTime = performance.now() - startTime;\r\n    this.updatePerformanceMetrics();\r\n\r\n    // Log performance warning if needed\r\n    if (this.averageFrameTime > 2) { // More than 2ms average\r\n      logger.warn(`⚠️ Point fly-off performance warning: ${this.averageFrameTime.toFixed(2)}ms average frame time`, null, 'PointFlyOffManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render all active fly-off animations\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (this.activeFlyOffs.size === 0) return;\r\n\r\n    // Sort by creation time to maintain consistent layering\r\n    const sortedFlyOffs = Array.from(this.activeFlyOffs.values()).sort((a, b) => \r\n      parseInt(a.getId().split('-')[1]) - parseInt(b.getId().split('-')[1]),\r\n    );\r\n\r\n    for (const flyOff of sortedFlyOffs) {\r\n      flyOff.render(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a goal hit fly-off at ball position\r\n   */\r\n  public showGoalHit(points: number, ballPosition: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.GOAL_HIT,\r\n      points,\r\n      position: { ...ballPosition },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a power-up collection fly-off\r\n   */\r\n  public showPowerUpCollect(points: number, position: Vector2, powerUpColor?: string): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.POWERUP_COLLECT,\r\n      points,\r\n      position: { ...position },\r\n      metadata: { color: powerUpColor },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a level complete fly-off\r\n   */\r\n  public showLevelComplete(points: number, centerPosition: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.LEVEL_COMPLETE,\r\n      points,\r\n      position: { ...centerPosition },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a bonus points fly-off\r\n   */\r\n  public showBonus(points: number, position: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.BONUS,\r\n      points,\r\n      position: { ...position },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an achievement fly-off\r\n   */\r\n  public showAchievement(points: number, position: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.ACHIEVEMENT,\r\n      points,\r\n      position: { ...position },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a combo multiplier fly-off\r\n   */\r\n  public showCombo(points: number, position: Vector2, multiplier: number): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.COMBO,\r\n      points,\r\n      position: { ...position },\r\n      metadata: { multiplier },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a time bonus fly-off\r\n   */\r\n  public showTimeBonus(seconds: number, position: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.TIME_BONUS,\r\n      points: seconds,\r\n      position: { ...position },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a saucer waiting fly-off\r\n   */\r\n  public showSaucerWaiting(points: number, position: Vector2): string | null {\r\n    return this.createFlyOff({\r\n      type: PointType.SAUCER_WAITING,\r\n      points,\r\n      position: { ...position },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all active fly-offs\r\n   */\r\n  public clearAll(): void {\r\n    this.activeFlyOffs.clear();\r\n    logger.debug('🧹 Cleared all point fly-offs', null, 'PointFlyOffManager');\r\n  }\r\n\r\n  /**\r\n   * Complete all active fly-offs immediately\r\n   */\r\n  public completeAll(): void {\r\n    for (const flyOff of this.activeFlyOffs.values()) {\r\n      flyOff.complete();\r\n    }\r\n    logger.debug('⏭️ Completed all point fly-offs', null, 'PointFlyOffManager');\r\n  }\r\n\r\n  /**\r\n   * Remove the oldest fly-off to maintain performance\r\n   */\r\n  private cleanupOldestFlyOff(): void {\r\n    if (this.activeFlyOffs.size === 0) return;\r\n\r\n    // Find oldest fly-off by creation time\r\n    let oldestId = '';\r\n    let oldestTime = Infinity;\r\n\r\n    for (const [id] of this.activeFlyOffs) {\r\n      const creationTime = parseInt(id.split('-')[1]);\r\n      if (creationTime < oldestTime) {\r\n        oldestTime = creationTime;\r\n        oldestId = id;\r\n      }\r\n    }\r\n\r\n    if (oldestId) {\r\n      this.activeFlyOffs.delete(oldestId);\r\n      logger.debug(`🧹 Cleaned up oldest fly-off: ${oldestId}`, null, 'PointFlyOffManager');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update performance tracking metrics\r\n   */\r\n  private updatePerformanceMetrics(): void {\r\n    this.frameCount++;\r\n    \r\n    // Calculate rolling average over last 100 frames\r\n    const weight = Math.min(1 / this.frameCount, 0.01);\r\n    this.averageFrameTime = this.averageFrameTime * (1 - weight) + this.frameTime * weight;\r\n  }\r\n\r\n  /**\r\n   * Get current performance statistics\r\n   */\r\n  public getPerformanceStats(): {\r\n    activeFlyOffs: number;\r\n    averageFrameTime: number;\r\n    totalPointsDisplayed: number;\r\n    } {\r\n    return {\r\n      activeFlyOffs: this.activeFlyOffs.size,\r\n      averageFrameTime: this.averageFrameTime,\r\n      totalPointsDisplayed: this.totalPointsDisplayed,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the number of active fly-offs\r\n   */\r\n  public getActiveFlyOffCount(): number {\r\n    return this.activeFlyOffs.size;\r\n  }\r\n\r\n  /**\r\n   * Set maximum number of active fly-offs (for performance tuning)\r\n   */\r\n  public setMaxActiveFlyOffs(max: number): void {\r\n    this.maxActiveFlyOffs = Math.max(1, max);\r\n    logger.debug(`⚙️ Set max active fly-offs to: ${this.maxActiveFlyOffs}`, null, 'PointFlyOffManager');\r\n  }\r\n\r\n  /**\r\n   * Check if a specific fly-off is still active\r\n   */\r\n  public isFlyOffActive(id: string): boolean {\r\n    return this.activeFlyOffs.has(id);\r\n  }\r\n\r\n  /**\r\n   * Get the position of a specific fly-off\r\n   */\r\n  public getFlyOffPosition(id: string): Vector2 | null {\r\n    const flyOff = this.activeFlyOffs.get(id);\r\n    return flyOff ? flyOff.getPosition() : null;\r\n  }\r\n\r\n  /**\r\n   * Get remaining time for a specific fly-off\r\n   */\r\n  public getFlyOffRemainingTime(id: string): number {\r\n    const flyOff = this.activeFlyOffs.get(id);\r\n    return flyOff ? flyOff.getRemainingTime() : 0;\r\n  }\r\n\r\n  /**\r\n   * Create multiple fly-offs for a scoring burst\r\n   */\r\n  public showScoreBurst(events: FlyOffEvent[]): string[] {\r\n    const ids: string[] = [];\r\n    \r\n    for (const event of events) {\r\n      const id = this.createFlyOff(event);\r\n      if (id) {\r\n        ids.push(id);\r\n      }\r\n    }\r\n\r\n    logger.debug(`🎆 Created score burst: ${ids.length} fly-offs`, null, 'PointFlyOffManager');\r\n    return ids;\r\n  }\r\n} ","// Circuit Breaker - Unified Scoring System\r\n// Implements the Level Points = BaseLevelValue / LevelTime formula\r\n\r\nimport { logger } from '../utils/Logger';\r\n\r\nexport interface LevelScoreData {\r\n  levelId: number;\r\n  baseLevelValue: number;\r\n  rawTime: number; // Time in seconds\r\n  adjustedTime: number; // Time after power-up adjustments\r\n  levelPoints: number;\r\n  timeReductions: number; // Time cuts from power-ups\r\n  assistPenalties: number; // Time penalties from assist power-ups\r\n}\r\n\r\nexport interface ScoreSession {\r\n  totalScore: number;\r\n  levelScores: LevelScoreData[];\r\n  sessionStartTime: number;\r\n  sessionEndTime?: number;\r\n}\r\n\r\nexport class UnifiedScoringSystem {\r\n  private static readonly BASE_LEVEL_VALUE_START = 100000;\r\n  private static readonly BASE_LEVEL_VALUE_INCREMENT = 20000;\r\n  \r\n  private currentSession: ScoreSession;\r\n  private currentLevelStartTime: number = 0;\r\n  private currentLevelTimeReductions: number = 0;\r\n  private currentLevelAssistPenalties: number = 0;\r\n\r\n  constructor() {\r\n    this.currentSession = {\r\n      totalScore: 0,\r\n      levelScores: [],\r\n      sessionStartTime: Date.now(),\r\n    };\r\n    logger.info('📊 UnifiedScoringSystem initialized', null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Calculate BaseLevelValue for a given level\r\n   */\r\n  public static calculateBaseLevelValue(levelId: number): number {\r\n    return UnifiedScoringSystem.BASE_LEVEL_VALUE_START + \r\n           (levelId - 1) * UnifiedScoringSystem.BASE_LEVEL_VALUE_INCREMENT;\r\n  }\r\n\r\n  /**\r\n   * Start a new scoring session\r\n   */\r\n  public startNewSession(): void {\r\n    this.currentSession = {\r\n      totalScore: 0,\r\n      levelScores: [],\r\n      sessionStartTime: Date.now(),\r\n    };\r\n    this.currentLevelStartTime = 0;\r\n    this.currentLevelTimeReductions = 0;\r\n    this.currentLevelAssistPenalties = 0;\r\n    logger.info('🎮 New scoring session started', null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Start timing a level\r\n   */\r\n  public startLevel(levelId: number): void {\r\n    this.currentLevelStartTime = Date.now();\r\n    this.currentLevelTimeReductions = 0;\r\n    this.currentLevelAssistPenalties = 0;\r\n    logger.info(`⏰ Started timing level ${levelId}`, null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Add time reduction from power-ups (Time Cut Node)\r\n   */\r\n  public addTimeReduction(seconds: number): void {\r\n    this.currentLevelTimeReductions += seconds;\r\n    logger.info(`⚡ Time reduction added: ${seconds}s (total: ${this.currentLevelTimeReductions}s)`, null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Add time penalty from assist power-ups (Slow-Mo, Magnetic Guide, etc.)\r\n   */\r\n  public addAssistPenalty(seconds: number): void {\r\n    this.currentLevelAssistPenalties += seconds;\r\n    logger.info(`⚖️ Assist penalty added: ${seconds}s (total: ${this.currentLevelAssistPenalties}s)`, null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Add bonus points to the current session (e.g., saucer waiting points)\r\n   */\r\n  public addBonusPoints(points: number): void {\r\n    this.currentSession.totalScore += points;\r\n    logger.info(`🎰 Bonus points added: ${points} (total: ${this.currentSession.totalScore.toFixed(1)})`, null, 'UnifiedScoringSystem');\r\n  }\r\n\r\n  /**\r\n   * Complete a level and calculate score\r\n   */\r\n  public completeLevel(levelId: number): LevelScoreData {\r\n    if (this.currentLevelStartTime === 0) {\r\n      throw new Error('Level not started - call startLevel() first');\r\n    }\r\n\r\n    // Calculate raw time in seconds\r\n    const rawTime = (Date.now() - this.currentLevelStartTime) / 1000;\r\n\r\n    // Calculate adjusted time: RawTime - TimeReductions + AssistPenalties\r\n    const adjustedTime = Math.max(0.1, rawTime - this.currentLevelTimeReductions + this.currentLevelAssistPenalties);\r\n\r\n    // Calculate BaseLevelValue\r\n    const baseLevelValue = UnifiedScoringSystem.calculateBaseLevelValue(levelId);\r\n\r\n    // Calculate Level Points: BaseLevelValue / AdjustedTime\r\n    const levelPoints = baseLevelValue / adjustedTime;\r\n\r\n    // Create level score data\r\n    const levelScoreData: LevelScoreData = {\r\n      levelId,\r\n      baseLevelValue,\r\n      rawTime,\r\n      adjustedTime,\r\n      levelPoints,\r\n      timeReductions: this.currentLevelTimeReductions,\r\n      assistPenalties: this.currentLevelAssistPenalties,\r\n    };\r\n\r\n    // Add to session\r\n    this.currentSession.levelScores.push(levelScoreData);\r\n    this.currentSession.totalScore += levelPoints;\r\n\r\n    logger.info(\r\n      `🎯 Level ${levelId} completed: ${levelPoints.toFixed(2)} points ` +\r\n      `(${baseLevelValue}/${adjustedTime.toFixed(2)}s = ${levelPoints.toFixed(2)})`,\r\n      null,\r\n      'UnifiedScoringSystem'\r\n    );\r\n\r\n    // Reset level timing\r\n    this.currentLevelStartTime = 0;\r\n    this.currentLevelTimeReductions = 0;\r\n    this.currentLevelAssistPenalties = 0;\r\n\r\n    return levelScoreData;\r\n  }\r\n\r\n  /**\r\n   * Get current session data\r\n   */\r\n  public getCurrentSession(): ScoreSession {\r\n    return { ...this.currentSession };\r\n  }\r\n\r\n  /**\r\n   * Get current total score\r\n   */\r\n  public getCurrentTotalScore(): number {\r\n    return this.currentSession.totalScore;\r\n  }\r\n\r\n  /**\r\n   * Get level scores breakdown\r\n   */\r\n  public getLevelScores(): LevelScoreData[] {\r\n    return [...this.currentSession.levelScores];\r\n  }\r\n\r\n  /**\r\n   * Get current level timing status\r\n   */\r\n  public getCurrentLevelStatus(): {\r\n    isActive: boolean;\r\n    rawTime: number;\r\n    timeReductions: number;\r\n    assistPenalties: number;\r\n  } {\r\n    return {\r\n      isActive: this.currentLevelStartTime > 0,\r\n      rawTime: this.currentLevelStartTime > 0 ? (Date.now() - this.currentLevelStartTime) / 1000 : 0,\r\n      timeReductions: this.currentLevelTimeReductions,\r\n      assistPenalties: this.currentLevelAssistPenalties,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * End the current session\r\n   */\r\n  public endSession(): ScoreSession {\r\n    this.currentSession.sessionEndTime = Date.now();\r\n    logger.info(\r\n      `🏁 Scoring session ended: ${this.currentSession.totalScore.toFixed(2)} total points ` +\r\n      `across ${this.currentSession.levelScores.length} levels`,\r\n      null,\r\n      'UnifiedScoringSystem'\r\n    );\r\n    return { ...this.currentSession };\r\n  }\r\n\r\n  /**\r\n   * Get scoring summary for display\r\n   */\r\n  public getScoringSummary(): {\r\n    totalScore: number;\r\n    levelsCompleted: number;\r\n    averageScore: number;\r\n    bestLevelScore: number;\r\n    worstLevelScore: number;\r\n  } {\r\n    const levelScores = this.currentSession.levelScores;\r\n    const levelPoints = levelScores.map(ls => ls.levelPoints);\r\n    \r\n    return {\r\n      totalScore: this.currentSession.totalScore,\r\n      levelsCompleted: levelScores.length,\r\n      averageScore: levelScores.length > 0 ? this.currentSession.totalScore / levelScores.length : 0,\r\n      bestLevelScore: levelPoints.length > 0 ? Math.max(...levelPoints) : 0,\r\n      worstLevelScore: levelPoints.length > 0 ? Math.min(...levelPoints) : 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format score for display\r\n   */\r\n  public static formatScore(score: number): string {\r\n    return score.toFixed(1);\r\n  }\r\n\r\n  /**\r\n   * Get level points preview (for UI display before completion)\r\n   */\r\n  public getLevelPointsPreview(levelId: number): number {\r\n    if (this.currentLevelStartTime === 0) return 0;\r\n    \r\n    const rawTime = (Date.now() - this.currentLevelStartTime) / 1000;\r\n    const adjustedTime = Math.max(0.1, rawTime - this.currentLevelTimeReductions + this.currentLevelAssistPenalties);\r\n    const baseLevelValue = UnifiedScoringSystem.calculateBaseLevelValue(levelId);\r\n    \r\n    return baseLevelValue / adjustedTime;\r\n  }\r\n} ","// Circuit Breaker - Main Game Class\r\n// Handles game state management and core game loop\r\n\r\nimport { GameState, GameStateType } from './GameState';\r\nimport { GameLoop } from './GameLoop';\r\nimport { Renderer } from '../rendering/Renderer';\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine';\r\nimport { TiltingBar } from './TiltingBar';\r\nimport { InputManager } from '../input/InputManager';\r\nimport { LevelManager, Level, Hole } from './Level';\r\nimport { AudioManager } from '../audio/AudioManager';\r\nimport { fontManager } from '../utils/FontManager';\r\nimport { logger } from '../utils/Logger';\r\nimport { ScalingManager } from '../utils/ScalingManager';\r\nimport { SettingsMenu } from '../ui/SettingsMenu';\r\nimport { SaveLoadMenu } from '../ui/SaveLoadMenu';\r\nimport { AchievementNotification } from '../ui/AchievementNotification';\r\nimport { StatsMenu } from '../ui/StatsMenu';\r\nimport { WinScreen } from '../ui/WinScreen';\r\nimport { StorageManager, GameProgress } from './StorageManager';\r\nimport { AchievementManager } from './AchievementManager';\r\nimport { StatsManager } from './StatsManager';\r\nimport { PowerUpManager, PowerUpType } from './PowerUpManager';\r\nimport { PowerUpEffects, EffectContext } from './PowerUpEffects';\r\nimport { PowerUpEventSystem } from './PowerUpEventSystem';\r\nimport { PowerUpDebugger } from '../utils/PowerUpDebugger';\r\nimport { getPowerUpConfig } from './PowerUpConfig';\r\nimport { PointFlyOffManager } from '../ui/PointFlyOffManager';\r\nimport { UnifiedScoringSystem } from './UnifiedScoringSystem';\r\n\r\n\r\nexport class Game {\r\n  private gameState: GameState;\r\n  private gameLoop: GameLoop;\r\n  private renderer: Renderer;\r\n  private physicsEngine: PhysicsEngine;\r\n  private inputManager: InputManager;\r\n  private tiltingBar: TiltingBar;\r\n  private levelManager: LevelManager;\r\n  private audioManager: AudioManager;\r\n  private settingsMenu: SettingsMenu;\r\n  private saveLoadMenu: SaveLoadMenu;\r\n  private achievementNotification: AchievementNotification;\r\n  private statsMenu: StatsMenu;\r\n  private winScreen: WinScreen | null = null;\r\n  private storageManager: StorageManager;\r\n  private achievementManager: AchievementManager;\r\n  private statsManager: StatsManager;\r\n  private powerUpManager: PowerUpManager;\r\n  private powerUpEffects: PowerUpEffects;\r\n  private powerUpEventSystem: PowerUpEventSystem;\r\n  private powerUpDebugger: PowerUpDebugger;\r\n  private pointFlyOffManager: PointFlyOffManager;\r\n  private unifiedScoringSystem: UnifiedScoringSystem;\r\n  private currentLevel: Level | null = null;\r\n  private isRunning: boolean = false;\r\n  private levelCompletionHandled: boolean = false;\r\n  private lastSaucerConstraintY: number | undefined = undefined;\r\n\r\n  // Saucer waiting scoring state\r\n  private saucerWaitingScoringState: {\r\n    isActive: boolean;\r\n    lastScoringTime: number;\r\n    scoringInterval: number; // 50ms = 1/20th second\r\n  } = {\r\n    isActive: false,\r\n    lastScoringTime: 0,\r\n    scoringInterval: 50, // 50ms = 1/20th second\r\n  };\r\n\r\n  // Hole animation state\r\n  private isAnimatingHoleFall: boolean = false;\r\n  private holeAnimationState: {\r\n    ballId: string;\r\n    holePosition: { x: number; y: number };\r\n    startTime: number;\r\n    duration: number;\r\n    startPosition: { x: number; y: number };\r\n    scale: number;\r\n    opacity: number;\r\n    isGoalHole: boolean; // Track if this is a goal hole animation\r\n    isPowerUpHole: boolean; // Track if this is a power-up hole animation\r\n  } | null = null;\r\n\r\n  // Attract mode properties\r\n  private menuTimer: number = 0;\r\n  private readonly attractModeDelay: number = 10000; // 10 seconds in milliseconds\r\n  private attractModeTimer: number = 0;\r\n  // private attractModeAutoPlayInterval: number = 0; // TODO: Implement attract mode auto-play\r\n\r\n  // Loading properties\r\n  private loadingProgress: number = 0;\r\n  private loadingStatus: string = 'Initializing...';\r\n  private assetsToLoad: string[] = [];\r\n  private loadedAssets: number = 0;\r\n  private loadingComplete: boolean = false;\r\n\r\n  // Game progress tracking\r\n  private gameProgress!: GameProgress; // Will be initialized in loadGameProgress()\r\n  private currentSaveSlot: number = 0;\r\n  private sessionStartTime: number = 0;\r\n  private sessionTotalTime: number = 0; // Cumulative time across all completed levels in this session\r\n  private lastAutoSave: number = 0;\r\n\r\n  constructor() {\r\n    this.gameState = new GameState();\r\n    this.gameLoop = new GameLoop();\r\n    this.renderer = new Renderer();\r\n    this.physicsEngine = new PhysicsEngine();\r\n    this.inputManager = new InputManager();\r\n    this.levelManager = new LevelManager();\r\n    this.audioManager = new AudioManager();\r\n    this.storageManager = new StorageManager();\r\n    this.achievementManager = new AchievementManager();\r\n    this.statsManager = new StatsManager();\r\n    \r\n    // Initialize power-up system with event-driven architecture\r\n    this.powerUpEventSystem = new PowerUpEventSystem();\r\n    this.powerUpManager = new PowerUpManager(this.powerUpEventSystem);\r\n    this.powerUpEffects = new PowerUpEffects();\r\n    this.powerUpDebugger = new PowerUpDebugger(\r\n      this.powerUpManager,\r\n      this.powerUpEffects,\r\n      this.powerUpEventSystem,\r\n      {\r\n        showOverlay: false,\r\n        showPerformanceStats: true,\r\n        showEventHistory: true,\r\n        showCacheStats: true,\r\n        showValidation: true,\r\n        logLevel: 'warn',\r\n      },\r\n    );\r\n    \r\n    // Setup power-up event callbacks\r\n    this.setupPowerUpEventCallbacks();\r\n    \r\n    // Initialize point fly-off system\r\n    this.pointFlyOffManager = new PointFlyOffManager();\r\n\r\n    // Initialize unified scoring system\r\n    this.unifiedScoringSystem = new UnifiedScoringSystem();\r\n\r\n    this.settingsMenu = new SettingsMenu({\r\n      audioManager: this.audioManager,\r\n      onClose: () => this.closeSettings(),\r\n      onBackToMenu: () => this.backToMenuFromSettings(),\r\n    });\r\n    this.saveLoadMenu = new SaveLoadMenu({\r\n      onClose: () => this.closeSaveLoadMenu(),\r\n      onLoadGame: (slotId: number) => this.loadGameFromSlot(slotId),\r\n      onNewGame: (slotId: number) => this.startNewGameInSlot(slotId),\r\n      onDeleteSlot: (slotId: number) => this.deleteSaveSlot(slotId),\r\n      getSaveSlots: () => this.storageManager.getSaveSlots(),\r\n      getCurrentProgress: () => this.gameProgress,\r\n      getAchievements: () => this.achievementManager.getAllAchievements(),\r\n    });\r\n    this.achievementNotification = new AchievementNotification({\r\n      onComplete: () => {\r\n        // Achievement notification completed\r\n        logger.debug('🏆 Achievement notification completed', null, 'Game');\r\n      },\r\n    });\r\n    this.statsMenu = new StatsMenu({\r\n      onClose: () => this.closeStatsMenu(),\r\n      statsManager: this.statsManager,\r\n    });\r\n    this.tiltingBar = new TiltingBar({\r\n      position: { x: 180, y: 590 }, // Center of 360px width screen, near bottom\r\n      width: 360, // Full width of screen\r\n      height: 8,\r\n      maxRotation: Math.PI / 4, // 45 degrees\r\n      rotationSpeed: 3,\r\n      friction: 0.05, // Low friction for smooth rolling\r\n    });\r\n    logger.info('🎮 Circuit Breaker - Game initialized with enhanced power-up system', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Setup power-up event callbacks for integration with game systems\r\n   */\r\n  private setupPowerUpEventCallbacks(): void {\r\n    this.powerUpEventSystem.registerGlobalCallbacks({\r\n      onActivated: (data) => {\r\n        // Apply physics effects when power-up is activated\r\n        const context = this.createEffectContext();\r\n        this.powerUpEffects.applyPhysicsEffects(data.type, context);\r\n        \r\n        // Play activation audio\r\n        const config = getPowerUpConfig(data.type);\r\n        if (config.audio.activation) {\r\n          this.audioManager.playSound(config.audio.activation);\r\n        }\r\n        \r\n        logger.info(`⚡ Power-up activated: ${data.type}`, null, 'Game');\r\n      },\r\n      \r\n      onDeactivated: (data) => {\r\n        // Remove physics effects when power-up is deactivated\r\n        const context = this.createEffectContext();\r\n        this.powerUpEffects.removePhysicsEffects(data.type, context);\r\n        \r\n        // Play deactivation audio\r\n        const config = getPowerUpConfig(data.type);\r\n        if (config.audio.deactivation) {\r\n          this.audioManager.playSound(config.audio.deactivation);\r\n        }\r\n        \r\n        logger.info(`⚡ Power-up deactivated: ${data.type}`, null, 'Game');\r\n      },\r\n      \r\n      onExpired: (data) => {\r\n        // Remove physics effects when power-up expires\r\n        const context = this.createEffectContext();\r\n        this.powerUpEffects.removePhysicsEffects(data.type, context);\r\n        \r\n        logger.info(`⚡ Power-up expired: ${data.type}`, null, 'Game');\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create effect context for power-up effects\r\n   */\r\n  private createEffectContext(): EffectContext {\r\n    let targetPosition: { x: number; y: number } | undefined;\r\n    \r\n    // Get goal hole position if available\r\n    if (this.currentLevel) {\r\n      const levelData = this.currentLevel.getLevelData();\r\n      const goalHole = levelData.holes.find(hole => hole.isGoal);\r\n      if (goalHole) {\r\n        targetPosition = { x: goalHole.position.x, y: goalHole.position.y };\r\n      }\r\n    }\r\n\r\n    return {\r\n      physicsEngine: this.physicsEngine,\r\n      tiltingBar: this.tiltingBar,\r\n      currentTime: Date.now(),\r\n      deltaTime: 16.67, // Approximate delta for 60fps\r\n      targetPosition,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize the game, set up all systems, and prepare for gameplay.\r\n   */\r\n  public async init(): Promise<void> {\r\n    try {\r\n      logger.info('🎮 Initializing Circuit Breaker...', null, 'Game');\r\n\r\n      // Initialize renderer with canvas\r\n      const canvas = document.getElementById(\r\n        'game-canvas',\r\n      ) as HTMLCanvasElement;\r\n      if (!canvas) {\r\n        throw new Error('Canvas element not found');\r\n      }\r\n      this.renderer.init(canvas);\r\n      \r\n      // Load sprites and atlas\r\n      logger.info('🎨 Loading sprite atlas...', null, 'Game');\r\n      await this.renderer.loadSprites();\r\n      logger.info('✅ Sprite atlas loading completed', null, 'Game');\r\n\r\n      // Preload custom fonts\r\n      await fontManager.preloadFonts();\r\n\r\n      // Initialize physics engine with realistic pinball settings\r\n      this.physicsEngine.setGravity(0, 520); // Stronger gravity for heavier pinball\r\n      this.physicsEngine.setAirResistance(0.999); // Minimal air resistance\r\n      this.physicsEngine.setBounds(360, 640); // Match canvas size\r\n      this.physicsEngine.setTiltingBar(this.tiltingBar);\r\n\r\n      // Set up physics audio callback for collision sounds\r\n      this.physicsEngine.setAudioCallback((velocity: number, type: string) => {\r\n        // Only play collision sounds when actually playing the game\r\n        if (this.gameState.isPlaying() && type === 'bounce') {\r\n          this.audioManager.playBounceSound(velocity);\r\n        }\r\n      });\r\n\r\n      // Override physics engine's ball held check to include saucer state\r\n      const originalIsBallHeld = this.physicsEngine.isBallHeld.bind(this.physicsEngine);\r\n      this.physicsEngine.isBallHeld = (ballId: string) => {\r\n        // Check if ball is in a saucer\r\n        if (this.currentLevel && this.currentLevel.isBallInSaucer(ballId)) {\r\n          return true;\r\n        }\r\n        return originalIsBallHeld(ballId);\r\n      };\r\n\r\n      // Override physics engine's ball sinking check to detect sinking phase\r\n      const originalIsBallSinking = this.physicsEngine.isBallSinking.bind(this.physicsEngine);\r\n      this.physicsEngine.isBallSinking = (ballId: string) => {\r\n        // Check if ball is in sinking phase\r\n        if (this.currentLevel) {\r\n          const levelData = this.currentLevel.getLevelData();\r\n          for (const hole of levelData.holes) {\r\n            if (hole.saucerState?.isActive && \r\n                hole.saucerState.ballId === ballId && \r\n                hole.saucerState.phase === 'sinking') {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        return originalIsBallSinking(ballId);\r\n      };\r\n\r\n      // Override physics engine's held ball target to get saucer position\r\n      const originalGetHeldBallTarget = this.physicsEngine.getHeldBallTarget.bind(this.physicsEngine);\r\n      this.physicsEngine.getHeldBallTarget = (ballId: string) => {\r\n        // Get saucer position for held ball\r\n        if (this.currentLevel) {\r\n          // Find which hole has this ball in saucer mode\r\n          const levelData = this.currentLevel.getLevelData();\r\n          for (const hole of levelData.holes) {\r\n            if (hole.saucerState?.isActive && hole.saucerState.ballId === ballId) {\r\n              return this.currentLevel.getSaucerBallPosition(hole.id);\r\n            }\r\n          }\r\n        }\r\n        return originalGetHeldBallTarget(ballId);\r\n      };\r\n\r\n      // Initialize input manager\r\n      this.inputManager.init(canvas, this.tiltingBar);\r\n\r\n      // Initialize audio system\r\n      await this.audioManager.init();\r\n\r\n      // Load game progress\r\n      this.loadGameProgress();\r\n\r\n      // Set up achievement callback\r\n      this.achievementManager.setAchievementCallback((achievement) => {\r\n        logger.info(`🏆 Achievement unlocked: ${achievement.name}`, null, 'Game');\r\n        this.achievementNotification.show(achievement);\r\n      });\r\n\r\n      // Create main game ball starting off the left side of playfield\r\n      // Real pinball specifications: 1 1/16\" diameter (27mm), ~80-100g weight\r\n      const ballRadius = 14; // Slightly larger for more substantial feel\r\n      const ballStartX = -50; // Off the left side (hidden)\r\n      const ballStartY = 300; // Middle height (will be repositioned when started)\r\n\r\n      // Get ball physics properties from power-up manager\r\n      const ballPhysics = this.powerUpManager.getBallPhysicsProperties();\r\n      \r\n      // Create main game ball with realistic pinball physics\r\n      const ball = this.physicsEngine.createObject({\r\n        id: 'game-ball',\r\n        x: ballStartX,\r\n        y: ballStartY,\r\n        radius: ballRadius,\r\n        mass: ballPhysics.mass,\r\n        restitution: ballPhysics.restitution,\r\n        friction: ballPhysics.friction,\r\n        isStatic: false,\r\n      });\r\n\r\n      this.physicsEngine.addObject(ball);\r\n\r\n      // Sync physics engine debug mode with game state debug mode\r\n      this.physicsEngine.setDebug(this.gameState.isDebugMode());\r\n\r\n      // Initialize power-ups for the run\r\n      this.powerUpManager.initializeRun();\r\n      \r\n      // Load the first level\r\n      this.currentLevel = this.levelManager.loadLevel(1, (soundName: string) => {\r\n        this.audioManager.playSound(soundName);\r\n      });\r\n      if (this.currentLevel) {\r\n        this.currentLevel.start();\r\n        this.levelCompletionHandled = false; // Initialize completion flag\r\n      \r\n        logger.info('🎯 Level 1 loaded and started', null, 'Game');\r\n      }\r\n\r\n      this.isRunning = true;\r\n      \r\n      // Record session start\r\n      this.statsManager.recordEvent({\r\n        type: 'session_start',\r\n        timestamp: Date.now(),\r\n      });\r\n      \r\n      logger.info('✅ Circuit Breaker initialized successfully', null, 'Game');\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Circuit Breaker:', error, 'Game');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the main game loop.\r\n   */\r\n  public start(): void {\r\n    if (!this.isRunning) {\r\n      logger.warn('⚠️ Game not initialized. Call init() first.', null, 'Game');\r\n      return;\r\n    }\r\n\r\n    logger.info('▶️ Starting Circuit Breaker...', null, 'Game');\r\n    this.gameState.setState(GameStateType.LOADING);\r\n    this.gameLoop.start(\r\n      this.gameState,\r\n      this.renderer,\r\n      this.physicsEngine,\r\n      this,\r\n    );\r\n\r\n    // Start asset loading process\r\n    this.startAssetLoading();\r\n  }\r\n\r\n  /**\r\n   * Update the game state and handle input, called every frame.\r\n   * @param deltaTime Time elapsed since last frame (ms)\r\n   */\r\n  public update(deltaTime: number): void {\r\n    // Start performance measurement for debugging\r\n    this.powerUpDebugger.startFrameMeasurement();\r\n\r\n    // Update input\r\n    this.inputManager.update();\r\n\r\n    // Handle loading input - transition to menu when user interacts\r\n    if (this.gameState.isLoading()) {\r\n      if (this.loadingComplete && this.hasAnyInput()) {\r\n        logger.debug('🎮 User interaction detected - transitioning to menu', null, 'Game');\r\n        this.completeLoading();\r\n      }\r\n      // Don't process other input during loading\r\n      this.inputManager.endFrame();\r\n      return;\r\n    }\r\n\r\n    // Handle menu input - start new game when clicking or pressing space\r\n    if (this.gameState.isState(GameStateType.MENU)) {\r\n      // Check for any user interaction to reset menu timer\r\n      if (this.hasAnyInput()) {\r\n        this.menuTimer = 0;\r\n      }\r\n\r\n      if (\r\n        this.inputManager.isActionJustPressed('start') ||\r\n        this.inputManager.isMouseJustPressed()\r\n      ) {\r\n        logger.info('🎮 Starting new game...', null, 'Game');\r\n        this.startNewGame();\r\n        this.menuTimer = 0; // Reset timer\r\n\r\n        // Resume audio context on user interaction (required by browsers)\r\n        this.audioManager.resumeContext();\r\n\r\n        // Play UI click sound\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n\r\n      // Handle debug mode toggle\r\n      if (this.inputManager.isKeyJustPressed('KeyD')) {\r\n        this.gameState.toggleDebugMode();\r\n        this.menuTimer = 0; // Reset timer\r\n\r\n        // Update physics engine debug mode to match\r\n        this.physicsEngine.setDebug(this.gameState.isDebugMode());\r\n\r\n        // Play UI click sound\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n\r\n      // Handle settings key (S key)\r\n      if (this.inputManager.isKeyJustPressed('KeyS')) {\r\n        logger.info('⚙️ Opening settings menu...', null, 'Game');\r\n        this.openSettings();\r\n        this.menuTimer = 0; // Reset timer\r\n      }\r\n\r\n      // Handle save/load key (L key)\r\n      if (this.inputManager.isKeyJustPressed('KeyL')) {\r\n        logger.info('💾 Opening save/load menu...', null, 'Game');\r\n        this.openSaveLoadMenu();\r\n        this.menuTimer = 0; // Reset timer\r\n      }\r\n\r\n      // Handle stats key (T key)\r\n      if (this.inputManager.isKeyJustPressed('KeyT')) {\r\n        logger.info('📊 Opening stats menu...', null, 'Game');\r\n        this.openStatsMenu();\r\n        this.menuTimer = 0; // Reset timer\r\n      }\r\n\r\n      // Handle how to play key (H key)\r\n      if (this.inputManager.isKeyJustPressed('KeyH')) {\r\n        logger.info('❓ Opening how to play screen...', null, 'Game');\r\n        this.openHowToPlay();\r\n        this.menuTimer = 0; // Reset timer\r\n      }\r\n\r\n      // Handle mouse clicks on How to Play button\r\n      if (this.inputManager.isMouseJustPressed()) {\r\n        const mousePos = this.inputManager.getMousePosition();\r\n        if (mousePos) {\r\n          // How to Play button bounds (matches the button drawn in renderMenu)\r\n          const buttonX = 180 - 90; // buttonWidth / 2 = 180 / 2 = 90\r\n          const buttonY = 460;\r\n          const buttonWidth = 180;\r\n          const buttonHeight = 40;\r\n          \r\n          if (mousePos.x >= buttonX && mousePos.x <= buttonX + buttonWidth &&\r\n              mousePos.y >= buttonY && mousePos.y <= buttonY + buttonHeight) {\r\n            logger.info('❓ Opening how to play screen via button click...', null, 'Game');\r\n            this.openHowToPlay();\r\n            this.menuTimer = 0; // Reset timer\r\n            \r\n            // Don't start the game if we clicked the How to Play button\r\n            this.inputManager.endFrame();\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update menu timer and check for attract mode\r\n      this.menuTimer += deltaTime;\r\n      if (this.menuTimer >= this.attractModeDelay) {\r\n        logger.debug('🎬 Starting attract mode...', null, 'Game');\r\n        this.startAttractMode();\r\n      }\r\n    }\r\n\r\n    // Handle attract mode input\r\n    if (this.gameState.isAttractMode()) {\r\n      // Exit attract mode on any key press\r\n      if (this.hasAnyInput()) {\r\n        logger.debug('🏠 Exiting attract mode - returning to menu...', null, 'Game');\r\n        this.exitAttractMode();\r\n      }\r\n\r\n      // Update attract mode auto-play\r\n      this.updateAttractMode(deltaTime);\r\n    }\r\n\r\n    // Handle game over input - return to menu when clicking or pressing space\r\n    if (this.gameState.isState(GameStateType.GAME_OVER)) {\r\n      if (\r\n        this.inputManager.isActionJustPressed('start') ||\r\n        this.inputManager.isMouseJustPressed()\r\n      ) {\r\n        logger.info('🏠 Returning to menu...', null, 'Game');\r\n        this.gameState.reset();\r\n\r\n        // Play UI click sound\r\n        this.audioManager.playSound('ui_click');\r\n\r\n        // Return to menu music\r\n        this.playMenuMusic();\r\n      }\r\n    }\r\n\r\n    // Handle paused state input\r\n    if (this.gameState.isPaused()) {\r\n      // Handle escape key to resume\r\n      if (this.inputManager.isActionJustPressed('pause')) {\r\n        logger.info('▶️ Resuming game...', null, 'Game');\r\n        this.gameState.setState(GameStateType.PLAYING);\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n      // Handle settings key\r\n      else if (this.inputManager.isKeyJustPressed('KeyS')) {\r\n        logger.info('⚙️ Opening settings from pause menu...', null, 'Game');\r\n        this.openSettings();\r\n      }\r\n      // Handle Y key to return to menu\r\n      else if (this.inputManager.isKeyJustPressed('KeyY')) {\r\n        logger.info('🏠 Returning to menu from pause...', null, 'Game');\r\n        this.gameState.reset();\r\n        this.audioManager.playSound('ui_click');\r\n        this.playMenuMusic();\r\n      }\r\n    }\r\n\r\n    // Handle settings menu input\r\n    if (this.gameState.isSettings()) {\r\n      // Handle settings menu pointer events\r\n      const mousePos = this.inputManager.getMousePosition();\r\n      if (mousePos) {\r\n        this.settingsMenu.handlePointerMove(mousePos.x, mousePos.y);\r\n        \r\n        if (this.inputManager.isMouseJustPressed()) {\r\n          this.settingsMenu.handlePointerDown(mousePos.x, mousePos.y);\r\n        }\r\n        \r\n        if (this.inputManager.isMouseJustReleased()) {\r\n          this.settingsMenu.handlePointerUp(mousePos.x, mousePos.y);\r\n        }\r\n      }\r\n\r\n      // Handle escape key to close settings\r\n      if (this.inputManager.isActionJustPressed('pause')) {\r\n        logger.info('⚙️ Closing settings menu...', null, 'Game');\r\n        this.closeSettings();\r\n      }\r\n    }\r\n\r\n    // Handle save/load menu input\r\n    if (this.gameState.isSaveLoad()) {\r\n      // Update save/load menu\r\n      this.saveLoadMenu.update(deltaTime);\r\n      \r\n      // Handle save/load menu pointer events\r\n      const mousePos = this.inputManager.getMousePosition();\r\n      if (mousePos) {\r\n        this.saveLoadMenu.handlePointerMove(mousePos.x, mousePos.y);\r\n        \r\n        if (this.inputManager.isMouseJustPressed()) {\r\n          this.saveLoadMenu.handlePointerDown(mousePos.x, mousePos.y);\r\n        }\r\n        \r\n        if (this.inputManager.isMouseJustReleased()) {\r\n          this.saveLoadMenu.handlePointerUp(mousePos.x, mousePos.y);\r\n        }\r\n      }\r\n\r\n      // Handle keyboard input for save/load menu\r\n      const keys = this.inputManager.getJustPressedKeys();\r\n      for (const key of keys) {\r\n        if (this.saveLoadMenu.handleKeyPress(key)) {\r\n          break; // Menu handled the key\r\n        }\r\n      }\r\n\r\n      // Handle escape key to close save/load menu\r\n      if (this.inputManager.isActionJustPressed('pause')) {\r\n        logger.info('💾 Closing save/load menu...', null, 'Game');\r\n        this.closeSaveLoadMenu();\r\n      }\r\n    }\r\n\r\n    // Handle stats menu input\r\n    if (this.gameState.isStats()) {\r\n      // Handle keyboard input for stats menu\r\n      const keys = this.inputManager.getJustPressedKeys();\r\n      for (const key of keys) {\r\n        this.statsMenu.handleInput(key);\r\n      }\r\n\r\n      // Handle escape key to close stats menu\r\n      if (this.inputManager.isActionJustPressed('pause')) {\r\n        logger.info('📊 Closing stats menu...', null, 'Game');\r\n        this.closeStatsMenu();\r\n      }\r\n    }\r\n\r\n    // Handle win screen input\r\n    if (this.gameState.isWinScreen() && this.winScreen) {\r\n      // Update win screen animation\r\n      this.winScreen.update(deltaTime);\r\n      \r\n      // Handle keyboard input for win screen\r\n      const keys = this.inputManager.getJustPressedKeys();\r\n      for (const key of keys) {\r\n        this.winScreen.handleInput(key);\r\n      }\r\n\r\n      // Handle mouse click to continue\r\n      if (this.inputManager.isMouseJustPressed()) {\r\n        this.winScreen.handleInput('Space'); // Treat mouse click as space\r\n      }\r\n    }\r\n\r\n    // Handle how to play screen input\r\n    if (this.gameState.isHowToPlay()) {\r\n      // Handle escape key or backspace to return to menu\r\n      if (this.inputManager.isActionJustPressed('pause') || this.inputManager.isKeyJustPressed('Backspace')) {\r\n        logger.info('❓ Closing how to play screen...', null, 'Game');\r\n        this.gameState.setState(GameStateType.MENU);\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n      \r\n      // Handle debug mode toggle\r\n      if (this.inputManager.isKeyJustPressed('KeyD')) {\r\n        this.gameState.toggleDebugMode();\r\n        \r\n        // Update physics engine debug mode to match\r\n        this.physicsEngine.setDebug(this.gameState.isDebugMode());\r\n        \r\n        // Play UI click sound\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n    }\r\n\r\n    // Handle confirmation dialog input\r\n    if (this.gameState.isConfirmingMenu()) {\r\n      // Y key or Enter - confirm return to menu\r\n      if (\r\n        this.inputManager.isKeyJustPressed('KeyY') ||\r\n        this.inputManager.isKeyJustPressed('Enter')\r\n      ) {\r\n        logger.info('✅ Confirmed - returning to menu', null, 'Game');\r\n        this.gameState.reset();\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n      // N key or Escape - cancel and return to game\r\n      else if (\r\n        this.inputManager.isKeyJustPressed('KeyN') ||\r\n        this.inputManager.isKeyJustPressed('Escape')\r\n      ) {\r\n        logger.info('❌ Cancelled - returning to game', null, 'Game');\r\n        this.gameState.setState(GameStateType.PLAYING);\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n    }\r\n\r\n    // Only process gameplay logic when actually playing\r\n    if (this.gameState.isPlaying()) {\r\n      // Update power-up manager\r\n      this.powerUpManager.update(deltaTime);\r\n      \r\n      // Update physics effects for active power-ups\r\n      const context = this.createEffectContext();\r\n      context.deltaTime = deltaTime;\r\n      this.powerUpEffects.updatePhysicsEffects(context);\r\n\r\n      // Auto-save and check achievements during gameplay\r\n      this.autoSave();\r\n      this.checkAchievements();\r\n\r\n      // Update achievement notification\r\n      this.achievementNotification.update(deltaTime);\r\n      \r\n      // Update point fly-offs\r\n      this.pointFlyOffManager.update(deltaTime);\r\n\r\n      // Handle escape key - show confirmation dialog\r\n      if (this.inputManager.isActionJustPressed('pause')) {\r\n        logger.debug('⏸️ Escape pressed - showing confirmation dialog', null, 'Game');\r\n        this.gameState.setState(GameStateType.CONFIRM_MENU);\r\n        this.audioManager.playSound('ui_click');\r\n        return; // Don't process other gameplay input\r\n      }\r\n\r\n      // Update hole animation if active\r\n      if (this.isAnimatingHoleFall) {\r\n        this.updateHoleAnimation(deltaTime);\r\n      }\r\n\r\n      // Check for start key press to place ball on bar\r\n      if (this.inputManager.isActionJustPressed('start')) {\r\n        logger.debug('🎯 SPACE pressed - placing ball on bar', null, 'Game');\r\n        this.placeBallOnBar();\r\n\r\n        // Resume audio context on user interaction (required by browsers)\r\n        this.audioManager.resumeContext();\r\n\r\n        // Play UI click sound\r\n        this.audioManager.playSound('ui_click');\r\n      }\r\n\r\n      // Handle power-up activation\r\n      this.handlePowerUpInput();\r\n\r\n      // Update tilting bar based on independent side controls (absolute movement)\r\n      const leftSideInput = this.inputManager.getLeftSideInput();\r\n      const rightSideInput = this.inputManager.getRightSideInput();\r\n\r\n      // Start the timer when player first moves the bar\r\n      if (this.currentLevel && !this.currentLevel.hasTimerStarted() && (leftSideInput !== 0 || rightSideInput !== 0)) {\r\n        this.currentLevel.startTimer();\r\n      }\r\n\r\n      this.tiltingBar.moveLeftSide(leftSideInput);\r\n      this.tiltingBar.moveRightSide(rightSideInput);\r\n      this.tiltingBar.update(deltaTime / 1000); // Convert to seconds\r\n\r\n      // Update current level\r\n      if (this.currentLevel) {\r\n        this.currentLevel.update(deltaTime);\r\n        \r\n        // Update saucer behavior\r\n        this.updateSaucerBehavior();\r\n        \r\n        // Only check collisions if not animating\r\n        if (!this.isAnimatingHoleFall) {\r\n          this.checkCollisions();\r\n          this.checkWinLoseConditions();\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle debug input\r\n    this.handleDebugInput();\r\n\r\n    // End frame - update previous input state for next frame\r\n    this.inputManager.endFrame();\r\n\r\n    // End performance measurement for debugging\r\n    this.powerUpDebugger.endFrameMeasurement();\r\n  }\r\n\r\n  /**\r\n   * Render the main gameplay area and UI overlays.\r\n   */\r\n  public renderGameplay(): void {\r\n    // Render level elements FIRST (background)\r\n    if (this.currentLevel) {\r\n      const levelData = this.currentLevel.getLevelData();\r\n\r\n      // Draw holes FIRST (under everything) - only draw active holes\r\n      for (const hole of levelData.holes) {\r\n        // Skip deactivated holes (like collected power-up holes)\r\n        // BUT allow animated holes to be rendered even when not active for gameplay\r\n        if (!hole.isActive && !hole.animationState?.isAnimated) continue;\r\n        \r\n        // Check if this goal hole has been completed\r\n        const isCompleted =\r\n          hole.isGoal && this.currentLevel\r\n            ? this.currentLevel.isGoalCompleted(hole.id)\r\n            : false;\r\n        this.renderer.drawHole(hole, isCompleted, this.gameState.isDebugMode());\r\n      }\r\n    }\r\n\r\n    // Render tilting bar AFTER holes (so it appears on top)\r\n    this.renderer.drawTiltingBar(this.tiltingBar);\r\n\r\n    // Render UI elements\r\n    if (this.currentLevel) {\r\n      const levelData = this.currentLevel.getLevelData();\r\n\r\n      // Draw essential UI (always visible)\r\n      const ctx = this.renderer.getContext();\r\n      if (ctx) {\r\n        ctx.fillStyle = '#00f0ff'; // Electric Blue\r\n        fontManager.setFont(ctx, 'primary', 12);\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText(`Level: ${levelData.id} - ${levelData.name}`, 10, 20);\r\n        \r\n        // Display unified total score\r\n        const totalScore = this.unifiedScoringSystem.getCurrentTotalScore();\r\n        ctx.fillText(`Total Score: ${totalScore.toFixed(1)}`, 10, 35);\r\n        \r\n        // Display current level points preview\r\n        const currentLevelStatus = this.unifiedScoringSystem.getCurrentLevelStatus();\r\n        if (currentLevelStatus.isActive) {\r\n          const levelPointsPreview = this.unifiedScoringSystem.getLevelPointsPreview(levelData.id);\r\n          ctx.fillText(`Level Points: ${levelPointsPreview.toFixed(1)}`, 10, 50);\r\n        } else {\r\n          ctx.fillText(`Level Points: --.-`, 10, 50);\r\n        }\r\n        \r\n        ctx.fillText(`Lives: ${this.gameState.getStateData().lives}`, 10, 65);\r\n        \r\n        // Display timer with unified scoring status\r\n        if (currentLevelStatus.isActive) {\r\n          const rawTime = currentLevelStatus.rawTime;\r\n          const minutes = Math.floor(rawTime / 60);\r\n          const seconds = rawTime % 60;\r\n          const timeDisplay = `${minutes}:${seconds.toFixed(3).padStart(6, '0')}`;\r\n          \r\n          // Show time adjustments if any\r\n          let adjustmentText = '';\r\n          if (currentLevelStatus.timeReductions > 0 || currentLevelStatus.assistPenalties > 0) {\r\n            adjustmentText = ` (${currentLevelStatus.timeReductions > 0 ? '-' + currentLevelStatus.timeReductions.toFixed(1) : ''}${currentLevelStatus.assistPenalties > 0 ? '+' + currentLevelStatus.assistPenalties.toFixed(1) : ''})`;\r\n          }\r\n          \r\n          ctx.fillText(`Time: ${timeDisplay}${adjustmentText}`, 10, 80);\r\n        } else {\r\n          ctx.fillText(`Time: --:---.---`, 10, 80);\r\n        }\r\n\r\n        // Debug information (only visible in debug mode)\r\n        if (this.gameState.isDebugMode()) {\r\n          ctx.fillStyle = '#ffffff';\r\n          fontManager.setFont(ctx, 'primary', 8);\r\n          ctx.textAlign = 'left';\r\n          \r\n          // Show device detection info\r\n          const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || \r\n                           window.innerWidth <= 768;\r\n          ctx.fillText(`Device: ${isMobile ? 'Mobile' : 'Desktop'}`, 10, 95);\r\n          ctx.fillText(`Window: ${window.innerWidth}x${window.innerHeight}`, 10, 110);\r\n          \r\n          try {\r\n            const scalingManager = ScalingManager.getInstance();\r\n            const currentScale = scalingManager.getCurrentScale();\r\n            const config = scalingManager.getConfig();\r\n            ctx.fillText(`Scale: ${currentScale.toFixed(2)}x (min: ${config.minScale})`, 10, 125);\r\n            ctx.fillText(`ForceInt: ${config.forceIntegerScaling}`, 10, 140);\r\n            \r\n            // Show canvas size info\r\n            const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n            if (canvas) {\r\n              ctx.fillText(`Canvas: ${canvas.width}x${canvas.height}`, 10, 155);\r\n              ctx.fillText(`Style: ${canvas.style.width} x ${canvas.style.height}`, 10, 170);\r\n            }\r\n          } catch (e) {\r\n            ctx.fillText('Scale: Error', 10, 125);\r\n          }\r\n\r\n          // Touch indicator and control feedback\r\n          const inputState = this.inputManager.getInputState();\r\n          const leftInput = this.inputManager.getLeftSideInput();\r\n          const rightInput = this.inputManager.getRightSideInput();\r\n          \r\n          // Show current side inputs\r\n          ctx.fillText(`Left: ${leftInput.toFixed(2)} Right: ${rightInput.toFixed(2)}`, 260, 35);\r\n          \r\n          if (inputState.mouse.isDown) {\r\n            // Main touch indicator\r\n            ctx.fillStyle = '#00ff00'; // Green when touch/mouse is active\r\n            ctx.fillRect(340, 10, 15, 15);\r\n            ctx.fillStyle = '#ffffff';\r\n            fontManager.setFont(ctx, 'primary', 8);\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText('T', 347, 20);\r\n            \r\n            // Left side visual feedback\r\n            if (leftInput !== 0) {\r\n              ctx.fillStyle = leftInput > 0 ? '#00ff00' : '#ff6600'; // Green for up, orange for down\r\n              ctx.fillRect(10, 180, 30, 15);\r\n              ctx.fillStyle = '#ffffff';\r\n              ctx.textAlign = 'center';\r\n              ctx.fillText(leftInput > 0 ? 'L↑' : 'L↓', 25, 191);\r\n            }\r\n            \r\n            // Right side visual feedback\r\n            if (rightInput !== 0) {\r\n              ctx.fillStyle = rightInput > 0 ? '#00ff00' : '#ff6600'; // Green for up, orange for down\r\n              ctx.fillRect(320, 180, 30, 15);\r\n              ctx.fillStyle = '#ffffff';\r\n              ctx.textAlign = 'center';\r\n              ctx.fillText(rightInput > 0 ? 'R↑' : 'R↓', 335, 191);\r\n            }\r\n            \r\n            ctx.fillStyle = '#00f0ff'; // Reset color\r\n            ctx.textAlign = 'left';\r\n            ctx.fillText('Touch Above/Below Bar Sides', 260, 50);\r\n            \r\n            // Show scaling debug info\r\n            try {\r\n              const scalingManager = ScalingManager.getInstance();\r\n              const currentScale = scalingManager.getCurrentScale();\r\n              ctx.fillText(`Scale: ${currentScale.toFixed(2)}x`, 260, 65);\r\n              ctx.fillText(`Screen: ${window.innerWidth}x${window.innerHeight}`, 10, 200);\r\n            } catch (e) {\r\n              ctx.fillText('Scale: Error', 260, 65);\r\n            }\r\n          } else {\r\n            ctx.fillText('Touch Above/Below Bar to Control', 260, 50);\r\n            \r\n            // Show scaling debug info even when not touching\r\n            try {\r\n              const scalingManager = ScalingManager.getInstance();\r\n              const currentScale = scalingManager.getCurrentScale();\r\n              ctx.fillText(`Scale: ${currentScale.toFixed(2)}x`, 260, 65);\r\n              ctx.fillText(`Screen: ${window.innerWidth}x${window.innerHeight}`, 10, 200);\r\n            } catch (e) {\r\n              ctx.fillText('Scale: Error', 260, 65);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Debug info (only when debug mode is enabled)\r\n        if (this.gameState.isDebugMode()) {\r\n          ctx.fillText(\r\n            `Progress: ${Math.round(this.currentLevel.getProgress() * 100)}%`,\r\n            10,\r\n            210,\r\n          );\r\n\r\n          // Show multi-goal progress\r\n          const completedGoals = this.currentLevel.getCompletedGoals();\r\n          const requiredGoals = this.currentLevel.getRequiredGoals();\r\n          ctx.fillText(\r\n            `Goals: ${completedGoals}/${requiredGoals} completed`,\r\n            10,\r\n            225,\r\n          );\r\n\r\n          if (completedGoals < requiredGoals) {\r\n            ctx.fillText('Goal: Navigate to the glowing goal holes', 10, 240);\r\n          } else {\r\n            ctx.fillText('Goal: All goals completed! Level complete!', 10, 240);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Input instructions (only when debug mode is enabled)\r\n    if (this.gameState.isDebugMode()) {\r\n      const ctx = this.renderer.getContext();\r\n      if (ctx) {\r\n        ctx.fillStyle = '#00f0ff'; // Electric Blue\r\n        fontManager.setFont(ctx, 'primary', 10);\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(\r\n          'SPACE: Start | Keys: A/Z (left) ↑/↓/L/, (right) | Touch: Above/Below Bar',\r\n          180,\r\n          580,\r\n        );\r\n        ctx.fillText(\r\n          'Navigate upward to the goal holes - avoid falling into other holes!',\r\n          180,\r\n          595,\r\n        );\r\n        \r\n        // Debug function keys\r\n        ctx.fillStyle = '#ffaa00'; // Orange for debug info\r\n        fontManager.setFont(ctx, 'primary', 8);\r\n        ctx.fillText(\r\n          'DEBUG: F1: Toggle Overlay | F2: Clear History | F3: Export | F4: Test Effects | W: Instant Win',\r\n          180,\r\n          610,\r\n        );\r\n      }\r\n    }\r\n\r\n    // Render power-up effects\r\n    this.renderPowerUpEffects();\r\n\r\n    // Render point fly-offs (score animations)\r\n    const ctx = this.renderer.getContext();\r\n    if (ctx) {\r\n      this.pointFlyOffManager.render(ctx);\r\n    }\r\n\r\n    // Render settings menu if open\r\n    if (this.gameState.isSettings()) {\r\n      const ctx = this.renderer.getContext();\r\n      if (ctx) {\r\n        this.settingsMenu.draw(ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get hole animation state for rendering\r\n   */\r\n  public getHoleAnimationState(): { scale: number; opacity: number } | null {\r\n    return this.holeAnimationState\r\n      ? {\r\n        scale: this.holeAnimationState.scale,\r\n        opacity: this.holeAnimationState.opacity,\r\n      }\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Render power-up effects using the new system\r\n   */\r\n  private renderPowerUpEffects(): void {\r\n    const ctx = this.renderer.getContext();\r\n    if (!ctx) return;\r\n\r\n    // Get active power-ups and visual effects\r\n    const activePowerUps = this.powerUpManager.getActivePowerUps();\r\n    const context = this.createEffectContext();\r\n    const visualEffects = this.powerUpEffects.getVisualEffects(activePowerUps, context);\r\n\r\n    // Render visual effects\r\n    visualEffects.forEach(effect => {\r\n      this.renderVisualEffect(ctx, effect);\r\n    });\r\n\r\n    // Render power-up HUD\r\n    this.renderPowerUpHUD(ctx, activePowerUps);\r\n\r\n    // Render debug overlay if enabled\r\n    this.powerUpDebugger.render(ctx);\r\n  }\r\n\r\n  /**\r\n   * Render individual visual effect\r\n   */\r\n  private renderVisualEffect(ctx: CanvasRenderingContext2D, effect: any): void {\r\n    ctx.save();\r\n\r\n    switch (effect.type) {\r\n    case 'overlay':\r\n      this.renderOverlayEffect(ctx, effect.data);\r\n      break;\r\n    case 'glow':\r\n      this.renderGlowEffect(ctx, effect.data);\r\n      break;\r\n    case 'particle':\r\n      this.renderParticleEffect(ctx, effect.data);\r\n      break;\r\n    case 'animation':\r\n      this.renderAnimationEffect(ctx, effect.data);\r\n      break;\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Render overlay visual effect\r\n   */\r\n  private renderOverlayEffect(ctx: CanvasRenderingContext2D, data: any): void {\r\n    if (data.type === 'path_reveal' && data.path) {\r\n      // Render path visualization for scan reveal\r\n      ctx.strokeStyle = data.color || '#00ffff';\r\n      ctx.lineWidth = 3;\r\n      ctx.globalAlpha = data.opacity || 0.6;\r\n      \r\n      ctx.beginPath();\r\n      data.path.forEach((point: any, index: number) => {\r\n        if (index === 0) {\r\n          ctx.moveTo(point.x, point.y);\r\n        } else {\r\n          ctx.lineTo(point.x, point.y);\r\n        }\r\n      });\r\n      ctx.stroke();\r\n    } else {\r\n      // Regular overlay\r\n      ctx.fillStyle = data.color || 'rgba(0, 255, 255, 0.2)';\r\n      ctx.globalAlpha = data.opacity || 0.3;\r\n      \r\n      if (data.pulse) {\r\n        const intensity = data.currentIntensity || data.intensity || 1.0;\r\n        ctx.globalAlpha *= intensity;\r\n      }\r\n      \r\n      ctx.fillRect(0, 0, 360, 640);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render glow visual effect\r\n   */\r\n  private renderGlowEffect(ctx: CanvasRenderingContext2D, data: any): void {\r\n    let targetPosition = { x: 180, y: 320 }; // Default center\r\n    \r\n    // Get target object position\r\n    if (data.target === 'ball') {\r\n      const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n      if (ball) {\r\n        targetPosition = ball.position;\r\n      }\r\n    } else if (data.target === 'hole' && this.currentLevel) {\r\n      const levelData = this.currentLevel.getLevelData();\r\n      const goalHole = levelData.holes.find(hole => hole.isGoal);\r\n      if (goalHole) {\r\n        targetPosition = { x: goalHole.position.x, y: goalHole.position.y };\r\n      }\r\n    } else if (data.target === 'bar') {\r\n      targetPosition = this.tiltingBar.position;\r\n    }\r\n\r\n    // Render glow effect\r\n    const intensity = data.currentIntensity || data.intensity || 1.0;\r\n    const radius = (data.radius || 30) * intensity;\r\n    \r\n    const gradient = ctx.createRadialGradient(\r\n      targetPosition.x, targetPosition.y, 0,\r\n      targetPosition.x, targetPosition.y, radius,\r\n    );\r\n    \r\n    gradient.addColorStop(0, data.color || '#ffffff');\r\n    gradient.addColorStop(1, 'transparent');\r\n    \r\n    ctx.fillStyle = gradient;\r\n    ctx.globalAlpha = intensity * 0.5;\r\n    ctx.fillRect(\r\n      targetPosition.x - radius,\r\n      targetPosition.y - radius,\r\n      radius * 2,\r\n      radius * 2,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render particle visual effect\r\n   */\r\n  private renderParticleEffect(ctx: CanvasRenderingContext2D, data: any): void {\r\n    // Simple particle rendering - can be enhanced\r\n    if (data.type === 'electric_arc' && data.from === 'ball' && data.to === 'hole') {\r\n      const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n      let holePosition = { x: 180, y: 50 };\r\n      \r\n      if (this.currentLevel) {\r\n        const levelData = this.currentLevel.getLevelData();\r\n        const goalHole = levelData.holes.find(hole => hole.isGoal);\r\n        if (goalHole) {\r\n          holePosition = { x: goalHole.position.x, y: goalHole.position.y };\r\n        }\r\n      }\r\n      \r\n      if (ball) {\r\n        // Draw electric arc lines\r\n        ctx.strokeStyle = data.color || '#ff00ff';\r\n        ctx.lineWidth = 2;\r\n        ctx.globalAlpha = 0.7;\r\n        \r\n        for (let i = 0; i < (data.count || 3); i++) {\r\n          const offset = (Math.random() - 0.5) * 20;\r\n          ctx.beginPath();\r\n          ctx.moveTo(ball.position.x + offset, ball.position.y + offset);\r\n          ctx.lineTo(holePosition.x - offset, holePosition.y - offset);\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render animation visual effect\r\n   */\r\n  private renderAnimationEffect(ctx: CanvasRenderingContext2D, data: any): void {\r\n    if (data.type === 'scan_bar') {\r\n      // Render scanning animation\r\n      const time = Date.now() * (data.speed || 2.0) * 0.001;\r\n      const scanY = (Math.sin(time) * 0.5 + 0.5) * 640;\r\n      \r\n      ctx.strokeStyle = data.color || '#00ffff';\r\n      ctx.lineWidth = 3;\r\n      ctx.globalAlpha = 0.8;\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(0, scanY);\r\n      ctx.lineTo(360, scanY);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render power-up HUD\r\n   */\r\n  private renderPowerUpHUD(ctx: CanvasRenderingContext2D, activePowerUps: Map<PowerUpType, any>): void {\r\n    const powerUpSprites = {\r\n      [PowerUpType.SLOW_MO_SURGE]: 'hourglass', // Time bonus sprite (use primary for HUD)\r\n      [PowerUpType.MAGNETIC_GUIDE]: 'magnet',\r\n      [PowerUpType.CIRCUIT_PATCH]: 'chip',\r\n      [PowerUpType.OVERCLOCK_BOOST]: 'starburst',\r\n      [PowerUpType.SCAN_REVEAL]: 'eye',\r\n    };\r\n\r\n    // Power-up names for display (currently unused but kept for future use)\r\n    // const powerUpNames = {\r\n    //   [PowerUpType.SLOW_MO_SURGE]: 'Slow-Mo',\r\n    //   [PowerUpType.MAGNETIC_GUIDE]: 'Magnetic',\r\n    //   [PowerUpType.CIRCUIT_PATCH]: 'Shield',\r\n    //   [PowerUpType.OVERCLOCK_BOOST]: 'Overclock',\r\n    //   [PowerUpType.SCAN_REVEAL]: 'Scan',\r\n    // };\r\n\r\n    // Render power-up status with icons only: left, center, right\r\n    const screenWidth = 360;\r\n    const padding = 20; // Padding from edges\r\n    \r\n    // Define positions for each power-up type\r\n    const powerUpPositions = {\r\n      [PowerUpType.SLOW_MO_SURGE]: { x: padding + 30, align: 'center' },\r\n      [PowerUpType.MAGNETIC_GUIDE]: { x: padding + 80, align: 'center' },\r\n      [PowerUpType.CIRCUIT_PATCH]: { x: screenWidth / 2, align: 'center' },\r\n      [PowerUpType.OVERCLOCK_BOOST]: { x: screenWidth - padding - 80, align: 'center' },\r\n      [PowerUpType.SCAN_REVEAL]: { x: screenWidth - padding - 30, align: 'center' },\r\n    };\r\n    \r\n    activePowerUps.forEach((state, type) => {\r\n      const spriteName = powerUpSprites[type];\r\n      const charges = state.charges;\r\n      const isActive = state.isActive;\r\n      const position = powerUpPositions[type];\r\n\r\n      // Draw power-up sprite\r\n      if (spriteName && this.renderer) {\r\n        const spriteScale = 0.4; // Scale down for HUD\r\n        const spriteY = 610 - 20; // Position above text\r\n        \r\n        // Set color tint based on active state\r\n        if (isActive) {\r\n          if (type === PowerUpType.SLOW_MO_SURGE) {\r\n            // Add countdown timer for active Slow-Mo\r\n            const elapsed = Date.now() - state.startTime;\r\n            const remaining = Math.max(0, state.duration - elapsed);\r\n            const secondsRemaining = Math.ceil(remaining / 1000);\r\n            \r\n            // Change color based on remaining time\r\n            if (secondsRemaining <= 1) {\r\n              this.renderer.setTint('#ff0000'); // Red when almost done\r\n            } else if (secondsRemaining <= 2) {\r\n              this.renderer.setTint('#ff6600'); // Orange when low\r\n            } else {\r\n              this.renderer.setTint('#00ff00'); // Green when plenty of time\r\n            }\r\n          } else {\r\n            this.renderer.setTint('#00ff00'); // Green for active\r\n          }\r\n        } else {\r\n          this.renderer.setTint('#ffffff'); // White for inactive\r\n        }\r\n        \r\n        this.renderer.drawAtlasSprite(spriteName, position.x, spriteY, spriteScale);\r\n        this.renderer.clearTint();\r\n      }\r\n      \r\n      // Draw charge count\r\n      ctx.fillStyle = isActive ? '#00ff00' : '#ffffff';\r\n      ctx.font = '14px Interceptor';\r\n      ctx.textAlign = 'center';\r\n      \r\n      let displayText = `${charges}`;\r\n      \r\n      // Add countdown timer for active Slow-Mo\r\n      if (isActive && type === PowerUpType.SLOW_MO_SURGE) {\r\n        const elapsed = Date.now() - state.startTime;\r\n        const remaining = Math.max(0, state.duration - elapsed);\r\n        const secondsRemaining = Math.ceil(remaining / 1000);\r\n        displayText = `${charges}[${secondsRemaining}s]`;\r\n        \r\n        // Change color based on remaining time\r\n        if (secondsRemaining <= 1) {\r\n          ctx.fillStyle = '#ff0000'; // Red when almost done\r\n        } else if (secondsRemaining <= 2) {\r\n          ctx.fillStyle = '#ff6600'; // Orange when low\r\n        } else {\r\n          ctx.fillStyle = '#00ff00'; // Green when plenty of time\r\n        }\r\n      }\r\n      \r\n      ctx.fillText(displayText, position.x, 610);\r\n    });\r\n\r\n    // Render power-up controls hint\r\n    if (this.gameState.isDebugMode()) {\r\n      ctx.fillStyle = '#00f0ff';\r\n      ctx.font = '10px Interceptor';\r\n      ctx.textAlign = 'left';\r\n      ctx.fillText('Power-ups: Q(Slow-Mo) W(Magnetic) E(Shield) R(Overclock) T(Scan)', 10, 620);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle power-up input activation\r\n   */\r\n  private handlePowerUpInput(): void {\r\n    // Slow-Mo Surge - Q key\r\n    if (this.inputManager.isKeyJustPressed('KeyQ')) {\r\n      if (this.powerUpManager.activatePowerUp(PowerUpType.SLOW_MO_SURGE)) {\r\n        this.audioManager.playSound('powerup_activate');\r\n        logger.info('⏰ Slow-Mo Surge activated', null, 'Game');\r\n      }\r\n    }\r\n\r\n    // Magnetic Guide - W key\r\n    if (this.inputManager.isKeyJustPressed('KeyW')) {\r\n      if (this.powerUpManager.activatePowerUp(PowerUpType.MAGNETIC_GUIDE)) {\r\n        this.audioManager.playSound('powerup_activate');\r\n        logger.info('🧲 Magnetic Guide activated', null, 'Game');\r\n      }\r\n    }\r\n\r\n    // Circuit Patch (Shield) - E key\r\n    if (this.inputManager.isKeyJustPressed('KeyE')) {\r\n      if (this.powerUpManager.activatePowerUp(PowerUpType.CIRCUIT_PATCH)) {\r\n        this.audioManager.playSound('shield_activate');\r\n        logger.info('🛡️ Circuit Patch shield activated', null, 'Game');\r\n      }\r\n    }\r\n\r\n    // Overclock Boost - R key\r\n    if (this.inputManager.isKeyJustPressed('KeyR')) {\r\n      if (this.powerUpManager.activatePowerUp(PowerUpType.OVERCLOCK_BOOST)) {\r\n        this.audioManager.playSound('powerup_activate');\r\n        logger.info('⚡ Overclock Boost activated', null, 'Game');\r\n      }\r\n    }\r\n\r\n    // Scan Reveal - T key\r\n    if (this.inputManager.isKeyJustPressed('KeyT')) {\r\n      if (this.powerUpManager.activatePowerUp(PowerUpType.SCAN_REVEAL)) {\r\n        this.audioManager.playSound('powerup_activate');\r\n        logger.info('🔍 Scan Reveal activated', null, 'Game');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Place ball on the tilting bar\r\n   */\r\n  private placeBallOnBar(): void {\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (ball) {\r\n      // Position ball on the bar\r\n      ball.position.x = this.tiltingBar.position.x;\r\n      ball.position.y = this.tiltingBar.leftSideHeight - 20; // Slightly above the bar\r\n      ball.previousPosition.x = ball.position.x;\r\n      ball.previousPosition.y = ball.position.y;\r\n      ball.velocity.x = 0;\r\n      ball.velocity.y = 0;\r\n      logger.debug('🎯 Ball placed on tilting bar', null, 'Game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset ball after completing a goal (no life loss)\r\n   */\r\n  private resetBallAfterGoal(): void {\r\n    logger.info('🎯 Goal completed - resetting ball without life loss', null, 'Game');\r\n\r\n    // Reset power-ups for new attempt\r\n    this.powerUpManager.initializeRun();\r\n\r\n    // Reset tilting bar to starting position\r\n    this.tiltingBar.reset();\r\n\r\n    // Reset ball to starting position on the bar\r\n    this.placeBallOnBar();\r\n  }\r\n\r\n  /**\r\n   * Handle ball falling off screen\r\n   */\r\n  private handleBallFallOff(): void {\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    \r\n    if (ball && this.powerUpEffects.shouldUseShield(ball.position, { width: 360, height: 640 })) {\r\n      // Try to use shield\r\n      if (this.powerUpManager.useShield()) {\r\n        logger.info('🛡️ Shield protected ball from falling!', null, 'Game');\r\n        this.audioManager.playSound('shield_used');\r\n        \r\n        // Reset ball to safe position\r\n        this.placeBallOnBar();\r\n        return;\r\n      }\r\n    }\r\n\r\n    logger.warn('💀 Ball fell off screen!', null, 'Game');\r\n    \r\n    // Record ball lost event\r\n    this.statsManager.recordEvent({\r\n      type: 'ball_lost',\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Update game progress\r\n    this.gameProgress.totalBallsLost++;\r\n\r\n    // Reduce lives\r\n    const currentLives = this.gameState.getStateData().lives;\r\n    if (currentLives > 1) {\r\n      this.gameState.updateStateData({ lives: currentLives - 1 });\r\n      logger.info(`💔 Lives remaining: ${currentLives - 1}`, null, 'Game');\r\n\r\n      // Reset for next attempt\r\n      this.placeBallOnBar();\r\n    } else {\r\n      // Game over\r\n      this.handleGameOver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load next level\r\n   */\r\n  private loadNextLevel(levelId: number): void {\r\n    logger.info(`🔄 Loading level ${levelId}...`, null, 'Game');\r\n\r\n    // Record level start event\r\n    this.statsManager.recordEvent({\r\n      type: 'level_start',\r\n      timestamp: Date.now(),\r\n      data: { levelId },\r\n    });\r\n\r\n    this.currentLevel = this.levelManager.loadLevel(levelId, (soundName: string) => {\r\n      this.audioManager.playSound(soundName);\r\n    });\r\n    if (this.currentLevel) {\r\n      this.currentLevel.start();\r\n      this.gameState.updateStateData({ currentLevel: levelId });\r\n      this.levelCompletionHandled = false; // Reset completion flag for new level\r\n\r\n      // Start unified scoring system timer for this level\r\n      this.unifiedScoringSystem.startLevel(levelId);\r\n\r\n      // Reset tilting bar to starting position\r\n      this.tiltingBar.reset();\r\n\r\n      // Reset ball to starting position on the bar\r\n      this.placeBallOnBar();\r\n\r\n      logger.info(`🎯 Level ${levelId} loaded and started`, null, 'Game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get power-up manager (for external access)\r\n   */\r\n  public getPowerUpManager(): PowerUpManager {\r\n    return this.powerUpManager;\r\n  }\r\n\r\n  /**\r\n   * Get power-up effects system (for external access)\r\n   */\r\n  public getPowerUpEffects(): PowerUpEffects {\r\n    return this.powerUpEffects;\r\n  }\r\n\r\n  /**\r\n   * Get power-up event system (for external access)\r\n   */\r\n  public getPowerUpEventSystem(): PowerUpEventSystem {\r\n    return this.powerUpEventSystem;\r\n  }\r\n\r\n  /**\r\n   * Get power-up debugger (for external access)\r\n   */\r\n  public getPowerUpDebugger(): PowerUpDebugger {\r\n    return this.powerUpDebugger;\r\n  }\r\n\r\n  /**\r\n   * Check if ball is currently animating into a hole\r\n   */\r\n  public getIsAnimatingHoleFall(): boolean {\r\n    return this.isAnimatingHoleFall;\r\n  }\r\n\r\n  /**\r\n   * Check collisions between ball and level elements\r\n   */\r\n  private checkCollisions(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    const ball = this.physicsEngine\r\n      .getObjects()\r\n      .find(obj => obj.id === 'game-ball');\r\n    if (!ball) return;\r\n\r\n    const ballPosition = { x: ball.position.x, y: ball.position.y };\r\n    const ballRadius = ball.radius;\r\n\r\n    // Check if ball reached the goal hole - now triggers hole animation\r\n    if (this.currentLevel.checkGoalReached(ballPosition, ballRadius)) {\r\n      this.handleGoalReached();\r\n      // Start hole animation for goal hole\r\n      const goalHole = this.currentLevel.getGoalHoleAtPosition(ballPosition);\r\n      if (goalHole) {\r\n        this.startHoleAnimation('game-ball', goalHole.position, true, false); // Mark as goal hole\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Check if ball fell into any hole\r\n    const hitHole = this.currentLevel.checkHoleCollision(\r\n      ballPosition,\r\n      ballRadius,\r\n      'game-ball', // Pass ball ID to prevent re-entry\r\n    );\r\n    if (hitHole && !hitHole.isGoal) {\r\n      this.handleHoleCollision(hitHole);\r\n    }\r\n\r\n    // Check if ball fell off screen\r\n    if (this.currentLevel.checkBallFallOff(ballPosition, { x: 360, y: 640 })) {\r\n      this.handleBallFallOff();\r\n    }\r\n\r\n    // Check for power-up hole collisions (handled in handleHoleCollision)\r\n  }\r\n\r\n  /**\r\n   * Check win/lose conditions\r\n   */\r\n  private checkWinLoseConditions(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    // Check if level is complete (only handle once per level)\r\n    if (\r\n      this.currentLevel.checkLevelComplete() &&\r\n      !this.levelCompletionHandled\r\n    ) {\r\n      this.levelCompletionHandled = true;\r\n      this.handleLevelComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle ball reaching the goal hole\r\n   */\r\n  private handleGoalReached(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    logger.info('🎯 Goal reached!', null, 'Game');\r\n\r\n    // Record goal reached event\r\n    this.statsManager.recordEvent({\r\n      type: 'goal_reached',\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Update game progress\r\n    this.gameProgress.totalGoalsReached++;\r\n\r\n    // Play target activation sound\r\n    this.audioManager.playSound('target');\r\n\r\n    // Add bonus score for reaching goal\r\n    const currentScore = this.gameState.getStateData().score;\r\n    this.gameState.updateStateData({ score: currentScore + 500 });\r\n\r\n    // Show point fly-off animation above ball\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (ball) {\r\n      this.pointFlyOffManager.showGoalHit(500, ball.position);\r\n    }\r\n\r\n    logger.info('💰 Goal bonus: 500 points', null, 'Game');\r\n\r\n    // Check if all goals are completed\r\n    const completedGoals = this.currentLevel.getCompletedGoals();\r\n    const requiredGoals = this.currentLevel.getRequiredGoals();\r\n\r\n    logger.info(`🎯 Goals completed: ${completedGoals}/${requiredGoals}`, null, 'Game');\r\n\r\n    if (completedGoals >= requiredGoals) {\r\n      logger.info('🎉 All goals completed! Level complete!', null, 'Game');\r\n      logger.info(\r\n        `🎯 Level ${this.currentLevel.getLevelData().id} complete! All ${requiredGoals} goals reached!`,\r\n        null,\r\n        'Game',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle ball falling into a hole\r\n   */\r\n  private handleHoleCollision(hole: Hole): void {\r\n    logger.info(`🕳️ Ball fell into hole: ${hole.id}`, null, 'Game');\r\n\r\n    // Check if this is a power-up hole\r\n    const isPowerUpHole = hole.powerUpType !== undefined;\r\n    const isAnimatedHole = hole.animationState?.isAnimated;\r\n    \r\n    if (isPowerUpHole) {\r\n      // Start saucer behavior instead of immediate collection\r\n      if (this.currentLevel) {\r\n        this.currentLevel.startSaucerBehavior(hole.id, 'game-ball', Date.now());\r\n        this.handlePowerUpHoleCollection(hole);\r\n      }\r\n    } else if (isAnimatedHole) {\r\n      // Animated hole - same as regular hole but with special effects\r\n      this.audioManager.playSound('zap');\r\n      \r\n      // Apply time bonus for animated holes (they're trickier to navigate)\r\n      this.applyRegularHoleTimeBonus(hole, true);\r\n      \r\n      // Reset tilting bar to starting position\r\n      this.tiltingBar.reset();\r\n      logger.info('🔄 Bar reset to starting position after ball fell into animated hole', null, 'Game');\r\n      \r\n      // Start hole animation with special flag for animated holes\r\n      this.startHoleAnimation('game-ball', hole.position, false, true);\r\n      \r\n      // Force the animated hole to animate out early (will cycle back after hidden phase)\r\n      if (hole.animationState) {\r\n        hole.animationState.phase = 'animating_out';\r\n        hole.animationState.startTime = Date.now();\r\n        hole.isActive = false;\r\n        logger.info(`🌟 Animated hole forced to animate out after ball collision: ${hole.id}`, null, 'Game');\r\n      }\r\n    } else {\r\n      // Regular hole - play falling sound, reset bar, and start animation\r\n      this.audioManager.playSound('zap');\r\n      \r\n      // Apply time bonus for regular holes\r\n      this.applyRegularHoleTimeBonus(hole, false);\r\n      \r\n      // Reset tilting bar to starting position\r\n      this.tiltingBar.reset();\r\n      logger.info('🔄 Bar reset to starting position after ball fell into hole', null, 'Game');\r\n      \r\n      this.startHoleAnimation('game-ball', hole.position, false, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update saucer behavior and kick balls when ready\r\n   */\r\n  private updateSaucerBehavior(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    // Check if any ball is in a saucer and update height constraints\r\n    this.updateSaucerHeightConstraints();\r\n\r\n    // Update saucer waiting scoring system\r\n    this.updateSaucerWaitingScoring();\r\n\r\n    const kickData = this.currentLevel.updateSaucerBehavior(Date.now());\r\n    if (kickData) {\r\n      this.kickBallFromSaucer(kickData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kick ball out of saucer with physics\r\n   */\r\n  private kickBallFromSaucer(kickData: { ballId: string; direction: { x: number; y: number }; force: number; holeId: string }): void {\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === kickData.ballId);\r\n    if (!ball) return;\r\n\r\n    // Clear height constraint when ball leaves saucer\r\n    this.tiltingBar.clearSaucerHeightConstraint();\r\n\r\n    // Apply kick force to ball\r\n    const kickVelocity = {\r\n      x: kickData.direction.x * kickData.force,\r\n      y: kickData.direction.y * kickData.force,\r\n    };\r\n\r\n    // Update ball physics\r\n    ball.previousPosition.x = ball.position.x - kickVelocity.x * 0.016; // 60fps\r\n    ball.previousPosition.y = ball.position.y - kickVelocity.y * 0.016;\r\n\r\n    // Play kick sound\r\n    this.audioManager.playSound('powerup_collect');\r\n\r\n    logger.info(`🚀 Ball kicked from saucer with force: ${kickData.force} from hole: ${kickData.holeId}`, null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Update height constraints based on saucer ball positions\r\n   */\r\n  private updateSaucerHeightConstraints(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    // Check if any ball is in a saucer\r\n    let ballInSaucer = false;\r\n    let saucerBallY = 0;\r\n\r\n    // Find the game ball\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (!ball) return;\r\n\r\n    // Check all holes for active saucer states\r\n    const holes = this.currentLevel.getHoles();\r\n    for (const hole of holes) {\r\n      if (hole.saucerState?.isActive && hole.saucerState.ballId === 'game-ball') {\r\n        ballInSaucer = true;\r\n        \r\n        // Get ball position during saucer interaction\r\n        const saucerPosition = this.currentLevel.getSaucerBallPosition(hole.id);\r\n        if (saucerPosition) {\r\n          saucerBallY = saucerPosition.y;\r\n        } else {\r\n          // Fallback to hole position if saucer position not available\r\n          saucerBallY = hole.position.y;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Set or clear height constraint based on saucer state\r\n    if (ballInSaucer) {\r\n      // Only update constraint if ball position has changed significantly\r\n      if (!this.tiltingBar.hasSaucerHeightConstraint() || \r\n          Math.abs(saucerBallY - (this.lastSaucerConstraintY || 0)) > 2) {\r\n        this.tiltingBar.setSaucerHeightConstraint(saucerBallY);\r\n        this.lastSaucerConstraintY = saucerBallY;\r\n      }\r\n    } else {\r\n      // Clear constraint if no ball in saucer\r\n      if (this.tiltingBar.hasSaucerHeightConstraint()) {\r\n        this.tiltingBar.clearSaucerHeightConstraint();\r\n        this.lastSaucerConstraintY = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update saucer waiting scoring system\r\n   */\r\n  private updateSaucerWaitingScoring(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    const currentTime = Date.now();\r\n    \r\n    // Check if any ball is in a saucer waiting phase\r\n    let ballInWaitingPhase = false;\r\n    let ballPosition: { x: number; y: number } | null = null;\r\n\r\n    // Find the game ball\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    if (!ball) return;\r\n\r\n    // Check all holes for active saucer states in waiting phase\r\n    const holes = this.currentLevel.getHoles();\r\n    for (const hole of holes) {\r\n      if (hole.saucerState?.isActive && \r\n          hole.saucerState.ballId === 'game-ball' && \r\n          hole.saucerState.phase === 'waiting') {\r\n        ballInWaitingPhase = true;\r\n        ballPosition = this.currentLevel.getSaucerBallPosition(hole.id);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Update scoring state\r\n    if (ballInWaitingPhase) {\r\n      if (!this.saucerWaitingScoringState.isActive) {\r\n        // Start scoring\r\n        this.saucerWaitingScoringState.isActive = true;\r\n        this.saucerWaitingScoringState.lastScoringTime = currentTime;\r\n        logger.info('🎯 Started saucer waiting scoring', null, 'Game');\r\n      }\r\n\r\n      // Check if it's time to award points\r\n      if (currentTime - this.saucerWaitingScoringState.lastScoringTime >= this.saucerWaitingScoringState.scoringInterval) {\r\n        // Award 1000 points (1 point * 1000 multiplier from unified scoring)\r\n        const points = 1000;\r\n        \r\n        // Add to legacy score for compatibility\r\n        const currentScore = this.gameState.getStateData().score;\r\n        this.gameState.updateStateData({ score: currentScore + points });\r\n\r\n        // Add to unified scoring system as bonus points\r\n        this.unifiedScoringSystem.addBonusPoints(points);\r\n\r\n        // Create cascade flyoff animation from top of ball (show +1 for user experience)\r\n        if (ballPosition) {\r\n          this.createSaucerWaitingFlyoff(1, ballPosition); // Show +1 in flyoff for better UX\r\n        }\r\n\r\n        // Play satisfying slot machine-style audio feedback\r\n        this.audioManager.playSound('target', 0.6, 1.3); // More satisfying \"ding\" sound\r\n\r\n        // Update scoring state\r\n        this.saucerWaitingScoringState.lastScoringTime = currentTime;\r\n\r\n        logger.debug(`🎯 Awarded ${points} points for saucer waiting`, null, 'Game');\r\n      }\r\n    } else {\r\n      // Clear scoring state if no longer in waiting phase\r\n      if (this.saucerWaitingScoringState.isActive) {\r\n        this.saucerWaitingScoringState.isActive = false;\r\n        logger.info('🎯 Stopped saucer waiting scoring', null, 'Game');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create cascade flyoff animation for saucer waiting scoring\r\n   */\r\n  private createSaucerWaitingFlyoff(points: number, ballPosition: { x: number; y: number }): void {\r\n    // Create flyoff position at the top of the ball - always from the same spot\r\n    const ballRadius = 12; // Approximate ball radius\r\n    \r\n    // Position flyoffs coming from the top of the ball with slight random spread\r\n    const flyoffPosition = {\r\n      x: ballPosition.x + (Math.random() - 0.5) * 16, // Small random horizontal spread\r\n      y: ballPosition.y - ballRadius + (Math.random() - 0.5) * 8, // Slight random vertical variation around ball top\r\n    };\r\n\r\n    // Use the new saucer waiting flyoff method with custom color #00d26a\r\n    this.pointFlyOffManager.showSaucerWaiting(points, flyoffPosition);\r\n\r\n    logger.debug(`✨ Created saucer waiting flyoff: +${points} at (${flyoffPosition.x}, ${flyoffPosition.y})`, null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Handle power-up hole collection\r\n   */\r\n  private handlePowerUpHoleCollection(hole: Hole): void {\r\n    if (!hole.powerUpType) return;\r\n\r\n    logger.info(`🎁 Power-up collected from hole: ${hole.powerUpType}`, null, 'Game');\r\n\r\n    // Add charge to the power-up\r\n    this.powerUpManager.addCharges(hole.powerUpType, 1);\r\n\r\n    // Get ball position for fly-off animation\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball');\r\n    const ballPosition = ball ? { x: ball.position.x, y: ball.position.y } : undefined;\r\n\r\n    // Apply time bonus if power-up provides one\r\n    this.applyPowerUpTimeBonus(hole, ballPosition);\r\n\r\n    // Show appropriate fly-off animation based on sprite type\r\n    const spriteName = this.getPowerUpSpriteName(hole.powerUpType, hole.id);\r\n    if (this.isTimeBonusSprite(spriteName)) {\r\n      // For time bonus sprites (hourglass/hourglass_alt), only show time bonus fly-off\r\n      // Don't show regular power-up collection fly-off\r\n    } else {\r\n      // For other power-ups, show regular power-up collection fly-off\r\n      const powerUpPoints = 100; // Base points for power-up collection\r\n      const powerUpColor = this.getPowerUpColor(hole.powerUpType);\r\n      this.pointFlyOffManager.showPowerUpCollect(\r\n        powerUpPoints,\r\n        hole.position,\r\n        powerUpColor,\r\n      );\r\n    }\r\n\r\n    // Don't deactivate the hole immediately - let saucer handle it\r\n    // The hole will be deactivated after the ball is kicked out\r\n\r\n    // Play collection sound\r\n    this.audioManager.playSound('powerup_collect');\r\n\r\n    // Record collection event\r\n    this.statsManager.recordEvent({\r\n      type: 'powerup_collected',\r\n      timestamp: Date.now(),\r\n      data: { powerUpType: hole.powerUpType, source: 'hole' },\r\n    });\r\n\r\n    logger.info(`⚡ Added charge to ${hole.powerUpType} from power-up hole`, null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Get the sprite name for a power-up hole\r\n   */\r\n  private getPowerUpSpriteName(powerUpType: PowerUpType, holeId: string): string {\r\n    const powerUpSprites = {\r\n      'SLOW_MO_SURGE': ['hourglass', 'hourglass_alt'], // Time bonus sprites\r\n      'MAGNETIC_GUIDE': ['magnet', 'magnet_alt', 'hourglass_alt'], // Occasionally time bonus\r\n      'CIRCUIT_PATCH': ['chip', 'chip_alt'],\r\n      'OVERCLOCK_BOOST': ['starburst', 'starburst_alt', 'hourglass'], // Occasionally time bonus\r\n      'SCAN_REVEAL': ['eye', 'eye_alt'],\r\n    };\r\n    \r\n    // Select sprite based on hole ID for consistent randomization\r\n    const sprites = powerUpSprites[powerUpType as unknown as keyof typeof powerUpSprites] || ['vortex'];\r\n    const spriteIndex = holeId.charCodeAt(holeId.length - 1) % sprites.length;\r\n    return sprites[spriteIndex];\r\n  }\r\n\r\n  /**\r\n   * Check if a sprite grants time bonus (hourglass or hourglass_alt)\r\n   */\r\n  private isTimeBonusSprite(spriteName: string): boolean {\r\n    return spriteName === 'hourglass' || spriteName === 'hourglass_alt';\r\n  }\r\n\r\n  /**\r\n   * Apply time bonus for specific power-up types\r\n   */\r\n  private applyPowerUpTimeBonus(hole: Hole, ballPosition?: { x: number; y: number }): void {\r\n    if (!hole.powerUpType) return;\r\n\r\n    // Get the sprite name for this specific hole\r\n    const spriteName = this.getPowerUpSpriteName(hole.powerUpType, hole.id);\r\n    \r\n    // Check if this sprite grants time bonus\r\n    if (this.isTimeBonusSprite(spriteName)) {\r\n      // 3 seconds bonus for hourglass/hourglass_alt sprites - this is a time reduction\r\n      const timeBonus = 3.0;\r\n      this.unifiedScoringSystem.addTimeReduction(timeBonus);\r\n      logger.info(`⏰ Time reduction applied: -${timeBonus}s from ${hole.powerUpType} (${spriteName} sprite)`, null, 'Game');\r\n      \r\n      // Show time bonus fly-off for time bonus sprites\r\n      if (ballPosition) {\r\n        this.pointFlyOffManager.showTimeBonus(timeBonus, ballPosition);\r\n      }\r\n    } else {\r\n      // Check if this is an assist power-up that should add time penalty\r\n      const assistPenalties: { [key in PowerUpType]?: number } = {\r\n        [PowerUpType.SLOW_MO_SURGE]: 2.0,      // 2 seconds penalty for slow-mo assistance\r\n        [PowerUpType.MAGNETIC_GUIDE]: 2.0,     // 2 seconds penalty for magnetic guidance\r\n      };\r\n      \r\n      const timePenalty = assistPenalties[hole.powerUpType];\r\n      if (timePenalty) {\r\n        this.unifiedScoringSystem.addAssistPenalty(timePenalty);\r\n        logger.info(`⚖️ Assist penalty applied: +${timePenalty}s from ${hole.powerUpType}`, null, 'Game');\r\n      }\r\n      \r\n      // Regular time reductions for other power-ups\r\n      const regularTimeReductions: { [key in PowerUpType]?: number } = {\r\n        [PowerUpType.CIRCUIT_PATCH]: 1.0,      // 1 second reduction (shield is valuable)\r\n        [PowerUpType.OVERCLOCK_BOOST]: 0.5,    // 0.5 seconds reduction\r\n        [PowerUpType.SCAN_REVEAL]: 0.5,        // 0.5 seconds reduction\r\n      };\r\n      \r\n      const timeReduction = regularTimeReductions[hole.powerUpType];\r\n      if (timeReduction) {\r\n        this.unifiedScoringSystem.addTimeReduction(timeReduction);\r\n        logger.info(`⏰ Time reduction applied: -${timeReduction}s from ${hole.powerUpType}`, null, 'Game');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply time bonus for regular holes and animated holes\r\n   */\r\n  private applyRegularHoleTimeBonus(hole: Hole, isAnimated: boolean): void {\r\n    // Time reductions for regular holes (smaller bonuses since they're more common)\r\n    const timeReduction = isAnimated ? 0.3 : 0.1; // Animated holes give more bonus\r\n    \r\n    this.unifiedScoringSystem.addTimeReduction(timeReduction);\r\n    const holeType = isAnimated ? 'animated hole' : 'regular hole';\r\n    logger.info(`⏰ Time reduction applied: -${timeReduction}s from ${holeType} (${hole.id})`, null, 'Game');\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Handle level completion\r\n   */\r\n  private handleLevelComplete(): void {\r\n    if (!this.currentLevel) return;\r\n\r\n    logger.info('🏆 Level completed!', null, 'Game');\r\n\r\n    // Get level completion data\r\n    const levelId = this.currentLevel.getLevelData().id;\r\n    \r\n    // Complete level in unified scoring system\r\n    const levelScoreData = this.unifiedScoringSystem.completeLevel(levelId);\r\n    \r\n    // Add level time to session total (keep for compatibility)\r\n    this.sessionTotalTime += levelScoreData.rawTime * 1000; // Convert to milliseconds\r\n\r\n    // Record level complete event with new scoring data\r\n    this.statsManager.recordEvent({\r\n      type: 'level_complete',\r\n      timestamp: Date.now(),\r\n      data: { \r\n        levelId,\r\n        score: levelScoreData.levelPoints,\r\n        completionTime: levelScoreData.rawTime * 1000, // Convert to milliseconds\r\n        baseLevelValue: levelScoreData.baseLevelValue,\r\n        adjustedTime: levelScoreData.adjustedTime,\r\n        timeReductions: levelScoreData.timeReductions,\r\n        assistPenalties: levelScoreData.assistPenalties,\r\n      },\r\n    });\r\n\r\n    // Update game progress\r\n    this.gameProgress.completedLevels.add(levelId);\r\n    this.gameProgress.highestLevel = Math.max(this.gameProgress.highestLevel, levelId);\r\n\r\n    // Update game state with new scoring data\r\n    this.gameState.addLevelScore(levelScoreData);\r\n    \r\n    // Update legacy score for compatibility\r\n    const currentScore = this.gameState.getStateData().score;\r\n    this.gameState.updateStateData({ \r\n      score: currentScore + Math.floor(levelScoreData.levelPoints),\r\n      totalScore: this.unifiedScoringSystem.getCurrentTotalScore(),\r\n    });\r\n\r\n    // Play level completion sound\r\n    this.audioManager.playSound('level_complete');\r\n\r\n    // Show level completion fly-off animation in center of screen\r\n    this.pointFlyOffManager.showLevelComplete(\r\n      levelScoreData.levelPoints,\r\n      { x: 180, y: 320 }, // Center of 360x640 screen\r\n    );\r\n\r\n    logger.info(`🎉 Level Points: ${levelScoreData.levelPoints.toFixed(2)} (${levelScoreData.baseLevelValue}/${levelScoreData.adjustedTime.toFixed(2)}s)`, null, 'Game');\r\n\r\n    // Move to next level\r\n    const nextLevelId = this.currentLevel.getLevelData().id + 1;\r\n    this.levelManager.unlockLevel(nextLevelId);\r\n\r\n    // Create and show win screen with new scoring data\r\n    this.winScreen = new WinScreen({\r\n      onContinue: () => this.handleWinScreenContinue(),\r\n      levelTime: levelScoreData.rawTime * 1000, // Convert to milliseconds\r\n      sessionTotal: this.sessionTotalTime,\r\n      levelId: levelId,\r\n      score: levelScoreData.levelPoints,\r\n      levelScoreData: levelScoreData,\r\n      totalScore: this.unifiedScoringSystem.getCurrentTotalScore(),\r\n    });\r\n\r\n    // Change to win screen state\r\n    this.gameState.setState(GameStateType.WIN_SCREEN);\r\n\r\n    logger.info(`🏆 Level ${levelId} completed! Total Score: ${this.unifiedScoringSystem.getCurrentTotalScore().toFixed(2)} - Showing win screen...`, null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Handle continue from win screen\r\n   */\r\n  private handleWinScreenContinue(): void {\r\n    this.winScreen = null;\r\n\r\n    if (!this.currentLevel) return;\r\n\r\n    // Get next level ID\r\n    const nextLevelId = this.currentLevel.getLevelData().id + 1;\r\n\r\n    // Load next level or show completion\r\n    if (this.levelManager.getLevelData(nextLevelId)) {\r\n      // Set game state back to playing before loading next level\r\n      this.gameState.setState(GameStateType.PLAYING);\r\n      this.loadNextLevel(nextLevelId);\r\n      logger.info(`🎮 Continuing to Level ${nextLevelId}`, null, 'Game');\r\n    } else {\r\n      this.handleGameComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle game over\r\n   */\r\n  private handleGameOver(): void {\r\n    logger.warn('💀 Game Over!', null, 'Game');\r\n    \r\n    // Record death event\r\n    this.statsManager.recordEvent({\r\n      type: 'death',\r\n      timestamp: Date.now(),\r\n    });\r\n    \r\n    this.gameState.setState(GameStateType.GAME_OVER);\r\n\r\n    // Save final game progress\r\n    this.saveGameProgress();\r\n\r\n    // Play game over sound\r\n    this.audioManager.playSound('game_over');\r\n\r\n    // Return to menu music after a short delay\r\n    setTimeout(() => {\r\n      this.playMenuMusic();\r\n    }, 1000);\r\n\r\n    // Auto-return to menu after 5 seconds if user doesn't interact\r\n    setTimeout(() => {\r\n      if (this.gameState.isState(GameStateType.GAME_OVER)) {\r\n        logger.info('🏠 Auto-returning to menu...', null, 'Game');\r\n        this.gameState.reset();\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  /**\r\n   * Handle game completion\r\n   */\r\n  private handleGameComplete(): void {\r\n    logger.info('🎊 Game completed! All levels finished!', null, 'Game');\r\n\r\n    // Record game complete event\r\n    this.statsManager.recordEvent({\r\n      type: 'game_complete',\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Return to menu music after a short delay\r\n    setTimeout(() => {\r\n      this.playMenuMusic();\r\n    }, 1000);\r\n\r\n    // Show completion message briefly, then return to main menu\r\n    setTimeout(() => {\r\n      logger.info('🏠 Returning to main menu...', null, 'Game');\r\n      this.gameState.reset();\r\n    }, 2000); // 2 second delay to show completion\r\n  }\r\n\r\n  /**\r\n   * Pause the game.\r\n   */\r\n  public pause(): void {\r\n    logger.info('⏸️ Pausing Circuit Breaker...', null, 'Game');\r\n    \r\n    // Save progress when pausing\r\n    this.saveGameProgress();\r\n    \r\n    this.gameLoop.pause();\r\n  }\r\n\r\n  /**\r\n   * Resume the game from pause.\r\n   */\r\n  public resume(): void {\r\n    logger.info('▶️ Resuming Circuit Breaker...', null, 'Game');\r\n    this.gameLoop.resume();\r\n  }\r\n\r\n  /**\r\n   * Stop the game and clean up resources.\r\n   */\r\n  public stop(): void {\r\n    logger.info('⏹️ Stopping Circuit Breaker...', null, 'Game');\r\n    \r\n    // Record session end event\r\n    this.statsManager.recordEvent({\r\n      type: 'session_end',\r\n      timestamp: Date.now(),\r\n    });\r\n    \r\n    this.gameLoop.stop();\r\n    this.isRunning = false;\r\n  }\r\n\r\n  /**\r\n   * Get the current game state object.\r\n   */\r\n  public getGameState(): GameState {\r\n    return this.gameState;\r\n  }\r\n\r\n  /**\r\n   * Check if the game is currently running.\r\n   */\r\n  public isGameRunning(): boolean {\r\n    return this.isRunning && this.gameLoop.isGameLoopRunning();\r\n  }\r\n\r\n  /**\r\n   * Start a new game (used when clicking from menu)\r\n   */\r\n  private startNewGame(): void {\r\n    logger.info('🎮 Starting new game...', null, 'Game');\r\n\r\n    // Record game start event\r\n    this.statsManager.recordEvent({\r\n      type: 'game_start',\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Update game progress\r\n    this.gameProgress.gamesPlayed++;\r\n    this.sessionStartTime = Date.now();\r\n    this.sessionTotalTime = 0; // Reset session total time for new game\r\n\r\n    // Start new scoring session\r\n    this.unifiedScoringSystem.startNewSession();\r\n\r\n    // Reset game state\r\n    this.gameState.setState(GameStateType.PLAYING);\r\n    this.gameState.updateStateData({\r\n      currentLevel: 1,\r\n      score: 0,\r\n      totalScore: 0,\r\n      lives: 3,\r\n    });\r\n\r\n    // Regenerate all levels for fresh layouts each run\r\n    this.levelManager.regenerateLevels();\r\n\r\n    // Load first level\r\n    this.currentLevel = this.levelManager.loadLevel(1, (soundName: string) => {\r\n      this.audioManager.playSound(soundName);\r\n    });\r\n    if (this.currentLevel) {\r\n      this.currentLevel.start();\r\n      this.levelCompletionHandled = false;\r\n      \r\n      // Start unified scoring system timer for this level\r\n      this.unifiedScoringSystem.startLevel(1);\r\n      \r\n      logger.info('🎯 Level 1 loaded and started', null, 'Game');\r\n    }\r\n\r\n    // Reset tilting bar to starting position (this also clears saucer constraints)\r\n    this.tiltingBar.reset();\r\n    this.lastSaucerConstraintY = undefined;\r\n\r\n    // Reset ball to starting position on the bar\r\n    this.placeBallOnBar();\r\n\r\n    // Switch to gameplay music\r\n    this.playGameplayMusic();\r\n\r\n    logger.info('🚀 New game started successfully!', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Update hole animation if active\r\n   */\r\n  private updateHoleAnimation(_deltaTime: number): void {\r\n    if (!this.holeAnimationState) return;\r\n\r\n    const elapsed = Date.now() - this.holeAnimationState.startTime;\r\n    const progress = Math.min(elapsed / this.holeAnimationState.duration, 1);\r\n\r\n    // Easing function for more natural animation (starts fast, slows down)\r\n    const easedProgress = 1 - Math.pow(1 - progress, 3);\r\n\r\n    // Update animation properties\r\n    this.holeAnimationState.scale = 1 - easedProgress * 0.9; // Scale down to 10% of original (more dramatic)\r\n    this.holeAnimationState.opacity = 1 - easedProgress * 0.7; // Fade to 30% opacity\r\n\r\n    // Move ball towards hole center initially, then down behind playfield\r\n    const ball = this.physicsEngine\r\n      .getObjects()\r\n      .find(obj => obj.id === this.holeAnimationState?.ballId);\r\n    if (ball) {\r\n      const startPos = this.holeAnimationState.startPosition;\r\n      const holePos = this.holeAnimationState.holePosition;\r\n\r\n      if (progress < 0.3) {\r\n        // First 30% of animation: move towards hole center\r\n        const moveProgress = progress / 0.3;\r\n        ball.position.x = startPos.x + (holePos.x - startPos.x) * moveProgress;\r\n        ball.position.y = startPos.y + (holePos.y - startPos.y) * moveProgress;\r\n      } else {\r\n        // Remaining 70%: fall straight down behind playfield\r\n        const fallProgress = (progress - 0.3) / 0.7;\r\n        ball.position.x = holePos.x; // Stay at hole center horizontally\r\n        ball.position.y = holePos.y + fallProgress * 200; // Fall 200 pixels down behind playfield\r\n      }\r\n\r\n      // Update previous position to prevent physics interference\r\n      ball.previousPosition.x = ball.position.x;\r\n      ball.previousPosition.y = ball.position.y;\r\n\r\n      // Stop ball physics\r\n      ball.velocity.x = 0;\r\n      ball.velocity.y = 0;\r\n    }\r\n\r\n    // Complete animation\r\n    if (progress >= 1) {\r\n      this.completeHoleAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start hole animation when ball enters a hole\r\n   */\r\n  private startHoleAnimation(\r\n    ballId: string,\r\n    holePosition: { x: number; y: number },\r\n    isGoalHole: boolean = false,\r\n    isPowerUpHole: boolean = false,\r\n  ): void {\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === ballId);\r\n    if (!ball) return;\r\n\r\n    logger.debug(`🎬 Starting hole animation for ball: ${ballId} (goal: ${isGoalHole}, power-up: ${isPowerUpHole})`, null, 'Game');\r\n\r\n    this.isAnimatingHoleFall = true;\r\n    this.holeAnimationState = {\r\n      ballId: ballId,\r\n      holePosition: holePosition,\r\n      startTime: Date.now(),\r\n      duration: 500, // Faster animation: 500ms instead of 800ms\r\n      startPosition: { x: ball.position.x, y: ball.position.y },\r\n      scale: 1,\r\n      opacity: 1,\r\n      isGoalHole: isGoalHole,\r\n      isPowerUpHole: isPowerUpHole,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Complete hole animation and reset ball\r\n   */\r\n  private completeHoleAnimation(): void {\r\n    if (!this.holeAnimationState) return;\r\n\r\n    const isGoalHole = this.holeAnimationState.isGoalHole;\r\n    const isPowerUpHole = this.holeAnimationState.isPowerUpHole;\r\n    logger.debug(`🎬 Hole animation complete (goal: ${isGoalHole}, power-up: ${isPowerUpHole})`, null, 'Game');\r\n\r\n    this.isAnimatingHoleFall = false;\r\n    this.holeAnimationState = null;\r\n\r\n    // Handle differently based on hole type\r\n    if (isGoalHole) {\r\n      // Goal hole - just reset ball without losing life\r\n      this.resetBallAfterGoal();\r\n    } else if (isPowerUpHole) {\r\n      // Power-up hole - just reset ball without losing life (power-up already collected)\r\n      this.resetBallAfterGoal();\r\n    } else {\r\n      // Regular hole - lose life and reset\r\n      this.handleBallFallOff();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if any input is currently active\r\n   */\r\n  private hasAnyInput(): boolean {\r\n    const inputState = this.inputManager.getInputState();\r\n\r\n    // Check if any key is pressed\r\n    const hasKeyPress = Object.values(inputState.keys).some(pressed => pressed);\r\n\r\n    // Check if mouse is clicked\r\n    const hasMouseClick = inputState.mouse.isDown;\r\n\r\n    return hasKeyPress || hasMouseClick;\r\n  }\r\n\r\n  /**\r\n   * Start attract mode\r\n   */\r\n  private startAttractMode(): void {\r\n    logger.debug('🎬 Entering attract mode', null, 'Game');\r\n    this.gameState.setState(GameStateType.ATTRACT_MODE);\r\n    this.attractModeTimer = 0;\r\n    this.menuTimer = 0;\r\n\r\n    // Start a level for attract mode demonstration\r\n    this.startAttractModeLevel();\r\n\r\n    // Continue playing menu music during attract mode\r\n    // (No need to change music since it's already playing from menu)\r\n  }\r\n\r\n  /**\r\n   * Exit attract mode and return to menu\r\n   */\r\n  private exitAttractMode(): void {\r\n    logger.debug('🏠 Exiting attract mode', null, 'Game');\r\n    this.gameState.setState(GameStateType.MENU);\r\n    this.attractModeTimer = 0;\r\n    this.menuTimer = 0;\r\n\r\n    // Reset any ongoing game state\r\n    this.gameState.reset();\r\n\r\n    // Play UI click sound\r\n    this.audioManager.playSound('ui_click');\r\n\r\n    // Return to menu music\r\n    this.playMenuMusic();\r\n  }\r\n\r\n  /**\r\n   * Update attract mode auto-play\r\n   */\r\n  private updateAttractMode(deltaTime: number): void {\r\n    this.attractModeTimer += deltaTime;\r\n\r\n    // Auto-play logic - simple automated bar movement\r\n    const time = this.attractModeTimer / 1000; // Convert to seconds\r\n    const leftInput = Math.sin(time * 0.8) * 0.7; // Slow left side movement\r\n    const rightInput = Math.cos(time * 0.6) * 0.8; // Slow right side movement\r\n\r\n    // Apply automated input to tilting bar\r\n    this.tiltingBar.moveLeftSide(leftInput);\r\n    this.tiltingBar.moveRightSide(rightInput);\r\n    this.tiltingBar.update(deltaTime / 1000);\r\n\r\n    // Periodically place ball on bar for demonstration\r\n    if (Math.floor(time) % 8 === 0 && time % 8 < 0.1) {\r\n      this.placeBallOnBar();\r\n    }\r\n\r\n    // Update current level if exists\r\n    if (this.currentLevel) {\r\n      this.currentLevel.update(deltaTime);\r\n      this.checkCollisions();\r\n      this.checkWinLoseConditions();\r\n    }\r\n\r\n    // Reset attract mode after 30 seconds to prevent infinite loops\r\n    if (this.attractModeTimer > 30000) {\r\n      this.exitAttractMode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a level for attract mode demonstration\r\n   */\r\n  private startAttractModeLevel(): void {\r\n    try {\r\n      // Load level 1 for demonstration (use same method as startNewGame)\r\n      this.currentLevel = this.levelManager.loadLevel(1, (soundName: string) => {\r\n        this.audioManager.playSound(soundName);\r\n      });\r\n\r\n      if (this.currentLevel) {\r\n        logger.debug('🎮 Starting attract mode level', null, 'Game');\r\n        this.currentLevel.start();\r\n\r\n        // Reset tilting bar to starting position\r\n        this.tiltingBar.reset();\r\n\r\n        // Place ball on bar\r\n        this.placeBallOnBar();\r\n\r\n        logger.debug('✅ Attract mode level started successfully', null, 'Game');\r\n      } else {\r\n        logger.error('❌ Failed to load attract mode level', null, 'Game');\r\n        this.exitAttractMode();\r\n      }\r\n    } catch (error) {\r\n      logger.error('❌ Error starting attract mode level:', error, 'Game');\r\n      this.exitAttractMode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play menu music\r\n   */\r\n  private async playMenuMusic(): Promise<void> {\r\n    try {\r\n      await this.audioManager.fadeToMusic('02-Delorean_Time.mp3', 1.0);\r\n      logger.debug('🎵 Menu music started (02-Delorean_Time.mp3)', null, 'Game');\r\n    } catch (error) {\r\n      logger.error('❌ Error playing menu music:', error, 'Game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play gameplay music\r\n   */\r\n  private async playGameplayMusic(): Promise<void> {\r\n    try {\r\n      await this.audioManager.fadeToMusic('Dead_Space.mp3', 1.0);\r\n      logger.debug('🎵 Gameplay music started', null, 'Game');\r\n    } catch (error) {\r\n      logger.error('❌ Error playing gameplay music:', error, 'Game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop all music\r\n   */\r\n  // private stopMusic(): void {\r\n  //   this.audioManager.stopMusic();\r\n  // }\r\n\r\n  /**\r\n   * Get current loading progress (0-100)\r\n   */\r\n  public getLoadingProgress(): number {\r\n    return this.loadingProgress;\r\n  }\r\n\r\n  /**\r\n   * Get current loading status message\r\n   */\r\n  public getLoadingStatus(): string {\r\n    return this.loadingStatus;\r\n  }\r\n\r\n  /**\r\n   * Check if loading is complete and waiting for user input\r\n   */\r\n  public isLoadingComplete(): boolean {\r\n    return this.loadingComplete;\r\n  }\r\n\r\n  /**\r\n   * Start the asset loading process\r\n   */\r\n  private async startAssetLoading(): Promise<void> {\r\n    logger.info('📦 Starting asset loading...', null, 'Game');\r\n\r\n    // Define all assets that need to be loaded\r\n    this.assetsToLoad = [\r\n      'Engage_II.mp3',\r\n      'Dead_Space.mp3',\r\n      'atlas_01.json',\r\n      'atlas_01.png',\r\n      'powerup_atlas_01.json',\r\n      'powerup_atlas_01.png',\r\n    ];\r\n\r\n    this.loadedAssets = 0;\r\n    this.loadingProgress = 0;\r\n    this.loadingStatus = 'Loading audio files...';\r\n    this.loadingComplete = false;\r\n\r\n    try {\r\n      // Load audio files\r\n      await this.loadAudioAssets();\r\n\r\n      // Load sprite atlas\r\n      this.loadingStatus = 'Loading sprite atlas...';\r\n      await this.loadSpriteAssets();\r\n\r\n      // Initialize fonts\r\n      this.loadingStatus = 'Loading fonts...';\r\n      await this.loadFonts();\r\n\r\n      // Complete loading\r\n      this.loadingProgress = 100;\r\n      this.loadingStatus = 'Press any key to continue...';\r\n      this.loadingComplete = true;\r\n\r\n      logger.info('✅ All assets loaded successfully', null, 'Game');\r\n    } catch (error) {\r\n      logger.error('❌ Error loading assets:', error, 'Game');\r\n      this.loadingStatus = 'Loading failed - Press any key to continue...';\r\n      this.loadingComplete = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load audio assets\r\n   */\r\n  private async loadAudioAssets(): Promise<void> {\r\n    const audioFiles = this.assetsToLoad.filter(asset =>\r\n      asset.endsWith('.mp3'),\r\n    );\r\n\r\n    for (let i = 0; i < audioFiles.length; i++) {\r\n      const filename = audioFiles[i];\r\n      this.loadingStatus = `Loading ${filename}...`;\r\n\r\n      try {\r\n        await this.audioManager.loadMusic(filename);\r\n        this.loadedAssets++;\r\n        this.updateLoadingProgress();\r\n        logger.debug(`✅ Loaded audio: ${filename}`, null, 'Game');\r\n      } catch (error) {\r\n        logger.warn(`⚠️ Failed to load audio: ${filename}`, error, 'Game');\r\n        this.loadedAssets++;\r\n        this.updateLoadingProgress();\r\n      }\r\n\r\n      // Small delay to show progress\r\n      await this.delay(100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load sprite assets\r\n   */\r\n  private async loadSpriteAssets(): Promise<void> {\r\n    // The sprite atlas is already loaded by the renderer during init\r\n    // Just simulate loading for progress tracking\r\n    const spriteFiles = this.assetsToLoad.filter(\r\n      asset => asset.endsWith('.json') || asset.endsWith('.png'),\r\n    );\r\n\r\n    for (let i = 0; i < spriteFiles.length; i++) {\r\n      const filename = spriteFiles[i];\r\n      this.loadingStatus = `Loading ${filename}...`;\r\n\r\n      this.loadedAssets++;\r\n      this.updateLoadingProgress();\r\n\r\n      // Small delay to show progress\r\n      await this.delay(200);\r\n    }\r\n    \r\n    logger.info('✅ Sprite assets loading simulation completed', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Load fonts (simulate font loading)\r\n   */\r\n  private async loadFonts(): Promise<void> {\r\n    this.loadingStatus = 'Initializing fonts...';\r\n\r\n    // Fonts are already loaded through CSS, just simulate the process\r\n    await this.delay(300);\r\n\r\n    logger.debug('✅ Fonts initialized', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Update loading progress based on loaded assets\r\n   */\r\n  private updateLoadingProgress(): void {\r\n    this.loadingProgress = (this.loadedAssets / this.assetsToLoad.length) * 100;\r\n  }\r\n\r\n  /**\r\n   * Load game progress from storage\r\n   */\r\n  private loadGameProgress(): void {\r\n    try {\r\n      // Try to load existing progress\r\n      const savedProgress = this.storageManager.loadProgress(this.currentSaveSlot);\r\n      \r\n      if (savedProgress) {\r\n        this.gameProgress = savedProgress;\r\n        \r\n        // Load achievements\r\n        this.achievementManager.loadAchievements(Array.from(savedProgress.achievements));\r\n        \r\n        // Apply saved settings to audio manager\r\n        this.audioManager.setMasterVolume(savedProgress.settings.masterVolume);\r\n        this.audioManager.setMusicVolume(savedProgress.settings.musicVolume);\r\n        this.audioManager.setSFXVolume(savedProgress.settings.sfxVolume);\r\n        this.audioManager.setEnabled(savedProgress.settings.audioEnabled);\r\n        \r\n        logger.info(`📂 Loaded game progress from slot ${this.currentSaveSlot}`, null, 'Game');\r\n      } else {\r\n        // Create new progress\r\n        this.gameProgress = this.storageManager.createNewProgress();\r\n        logger.info('🆕 Created new game progress', null, 'Game');\r\n      }\r\n    } catch (error) {\r\n      logger.error('❌ Failed to load game progress:', error, 'Game');\r\n      this.gameProgress = this.storageManager.createNewProgress();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save game progress to storage\r\n   */\r\n  private saveGameProgress(): boolean {\r\n    try {\r\n      // Update progress with current game state\r\n      this.updateGameProgress();\r\n      \r\n      // Save to storage\r\n      const success = this.storageManager.saveProgress(this.gameProgress, this.currentSaveSlot);\r\n      \r\n      if (success) {\r\n        logger.debug('💾 Game progress saved', null, 'Game');\r\n      }\r\n      \r\n      return success;\r\n    } catch (error) {\r\n      logger.error('❌ Failed to save game progress:', error, 'Game');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update game progress with current state\r\n   */\r\n  private updateGameProgress(): void {\r\n    if (!this.gameProgress) return;\r\n\r\n    const currentTime = Date.now();\r\n    \r\n    // Update play time\r\n    if (this.sessionStartTime > 0) {\r\n      this.gameProgress.playTime += currentTime - this.sessionStartTime;\r\n      this.sessionStartTime = currentTime;\r\n    }\r\n\r\n    // Update settings\r\n    const audioConfig = this.audioManager.getConfig();\r\n    this.gameProgress.settings = {\r\n      masterVolume: audioConfig.masterVolume,\r\n      musicVolume: audioConfig.musicVolume,\r\n      sfxVolume: audioConfig.sfxVolume,\r\n      audioEnabled: audioConfig.enabled,\r\n    };\r\n\r\n    // Update achievements\r\n    this.gameProgress.achievements = new Set(this.achievementManager.getUnlockedAchievementIds());\r\n  }\r\n\r\n  /**\r\n   * Check and update achievements based on current game state\r\n   */\r\n  private checkAchievements(): void {\r\n    if (!this.gameProgress) return;\r\n\r\n    const stateData = this.gameState.getStateData();\r\n    const currentTime = Date.now();\r\n    \r\n    // Calculate session play time\r\n    const sessionPlayTime = this.sessionStartTime > 0 ? currentTime - this.sessionStartTime : 0;\r\n    const totalPlayTime = this.gameProgress.playTime + sessionPlayTime;\r\n\r\n    // Prepare game stats for achievement checking\r\n    const gameStats = {\r\n      currentLevel: stateData.currentLevel || 1,\r\n      totalScore: stateData.score || 0,\r\n      lives: stateData.lives || 3,\r\n      goalsReached: this.gameProgress.totalGoalsReached,\r\n      levelsCompleted: this.gameProgress.completedLevels.size,\r\n      gamesPlayed: this.gameProgress.gamesPlayed,\r\n      totalPlayTime: totalPlayTime,\r\n      ballsLost: this.gameProgress.totalBallsLost,\r\n      perfectLevels: 0, // TODO: Track perfect levels\r\n      quickCompletions: 0, // TODO: Track quick completions\r\n    };\r\n\r\n    // Check achievements\r\n    this.achievementManager.checkAchievements(gameStats);\r\n  }\r\n\r\n  /**\r\n   * Auto-save game progress\r\n   */\r\n  private autoSave(): boolean {\r\n    const now = Date.now();\r\n    \r\n    // Only auto-save every 30 seconds\r\n    if (now - this.lastAutoSave < 30000) {\r\n      return false;\r\n    }\r\n\r\n    const success = this.saveGameProgress();\r\n    if (success) {\r\n      this.lastAutoSave = now;\r\n    }\r\n    \r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Complete the loading process and transition to menu\r\n   */\r\n  private async completeLoading(): Promise<void> {\r\n    logger.info('🎯 Loading complete - transitioning to menu', null, 'Game');\r\n    this.gameState.setState(GameStateType.MENU);\r\n\r\n    // Resume audio context on user interaction (required by browsers)\r\n    await this.audioManager.resumeContext();\r\n\r\n    // Start menu music\r\n    this.playMenuMusic();\r\n  }\r\n\r\n  /**\r\n   * Utility method for delays\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Open settings menu\r\n   */\r\n  public openSettings(): void {\r\n    this.gameState.setState(GameStateType.SETTINGS);\r\n    \r\n    // Update settings menu configuration based on current state\r\n    const isFromPauseMenu = this.gameState.isPaused();\r\n    this.settingsMenu = new SettingsMenu({\r\n      audioManager: this.audioManager,\r\n      onClose: () => this.closeSettings(),\r\n      onBackToMenu: () => this.backToMenuFromSettings(),\r\n      isFromPauseMenu,\r\n    });\r\n    \r\n    this.settingsMenu.show();\r\n    this.settingsMenu.updateVolumeDisplays();\r\n    logger.info(`⚙️ Settings menu opened ${isFromPauseMenu ? 'from pause menu' : 'from main menu'}`, null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Close settings menu\r\n   */\r\n  private closeSettings(): void {\r\n    this.settingsMenu.hide();\r\n    \r\n    // Return to previous state\r\n    if (this.gameState.isPaused()) {\r\n      this.gameState.setState(GameStateType.PAUSED);\r\n    } else {\r\n      this.gameState.setState(GameStateType.MENU);\r\n    }\r\n    \r\n    logger.info('⚙️ Settings menu closed', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Return to main menu from settings\r\n   */\r\n  private backToMenuFromSettings(): void {\r\n    this.settingsMenu.hide();\r\n    this.gameState.setState(GameStateType.MENU);\r\n    logger.info('🏠 Returned to main menu from settings', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Open save/load menu\r\n   */\r\n  public openSaveLoadMenu(): void {\r\n    logger.info('💾 Opening save/load menu', null, 'Game');\r\n    this.gameState.setState(GameStateType.SAVE_LOAD);\r\n    this.saveLoadMenu.show();\r\n  }\r\n\r\n  /**\r\n   * Close save/load menu\r\n   */\r\n  private closeSaveLoadMenu(): void {\r\n    logger.info('💾 Closing save/load menu', null, 'Game');\r\n    this.saveLoadMenu.hide();\r\n    \r\n    // Return to previous state\r\n    if (this.gameState.isState(GameStateType.SAVE_LOAD)) {\r\n      this.gameState.setState(GameStateType.MENU);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load game from save slot\r\n   */\r\n  private loadGameFromSlot(slotId: number): void {\r\n    logger.info(`📂 Loading game from slot ${slotId}`, null, 'Game');\r\n    \r\n    // Load progress from slot\r\n    const savedProgress = this.storageManager.loadProgress(slotId);\r\n    if (savedProgress) {\r\n      this.gameProgress = savedProgress;\r\n      this.currentSaveSlot = slotId;\r\n      \r\n      // Load achievements\r\n      this.achievementManager.loadAchievements(Array.from(savedProgress.achievements));\r\n      \r\n      // Apply saved settings\r\n      this.audioManager.setMasterVolume(savedProgress.settings.masterVolume);\r\n      this.audioManager.setMusicVolume(savedProgress.settings.musicVolume);\r\n      this.audioManager.setSFXVolume(savedProgress.settings.sfxVolume);\r\n      this.audioManager.setEnabled(savedProgress.settings.audioEnabled);\r\n      \r\n      // Start game with loaded progress\r\n      this.startNewGame();\r\n    } else {\r\n      logger.warn(`⚠️ No save data found in slot ${slotId}`, null, 'Game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start new game in save slot\r\n   */\r\n  private startNewGameInSlot(slotId: number): void {\r\n    logger.info(`🆕 Starting new game in slot ${slotId}`, null, 'Game');\r\n    \r\n    // Create new progress for this slot\r\n    this.gameProgress = this.storageManager.createNewProgress();\r\n    this.currentSaveSlot = slotId;\r\n    \r\n    // Start new game (this will regenerate levels)\r\n    this.startNewGame();\r\n  }\r\n\r\n  /**\r\n   * Delete save slot\r\n   */\r\n  private deleteSaveSlot(slotId: number): void {\r\n    logger.info(`🗑️ Deleting save slot ${slotId}`, null, 'Game');\r\n    this.storageManager.deleteSaveSlot(slotId);\r\n  }\r\n\r\n  /**\r\n   * Open stats menu\r\n   */\r\n  public openStatsMenu(): void {\r\n    logger.info('📊 Opening stats menu...', null, 'Game');\r\n    this.gameState.setState(GameStateType.STATS);\r\n  }\r\n\r\n  /**\r\n   * Close stats menu\r\n   */\r\n  private closeStatsMenu(): void {\r\n    logger.info('📊 Closing stats menu...', null, 'Game');\r\n    this.gameState.setState(GameStateType.MENU);\r\n  }\r\n\r\n  /**\r\n   * Open how to play screen\r\n   */\r\n  public openHowToPlay(): void {\r\n    logger.info('❓ Opening how to play screen...', null, 'Game');\r\n    this.gameState.setState(GameStateType.HOW_TO_PLAY);\r\n    this.audioManager.playSound('ui_click');\r\n  }\r\n\r\n  /**\r\n   * Handle debug input for power-up system\r\n   */\r\n  private handleDebugInput(): void {\r\n    // Only allow debug functions when debug mode is enabled\r\n    if (!this.gameState.isDebugMode()) return;\r\n\r\n    // Toggle debug overlay with F1\r\n    if (this.inputManager.isKeyJustPressed('F1')) {\r\n      this.powerUpDebugger.toggle();\r\n    }\r\n\r\n    // Clear debug history with F2\r\n    if (this.inputManager.isKeyJustPressed('F2')) {\r\n      this.powerUpDebugger.clearHistory();\r\n    }\r\n\r\n    // Export debug data with F3\r\n    if (this.inputManager.isKeyJustPressed('F3')) {\r\n      const debugData = this.powerUpDebugger.exportDebugData();\r\n      console.log('🔧 Debug Data Export:', debugData);\r\n    }\r\n\r\n    // Test point fly-offs with F4\r\n    if (this.inputManager.isKeyJustPressed('F4')) {\r\n      this.testPointFlyOffs();\r\n    }\r\n\r\n    // Instant win current level with W key (only during gameplay)\r\n    if (this.inputManager.isKeyJustPressed('KeyW') && this.gameState.isPlaying()) {\r\n      this.debugInstantWin();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug function: Instantly win the current level (W key)\r\n   */\r\n  private debugInstantWin(): void {\r\n    if (!this.currentLevel) {\r\n      logger.warn('🧪 DEBUG: No current level to complete', null, 'Game');\r\n      return;\r\n    }\r\n\r\n    if (this.currentLevel.checkLevelComplete()) {\r\n      logger.warn('🧪 DEBUG: Level is already completed', null, 'Game');\r\n      return;\r\n    }\r\n\r\n    logger.info('🧪 DEBUG: Force completing current level...', null, 'Game');\r\n\r\n    // Force complete the level\r\n    this.currentLevel.debugForceComplete();\r\n\r\n    // Play completion sound\r\n    this.audioManager.playSound('level_complete');\r\n\r\n    // Trigger the level completion handling\r\n    if (!this.levelCompletionHandled) {\r\n      this.levelCompletionHandled = true;\r\n      this.handleLevelComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently in a saucer waiting state\r\n   */\r\n  public getBallSpriteForSaucerState(ballId: string): string {\r\n    if (!this.currentLevel) return 'ball_normal';\r\n    \r\n    // Check if ball is in a saucer\r\n    const holes = this.currentLevel.getHoles();\r\n    for (const hole of holes) {\r\n      if (hole.saucerState?.isActive && \r\n          hole.saucerState.ballId === ballId && \r\n          hole.saucerState.phase === 'waiting') {\r\n        return 'ball_saucer';\r\n      }\r\n    }\r\n    \r\n    return 'ball_normal';\r\n  }\r\n\r\n  /**\r\n   * Test point fly-offs with various animations (debug function)\r\n   */\r\n  private testPointFlyOffs(): void {\r\n    logger.info('🧪 Testing point fly-offs...', null, 'Game');\r\n    \r\n    // Test different fly-off types at various positions\r\n    const testPositions = [\r\n      { x: 100, y: 200 },\r\n      { x: 180, y: 300 },\r\n      { x: 260, y: 400 },\r\n      { x: 50, y: 500 },\r\n      { x: 310, y: 150 },\r\n    ];\r\n\r\n    // Test goal hit\r\n    this.pointFlyOffManager.showGoalHit(500, testPositions[0]);\r\n    \r\n    // Test power-up collection with different colors\r\n    this.pointFlyOffManager.showPowerUpCollect(100, testPositions[1], '#ff6600');\r\n    this.pointFlyOffManager.showPowerUpCollect(150, testPositions[2], '#00ff88');\r\n    \r\n    // Test level complete\r\n    this.pointFlyOffManager.showLevelComplete(1000, testPositions[3]);\r\n    \r\n    // Test bonus and achievement\r\n    this.pointFlyOffManager.showBonus(250, testPositions[4]);\r\n    this.pointFlyOffManager.showAchievement(750, { x: 180, y: 100 });\r\n    \r\n    // Test combo\r\n    this.pointFlyOffManager.showCombo(300, { x: 280, y: 350 }, 2);\r\n    \r\n    logger.info('🧪 Point fly-offs test completed', null, 'Game');\r\n  }\r\n\r\n  /**\r\n   * Get the appropriate color for a power-up type for fly-off animations\r\n   */\r\n  private getPowerUpColor(powerUpType: PowerUpType): string {\r\n    switch (powerUpType) {\r\n    case PowerUpType.SLOW_MO_SURGE:\r\n      return '#00ffff'; // Cyan\r\n    case PowerUpType.MAGNETIC_GUIDE:\r\n      return '#ff00ff'; // Magenta\r\n    case PowerUpType.CIRCUIT_PATCH:\r\n      return '#00ff00'; // Green\r\n    case PowerUpType.OVERCLOCK_BOOST:\r\n      return '#ffaa00'; // Orange\r\n    case PowerUpType.SCAN_REVEAL:\r\n      return '#ffff00'; // Yellow\r\n    default:\r\n      return '#ff6600'; // Default orange\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle scale changes from the ScalingManager\r\n   */\r\n  public onScaleChanged(newScale: number): void {\r\n    logger.debug(`🔄 Game scale changed to ${newScale}x`, null, 'Game');\r\n    \r\n    // Update canvas dimensions in renderer if needed\r\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n    if (canvas && this.renderer) {\r\n      this.renderer.resize(canvas.width, canvas.height);\r\n    }\r\n    \r\n    // Additional scale change handling can be added here\r\n    // For example, updating UI elements or recalculating positions\r\n  }\r\n\r\n  /**\r\n   * Get current audio levels for visualization\r\n   */\r\n  public getAudioLevel(): number {\r\n    return this.audioManager.getAudioLevel();\r\n  }\r\n}\r\n","// Circuit Breaker - Main Entry Point\r\n// A neon cyberpunk arcade game where players guide data packets through circuit boards\r\n\r\nimport './style.css';\r\nimport { Game } from './core/Game';\r\nimport { logger } from './utils/Logger';\r\nimport { ScalingManager } from './utils/ScalingManager';\r\n\r\n// Global game instance\r\nlet game: Game | null = null;\r\nlet scalingManager: ScalingManager | null = null;\r\n\r\n/**\r\n * Initialize the game when DOM is ready\r\n */\r\nasync function initGame(): Promise<void> {\r\n  try {\r\n    logger.info('🚀 Circuit Breaker - Loading...', null, 'Main');\r\n\r\n    // Create canvas element\r\n    const gameContainer = document.getElementById('game-container');\r\n    if (!gameContainer) {\r\n      throw new Error('Game container not found');\r\n    }\r\n\r\n    // Initialize scaling manager with game's base dimensions\r\n    // Detect if we're on a mobile device for better scaling\r\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || \r\n                     window.innerWidth <= 768;\r\n    \r\n    scalingManager = ScalingManager.getInstance({\r\n      baseWidth: 360,  // Game's base width (9:16 aspect ratio)\r\n      baseHeight: 640, // Game's base height\r\n      minScale: isMobile ? 0.5 : 1,     // Allow smaller scaling on mobile for better fit\r\n      maxScale: 8,     // Maximum scale factor (for very large displays)\r\n      forceIntegerScaling: !isMobile, // Allow fractional scaling on mobile for better screen utilization\r\n    });\r\n    \r\n    logger.debug(`📱 Device: ${isMobile ? 'Mobile' : 'Desktop'}, Scaling config: minScale=${isMobile ? 0.5 : 1}, forceInteger=${!isMobile}`, null, 'Main');\r\n\r\n    // Clear loading message and create canvas\r\n    gameContainer.innerHTML = '';\r\n    const canvas = document.createElement('canvas');\r\n    canvas.id = 'game-canvas';\r\n    gameContainer.appendChild(canvas);\r\n\r\n    // Apply dynamic scaling to the canvas\r\n    scalingManager.applyScaling(canvas, gameContainer);\r\n\r\n    // Create game instance\r\n    game = new Game();\r\n\r\n    // Initialize game systems (this will initialize the renderer and load sprites)\r\n    await game.init();\r\n\r\n    // Start the game\r\n    game.start();\r\n\r\n    // Setup resize handling\r\n    setupScalingCallbacks();\r\n\r\n    // Expose game instance to window for testing\r\n    (window as any).game = game;\r\n    (window as any).scalingManager = scalingManager;\r\n\r\n    logger.info('✅ Circuit Breaker loaded successfully', null, 'Main');\r\n  } catch (error) {\r\n    logger.error('❌ Failed to load Circuit Breaker:', error, 'Main');\r\n    showErrorMessage('Failed to load game. Please refresh the page.');\r\n  }\r\n}\r\n\r\n/**\r\n * Show error message to user\r\n */\r\nfunction showErrorMessage(message: string): void {\r\n  const gameContainer = document.getElementById('game-container');\r\n  if (gameContainer) {\r\n    gameContainer.innerHTML = `\r\n      <div style=\"text-align: center; color: #b600f9;\">\r\n        <h1>Circuit Breaker</h1>\r\n        <p>Error: ${message}</p>\r\n        <p>Please refresh the page to try again.</p>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\n/**\r\n * Setup scaling callbacks for dynamic resize handling\r\n */\r\nfunction setupScalingCallbacks(): void {\r\n  if (!scalingManager) return;\r\n\r\n  scalingManager.onResize((scaling) => {\r\n    logger.debug(`📱 Window resized - applying ${scaling.scale}x scaling`, null, 'Main');\r\n    \r\n    // Get canvas and container\r\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n    const gameContainer = document.getElementById('game-container');\r\n    \r\n    if (canvas && gameContainer) {\r\n      // Reapply scaling to canvas\r\n      scalingManager!.applyScaling(canvas, gameContainer);\r\n      \r\n      // Notify game of scale change if needed\r\n      if (game) {\r\n        game.onScaleChanged?.(scaling.scale);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Handle window resize\r\n */\r\nfunction handleResize(): void {\r\n  // The ScalingManager handles resize automatically through its event listeners\r\n  // This function is kept for compatibility but the actual work is done in setupScalingCallbacks\r\n  logger.debug('📱 Window resize event triggered', null, 'Main');\r\n}\r\n\r\n/**\r\n * Handle page visibility change\r\n */\r\nfunction handleVisibilityChange(): void {\r\n  if (document.hidden) {\r\n    logger.debug('👁️ Page hidden - pausing game', null, 'Main');\r\n    game?.pause();\r\n  } else {\r\n    logger.debug('👁️ Page visible - resuming game', null, 'Main');\r\n    game?.resume();\r\n  }\r\n}\r\n\r\n/**\r\n * Handle before unload\r\n */\r\nfunction handleBeforeUnload(): void {\r\n  logger.debug('👋 Page unloading - stopping game', null, 'Main');\r\n  game?.stop();\r\n}\r\n\r\n// Initialize when DOM is ready\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initGame);\r\n} else {\r\n  initGame();\r\n}\r\n\r\n// Add event listeners\r\nwindow.addEventListener('resize', handleResize);\r\ndocument.addEventListener('visibilitychange', handleVisibilityChange);\r\nwindow.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n// Export for debugging\r\nexport { game };\r\n"],"names":["LogLevel","_Logger","__publicField","level","message","data","context","entry","logMessage","levelStr","contextStr","log","count","Logger","logger","GameStateType","GameState","newState","previousState","__spreadValues","updates","state","enabled","totalScore","levelScore","time","_FontManager","__async","fontPromises","cyberpunksRegular","cyberpunksItalic","e","interceptorRegular","interceptorItalic","interceptorBold","interceptorBoldItalic","results","loadedCount","result","index","error","type","size","weight","fontFamily","ctx","FontManager","fontManager","GameLoop","gameState","renderer","physicsEngine","game","currentTime","deltaTime","scaledDeltaTime","powerUpEffects","_gameState","obj","pos","radius","manifolds","manifold","constraints","constraint","animationState","spriteName","objects","dynamicObjects","staticObjects","collisionCount","loadingProgress","loadingStatus","isLoadingComplete","loadingTitleTime","titlePulseIntensity","pulseAlpha","barWidth","barHeight","barX","barY","progressWidth","spinnerSize","spinnerX","spinnerY","rotation","pulseIntensity","audioReactivity","strokeWidth","x","y","titleTime","audioLevel","buttonPulse","buttonWidth","buttonHeight","buttonX","buttonY","debugStatus","debugColor","dialogWidth","dialogHeight","dialogX","dialogY","_a","stateData","Debug","args","name","fn","start","end","condition","_SpriteAtlas","totalSprites","atlas","spriteCount","jsonPath","imagePath","jsonResponse","atlasData","atlasImage","resolve","reject","atlasName","scale","frameData","cacheKey","cachedCanvas","canvas","allSprites","SpriteAtlas","spriteAtlas","Renderer","atlasPromise","spritePromises","_index","sprite","bar","endpoints","atlasLoaded","barFrame","barLength","barAngle","spriteScale","scaledSpriteWidth","tilesNeeded","barCenterX","barCenterY","i","tileX","tileY","remainingLength","tileWidth","obstacle","centerX","centerY","angle","length","startX","startY","endX","endY","port","hole","isCompleted","debugMode","isGoalHole","isPowerUpHole","isSaucerActive","enlargedRadius","activeColor","darkColor","darkerColor","powerUpColors","colors","_b","sprites","spriteIndex","_c","_d","glowIntensity","scaleMultiplier","animState","scaledRadius","icon","color","saucerState","sinkProgress","ringRadius","ringAlpha","spinAngle","spinRadius","x1","y1","x2","y2","ejectProgress","ringY","zone","ball","opacity","saucerSizeMultiplier","targetSize","spriteFrame","mainGradient","reflectionGradient","highlightGradient","envGradient","centered","drawX","drawY","flipper","isLeft","bumper","isActive","spinner","animationFrame","width","height","PhysicsEngine","callback","velocity","objectId","now","cooldownKey","lastAudioTime","config","mass","id","frameTime","dt","targetPos","velX","velY","gravityX","gravityY","objA","objB","dx","dy","distance","percent","offsetX","offsetY","_constraint","j","otherObj","maxDistance","minDistance","penetration","normal","separationX","separationY","relativeVelocity","velocityAlongNormal","restitution","impulse","closestPointOnCenterLine","distanceToCenterLine","__pow","barSurfaceDistance","collisionDistance","barVec","barTangent","barNormal","barSurfacePoint","velocityAlongTangent","friction","reflectedVelocity","collisionVelocity","_barNormal","currentTangentVelocity","gravityAlongSlope","rollingFriction","rollingResistance","slopeAcceleration","resistanceForce","frictionForce","newTangentVelocity","newVelocity","ballId","closestPoint","barThickness","_ballId","cells","cellKey","cell","minX","maxX","minY","maxY","point","lineStart","lineEnd","t","resistance","_friction","_energy","TiltingBar","input","effectiveMinHeight","_deltaTime","heightDifference","maxHeightRange","halfWidth","collisionThreshold","projection","ballPosition","ballVelocity","ballRadius","distanceToBar","penetrationDepth","correctedPosition","dotProduct","reflection","frictionFactor","bounceEnergy","multiplier","ballY","_ScalingManager","windowWidth","windowHeight","scaleX","scaleY","displayWidth","displayHeight","dpr","canvasWidth","canvasHeight","container","scaling","screenX","screenY","adjustedX","adjustedY","gameX","gameY","resizeTimeout","ScalingManager","InputManager","tiltingBar","leftSideInput","rightSideInput","action","key","isPressed","keyCode","side","strongestInput","_touchId","touchPos","gamePos","touchIsOnLeftSide","touchIsOnRightSide","barEndpoints","barYPosition","touchYDiff","maxInputDistance","inputValue","deadZone","rect","canvasX","canvasY","estimatedBarY","justPressed","tiltInput","event","_event","touch","activeTouchIds","touchId","MathUtils","value","min","max","factor","degrees","radians","a","b","vector","r1","r2","px","py","cx","cy","rx","ry","rw","rh","p","s","PowerUpType","BallType","Level","levelData","onSoundEffect","bonusSeconds","bonusMs","totalSeconds","minutes","seconds","_ballRadius","goalHole","screenBounds","goalId","timeBonus","holeId","h","kickAngle","kickDirection","sinkElapsed","aggressiveProgress","acceleratedProgress","kickData","holeIndex","elapsed","inProgress","newScale","outProgress","newOutScale","position","animatedHole","LevelManager","levelId","holes","maxPowerUpsPerLevel","powerUpHoleConfigs","goalHoles","numGoals","attempts","validPosition","goalX","goalY","existingGoal","sections","sectionHeight","baseDensity","maxDensity","powerUpHolesCreated","section","sectionY","sectionDensity","holesInSection","existingHole","powerUpType","numAnimatedHoles","animX","topHalfStart","topHalfEnd","animY","AudioManager","AudioContextConstructor","bounceBuffer","rollBuffer","zapBuffer","targetBuffer","completeBuffer","clickBuffer","hoverBuffer","slideBuffer","gameOverBuffer","powerupCollectBuffer","powerupActivateBuffer","shieldBreakBuffer","shieldActivateBuffer","holeAppearBuffer","holeDisappearBuffer","sampleRate","buffer","envelope","fundamental","harmonic2","harmonic3","noise","rumble","highFreq","buzz","crackle","chime1","chime2","chime3","notes","noteLength","noteIndex","freq","tone","click","hover","slide","distortion","sparkle","glass","shatter","echo","hum","resonance","protection","frequency","whoosh","reverb","soundId","volume","pitch","sound","source","gainNode","normalizedVelocity","filename","audioUrl","response","arrayBuffer","audioBuffer","loop","loadedBuffer","newFilename","fadeTime","fadeSteps","fadeInterval","volumeStep","isPlaying","bufferLength","dataArray","bassRange","midRange","bassSum","midSum","trebleSum","levels","Button","label","nineSlice","audioManager","wasHovered","_px","_py","Slider","handleX","onChange","newValue","SettingsMenu","onClose","onBackToMenu","isFromPauseMenu","newEnabled","slider","button","SaveLoadMenu","slotY","slotHeight","slotStartY","slotEndY","_x","_y","slots","slot","isSelected","isHovered","date","currentProgress","infoY","achievements","unlockedCount","ms","hours","text","duration","borderColor","AchievementNotification","achievement","progress","yOffset","easeProgress","notificationWidth","notificationHeight","gradient","rarityColors","rarityText","progressBarX","progressBarY","progressPercent","sparkleX","sparkleY","alpha","StatsMenu","tabs","tabWidth","tabY","tab","tabX","stats","summary","levelStats","performance","userAgent","session","status","statusColor","percentage","fillWidth","lastUpdated","WinScreen","backgroundAlpha","slideProgress","actualY","headerY","timingY","scoreData","rawTimeDelay","rawTimeAlpha","adjustmentsDelay","adjustAlpha","calculationDelay","calcAlpha","levelTimeAlpha","sessionTotalDelay","sessionAlpha","previousSessionTime","promptY","flashDelay","flashCycle","flashAlpha","StorageManager","slotId","serializedProgress","saveKey","savedData","parsedData","success","slotsData","updatedSlots","requiredFields","field","__spreadProps","_version","migrated","existingSlotIndex","slotData","scoreSession","levelScores","currentBest","allTimeHighScore","sessions","totalSessions","averageSessionScore","sum","bestLevelCount","used","keys","available","AchievementManager","gameStats","achievementId","notification","category","rarity","limit","olderThan","cutoff","n","current","unlocked","byCategory","byRarity","unlockedAchievementIds","StatsManager","exportData","jsonData","importedStats","levelStatsMap","totalPlayTime","gamesPlayed","completionRate","averageScore","favoriteLevel","maxCompletions","mostChallengingLevel","lowestRate","completionTime","score","fps","savedStats","parsedStats","statsToSave","POWER_UP_CONFIGS","BALL_TYPE_CONFIGS","UPGRADE_CONFIGS","getPowerUpConfig","getBallTypeConfig","getUpgradeConfig","upgradeType","PowerUpEventSystem","callbacks","eventData","amount","effect","eventType","typeCallbacks","startTime","endTime","activations","activationsByType","totalActivationTime","activationCount","mostUsedPowerUp","PowerUpManager","eventSystem","expiredPowerUps","physics","oldCharges","actualAdded","baseDuration","upgradeLevel","baseCharges","newMaxCharges","ballType","theme","ballConfig","upgradeMultiplier","powerUpMultiplier","isValid","currentActiveCount","PowerUpEffects","physicsEffect","magneticEffect","force","directionX","directionY","activePowerUps","effects","cachedEffects","newEffects","effectConfigs","effectConfig","processedData","cached","path","targetPosition","obstacles","steps","lastUpdate","bounds","PowerUpDebugger","powerUpManager","errors","cacheStats","timeRemaining","recentEvents","age","bytes","k","sizes","command","handler","PointType","PointFlyOff","speed","explosionAngle","explosionSpeed","upwardSpeed","PointFlyOffFactory","points","_powerUpColor","_multiplier","PointFlyOffManager","flyOff","powerUpColor","completedIds","sortedFlyOffs","centerPosition","oldestId","oldestTime","creationTime","events","ids","_UnifiedScoringSystem","rawTime","adjustedTime","baseLevelValue","levelPoints","levelScoreData","ls","UnifiedScoringSystem","Game","originalIsBallHeld","originalIsBallSinking","originalGetHeldBallTarget","ballStartX","ballStartY","ballPhysics","soundName","mousePos","currentLevelStatus","levelPointsPreview","timeDisplay","adjustmentText","isMobile","scalingManager","currentScale","inputState","leftInput","rightInput","completedGoals","requiredGoals","intensity","holePosition","offset","scanY","powerUpSprites","screenWidth","padding","powerUpPositions","charges","remaining","secondsRemaining","displayText","currentLives","hitHole","currentScore","isAnimatedHole","kickVelocity","ballInSaucer","saucerBallY","saucerPosition","ballInWaitingPhase","flyoffPosition","timePenalty","timeReduction","isAnimated","holeType","nextLevelId","easedProgress","startPos","holePos","moveProgress","fallProgress","hasKeyPress","pressed","hasMouseClick","audioFiles","asset","spriteFiles","savedProgress","audioConfig","sessionPlayTime","debugData","testPositions","initGame","gameContainer","setupScalingCallbacks","showErrorMessage","handleResize","handleVisibilityChange","handleBeforeUnload"],"mappings":"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"}