var A=Object.defineProperty;var L=Object.getOwnPropertySymbols;var R=Object.prototype.hasOwnProperty,G=Object.prototype.propertyIsEnumerable;var y=Math.pow,b=(h,t,e)=>t in h?A(h,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):h[t]=e,m=(h,t)=>{for(var e in t||(t={}))R.call(t,e)&&b(h,e,t[e]);if(L)for(var e of L(t))G.call(t,e)&&b(h,e,t[e]);return h};var a=(h,t,e)=>(b(h,typeof t!="symbol"?t+"":t,e),e);var v=(h,t,e)=>new Promise((i,s)=>{var o=l=>{try{r(e.next(l))}catch(c){s(c)}},n=l=>{try{r(e.throw(l))}catch(c){s(c)}},r=l=>l.done?i(l.value):Promise.resolve(l.value).then(o,n);r((e=e.apply(h,t)).next())});(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const n of o.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();var S=(h=>(h.MENU="menu",h.PLAYING="playing",h.PAUSED="paused",h.LEVEL_COMPLETE="level_complete",h.GAME_OVER="game_over",h.LOADING="loading",h))(S||{});class I{constructor(){a(this,"currentState","menu");a(this,"stateData",{currentLevel:1,score:0,lives:3,isPaused:!1,isGameOver:!1});console.log("📊 GameState initialized")}getCurrentState(){return this.currentState}setState(t){const e=this.currentState;this.currentState=t,console.log(`🔄 Game state changed: ${e} → ${t}`)}getStateData(){return m({},this.stateData)}updateStateData(t){this.stateData=m(m({},this.stateData),t)}isState(t){return this.currentState===t}isPlaying(){return this.currentState==="playing"}isPaused(){return this.currentState==="paused"}isGameOver(){return this.currentState==="game_over"}reset(){this.currentState="menu",this.stateData={currentLevel:1,score:0,lives:3,isPaused:!1,isGameOver:!1},console.log("🔄 Game state reset")}}class ${constructor(){a(this,"animationId",null);a(this,"lastTime",0);a(this,"accumulator",0);a(this,"timestep",1e3/60);a(this,"isRunning",!1);a(this,"isPaused",!1);a(this,"renderer",null);a(this,"physicsEngine",null);a(this,"game",null);console.log("🔄 GameLoop initialized")}start(t,e,i,s){if(this.isRunning){console.warn("⚠️ Game loop is already running");return}this.renderer=e||null,this.physicsEngine=i||null,this.game=s||null,this.isRunning=!0,this.isPaused=!1,this.lastTime=performance.now(),this.accumulator=0,console.log("▶️ Game loop started"),this.gameLoop(t)}gameLoop(t){if(!this.isRunning)return;const e=performance.now(),i=e-this.lastTime;for(this.lastTime=e,this.accumulator+=i;this.accumulator>=this.timestep;)this.isPaused||this.update(t,this.timestep),this.accumulator-=this.timestep;this.render(t),this.animationId=requestAnimationFrame(()=>this.gameLoop(t))}update(t,e){this.game&&this.game.update&&this.game.update(e),this.physicsEngine&&this.physicsEngine.update(e)}render(t){this.renderer&&(this.renderer.clear(),t.isPlaying()?this.renderGameplay():t.isState(S.MENU)?this.renderMenu():t.isState(S.PAUSED)&&this.renderPaused())}renderGameplay(){if(!this.renderer)return;const t=this.renderer.getContext();if(t){if(t.fillStyle="#1a1a1a",t.fillRect(0,0,360,640),this.physicsEngine){for(const e of this.physicsEngine.getObjects()){t.beginPath();const i=e.position||{x:e.x||0,y:e.y||0},s=e.radius||10;t.arc(i.x,i.y,s,0,Math.PI*2),e.isStatic?(t.fillStyle="#ff0066",t.shadowColor="#ff0066"):(t.fillStyle="#00ffff",t.shadowColor="#00ffff"),t.shadowBlur=16,t.fill(),t.shadowBlur=0,t.closePath(),this.physicsEngine.getDebug&&this.physicsEngine.getDebug()&&(!e.isStatic&&e.velocity&&(t.beginPath(),t.moveTo(i.x,i.y),t.lineTo(i.x+e.velocity.x*3,i.y+e.velocity.y*3),t.strokeStyle="#ffff00",t.lineWidth=1,t.stroke(),t.closePath()),t.fillStyle="#ffffff",t.font="8px Courier New",t.textAlign="center",t.fillText(e.id,i.x,i.y-s-5))}if(this.physicsEngine.getDebug&&this.physicsEngine.getDebug()){if(this.physicsEngine.getCollisionManifolds){const e=this.physicsEngine.getCollisionManifolds();for(const i of e)t.beginPath(),t.arc(i.contactPoint.x,i.contactPoint.y,2,0,Math.PI*2),t.fillStyle="#ff0000",t.fill(),t.closePath()}if(this.physicsEngine.getConstraints){const e=this.physicsEngine.getConstraints();for(const i of e)i.type==="distance"&&i.objectB&&(t.beginPath(),t.moveTo(i.objectA.position.x,i.objectA.position.y),t.lineTo(i.objectB.position.x,i.objectB.position.y),t.strokeStyle="#00ff00",t.lineWidth=1,t.setLineDash([3,3]),t.stroke(),t.setLineDash([]),t.closePath())}}}if(t.fillStyle="#00ffff",t.font="20px Courier New",t.textAlign="center",t.fillText("Circuit Breaker",180,40),t.font="12px Courier New",t.fillText("Robust Physics System Active",180,60),this.game&&this.game.renderGameplay&&this.game.renderGameplay(),this.physicsEngine){const e=this.physicsEngine.getObjects(),i=e.filter(o=>!o.isStatic).length,s=e.filter(o=>o.isStatic).length;if(t.font="10px Courier New",t.textAlign="left",t.fillStyle="#00ffff",t.fillText(`Objects: ${i} dynamic, ${s} static`,10,610),t.fillText(`Gravity: ${this.physicsEngine.getGravity()}`,10,625),this.physicsEngine.getCollisionManifolds){const o=this.physicsEngine.getCollisionManifolds().length;t.fillText(`Collisions: ${o}`,200,610)}t.fillText("Physics: Optimized Verlet (1 substep)",10,595)}}}renderMenu(){if(!this.renderer)return;const t=this.renderer.getContext();t&&(t.fillStyle="#1a1a1a",t.fillRect(0,0,360,640),t.fillStyle="#00ffff",t.font="24px Courier New",t.textAlign="center",t.fillText("CIRCUIT BREAKER",180,280),t.font="14px Courier New",t.fillText("Neon Cyberpunk Arcade Game",180,310),t.font="12px Courier New",t.fillText("Click to Start",180,350))}renderPaused(){if(!this.renderer)return;const t=this.renderer.getContext();t&&(t.fillStyle="rgba(0, 0, 0, 0.7)",t.fillRect(0,0,360,640),t.fillStyle="#00ffff",t.font="20px Courier New",t.textAlign="center",t.fillText("PAUSED",180,320))}pause(){this.isPaused=!0,console.log("⏸️ Game loop paused")}resume(){this.isPaused=!1,console.log("▶️ Game loop resumed")}stop(){this.isRunning=!1,this.animationId!==null&&(cancelAnimationFrame(this.animationId),this.animationId=null),console.log("⏹️ Game loop stopped")}isGameLoopRunning(){return this.isRunning}isGameLoopPaused(){return this.isPaused}getFPS(){return 1e3/this.timestep}}class g{static setEnabled(t){this.isEnabled=t}static log(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] ${t}`;console.log(s,...e),this.addToLogs(s)}static warn(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] WARNING: ${t}`;console.warn(s,...e),this.addToLogs(s)}static error(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] ERROR: ${t}`;console.error(s,...e),this.addToLogs(s)}static addToLogs(t){this.logs.push(t),this.logs.length>this.maxLogs&&this.logs.shift()}static getLogs(){return[...this.logs]}static clearLogs(){this.logs=[]}static measurePerformance(t,e){if(!this.isEnabled)return e();const i=performance.now(),s=e(),o=performance.now();return this.log(`Performance [${t}]: ${(o-i).toFixed(2)}ms`),s}static createTimer(t){const e=performance.now();return()=>{const i=performance.now();this.log(`Timer [${t}]: ${(i-e).toFixed(2)}ms`)}}static assert(t,e){if(this.isEnabled&&!t)throw this.error(`Assertion failed: ${e}`),new Error(`Assertion failed: ${e}`)}static getMemoryInfo(){return this.isEnabled?{logsCount:this.logs.length,timestamp:new Date().toISOString()}:{}}static exportDebugInfo(){return{enabled:this.isEnabled,logs:this.getLogs(),memory:this.getMemoryInfo()}}}a(g,"isEnabled",!0),a(g,"logs",[]),a(g,"maxLogs",100);class B{constructor(){a(this,"canvas",null);a(this,"ctx",null);a(this,"width",800);a(this,"height",600);g.log("🎨 Renderer initialized")}init(t){if(this.canvas=t,this.ctx=t.getContext("2d"),!this.ctx)throw new Error("Failed to get 2D context from canvas");this.width=t.width,this.height=t.height,g.log(`Renderer initialized with canvas: ${this.width}x${this.height}`)}clear(){this.ctx&&this.ctx.clearRect(0,0,this.width,this.height)}render(){this.ctx}drawTiltingBar(t){if(!this.ctx)return;const e=t.getEndpoints();this.ctx.save(),this.ctx.shadowColor=t.glowColor,this.ctx.shadowBlur=20,this.ctx.lineWidth=t.thickness+4,this.ctx.strokeStyle=t.glowColor,this.ctx.globalAlpha=.3,this.ctx.beginPath(),this.ctx.moveTo(e.start.x,e.start.y),this.ctx.lineTo(e.end.x,e.end.y),this.ctx.stroke(),this.ctx.shadowBlur=0,this.ctx.globalAlpha=1,this.ctx.lineWidth=t.thickness,this.ctx.strokeStyle=t.color,this.ctx.beginPath(),this.ctx.moveTo(e.start.x,e.start.y),this.ctx.lineTo(e.end.x,e.end.y),this.ctx.stroke(),this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle="rgba(0, 255, 255, 0.7)",this.ctx.font="12px monospace",this.ctx.textAlign="center";const i=640-t.leftSideHeight;this.ctx.fillText(`L: ${i.toFixed(0)}`,t.position.x-t.width/4,Math.min(t.leftSideHeight,t.rightSideHeight)-25);const s=640-t.rightSideHeight;this.ctx.fillText(`R: ${s.toFixed(0)}`,t.position.x+t.width/4,Math.min(t.leftSideHeight,t.rightSideHeight)-25);const o=t.getTiltPercentage();this.ctx.fillText(`Tilt: ${(o*100).toFixed(0)}%`,t.position.x,Math.min(t.leftSideHeight,t.rightSideHeight)-40),this.ctx.restore()}drawObstacle(t){if(!this.ctx)return;this.ctx.save();const e=t.position.x+t.size.x/2,i=t.position.y+t.size.y/2;switch(t.type){case"electrical_hazard":this.ctx.shadowColor="#ff0080",this.ctx.shadowBlur=t.isActive?15:5,this.ctx.fillStyle=t.isActive?"#ff0080":"#880040",this.ctx.strokeStyle="#ff44aa",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y),t.isActive&&this.drawElectricalSparks(e,i,t.size.x),this.ctx.fillStyle="#ffff00",this.ctx.font="12px monospace",this.ctx.textAlign="center",this.ctx.fillText("⚡",e,i+4);break;case"barrier":this.ctx.shadowColor="#00ffff",this.ctx.shadowBlur=10,this.ctx.fillStyle="#006677",this.ctx.strokeStyle="#00ffff",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y);break;case"hole":this.ctx.shadowColor="#ff4400",this.ctx.shadowBlur=8,this.ctx.fillStyle="#220000",this.ctx.strokeStyle="#ff4400",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y);break}this.ctx.restore()}drawElectricalSparks(t,e,i){if(this.ctx){this.ctx.save(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=1,this.ctx.globalAlpha=.8;for(let s=0;s<5;s++){const o=Math.random()*Math.PI*2,n=Math.random()*i*.5,r=t+Math.cos(o)*5,l=e+Math.sin(o)*5,c=r+Math.cos(o)*n,d=l+Math.sin(o)*n;this.ctx.beginPath(),this.ctx.moveTo(r,l),this.ctx.lineTo(c,d),this.ctx.stroke()}this.ctx.restore()}}drawTargetPort(t){this.ctx&&(this.ctx.save(),this.ctx.shadowColor=t.color,this.ctx.shadowBlur=20*t.glowIntensity,this.ctx.fillStyle=t.color,this.ctx.globalAlpha=.3*t.glowIntensity,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,t.radius+10,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=t.isCompleted?.5:.8,this.ctx.shadowBlur=10,this.ctx.fillStyle=t.isCompleted?"#333333":t.color,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,t.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1,this.ctx.strokeStyle=t.isCompleted?"#666666":t.color,this.ctx.lineWidth=3,this.ctx.shadowBlur=5,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,t.radius,0,Math.PI*2),this.ctx.stroke(),t.isCompleted||(this.ctx.fillStyle="#ffffff",this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,4,0,Math.PI*2),this.ctx.fill()),t.isCompleted&&(this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=3,this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.moveTo(t.position.x-8,t.position.y),this.ctx.lineTo(t.position.x-2,t.position.y+6),this.ctx.lineTo(t.position.x+8,t.position.y-6),this.ctx.stroke()),this.ctx.restore())}getContext(){return this.ctx}getDimensions(){return{width:this.width,height:this.height}}resize(t,e){this.canvas&&(this.width=t,this.height=e,this.canvas.width=t,this.canvas.height=e,g.log(`Renderer resized to: ${t}x${e}`))}}class O{constructor(){a(this,"gravity",{x:0,y:400});a(this,"airResistance",.999);a(this,"objects",[]);a(this,"constraints",[]);a(this,"spatialGrid",new Map);a(this,"gridSize",60);a(this,"tiltingBar",null);a(this,"bounds",{width:360,height:640});a(this,"deltaTime",1/60);a(this,"debug",!1);a(this,"collisionManifolds",[]);a(this,"audioCallback",null);g.log("⚡ Advanced PhysicsEngine initialized with Verlet integration")}setTiltingBar(t){this.tiltingBar=t}setAudioCallback(t){this.audioCallback=t}createObject(t){const e=t.mass||1;return{id:t.id,position:{x:t.x,y:t.y},previousPosition:{x:t.x,y:t.y},acceleration:{x:0,y:0},velocity:{x:0,y:0},radius:t.radius,mass:e,inverseMass:t.isStatic?0:1/e,restitution:t.restitution||.7,friction:t.friction||.3,isStatic:t.isStatic||!1,constraints:[],x:t.x,y:t.y,vx:0,vy:0}}addObject(t){var e,i;t.previousPosition||(t.previousPosition={x:((e=t.position)==null?void 0:e.x)||t.x||0,y:((i=t.position)==null?void 0:i.y)||t.y||0}),t.acceleration||(t.acceleration={x:0,y:0}),t.velocity||(t.velocity={x:0,y:0}),t.inverseMass||(t.inverseMass=t.isStatic?0:1/(t.mass||1)),t.constraints||(t.constraints=[]),this.objects.push(t),this.updateSpatialGrid(),g.log(`Added physics object: ${t.id}`)}removeObject(t){this.objects=this.objects.filter(e=>e.id!==t),this.updateSpatialGrid(),g.log(`Removed physics object: ${t}`)}addConstraint(t){this.constraints.push(t),g.log(`Added constraint: ${t.type}`)}update(t){const e=Math.min(t,.03333333333333333);this.simulateStep(e),this.updateBackwardCompatibility()}simulateStep(t){this.collisionManifolds=[];for(const e of this.objects)e.isRollingOnBar=!1;this.objects.length>0&&this.updateSpatialGrid(),this.integratePositions(t),this.solveConstraints(),this.detectAndResolveCollisions(),this.handleTiltingBarCollisions(),this.handleBoundaryCollisions(),this.updateVelocities(t)}integratePositions(t){for(const e of this.objects){if(e.isStatic)continue;const i=e.position.x-e.previousPosition.x,s=e.position.y-e.previousPosition.y;e.previousPosition.x=e.position.x,e.previousPosition.y=e.position.y,e.position.x+=i*this.airResistance+this.gravity.x*t*t,e.position.y+=s*this.airResistance+this.gravity.y*t*t}}updateVelocities(t){for(const e of this.objects)e.isStatic||(e.velocity.x=(e.position.x-e.previousPosition.x)/t,e.velocity.y=(e.position.y-e.previousPosition.y)/t)}solveConstraints(){for(const t of this.constraints)this.solveConstraint(t)}solveConstraint(t){switch(t.type){case"distance":this.solveDistanceConstraint(t);break;case"position":this.solvePositionConstraint(t);break;case"angle":this.solveAngleConstraint(t);break}}solveDistanceConstraint(t){if(!t.objectB||!t.targetDistance)return;const e=t.objectA,i=t.objectB,s=i.position.x-e.position.x,o=i.position.y-e.position.y,n=Math.sqrt(s*s+o*o);if(n===0)return;const l=(t.targetDistance-n)/n/2,c=s*l*t.stiffness,d=o*l*t.stiffness;e.isStatic||(e.position.x-=c*e.inverseMass,e.position.y-=d*e.inverseMass),i.isStatic||(i.position.x+=c*i.inverseMass,i.position.y+=d*i.inverseMass)}solvePositionConstraint(t){if(!t.targetPosition)return;const e=t.objectA;if(e.isStatic)return;const i=t.targetPosition.x-e.position.x,s=t.targetPosition.y-e.position.y;e.position.x+=i*t.stiffness,e.position.y+=s*t.stiffness}solveAngleConstraint(t){}detectAndResolveCollisions(){if(!(this.objects.length<2))for(let t=0;t<this.objects.length;t++){const e=this.objects[t];if(!e.isStatic)for(let i=t+1;i<this.objects.length;i++){const s=this.objects[i],o=s.position.x-e.position.x,n=s.position.y-e.position.y,r=e.radius+s.radius+5;if(o*o+n*n<r*r){const l=this.detectCollision(e,s);l&&(this.collisionManifolds.push(l),this.resolveCollisionSimple(l))}}}}detectCollision(t,e){const i=e.position.x-t.position.x,s=e.position.y-t.position.y,o=Math.sqrt(i*i+s*s),n=t.radius+e.radius;if(o<n){const r=n-o,l=o>0?{x:i/o,y:s/o}:{x:1,y:0};return{objectA:t,objectB:e,normal:l,penetration:r,contactPoint:{x:t.position.x+l.x*t.radius,y:t.position.y+l.y*t.radius}}}return null}resolveCollision(t){const e=t.objectA,i=t.objectB,s=t.penetration/(e.inverseMass+i.inverseMass)*.8;e.position.x-=t.normal.x*s*e.inverseMass,e.position.y-=t.normal.y*s*e.inverseMass,i.position.x+=t.normal.x*s*i.inverseMass,i.position.y+=t.normal.y*s*i.inverseMass;const o={x:i.velocity.x-e.velocity.x,y:i.velocity.y-e.velocity.y},n=o.x*t.normal.x+o.y*t.normal.y;if(n>0)return;const l=-(1+Math.min(e.restitution,i.restitution))*n/(e.inverseMass+i.inverseMass),c={x:l*t.normal.x,y:l*t.normal.y};e.isStatic||(e.previousPosition.x-=c.x*e.inverseMass,e.previousPosition.y-=c.y*e.inverseMass),i.isStatic||(i.previousPosition.x+=c.x*i.inverseMass,i.previousPosition.y+=c.y*i.inverseMass)}resolveCollisionSimple(t){const e=t.objectA,i=t.objectB,s=t.normal.x*t.penetration*.5,o=t.normal.y*t.penetration*.5;e.isStatic||(e.position.x-=s,e.position.y-=o),i.isStatic||(i.position.x+=s,i.position.y+=o);const n={x:i.velocity.x-e.velocity.x,y:i.velocity.y-e.velocity.y},r=n.x*t.normal.x+n.y*t.normal.y;if(r>0)return;const l=Math.min(e.restitution,i.restitution)*.8,c=r*l;e.isStatic||(e.previousPosition.x+=t.normal.x*c*.5,e.previousPosition.y+=t.normal.y*c*.5),i.isStatic||(i.previousPosition.x-=t.normal.x*c*.5,i.previousPosition.y-=t.normal.y*c*.5)}handleTiltingBarCollisions(){if(this.tiltingBar)for(const t of this.objects){if(t.isStatic)continue;const e=this.tiltingBar.getEndpoints(),i=this.getClosestPointOnLineSegment(t.position,e.start,e.end),s=Math.sqrt(y(t.position.x-i.x,2)+y(t.position.y-i.y,2)),n=(this.tiltingBar.thickness||12)/2,r=t.radius+n;if(s<r){const l={x:e.end.x-e.start.x,y:e.end.y-e.start.y},c=Math.sqrt(l.x*l.x+l.y*l.y),d={x:l.x/c,y:l.y/c},u={x:-l.y/c,y:l.x/c};u.y>0&&(u.x=-u.x,u.y=-u.y);const p={x:i.x+u.x*n,y:i.y+u.y*n};t.position.x=p.x+u.x*t.radius,t.position.y=p.y+u.y*t.radius;const f={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y},C=f.x*u.x+f.y*u.y,k=f.x*d.x+f.y*d.y;if(C<-.5){const P=t.restitution*.8,T=this.tiltingBar.friction||.3,M={x:f.x-2*C*u.x,y:f.y-2*C*u.y};if(M.x*=P*(1-T),M.y*=P,t.previousPosition.x=t.position.x-M.x,t.previousPosition.y=t.position.y-M.y,this.audioCallback){const D=Math.sqrt(f.x*f.x+f.y*f.y);this.audioCallback(D,"bounce")}}else this.applyRollingPhysics(t,d,u,k,this.deltaTime)}}}applyRollingPhysics(t,e,i,s,o){const n=this.gravity.x*e.x+this.gravity.y*e.y,r=this.tiltingBar.friction||.05,l=.01;let c=n;if(Math.abs(s)>.5){const p=-Math.sign(s)*l*Math.abs(this.gravity.y);c+=p}if(Math.abs(s)>.5){const p=-Math.sign(s)*r*Math.abs(this.gravity.y);c+=p}const d=s+c*o,u={x:d*e.x,y:d*e.y};t.previousPosition.x=t.position.x-u.x,t.previousPosition.y=t.position.y-u.y,t.velocity.x=u.x,t.velocity.y=u.y,t.isRollingOnBar=!0}isBallOnBar(t){const e=this.objects.find(l=>l.id===t);if(!e||!this.tiltingBar)return!1;const i=this.tiltingBar.getEndpoints(),s=this.getClosestPointOnLineSegment(e.position,i.start,i.end),o=Math.sqrt(y(e.position.x-s.x,2)+y(e.position.y-s.y,2)),n=this.tiltingBar.thickness||12,r=e.radius+n/2;return o<=r+2}handleBoundaryCollisions(){for(const t of this.objects)if(!t.isStatic){if(t.position.y+t.radius>this.bounds.height){t.position.y=this.bounds.height-t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};if(e.y>0&&(t.previousPosition.y=t.position.y+e.y*t.restitution,t.previousPosition.x=t.position.x-e.x*.8,this.audioCallback)){const i=Math.sqrt(e.x*e.x+e.y*e.y);this.audioCallback(i,"bounce")}}if(t.position.x-t.radius<0){t.position.x=t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};if(e.x<0&&(t.previousPosition.x=t.position.x+e.x*t.restitution,this.audioCallback)){const i=Math.sqrt(e.x*e.x+e.y*e.y);this.audioCallback(i,"bounce")}}else if(t.position.x+t.radius>this.bounds.width){t.position.x=this.bounds.width-t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};if(e.x>0&&(t.previousPosition.x=t.position.x+e.x*t.restitution,this.audioCallback)){const i=Math.sqrt(e.x*e.x+e.y*e.y);this.audioCallback(i,"bounce")}}}}updateBackwardCompatibility(){for(const t of this.objects)t.x=t.position.x,t.y=t.position.y,t.vx=t.velocity.x,t.vy=t.velocity.y}updateSpatialGrid(){if(!(this.objects.length<=3)){this.spatialGrid.clear();for(const t of this.objects){const e=this.getObjectCells(t);for(const i of e)this.spatialGrid.has(i)||this.spatialGrid.set(i,{objects:[]}),this.spatialGrid.get(i).objects.push(t)}}}getObjectCells(t){const e=[],i=t.radius,s=Math.floor((t.position.x-i)/this.gridSize),o=Math.floor((t.position.x+i)/this.gridSize),n=Math.floor((t.position.y-i)/this.gridSize),r=Math.floor((t.position.y+i)/this.gridSize);for(let l=s;l<=o;l++)for(let c=n;c<=r;c++)e.push(`${l},${c}`);return e}getNearbyObjects(t){const e=[],i=this.getObjectCells(t);for(const s of i){const o=this.spatialGrid.get(s);if(o)for(const n of o.objects)n.id!==t.id&&!e.includes(n)&&e.push(n)}return e}getClosestPointOnLineSegment(t,e,i){const s=i.x-e.x,o=i.y-e.y,n=Math.sqrt(s*s+o*o);if(n===0)return e;const r=Math.max(0,Math.min(1,((t.x-e.x)*s+(t.y-e.y)*o)/(n*n)));return{x:e.x+r*s,y:e.y+r*o}}getObjects(){return this.objects}setGravity(t,e){this.gravity.x=t,this.gravity.y=e,g.log(`Gravity set to: (${t}, ${e})`)}setAirResistance(t){this.airResistance=Math.max(0,Math.min(1,t)),g.log(`Air resistance set to: ${this.airResistance}`)}setBounds(t,e){this.bounds.width=t,this.bounds.height=e,g.log(`Physics bounds set to: ${t}x${e}`)}setDebug(t){this.debug=t}getDebug(){return this.debug}getCollisionManifolds(){return this.collisionManifolds}getConstraints(){return this.constraints}getFriction(){return .98}getBounceEnergy(){return .7}getGravity(){return this.gravity.y}setFriction(t){g.log("Legacy friction setting ignored - use per-object friction instead")}setBounceEnergy(t){g.log("Legacy bounce energy setting ignored - use per-object restitution instead")}}class z{constructor(t){a(this,"position");a(this,"rotation",0);a(this,"targetRotation",0);a(this,"leftSideHeight",590);a(this,"rightSideHeight",590);a(this,"minSideHeight",50);a(this,"maxSideHeight",590);a(this,"sideSpeed",100);a(this,"width");a(this,"height");a(this,"maxRotation");a(this,"rotationSpeed");a(this,"friction");a(this,"color","#00ffff");a(this,"glowColor","#0088ff");a(this,"thickness",12);this.position=m({},t.position),this.width=t.width,this.height=t.height,this.maxRotation=t.maxRotation,this.rotationSpeed=t.rotationSpeed,this.friction=t.friction}setTargetRotation(t){this.targetRotation=Math.max(-this.maxRotation,Math.min(this.maxRotation,t))}moveLeftSide(t){t!==0&&(this.leftSideHeight-=t*this.sideSpeed*(1/60),this.leftSideHeight=Math.max(this.minSideHeight,Math.min(this.maxSideHeight,this.leftSideHeight)))}moveRightSide(t){t!==0&&(this.rightSideHeight-=t*this.sideSpeed*(1/60),this.rightSideHeight=Math.max(this.minSideHeight,Math.min(this.maxSideHeight,this.rightSideHeight)))}getTiltPercentage(){return this.rotation/this.maxRotation}update(t){const e=this.rightSideHeight-this.leftSideHeight,i=this.maxSideHeight-this.minSideHeight;this.rotation=e/i*this.maxRotation,this.targetRotation=this.rotation}getEndpoints(){const t=this.width/2;return{start:{x:this.position.x-t,y:this.leftSideHeight},end:{x:this.position.x+t,y:this.rightSideHeight}}}getNormal(){const t=this.getEndpoints(),e=t.end.x-t.start.x,i=t.end.y-t.start.y,s=Math.sqrt(e*e+i*i);return s===0?{x:0,y:-1}:{x:-i/s,y:e/s}}isPointNearBar(t,e){const i=this.getEndpoints(),s=this.distanceToLineSegment(t,i.start,i.end),o=e+this.thickness/2+2;return s<=o}distanceToLineSegment(t,e,i){const s=i.x-e.x,o=i.y-e.y,n=Math.sqrt(s*s+o*o);if(n===0)return Math.sqrt(y(t.x-e.x,2)+y(t.y-e.y,2));const r=Math.max(0,Math.min(1,((t.x-e.x)*s+(t.y-e.y)*o)/(n*n))),l={x:e.x+r*s,y:e.y+r*o};return Math.sqrt(y(t.x-l.x,2)+y(t.y-l.y,2))}getCollisionResponse(t,e,i){const s=this.getEndpoints(),o=this.getNormal(),n=this.distanceToLineSegment(t,s.start,s.end),r=i+this.thickness/2-n,l={x:t.x+o.x*r,y:t.y+o.y*r},c=e.x*o.x+e.y*o.y;let d=e;if(c<0){const u={x:e.x-2*c*o.x,y:e.y-2*c*o.y},p=1-this.friction,f=.8;d={x:u.x*p*f,y:u.y*f}}return{velocity:d,position:l}}}class j{constructor(){a(this,"inputState",{keys:{},mouse:{x:0,y:0,isDown:!1,button:-1},tiltInput:0});a(this,"previousKeys",{});a(this,"canvas",null);a(this,"keyBindings",{leftSideUp:["KeyA"],leftSideDown:["KeyZ"],rightSideUp:["ArrowUp"],rightSideDown:["ArrowDown"],start:["Space"],reset:["KeyR"],pause:["KeyP","Escape"]});this.setupEventListeners()}init(t){this.canvas=t,this.setupCanvasListeners()}getInputState(){return m({},this.inputState)}getTiltInput(){return this.inputState.tiltInput}getLeftSideInput(){let t=0;return this.isActionPressed("leftSideUp")&&(t=1),this.isActionPressed("leftSideDown")&&(t=-1),t}getRightSideInput(){let t=0;return this.isActionPressed("rightSideUp")&&(t=1),this.isActionPressed("rightSideDown")&&(t=-1),t}isActionPressed(t){return this.keyBindings[t].some(e=>this.inputState.keys[e])}isActionJustPressed(t){const e=this.keyBindings[t].some(i=>this.inputState.keys[i]&&!this.previousKeys[i]);return t==="start"&&e&&console.log("🔑 Start key (SPACE) just pressed!"),e}update(){let t=0,e=0;this.isActionPressed("leftSideUp")&&(t=1),this.isActionPressed("leftSideDown")&&(t=-1),this.isActionPressed("rightSideUp")&&(e=1),this.isActionPressed("rightSideDown")&&(e=-1);const i=(e-t)*.5;if(this.canvas&&this.inputState.mouse.isDown){const s=this.canvas.getBoundingClientRect(),o=s.width/2,r=(this.inputState.mouse.x-s.left-o)/o;this.inputState.tiltInput=Math.max(-1,Math.min(1,r))}else this.inputState.tiltInput=Math.max(-1,Math.min(1,i))}endFrame(){this.previousKeys=m({},this.inputState.keys)}setupEventListeners(){document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this)),document.addEventListener("keydown",t=>{Object.values(this.keyBindings).flat().includes(t.code)&&t.preventDefault()})}setupCanvasListeners(){this.canvas&&(this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("mouseleave",this.handleMouseLeave.bind(this)),this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)))}handleKeyDown(t){this.inputState.keys[t.code]=!0}handleKeyUp(t){this.inputState.keys[t.code]=!1}handleMouseDown(t){this.inputState.mouse.isDown=!0,this.inputState.mouse.button=t.button,this.updateMousePosition(t)}handleMouseUp(t){this.inputState.mouse.isDown=!1,this.inputState.mouse.button=-1}handleMouseMove(t){this.updateMousePosition(t)}handleMouseLeave(){this.inputState.mouse.isDown=!1,this.inputState.mouse.button=-1}handleTouchStart(t){t.preventDefault(),t.touches.length>0&&(this.inputState.mouse.isDown=!0,this.updateTouchPosition(t.touches[0]))}handleTouchEnd(t){t.preventDefault(),this.inputState.mouse.isDown=!1}handleTouchMove(t){t.preventDefault(),t.touches.length>0&&this.updateTouchPosition(t.touches[0])}updateMousePosition(t){this.inputState.mouse.x=t.clientX,this.inputState.mouse.y=t.clientY}updateTouchPosition(t){this.inputState.mouse.x=t.clientX,this.inputState.mouse.y=t.clientY}dispose(){document.removeEventListener("keydown",this.handleKeyDown.bind(this)),document.removeEventListener("keyup",this.handleKeyUp.bind(this)),this.canvas&&(this.canvas.removeEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.removeEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.removeEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.removeEventListener("mouseleave",this.handleMouseLeave.bind(this)),this.canvas.removeEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.removeEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.removeEventListener("touchmove",this.handleTouchMove.bind(this)))}}class H{constructor(t){a(this,"levelData");a(this,"isCompleted",!1);a(this,"startTime",0);a(this,"elapsedTime",0);this.levelData=t,console.log(`📋 Level ${t.id} loaded: ${t.name}`)}start(){this.startTime=Date.now(),this.elapsedTime=0,this.isCompleted=!1,console.log(`🏁 Level ${this.levelData.id} started`)}update(t){this.elapsedTime+=t,this.levelData.obstacles.forEach(e=>{e.animation==="spark"&&(e.isActive=Math.sin(this.elapsedTime*.01)>.5)}),this.levelData.targetPorts.forEach(e=>{e.isCompleted||(e.glowIntensity=.5+.5*Math.sin(this.elapsedTime*.005))})}checkObstacleCollision(t,e){for(const i of this.levelData.obstacles){if(!i.isActive)continue;const s=t.x-(i.position.x+i.size.x/2),o=t.y-(i.position.y+i.size.y/2);if(Math.sqrt(s*s+o*o)<e+Math.min(i.size.x,i.size.y)/2)return console.log(`⚡ Ball hit obstacle: ${i.id}`),i}return null}checkTargetPortCollision(t,e){for(const i of this.levelData.targetPorts){if(!i.isActive||i.isCompleted)continue;const s=t.x-i.position.x,o=t.y-i.position.y;if(Math.sqrt(s*s+o*o)<e+i.radius)return console.log(`🎯 Ball reached target port: ${i.id}`),i.isCompleted=!0,i}return null}checkBallFallOff(t,e){return t.y>e.y+50}checkLevelComplete(){const e=this.levelData.targetPorts.filter(i=>i.isCompleted).length>=this.levelData.requiredTargets;return e&&!this.isCompleted&&(this.isCompleted=!0,console.log(`🏆 Level ${this.levelData.id} completed!`)),e}calculateScore(){const e=this.levelData.targetPorts.filter(s=>s.isCompleted).length*100,i=this.levelData.timeLimit?Math.max(0,(this.levelData.timeLimit-this.elapsedTime)*10):0;return Math.floor((e+i)*this.levelData.bonusMultiplier)}getProgress(){return this.levelData.targetPorts.filter(e=>e.isCompleted).length/this.levelData.requiredTargets}getLevelData(){return this.levelData}getRemainingTime(){return this.levelData.timeLimit?Math.max(0,this.levelData.timeLimit-this.elapsedTime):1/0}isTimeUp(){return this.levelData.timeLimit?this.elapsedTime>=this.levelData.timeLimit:!1}reset(){this.isCompleted=!1,this.startTime=0,this.elapsedTime=0,this.levelData.targetPorts.forEach(t=>{t.isCompleted=!1,t.glowIntensity=1}),console.log(`🔄 Level ${this.levelData.id} reset`)}}class F{constructor(){a(this,"levels",new Map);a(this,"currentLevel",null);a(this,"unlockedLevels",new Set([1]));console.log("📚 LevelManager initialized"),this.loadLevels()}loadLevels(){const t={id:1,name:"First Circuit",description:"Guide the data packet to the target port",obstacles:[],targetPorts:[{id:"target-1",position:{x:50,y:500},radius:25,isActive:!0,points:100,isCompleted:!1,color:"#00ff00",glowIntensity:1}],ballStartPosition:{x:343,y:562},requiredTargets:1,bonusMultiplier:1},e={id:2,name:"Electric Danger",description:"Avoid the electrical hazard and reach the port",obstacles:[{id:"hazard-1",type:"electrical_hazard",position:{x:150,y:450},size:{x:60,y:20},isActive:!0,damage:1,animation:"spark"}],targetPorts:[{id:"target-2",position:{x:80,y:520},radius:25,isActive:!0,points:150,isCompleted:!1,color:"#0088ff",glowIntensity:1}],ballStartPosition:{x:343,y:562},requiredTargets:1,bonusMultiplier:1.2},i={id:3,name:"Dual Circuit",description:"Activate both target ports to complete the circuit",obstacles:[{id:"barrier-1",type:"barrier",position:{x:180,y:480},size:{x:20,y:40},isActive:!0,animation:"none"}],targetPorts:[{id:"target-3a",position:{x:100,y:520},radius:20,isActive:!0,points:100,isCompleted:!1,color:"#ff8800",glowIntensity:1},{id:"target-3b",position:{x:260,y:520},radius:20,isActive:!0,points:100,isCompleted:!1,color:"#ff8800",glowIntensity:1}],ballStartPosition:{x:343,y:562},requiredTargets:2,bonusMultiplier:1.5};this.levels.set(1,t),this.levels.set(2,e),this.levels.set(3,i),console.log(`📚 Loaded ${this.levels.size} levels`)}loadLevel(t){if(!this.isLevelUnlocked(t))return console.warn(`🔒 Level ${t} is locked`),null;const e=this.levels.get(t);return e?(this.currentLevel=new H(e),this.currentLevel):(console.error(`❌ Level ${t} not found`),null)}isLevelUnlocked(t){return this.unlockedLevels.has(t)}unlockLevel(t){this.unlockedLevels.add(t),console.log(`🔓 Level ${t} unlocked`)}getCurrentLevel(){return this.currentLevel}getAvailableLevels(){return Array.from(this.levels.keys())}getUnlockedLevels(){return Array.from(this.unlockedLevels)}getLevelData(t){return this.levels.get(t)||null}}class N{constructor(){a(this,"audioContext",null);a(this,"masterGain",null);a(this,"sfxGain",null);a(this,"musicGain",null);a(this,"config",{masterVolume:.7,sfxVolume:.8,musicVolume:.4,enabled:!0});a(this,"soundEffects",new Map);a(this,"loadedSounds",new Map);a(this,"currentMusic",null);a(this,"isInitialized",!1);console.log("🔊 AudioManager initialized")}init(){return v(this,null,function*(){if(!this.isInitialized)try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterGain=this.audioContext.createGain(),this.sfxGain=this.audioContext.createGain(),this.musicGain=this.audioContext.createGain(),this.sfxGain.connect(this.masterGain),this.musicGain.connect(this.masterGain),this.masterGain.connect(this.audioContext.destination),this.masterGain.gain.value=this.config.masterVolume,this.sfxGain.gain.value=this.config.sfxVolume,this.musicGain.gain.value=this.config.musicVolume,yield this.createProceduralSounds(),this.isInitialized=!0,console.log("✅ Audio system initialized")}catch(t){console.error("❌ Failed to initialize audio system:",t),this.config.enabled=!1}})}createProceduralSounds(){return v(this,null,function*(){if(!this.audioContext)return;const t=this.createBounceSound();this.soundEffects.set("bounce",{id:"bounce",buffer:t,volume:.6,loop:!1,pitch:1});const e=this.createRollingSound();this.soundEffects.set("roll",{id:"roll",buffer:e,volume:.3,loop:!0,pitch:1});const i=this.createElectricalZap();this.soundEffects.set("zap",{id:"zap",buffer:i,volume:.7,loop:!1,pitch:1});const s=this.createTargetSound();this.soundEffects.set("target",{id:"target",buffer:s,volume:.8,loop:!1,pitch:1});const o=this.createLevelCompleteSound();this.soundEffects.set("level_complete",{id:"level_complete",buffer:o,volume:.9,loop:!1,pitch:1});const n=this.createUIClickSound();this.soundEffects.set("ui_click",{id:"ui_click",buffer:n,volume:.5,loop:!1,pitch:1}),console.log(`🎵 Created ${this.soundEffects.size} procedural sound effects`)})}createBounceSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.2,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const r=n/t,l=Math.exp(-r*8),c=Math.sin(2*Math.PI*800*r)*.5,d=Math.sin(2*Math.PI*1600*r)*.3,u=Math.sin(2*Math.PI*2400*r)*.2,p=(Math.random()-.5)*.1;o[n]=(c+d+u+p)*l}return s}createRollingSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const r=n/t,l=Math.sin(2*Math.PI*60*r)*.3,c=Math.sin(2*Math.PI*200*r)*.1,d=(Math.random()-.5)*.2;o[n]=l+c+d}return s}createElectricalZap(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.3,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const r=n/t,l=Math.exp(-r*6),c=Math.sin(2*Math.PI*1200*r)*.4,d=Math.sin(2*Math.PI*3e3*r)*.3,u=(Math.random()-.5)*.5;o[n]=(c+d+u)*l}return s}createTargetSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.5,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const r=n/t,l=Math.exp(-r*4),c=Math.sin(2*Math.PI*523*r)*.5,d=Math.sin(2*Math.PI*659*r)*.3,u=Math.sin(2*Math.PI*784*r)*.2;o[n]=(c+d+u)*l}return s}createLevelCompleteSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0),n=[523,659,784,1047],r=i/n.length;for(let l=0;l<i;l++){const c=Math.floor(l/r),d=l%r/t,u=Math.exp(-d*2),p=n[c]||n[n.length-1],f=Math.sin(2*Math.PI*p*d)*u*.5;o[l]=f}return s}createUIClickSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const r=n/t,l=Math.exp(-r*20),c=Math.sin(2*Math.PI*1e3*r)*l*.3;o[n]=c}return s}playSound(t,e=1,i=1){if(!this.config.enabled||!this.audioContext||!this.isInitialized)return;const s=this.soundEffects.get(t);if(!s||!s.buffer){console.warn(`🔇 Sound not found: ${t}`);return}try{const o=this.audioContext.createBufferSource(),n=this.audioContext.createGain();o.buffer=s.buffer,o.loop=s.loop,o.playbackRate.value=i,n.gain.value=s.volume*e,o.connect(n),n.connect(this.sfxGain),o.start(),s.loop||o.addEventListener("ended",()=>{o.disconnect(),n.disconnect()})}catch(o){console.error(`❌ Error playing sound ${t}:`,o)}}playBounceSound(t){const e=Math.min(t/500,1),i=.3+e*.7,s=.8+e*.4;this.playSound("bounce",i,s)}playRollingSound(){this.playSound("roll",.5)}stopAllSounds(){if(this.audioContext)try{this.currentMusic&&(this.currentMusic.stop(),this.currentMusic=null),console.log("🔇 All sounds stopped")}catch(t){console.error("❌ Error stopping sounds:",t)}}setMasterVolume(t){this.config.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&(this.masterGain.gain.value=this.config.masterVolume)}setSFXVolume(t){this.config.sfxVolume=Math.max(0,Math.min(1,t)),this.sfxGain&&(this.sfxGain.gain.value=this.config.sfxVolume)}setMusicVolume(t){this.config.musicVolume=Math.max(0,Math.min(1,t)),this.musicGain&&(this.musicGain.gain.value=this.config.musicVolume)}setEnabled(t){this.config.enabled=t,t||this.stopAllSounds()}getConfig(){return m({},this.config)}resumeContext(){return v(this,null,function*(){this.audioContext&&this.audioContext.state==="suspended"&&(yield this.audioContext.resume(),console.log("🔊 Audio context resumed"))})}isAvailable(){return this.isInitialized&&this.config.enabled}}class U{constructor(){a(this,"gameState");a(this,"gameLoop");a(this,"renderer");a(this,"physicsEngine");a(this,"inputManager");a(this,"tiltingBar");a(this,"levelManager");a(this,"audioManager");a(this,"currentLevel",null);a(this,"isRunning",!1);this.gameState=new I,this.gameLoop=new $,this.renderer=new B,this.physicsEngine=new O,this.inputManager=new j,this.levelManager=new F,this.audioManager=new N,this.tiltingBar=new z({position:{x:180,y:590},width:360,height:8,maxRotation:Math.PI/4,rotationSpeed:3,friction:.05}),console.log("🎮 Circuit Breaker - Game initialized")}init(){return v(this,null,function*(){try{console.log("🚀 Initializing Circuit Breaker...");const t=document.getElementById("game-canvas");if(!t)throw new Error("Canvas element not found");this.renderer.init(t),this.physicsEngine.setGravity(0,520),this.physicsEngine.setAirResistance(.999),this.physicsEngine.setBounds(360,640),this.physicsEngine.setTiltingBar(this.tiltingBar),this.physicsEngine.setAudioCallback((n,r)=>{r==="bounce"&&this.audioManager.playBounceSound(n)}),this.inputManager.init(t),yield this.audioManager.init();const e=14,i=-50,s=300,o=this.physicsEngine.createObject({id:"game-ball",x:i,y:s,radius:e,mass:6,restitution:.65,friction:.18,isStatic:!1});this.physicsEngine.addObject(o),this.physicsEngine.setDebug(!1),this.currentLevel=this.levelManager.loadLevel(1),this.currentLevel&&(this.currentLevel.start(),console.log("🎯 Level 1 loaded and started")),this.isRunning=!0,console.log("✅ Circuit Breaker initialized successfully")}catch(t){throw console.error("❌ Failed to initialize Circuit Breaker:",t),t}})}start(){if(!this.isRunning){console.warn("⚠️ Game not initialized. Call init() first.");return}console.log("▶️ Starting Circuit Breaker..."),this.gameState.setState(S.PLAYING),this.gameLoop.start(this.gameState,this.renderer,this.physicsEngine,this)}update(t){this.inputManager.update(),this.inputManager.isActionJustPressed("start")&&(console.log("🎯 SPACE pressed - placing ball on bar"),this.placeBallOnBar(),this.audioManager.resumeContext(),this.audioManager.playSound("ui_click"));const e=this.inputManager.getLeftSideInput(),i=this.inputManager.getRightSideInput();this.tiltingBar.moveLeftSide(e),this.tiltingBar.moveRightSide(i),this.tiltingBar.update(t/1e3),this.currentLevel&&(this.currentLevel.update(t),this.checkCollisions(),this.checkWinLoseConditions()),this.inputManager.endFrame()}placeBallOnBar(){const t=this.physicsEngine.getObjects().find(e=>e.id==="game-ball");if(t){const e=t.radius,i=360-e-5,s=this.tiltingBar.rightSideHeight,o=this.tiltingBar.thickness,n=s-o/2,r=n-10-e;console.log("🏀 Precise ball placement:"),console.log(`   Ball radius: ${e}`),console.log(`   Bar right side Y: ${s}`),console.log(`   Bar thickness: ${o}`),console.log(`   Bar top surface: ${n}`),console.log(`   Ball center Y: ${r}`),console.log(`   Ball bottom Y: ${r+e} (should be ${n-10})`),console.log(`   Gap between ball and bar: ${r+e-n} pixels`),t.position.x=i,t.position.y=r,t.previousPosition.x=t.position.x,t.previousPosition.y=t.position.y,t.velocity.x=0,t.velocity.y=0,t.x=t.position.x,t.y=t.position.y,t.vx=0,t.vy=0,console.log(`✅ Ball placed at (${t.position.x}, ${t.position.y})`)}else console.error("❌ Ball not found in physics engine!")}renderGameplay(){if(this.renderer.drawTiltingBar(this.tiltingBar),this.currentLevel){const e=this.currentLevel.getLevelData();e.obstacles.forEach(s=>{this.renderer.drawObstacle(s)}),e.targetPorts.forEach(s=>{this.renderer.drawTargetPort(s)});const i=this.renderer.getContext();i&&(i.fillStyle="#00ffff",i.font="12px monospace",i.textAlign="left",i.fillText(`Level: ${e.id} - ${e.name}`,10,20),i.fillText(`Progress: ${Math.round(this.currentLevel.getProgress()*100)}%`,10,35),i.fillText(`Score: ${this.gameState.getStateData().score}`,10,50))}const t=this.renderer.getContext();t&&(t.fillStyle="#00ffff",t.font="10px monospace",t.textAlign="center",t.fillText("SPACE: Start | Left: A(up)/Z(down) | Right: ↑(up)/↓(down)",180,580),t.fillText("Or click and drag mouse to control",180,595))}checkCollisions(){if(!this.currentLevel)return;const t=this.physicsEngine.getObjects().find(n=>n.id==="game-ball");if(!t)return;const e={x:t.position.x,y:t.position.y},i=t.radius,s=this.currentLevel.checkObstacleCollision(e,i);s&&this.handleObstacleCollision(s);const o=this.currentLevel.checkTargetPortCollision(e,i);o&&this.handleTargetPortCollision(o),this.currentLevel.checkBallFallOff(e,{x:360,y:640})&&this.handleBallFallOff()}checkWinLoseConditions(){this.currentLevel&&(this.currentLevel.checkLevelComplete()&&this.handleLevelComplete(),this.currentLevel.isTimeUp()&&this.handleTimeUp())}handleObstacleCollision(t){console.log(`💥 Ball hit obstacle: ${t.id}`),t.type==="electrical_hazard"?(console.log("⚡ Electrical damage!"),this.audioManager.playSound("zap"),this.placeBallOnBar()):t.type==="hole"?(console.log("🕳️ Ball fell into hole!"),this.handleBallFallOff()):t.type==="barrier"&&this.audioManager.playBounceSound(300)}handleTargetPortCollision(t){console.log(`🎯 Ball reached target port: ${t.id}`),this.audioManager.playSound("target");const e=this.gameState.getStateData().score;this.gameState.updateStateData({score:e+t.points}),console.log(`💰 Score increased by ${t.points}`)}handleBallFallOff(){console.log("💀 Ball fell off screen!");const t=this.gameState.getStateData().lives;t>1?(this.gameState.updateStateData({lives:t-1}),console.log(`💔 Lives remaining: ${t-1}`),this.placeBallOnBar()):this.handleGameOver()}handleLevelComplete(){if(!this.currentLevel)return;console.log("🏆 Level completed!"),this.audioManager.playSound("level_complete");const t=this.currentLevel.calculateScore(),e=this.gameState.getStateData().score;this.gameState.updateStateData({score:e+t}),console.log(`🎉 Level bonus: ${t}`);const i=this.currentLevel.getLevelData().id+1;this.levelManager.unlockLevel(i),this.levelManager.getLevelData(i)?this.loadNextLevel(i):this.handleGameComplete()}handleTimeUp(){console.log("⏰ Time up!"),this.handleBallFallOff()}loadNextLevel(t){console.log(`🔄 Loading level ${t}...`),this.currentLevel=this.levelManager.loadLevel(t),this.currentLevel&&(this.currentLevel.start(),this.gameState.updateStateData({currentLevel:t}),this.placeBallOnBar(),console.log(`🎯 Level ${t} loaded and started`))}handleGameOver(){console.log("💀 Game Over!"),this.gameState.setState(S.GAME_OVER)}handleGameComplete(){console.log("🎊 Game completed! All levels finished!"),this.gameState.setState(S.LEVEL_COMPLETE)}pause(){console.log("⏸️ Pausing Circuit Breaker..."),this.gameLoop.pause()}resume(){console.log("▶️ Resuming Circuit Breaker..."),this.gameLoop.resume()}stop(){console.log("⏹️ Stopping Circuit Breaker..."),this.gameLoop.stop(),this.isRunning=!1}getGameState(){return this.gameState}isGameRunning(){return this.isRunning&&this.gameLoop.isGameLoopRunning()}}let x=null,w=null;function E(){return v(this,null,function*(){try{console.log("🚀 Circuit Breaker - Loading...");const h=document.getElementById("game-container");if(!h)throw new Error("Game container not found");h.innerHTML="";const t=document.createElement("canvas");t.id="game-canvas",t.width=360,t.height=640,h.appendChild(t),w=new B,w.init(t),x=new U,yield x.init(),x.start(),console.log("✅ Circuit Breaker loaded successfully")}catch(h){console.error("❌ Failed to load Circuit Breaker:",h),V("Failed to load game. Please refresh the page.")}})}function V(h){const t=document.getElementById("game-container");t&&(t.innerHTML=`
      <div style="text-align: center; color: #ff0066;">
        <h1>Circuit Breaker</h1>
        <p>Error: ${h}</p>
        <p>Please refresh the page to try again.</p>
      </div>
    `)}function q(){console.log("📱 Window resized")}function _(){document.hidden?(console.log("👁️ Page hidden - pausing game"),x==null||x.pause()):(console.log("👁️ Page visible - resuming game"),x==null||x.resume())}function K(){console.log("👋 Page unloading - stopping game"),x==null||x.stop()}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",E):E();window.addEventListener("resize",q);document.addEventListener("visibilitychange",_);window.addEventListener("beforeunload",K);
//# sourceMappingURL=index-aa8349d9.js.map
