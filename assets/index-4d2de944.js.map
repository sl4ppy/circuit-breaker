{"version":3,"file":"index-4d2de944.js","sources":["../../src/core/GameState.ts","../../src/core/GameLoop.ts","../../src/utils/Debug.ts","../../src/rendering/Renderer.ts","../../src/physics/PhysicsEngine.ts","../../src/core/TiltingBar.ts","../../src/input/InputManager.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["// Circuit Breaker - Game State Management\r\n// Handles different game states and transitions\r\n\r\nexport enum GameStateType {\r\n  MENU = 'menu',\r\n  PLAYING = 'playing',\r\n  PAUSED = 'paused',\r\n  LEVEL_COMPLETE = 'level_complete',\r\n  GAME_OVER = 'game_over',\r\n  LOADING = 'loading'\r\n}\r\n\r\nexport interface GameStateData {\r\n  currentLevel: number\r\n  score: number\r\n  lives: number\r\n  isPaused: boolean\r\n  isGameOver: boolean\r\n}\r\n\r\nexport class GameState {\r\n  private currentState: GameStateType = GameStateType.MENU\r\n  private stateData: GameStateData = {\r\n    currentLevel: 1,\r\n    score: 0,\r\n    lives: 3,\r\n    isPaused: false,\r\n    isGameOver: false\r\n  }\r\n\r\n  constructor() {\r\n    console.log('📊 GameState initialized')\r\n  }\r\n\r\n  /**\r\n   * Get current game state\r\n   */\r\n  public getCurrentState(): GameStateType {\r\n    return this.currentState\r\n  }\r\n\r\n  /**\r\n   * Set game state\r\n   */\r\n  public setState(newState: GameStateType): void {\r\n    const previousState = this.currentState\r\n    this.currentState = newState\r\n    console.log(`🔄 Game state changed: ${previousState} → ${newState}`)\r\n  }\r\n\r\n  /**\r\n   * Get state data\r\n   */\r\n  public getStateData(): GameStateData {\r\n    return { ...this.stateData }\r\n  }\r\n\r\n  /**\r\n   * Update state data\r\n   */\r\n  public updateStateData(updates: Partial<GameStateData>): void {\r\n    this.stateData = { ...this.stateData, ...updates }\r\n  }\r\n\r\n  /**\r\n   * Check if current state is a specific type\r\n   */\r\n  public isState(state: GameStateType): boolean {\r\n    return this.currentState === state\r\n  }\r\n\r\n  /**\r\n   * Check if game is in playing state\r\n   */\r\n  public isPlaying(): boolean {\r\n    return this.currentState === GameStateType.PLAYING\r\n  }\r\n\r\n  /**\r\n   * Check if game is paused\r\n   */\r\n  public isPaused(): boolean {\r\n    return this.currentState === GameStateType.PAUSED\r\n  }\r\n\r\n  /**\r\n   * Check if game is over\r\n   */\r\n  public isGameOver(): boolean {\r\n    return this.currentState === GameStateType.GAME_OVER\r\n  }\r\n\r\n  /**\r\n   * Reset game state to initial values\r\n   */\r\n  public reset(): void {\r\n    this.currentState = GameStateType.MENU\r\n    this.stateData = {\r\n      currentLevel: 1,\r\n      score: 0,\r\n      lives: 3,\r\n      isPaused: false,\r\n      isGameOver: false\r\n    }\r\n    console.log('🔄 Game state reset')\r\n  }\r\n} ","// Circuit Breaker - Game Loop\r\n// Handles the main game loop with fixed timestep and performance optimization\r\n\r\nimport { GameState, GameStateType } from './GameState'\r\nimport { Renderer } from '../rendering/Renderer'\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine'\r\n\r\nexport class GameLoop {\r\n  private animationId: number | null = null\r\n  private lastTime: number = 0\r\n  private accumulator: number = 0\r\n  private readonly timestep: number = 1000 / 60 // 60 FPS\r\n  private isRunning: boolean = false\r\n  private isPaused: boolean = false\r\n  private renderer: Renderer | null = null\r\n  private physicsEngine: PhysicsEngine | null = null\r\n  private game: any = null\r\n\r\n  constructor() {\r\n    console.log('🔄 GameLoop initialized')\r\n  }\r\n\r\n  /**\r\n   * Start the game loop\r\n   */\r\n  public start(gameState: GameState, renderer?: Renderer, physicsEngine?: PhysicsEngine, game?: any): void {\r\n    if (this.isRunning) {\r\n      console.warn('⚠️ Game loop is already running')\r\n      return\r\n    }\r\n\r\n    this.renderer = renderer || null\r\n    this.physicsEngine = physicsEngine || null\r\n    this.game = game || null\r\n\r\n    this.isRunning = true\r\n    this.isPaused = false\r\n    this.lastTime = performance.now()\r\n    this.accumulator = 0\r\n\r\n    console.log('▶️ Game loop started')\r\n    this.gameLoop(gameState)\r\n  }\r\n\r\n  /**\r\n   * Main game loop with fixed timestep\r\n   */\r\n  private gameLoop(gameState: GameState): void {\r\n    if (!this.isRunning) return\r\n\r\n    const currentTime = performance.now()\r\n    const deltaTime = currentTime - this.lastTime\r\n    this.lastTime = currentTime\r\n\r\n    // Accumulate time\r\n    this.accumulator += deltaTime\r\n\r\n    // Update with fixed timestep\r\n    while (this.accumulator >= this.timestep) {\r\n      if (!this.isPaused) {\r\n        this.update(gameState, this.timestep)\r\n      }\r\n      this.accumulator -= this.timestep\r\n    }\r\n\r\n    // Render\r\n    this.render(gameState)\r\n\r\n    // Continue loop\r\n    this.animationId = requestAnimationFrame(() => this.gameLoop(gameState))\r\n  }\r\n\r\n  /**\r\n   * Update game logic\r\n   */\r\n  private update(_gameState: GameState, deltaTime: number): void {\r\n    // Update game logic if available\r\n    if (this.game && this.game.update) {\r\n      this.game.update(deltaTime)\r\n    }\r\n\r\n    // Update physics if available\r\n    if (this.physicsEngine) {\r\n      this.physicsEngine.update(deltaTime)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the game\r\n   */\r\n  private render(gameState: GameState): void {\r\n    if (!this.renderer) return\r\n\r\n    // Clear canvas\r\n    this.renderer.clear()\r\n\r\n    // Render game based on state\r\n    if (gameState.isPlaying()) {\r\n      this.renderGameplay()\r\n    } else if (gameState.isState(GameStateType.MENU)) {\r\n      this.renderMenu()\r\n    } else if (gameState.isState(GameStateType.PAUSED)) {\r\n      this.renderPaused()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render gameplay\r\n   */\r\n  private renderGameplay(): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw background\r\n    ctx.fillStyle = '#1a1a1a'\r\n    ctx.fillRect(0, 0, 360, 640)\r\n\r\n    // Draw all physics objects as circles\r\n    if (this.physicsEngine) {\r\n      for (const obj of this.physicsEngine.getObjects()) {\r\n        ctx.beginPath()\r\n        const pos = obj.position || { x: obj.x || 0, y: obj.y || 0 }\r\n        const radius = obj.radius || 10\r\n        ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2)\r\n        \r\n        // Different colors for different object types\r\n        if (obj.isStatic) {\r\n          ctx.fillStyle = '#ff0066' // Red for static obstacles\r\n          ctx.shadowColor = '#ff0066'\r\n        } else {\r\n          ctx.fillStyle = '#00ffff' // Cyan for dynamic balls\r\n          ctx.shadowColor = '#00ffff'\r\n        }\r\n        \r\n        ctx.shadowBlur = 16\r\n        ctx.fill()\r\n        ctx.shadowBlur = 0\r\n        ctx.closePath()\r\n\r\n        // Minimal debug info for performance\r\n        if (this.physicsEngine.getDebug && this.physicsEngine.getDebug()) {\r\n          // Draw velocity vectors for debugging\r\n          if (!obj.isStatic && obj.velocity) {\r\n            const velScale = 3 // Reduced scale for performance\r\n            ctx.beginPath()\r\n            ctx.moveTo(pos.x, pos.y)\r\n            ctx.lineTo(pos.x + obj.velocity.x * velScale, pos.y + obj.velocity.y * velScale)\r\n            ctx.strokeStyle = '#ffff00'\r\n            ctx.lineWidth = 1\r\n            ctx.stroke()\r\n            ctx.closePath()\r\n          }\r\n\r\n          // Draw minimal object info\r\n          ctx.fillStyle = '#ffffff'\r\n          ctx.font = '8px Courier New'\r\n          ctx.textAlign = 'center'\r\n          ctx.fillText(obj.id, pos.x, pos.y - radius - 5)\r\n        }\r\n      }\r\n\r\n      // Only draw debug info when enabled\r\n      if (this.physicsEngine.getDebug && this.physicsEngine.getDebug()) {\r\n        // Draw collision manifolds for debugging\r\n        if (this.physicsEngine.getCollisionManifolds) {\r\n          const manifolds = this.physicsEngine.getCollisionManifolds()\r\n          for (const manifold of manifolds) {\r\n            // Draw collision point\r\n            ctx.beginPath()\r\n            ctx.arc(manifold.contactPoint.x, manifold.contactPoint.y, 2, 0, Math.PI * 2)\r\n            ctx.fillStyle = '#ff0000'\r\n            ctx.fill()\r\n            ctx.closePath()\r\n          }\r\n        }\r\n\r\n        // Draw constraints for debugging\r\n        if (this.physicsEngine.getConstraints) {\r\n          const constraints = this.physicsEngine.getConstraints()\r\n          for (const constraint of constraints) {\r\n            if (constraint.type === 'distance' && constraint.objectB) {\r\n              // Draw distance constraint as a line\r\n              ctx.beginPath()\r\n              ctx.moveTo(constraint.objectA.position.x, constraint.objectA.position.y)\r\n              ctx.lineTo(constraint.objectB.position.x, constraint.objectB.position.y)\r\n              ctx.strokeStyle = '#00ff00'\r\n              ctx.lineWidth = 1\r\n              ctx.setLineDash([3, 3])\r\n              ctx.stroke()\r\n              ctx.setLineDash([])\r\n              ctx.closePath()\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Draw placeholder text\r\n    ctx.fillStyle = '#00ffff'\r\n    ctx.font = '20px Courier New'\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('Circuit Breaker', 180, 40)\r\n    ctx.font = '12px Courier New'\r\n    ctx.fillText('Robust Physics System Active', 180, 60)\r\n    \r\n    // Call game's render method for additional elements\r\n    if (this.game && this.game.renderGameplay) {\r\n      this.game.renderGameplay()\r\n    }\r\n\r\n    // Enhanced debug info\r\n    if (this.physicsEngine) {\r\n      const objects = this.physicsEngine.getObjects()\r\n      const dynamicObjects = objects.filter(obj => !obj.isStatic).length\r\n      const staticObjects = objects.filter(obj => obj.isStatic).length\r\n      \r\n      ctx.font = '10px Courier New'\r\n      ctx.textAlign = 'left'\r\n      ctx.fillStyle = '#00ffff'\r\n      ctx.fillText(`Objects: ${dynamicObjects} dynamic, ${staticObjects} static`, 10, 610)\r\n      ctx.fillText(`Gravity: ${this.physicsEngine.getGravity()}`, 10, 625)\r\n      \r\n      // Show collision count\r\n      if (this.physicsEngine.getCollisionManifolds) {\r\n        const collisionCount = this.physicsEngine.getCollisionManifolds().length\r\n        ctx.fillText(`Collisions: ${collisionCount}`, 200, 610)\r\n      }\r\n      \r\n      // Show physics performance info\r\n      ctx.fillText(`Physics: Optimized Verlet (1 substep)`, 10, 595)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render menu\r\n   */\r\n  private renderMenu(): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw background\r\n    ctx.fillStyle = '#1a1a1a'\r\n    ctx.fillRect(0, 0, 360, 640)\r\n\r\n    // Draw menu text\r\n    ctx.fillStyle = '#00ffff'\r\n    ctx.font = '24px Courier New'\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('CIRCUIT BREAKER', 180, 280)\r\n    ctx.font = '14px Courier New'\r\n    ctx.fillText('Neon Cyberpunk Arcade Game', 180, 310)\r\n    ctx.font = '12px Courier New'\r\n    ctx.fillText('Click to Start', 180, 350)\r\n  }\r\n\r\n  /**\r\n   * Render paused state\r\n   */\r\n  private renderPaused(): void {\r\n    if (!this.renderer) return\r\n\r\n    const ctx = this.renderer.getContext()\r\n    if (!ctx) return\r\n\r\n    // Draw paused overlay\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\r\n    ctx.fillRect(0, 0, 360, 640)\r\n\r\n    ctx.fillStyle = '#00ffff'\r\n    ctx.font = '20px Courier New'\r\n    ctx.textAlign = 'center'\r\n    ctx.fillText('PAUSED', 180, 320)\r\n  }\r\n\r\n  /**\r\n   * Pause the game loop\r\n   */\r\n  public pause(): void {\r\n    this.isPaused = true\r\n    console.log('⏸️ Game loop paused')\r\n  }\r\n\r\n  /**\r\n   * Resume the game loop\r\n   */\r\n  public resume(): void {\r\n    this.isPaused = false\r\n    console.log('▶️ Game loop resumed')\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop\r\n   */\r\n  public stop(): void {\r\n    this.isRunning = false\r\n    if (this.animationId !== null) {\r\n      cancelAnimationFrame(this.animationId)\r\n      this.animationId = null\r\n    }\r\n    console.log('⏹️ Game loop stopped')\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is running\r\n   */\r\n  public isGameLoopRunning(): boolean {\r\n    return this.isRunning\r\n  }\r\n\r\n  /**\r\n   * Check if game loop is paused\r\n   */\r\n  public isGameLoopPaused(): boolean {\r\n    return this.isPaused\r\n  }\r\n\r\n  /**\r\n   * Get current FPS\r\n   */\r\n  public getFPS(): number {\r\n    return 1000 / this.timestep\r\n  }\r\n} ","// Circuit Breaker - Debug Utilities\r\n// Development and debugging tools\r\n\r\nexport class Debug {\r\n  private static isEnabled: boolean = true\r\n  private static logs: string[] = []\r\n  private static maxLogs: number = 100\r\n\r\n  /**\r\n   * Enable or disable debug mode\r\n   */\r\n  public static setEnabled(enabled: boolean): void {\r\n    this.isEnabled = enabled\r\n  }\r\n\r\n  /**\r\n   * Log a debug message\r\n   */\r\n  public static log(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] ${message}`\r\n    \r\n    console.log(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Log a warning message\r\n   */\r\n  public static warn(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] WARNING: ${message}`\r\n    \r\n    console.warn(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Log an error message\r\n   */\r\n  public static error(message: string, ...args: any[]): void {\r\n    if (!this.isEnabled) return\r\n\r\n    const timestamp = new Date().toISOString()\r\n    const logMessage = `[${timestamp}] ERROR: ${message}`\r\n    \r\n    console.error(logMessage, ...args)\r\n    this.addToLogs(logMessage)\r\n  }\r\n\r\n  /**\r\n   * Add message to internal logs\r\n   */\r\n  private static addToLogs(message: string): void {\r\n    this.logs.push(message)\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all debug logs\r\n   */\r\n  public static getLogs(): string[] {\r\n    return [...this.logs]\r\n  }\r\n\r\n  /**\r\n   * Clear all debug logs\r\n   */\r\n  public static clearLogs(): void {\r\n    this.logs = []\r\n  }\r\n\r\n  /**\r\n   * Measure performance of a function\r\n   */\r\n  public static measurePerformance<T>(name: string, fn: () => T): T {\r\n    if (!this.isEnabled) return fn()\r\n\r\n    const start = performance.now()\r\n    const result = fn()\r\n    const end = performance.now()\r\n    \r\n    this.log(`Performance [${name}]: ${(end - start).toFixed(2)}ms`)\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Create a performance timer\r\n   */\r\n  public static createTimer(name: string): () => void {\r\n    const start = performance.now()\r\n    return () => {\r\n      const end = performance.now()\r\n      this.log(`Timer [${name}]: ${(end - start).toFixed(2)}ms`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assert a condition\r\n   */\r\n  public static assert(condition: boolean, message: string): void {\r\n    if (!this.isEnabled) return\r\n\r\n    if (!condition) {\r\n      this.error(`Assertion failed: ${message}`)\r\n      throw new Error(`Assertion failed: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get memory usage info\r\n   */\r\n  public static getMemoryInfo(): object {\r\n    if (!this.isEnabled) return {}\r\n\r\n    // Note: This is limited in browsers, but useful for debugging\r\n    return {\r\n      logsCount: this.logs.length,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export debug info\r\n   */\r\n  public static exportDebugInfo(): object {\r\n    return {\r\n      enabled: this.isEnabled,\r\n      logs: this.getLogs(),\r\n      memory: this.getMemoryInfo()\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Renderer\r\n// Handles canvas drawing and visual effects\r\n\r\nimport { Debug } from '../utils/Debug'\r\n\r\nexport class Renderer {\r\n  private canvas: HTMLCanvasElement | null = null\r\n  private ctx: CanvasRenderingContext2D | null = null\r\n  private width: number = 800\r\n  private height: number = 600\r\n\r\n  constructor() {\r\n    Debug.log('🎨 Renderer initialized')\r\n  }\r\n\r\n  /**\r\n   * Initialize the renderer with a canvas\r\n   */\r\n  public init(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas\r\n    this.ctx = canvas.getContext('2d')\r\n    \r\n    if (!this.ctx) {\r\n      throw new Error('Failed to get 2D context from canvas')\r\n    }\r\n\r\n    this.width = canvas.width\r\n    this.height = canvas.height\r\n    \r\n    Debug.log(`Renderer initialized with canvas: ${this.width}x${this.height}`)\r\n  }\r\n\r\n  /**\r\n   * Clear the canvas\r\n   */\r\n  public clear(): void {\r\n    if (!this.ctx) return\r\n    \r\n    this.ctx.clearRect(0, 0, this.width, this.height)\r\n  }\r\n\r\n  /**\r\n   * Render the game\r\n   */\r\n  public render(): void {\r\n    if (!this.ctx) return\r\n\r\n    // TODO: Implement rendering\r\n    // - Clear canvas\r\n    // - Draw background\r\n    // - Draw game objects\r\n    // - Draw UI elements\r\n    // - Apply visual effects\r\n  }\r\n\r\n  /**\r\n   * Draw a tilting bar with neon cyberpunk styling\r\n   */\r\n  public drawTiltingBar(bar: any): void {\r\n    if (!this.ctx) return\r\n\r\n    const endpoints = bar.getEndpoints()\r\n    \r\n    // Save context\r\n    this.ctx.save()\r\n    \r\n    // Draw glow effect\r\n    this.ctx.shadowColor = bar.glowColor\r\n    this.ctx.shadowBlur = 20\r\n    this.ctx.lineWidth = bar.thickness + 4\r\n    this.ctx.strokeStyle = bar.glowColor\r\n    this.ctx.globalAlpha = 0.3\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y)\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y)\r\n    this.ctx.stroke()\r\n    \r\n    // Draw main bar\r\n    this.ctx.shadowBlur = 0\r\n    this.ctx.globalAlpha = 1\r\n    this.ctx.lineWidth = bar.thickness\r\n    this.ctx.strokeStyle = bar.color\r\n    \r\n    this.ctx.beginPath()\r\n    this.ctx.moveTo(endpoints.start.x, endpoints.start.y)\r\n    this.ctx.lineTo(endpoints.end.x, endpoints.end.y)\r\n    this.ctx.stroke()\r\n    \r\n    // Draw center pivot point\r\n    this.ctx.fillStyle = bar.color\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(bar.position.x, bar.position.y, 6, 0, Math.PI * 2)\r\n    this.ctx.fill()\r\n    \r\n    // Draw side height indicators\r\n    this.ctx.fillStyle = `rgba(0, 255, 255, 0.7)`\r\n    this.ctx.font = '12px monospace'\r\n    this.ctx.textAlign = 'center'\r\n    \r\n    // Left side indicator (show as height from bottom)\r\n    const leftHeight = 640 - bar.leftSideHeight\r\n    this.ctx.fillText(`L: ${leftHeight.toFixed(0)}`, bar.position.x - bar.width/4, Math.min(bar.leftSideHeight, bar.rightSideHeight) - 25)\r\n    \r\n    // Right side indicator (show as height from bottom)\r\n    const rightHeight = 640 - bar.rightSideHeight\r\n    this.ctx.fillText(`R: ${rightHeight.toFixed(0)}`, bar.position.x + bar.width/4, Math.min(bar.leftSideHeight, bar.rightSideHeight) - 25)\r\n    \r\n    // Overall tilt indicator\r\n    const tiltPercentage = bar.getTiltPercentage()\r\n    this.ctx.fillText(`Tilt: ${(tiltPercentage * 100).toFixed(0)}%`, bar.position.x, Math.min(bar.leftSideHeight, bar.rightSideHeight) - 40)\r\n    \r\n    // Restore context\r\n    this.ctx.restore()\r\n  }\r\n\r\n  /**\r\n   * Get canvas context\r\n   */\r\n  public getContext(): CanvasRenderingContext2D | null {\r\n    return this.ctx\r\n  }\r\n\r\n  /**\r\n   * Get canvas dimensions\r\n   */\r\n  public getDimensions(): { width: number; height: number } {\r\n    return { width: this.width, height: this.height }\r\n  }\r\n\r\n  /**\r\n   * Resize the renderer\r\n   */\r\n  public resize(width: number, height: number): void {\r\n    if (!this.canvas) return\r\n\r\n    this.width = width\r\n    this.height = height\r\n    this.canvas.width = width\r\n    this.canvas.height = height\r\n    \r\n    Debug.log(`Renderer resized to: ${width}x${height}`)\r\n  }\r\n} ","// Circuit Breaker - Advanced Physics Engine\r\n// Robust Verlet integration with constraint solving and accurate collision detection\r\n\r\nimport { Debug } from '../utils/Debug'\r\n\r\nexport interface PhysicsObject {\r\n  id: string\r\n  position: { x: number; y: number }\r\n  previousPosition: { x: number; y: number }\r\n  acceleration: { x: number; y: number }\r\n  velocity: { x: number; y: number }\r\n  radius: number\r\n  mass: number\r\n  inverseMass: number // 1/mass for performance\r\n  restitution: number // Bounciness (0-1)\r\n  friction: number // Surface friction (0-1)\r\n  isStatic: boolean\r\n  constraints: Constraint[]\r\n  \r\n  // For backward compatibility\r\n  x?: number\r\n  y?: number\r\n  vx?: number\r\n  vy?: number\r\n  type?: 'dynamic' | 'static'\r\n  rotation?: number\r\n  width?: number\r\n  height?: number\r\n  \r\n  // Rolling physics state\r\n  isRollingOnBar?: boolean\r\n}\r\n\r\nexport interface Constraint {\r\n  type: 'distance' | 'position' | 'angle'\r\n  objectA: PhysicsObject\r\n  objectB?: PhysicsObject\r\n  targetDistance?: number\r\n  targetPosition?: { x: number; y: number }\r\n  targetAngle?: number\r\n  stiffness: number\r\n  restLength?: number\r\n}\r\n\r\nexport interface CollisionManifold {\r\n  objectA: PhysicsObject\r\n  objectB: PhysicsObject\r\n  normal: { x: number; y: number }\r\n  penetration: number\r\n  contactPoint: { x: number; y: number }\r\n}\r\n\r\ninterface SpatialCell {\r\n  objects: PhysicsObject[]\r\n}\r\n\r\nexport class PhysicsEngine {\r\n  private gravity: { x: number; y: number } = { x: 0, y: 400 }\r\n  private airResistance: number = 0.999\r\n  private objects: PhysicsObject[] = []\r\n  private constraints: Constraint[] = []\r\n  private spatialGrid: Map<string, SpatialCell> = new Map()\r\n  private gridSize: number = 60\r\n  private tiltingBar: any = null\r\n  private bounds = { width: 360, height: 640 }\r\n  \r\n  // Simulation parameters (optimized for performance)\r\n  private deltaTime: number = 1 / 60\r\n  \r\n  // Performance tracking\r\n  private debug: boolean = false\r\n  private collisionManifolds: CollisionManifold[] = []\r\n\r\n  constructor() {\r\n    Debug.log('⚡ Advanced PhysicsEngine initialized with Verlet integration')\r\n  }\r\n\r\n  /**\r\n   * Set the tilting bar reference for collision detection\r\n   */\r\n  public setTiltingBar(bar: any): void {\r\n    this.tiltingBar = bar\r\n  }\r\n\r\n  /**\r\n   * Create a physics object with proper initialization\r\n   */\r\n  public createObject(config: {\r\n    id: string\r\n    x: number\r\n    y: number\r\n    radius: number\r\n    mass?: number\r\n    restitution?: number\r\n    friction?: number\r\n    isStatic?: boolean\r\n  }): PhysicsObject {\r\n    const mass = config.mass || 1\r\n    const obj: PhysicsObject = {\r\n      id: config.id,\r\n      position: { x: config.x, y: config.y },\r\n      previousPosition: { x: config.x, y: config.y },\r\n      acceleration: { x: 0, y: 0 },\r\n      velocity: { x: 0, y: 0 },\r\n      radius: config.radius,\r\n      mass: mass,\r\n      inverseMass: config.isStatic ? 0 : 1 / mass,\r\n      restitution: config.restitution || 0.7,\r\n      friction: config.friction || 0.3,\r\n      isStatic: config.isStatic || false,\r\n      constraints: [],\r\n      // Backward compatibility\r\n      x: config.x,\r\n      y: config.y,\r\n      vx: 0,\r\n      vy: 0\r\n    }\r\n    \r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * Add a physics object to the simulation\r\n   */\r\n  public addObject(obj: PhysicsObject): void {\r\n    // Ensure proper initialization if not created with createObject\r\n    if (!obj.previousPosition) {\r\n      obj.previousPosition = { x: obj.position?.x || obj.x || 0, y: obj.position?.y || obj.y || 0 }\r\n    }\r\n    if (!obj.acceleration) {\r\n      obj.acceleration = { x: 0, y: 0 }\r\n    }\r\n    if (!obj.velocity) {\r\n      obj.velocity = { x: 0, y: 0 }\r\n    }\r\n    if (!obj.inverseMass) {\r\n      obj.inverseMass = obj.isStatic ? 0 : 1 / (obj.mass || 1)\r\n    }\r\n    if (!obj.constraints) {\r\n      obj.constraints = []\r\n    }\r\n    \r\n    this.objects.push(obj)\r\n    this.updateSpatialGrid()\r\n    Debug.log(`Added physics object: ${obj.id}`)\r\n  }\r\n\r\n  /**\r\n   * Remove a physics object by id\r\n   */\r\n  public removeObject(id: string): void {\r\n    this.objects = this.objects.filter(obj => obj.id !== id)\r\n    this.updateSpatialGrid()\r\n    Debug.log(`Removed physics object: ${id}`)\r\n  }\r\n\r\n  /**\r\n   * Add a constraint between objects\r\n   */\r\n  public addConstraint(constraint: Constraint): void {\r\n    this.constraints.push(constraint)\r\n    Debug.log(`Added constraint: ${constraint.type}`)\r\n  }\r\n\r\n  /**\r\n   * Main physics update (optimized for performance)\r\n   */\r\n  public update(frameTime: number): void {\r\n    // Simple direct update instead of fixed timestep for better performance\r\n    const dt = Math.min(frameTime, 1/30) // Cap at 30fps minimum\r\n    this.simulateStep(dt)\r\n    \r\n    // Update backward compatibility properties\r\n    this.updateBackwardCompatibility()\r\n  }\r\n\r\n  /**\r\n   * Single physics simulation step (optimized)\r\n   */\r\n  private simulateStep(dt: number): void {\r\n    // Clear collision manifolds and rolling flags\r\n    this.collisionManifolds = []\r\n    for (const obj of this.objects) {\r\n      obj.isRollingOnBar = false\r\n    }\r\n    \r\n    // Update spatial grid only when needed\r\n    if (this.objects.length > 0) {\r\n      this.updateSpatialGrid()\r\n    }\r\n    \r\n    // Integrate positions using simplified Verlet integration\r\n    this.integratePositions(dt)\r\n    \r\n    // Single iteration of constraints and collisions for performance\r\n    this.solveConstraints()\r\n    this.detectAndResolveCollisions()\r\n    \r\n    // Handle tilting bar collisions and rolling physics\r\n    this.handleTiltingBarCollisions()\r\n    \r\n    // Handle boundary collisions\r\n    this.handleBoundaryCollisions()\r\n    \r\n    // Update velocities from position changes\r\n    this.updateVelocities(dt)\r\n  }\r\n\r\n  /**\r\n   * Simplified Verlet integration for position updates\r\n   */\r\n  private integratePositions(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      // Calculate current velocity\r\n      const velX = obj.position.x - obj.previousPosition.x\r\n      const velY = obj.position.y - obj.previousPosition.y\r\n      \r\n      // Store current position as previous\r\n      obj.previousPosition.x = obj.position.x\r\n      obj.previousPosition.y = obj.position.y\r\n      \r\n      // Update position with velocity and gravity\r\n      obj.position.x += velX * this.airResistance + this.gravity.x * dt * dt\r\n      obj.position.y += velY * this.airResistance + this.gravity.y * dt * dt\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocities from position changes\r\n   */\r\n  private updateVelocities(dt: number): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      obj.velocity.x = (obj.position.x - obj.previousPosition.x) / dt\r\n      obj.velocity.y = (obj.position.y - obj.previousPosition.y) / dt\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve all constraints\r\n   */\r\n  private solveConstraints(): void {\r\n    for (const constraint of this.constraints) {\r\n      this.solveConstraint(constraint)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve individual constraint\r\n   */\r\n  private solveConstraint(constraint: Constraint): void {\r\n    switch (constraint.type) {\r\n      case 'distance':\r\n        this.solveDistanceConstraint(constraint)\r\n        break\r\n      case 'position':\r\n        this.solvePositionConstraint(constraint)\r\n        break\r\n      case 'angle':\r\n        this.solveAngleConstraint(constraint)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve distance constraint between two objects\r\n   */\r\n  private solveDistanceConstraint(constraint: Constraint): void {\r\n    if (!constraint.objectB || !constraint.targetDistance) return\r\n    \r\n    const objA = constraint.objectA\r\n    const objB = constraint.objectB\r\n    \r\n    const dx = objB.position.x - objA.position.x\r\n    const dy = objB.position.y - objA.position.y\r\n    const distance = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (distance === 0) return\r\n    \r\n    const difference = constraint.targetDistance - distance\r\n    const percent = difference / distance / 2\r\n    const offsetX = dx * percent * constraint.stiffness\r\n    const offsetY = dy * percent * constraint.stiffness\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.position.x -= offsetX * objA.inverseMass\r\n      objA.position.y -= offsetY * objA.inverseMass\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.position.x += offsetX * objB.inverseMass\r\n      objB.position.y += offsetY * objB.inverseMass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solve position constraint (pin object to position)\r\n   */\r\n  private solvePositionConstraint(constraint: Constraint): void {\r\n    if (!constraint.targetPosition) return\r\n    \r\n    const obj = constraint.objectA\r\n    if (obj.isStatic) return\r\n    \r\n    const dx = constraint.targetPosition.x - obj.position.x\r\n    const dy = constraint.targetPosition.y - obj.position.y\r\n    \r\n    obj.position.x += dx * constraint.stiffness\r\n    obj.position.y += dy * constraint.stiffness\r\n  }\r\n\r\n  /**\r\n   * Solve angle constraint (maintain angle between objects)\r\n   */\r\n  private solveAngleConstraint(_constraint: Constraint): void {\r\n    // Implementation for angle constraints if needed\r\n    // This is more complex and depends on specific requirements\r\n  }\r\n\r\n  /**\r\n   * Detect and resolve collisions between objects (optimized)\r\n   */\r\n  private detectAndResolveCollisions(): void {\r\n    // Only check collisions if we have multiple objects\r\n    if (this.objects.length < 2) return\r\n    \r\n    for (let i = 0; i < this.objects.length; i++) {\r\n      const obj = this.objects[i]\r\n      if (obj.isStatic) continue\r\n      \r\n      // Check only against objects after this one to avoid duplicate checks\r\n      for (let j = i + 1; j < this.objects.length; j++) {\r\n        const otherObj = this.objects[j]\r\n        \r\n        // Quick distance check before expensive collision detection\r\n        const dx = otherObj.position.x - obj.position.x\r\n        const dy = otherObj.position.y - obj.position.y\r\n        const maxDistance = obj.radius + otherObj.radius + 5 // Small buffer\r\n        \r\n        if (dx * dx + dy * dy < maxDistance * maxDistance) {\r\n          const manifold = this.detectCollision(obj, otherObj)\r\n          if (manifold) {\r\n            this.collisionManifolds.push(manifold)\r\n            this.resolveCollisionSimple(manifold)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect collision between two objects\r\n   */\r\n  private detectCollision(objA: PhysicsObject, objB: PhysicsObject): CollisionManifold | null {\r\n    const dx = objB.position.x - objA.position.x\r\n    const dy = objB.position.y - objA.position.y\r\n    const distance = Math.sqrt(dx * dx + dy * dy)\r\n    const minDistance = objA.radius + objB.radius\r\n    \r\n    if (distance < minDistance) {\r\n      const penetration = minDistance - distance\r\n      const normal = distance > 0 ? { x: dx / distance, y: dy / distance } : { x: 1, y: 0 }\r\n      \r\n      return {\r\n        objectA: objA,\r\n        objectB: objB,\r\n        normal: normal,\r\n        penetration: penetration,\r\n        contactPoint: {\r\n          x: objA.position.x + normal.x * objA.radius,\r\n          y: objA.position.y + normal.y * objA.radius\r\n        }\r\n      }\r\n    }\r\n    \r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Resolve collision using impulse-based method\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private resolveCollision(manifold: CollisionManifold): void {\r\n    const objA = manifold.objectA\r\n    const objB = manifold.objectB\r\n    \r\n    // Position correction to prevent sinking\r\n    const correction = manifold.penetration / (objA.inverseMass + objB.inverseMass) * 0.8\r\n    objA.position.x -= manifold.normal.x * correction * objA.inverseMass\r\n    objA.position.y -= manifold.normal.y * correction * objA.inverseMass\r\n    objB.position.x += manifold.normal.x * correction * objB.inverseMass\r\n    objB.position.y += manifold.normal.y * correction * objB.inverseMass\r\n    \r\n    // Velocity correction\r\n    const relativeVelocity = {\r\n      x: objB.velocity.x - objA.velocity.x,\r\n      y: objB.velocity.y - objA.velocity.y\r\n    }\r\n    \r\n    const velocityAlongNormal = relativeVelocity.x * manifold.normal.x + relativeVelocity.y * manifold.normal.y\r\n    \r\n    if (velocityAlongNormal > 0) return // Objects separating\r\n    \r\n    const restitution = Math.min(objA.restitution, objB.restitution)\r\n    const impulseScalar = -(1 + restitution) * velocityAlongNormal / (objA.inverseMass + objB.inverseMass)\r\n    \r\n    const impulse = {\r\n      x: impulseScalar * manifold.normal.x,\r\n      y: impulseScalar * manifold.normal.y\r\n    }\r\n    \r\n    // Apply impulse to velocities (which affects next frame's position)\r\n    if (!objA.isStatic) {\r\n      objA.previousPosition.x -= impulse.x * objA.inverseMass\r\n      objA.previousPosition.y -= impulse.y * objA.inverseMass\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.previousPosition.x += impulse.x * objB.inverseMass\r\n      objB.previousPosition.y += impulse.y * objB.inverseMass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simplified collision resolution for better performance\r\n   */\r\n  private resolveCollisionSimple(manifold: CollisionManifold): void {\r\n    const objA = manifold.objectA\r\n    const objB = manifold.objectB\r\n    \r\n    // Simple position separation\r\n    const separationX = manifold.normal.x * manifold.penetration * 0.5\r\n    const separationY = manifold.normal.y * manifold.penetration * 0.5\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.position.x -= separationX\r\n      objA.position.y -= separationY\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.position.x += separationX\r\n      objB.position.y += separationY\r\n    }\r\n    \r\n    // Simple velocity reflection\r\n    const relativeVelocity = {\r\n      x: objB.velocity.x - objA.velocity.x,\r\n      y: objB.velocity.y - objA.velocity.y\r\n    }\r\n    \r\n    const velocityAlongNormal = relativeVelocity.x * manifold.normal.x + relativeVelocity.y * manifold.normal.y\r\n    \r\n    if (velocityAlongNormal > 0) return // Objects separating\r\n    \r\n    const restitution = Math.min(objA.restitution, objB.restitution) * 0.8 // Reduced for stability\r\n    const impulse = velocityAlongNormal * restitution\r\n    \r\n    if (!objA.isStatic) {\r\n      objA.previousPosition.x += manifold.normal.x * impulse * 0.5\r\n      objA.previousPosition.y += manifold.normal.y * impulse * 0.5\r\n    }\r\n    \r\n    if (!objB.isStatic) {\r\n      objB.previousPosition.x -= manifold.normal.x * impulse * 0.5\r\n      objB.previousPosition.y -= manifold.normal.y * impulse * 0.5\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle tilting bar collisions with realistic rolling physics\r\n   */\r\n  private handleTiltingBarCollisions(): void {\r\n    if (!this.tiltingBar) return\r\n    \r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      const endpoints = this.tiltingBar.getEndpoints()\r\n      const closestPointOnCenterLine = this.getClosestPointOnLineSegment(obj.position, endpoints.start, endpoints.end)\r\n      const distanceToCenterLine = Math.sqrt((obj.position.x - closestPointOnCenterLine.x) ** 2 + (obj.position.y - closestPointOnCenterLine.y) ** 2)\r\n      \r\n      // Account for bar thickness - collision happens when ball touches the bar surface\r\n      const barThickness = this.tiltingBar.thickness || 12\r\n      const barSurfaceDistance = barThickness / 2\r\n      const collisionDistance = obj.radius + barSurfaceDistance\r\n      \r\n      if (distanceToCenterLine < collisionDistance) {\r\n        // Calculate bar vectors\r\n        const barVec = { x: endpoints.end.x - endpoints.start.x, y: endpoints.end.y - endpoints.start.y }\r\n        const barLength = Math.sqrt(barVec.x * barVec.x + barVec.y * barVec.y)\r\n        const barTangent = { x: barVec.x / barLength, y: barVec.y / barLength } // Along the bar\r\n        const barNormal = { x: -barVec.y / barLength, y: barVec.x / barLength } // Perpendicular to bar\r\n        \r\n        // Ensure normal points away from bar (upward)\r\n        if (barNormal.y > 0) {\r\n          barNormal.x = -barNormal.x\r\n          barNormal.y = -barNormal.y\r\n        }\r\n        \r\n        // Calculate the actual collision point on the bar surface\r\n        const barSurfacePoint = {\r\n          x: closestPointOnCenterLine.x + barNormal.x * barSurfaceDistance,\r\n          y: closestPointOnCenterLine.y + barNormal.y * barSurfaceDistance\r\n        }\r\n        \r\n        // Position correction - place ball exactly at collision distance from bar surface\r\n        obj.position.x = barSurfacePoint.x + barNormal.x * obj.radius\r\n        obj.position.y = barSurfacePoint.y + barNormal.y * obj.radius\r\n        \r\n        // Current velocity\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        \r\n        const velocityAlongNormal = velocity.x * barNormal.x + velocity.y * barNormal.y\r\n        const velocityAlongTangent = velocity.x * barTangent.x + velocity.y * barTangent.y\r\n        \r\n        // Check if ball is moving into the bar (collision) or resting on it\r\n        if (velocityAlongNormal < -0.5) {\r\n          // High-speed collision - reflect velocity\r\n          const restitution = obj.restitution * 0.8 // Reduced bounce on bar\r\n          const friction = this.tiltingBar.friction || 0.3\r\n          \r\n          const reflectedVelocity = {\r\n            x: velocity.x - 2 * velocityAlongNormal * barNormal.x,\r\n            y: velocity.y - 2 * velocityAlongNormal * barNormal.y\r\n          }\r\n          \r\n          // Apply restitution and friction\r\n          reflectedVelocity.x *= restitution * (1 - friction)\r\n          reflectedVelocity.y *= restitution\r\n          \r\n          // Update previous position to reflect new velocity\r\n          obj.previousPosition.x = obj.position.x - reflectedVelocity.x\r\n          obj.previousPosition.y = obj.position.y - reflectedVelocity.y\r\n        } else {\r\n          // Ball is resting on or gently touching the bar - apply rolling physics\r\n          this.applyRollingPhysics(obj, barTangent, barNormal, velocityAlongTangent, this.deltaTime)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply realistic rolling physics when ball is on the tilted bar\r\n   */\r\n  private applyRollingPhysics(obj: any, barTangent: { x: number; y: number }, _barNormal: { x: number; y: number }, currentTangentVelocity: number, dt: number): void {\r\n    // Calculate the component of gravity along the bar slope\r\n    const gravityAlongSlope = this.gravity.x * barTangent.x + this.gravity.y * barTangent.y\r\n    \r\n    // Rolling resistance and friction\r\n    const rollingFriction = this.tiltingBar.friction || 0.05\r\n    const rollingResistance = 0.01 // Small resistance to rolling (reduced for smoother motion)\r\n    \r\n    // Calculate acceleration along the slope\r\n    let slopeAcceleration = gravityAlongSlope\r\n    \r\n    // Apply rolling resistance (opposes motion)\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const resistanceForce = -Math.sign(currentTangentVelocity) * rollingResistance * Math.abs(this.gravity.y)\r\n      slopeAcceleration += resistanceForce\r\n    }\r\n    \r\n    // Apply friction if ball is moving along the slope\r\n    if (Math.abs(currentTangentVelocity) > 0.5) {\r\n      const frictionForce = -Math.sign(currentTangentVelocity) * rollingFriction * Math.abs(this.gravity.y)\r\n      slopeAcceleration += frictionForce\r\n    }\r\n    \r\n    // Calculate new velocity along the slope\r\n    const newTangentVelocity = currentTangentVelocity + slopeAcceleration * dt\r\n    \r\n    // Apply the new velocity (only along the tangent, no normal component)\r\n    const newVelocity = {\r\n      x: newTangentVelocity * barTangent.x,\r\n      y: newTangentVelocity * barTangent.y\r\n    }\r\n    \r\n    // Update previous position to reflect rolling motion\r\n    obj.previousPosition.x = obj.position.x - newVelocity.x\r\n    obj.previousPosition.y = obj.position.y - newVelocity.y\r\n    \r\n    // Update velocity for backward compatibility\r\n    obj.velocity.x = newVelocity.x\r\n    obj.velocity.y = newVelocity.y\r\n    \r\n    // Mark that this object is currently rolling on the bar (for debugging/gameplay)\r\n    obj.isRollingOnBar = true\r\n  }\r\n\r\n  /**\r\n   * Check if a ball is currently in contact with the tilting bar\r\n   */\r\n  public isBallOnBar(ballId: string): boolean {\r\n    const ball = this.objects.find(obj => obj.id === ballId)\r\n    if (!ball || !this.tiltingBar) return false\r\n    \r\n    const endpoints = this.tiltingBar.getEndpoints()\r\n    const closestPoint = this.getClosestPointOnLineSegment(ball.position, endpoints.start, endpoints.end)\r\n    const distance = Math.sqrt((ball.position.x - closestPoint.x) ** 2 + (ball.position.y - closestPoint.y) ** 2)\r\n    \r\n    const barThickness = this.tiltingBar.thickness || 12\r\n    const collisionDistance = ball.radius + barThickness / 2\r\n    \r\n    return distance <= collisionDistance + 2 // Small tolerance\r\n  }\r\n\r\n  /**\r\n   * Handle boundary collisions\r\n   */\r\n  private handleBoundaryCollisions(): void {\r\n    for (const obj of this.objects) {\r\n      if (obj.isStatic) continue\r\n      \r\n      // Floor collision\r\n      if (obj.position.y + obj.radius > this.bounds.height) {\r\n        obj.position.y = this.bounds.height - obj.radius\r\n        \r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        \r\n        if (velocity.y > 0) {\r\n          obj.previousPosition.y = obj.position.y + velocity.y * obj.restitution\r\n          obj.previousPosition.x = obj.position.x - velocity.x * 0.8 // Floor friction\r\n        }\r\n      }\r\n      \r\n      // Side walls\r\n      if (obj.position.x - obj.radius < 0) {\r\n        obj.position.x = obj.radius\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        if (velocity.x < 0) {\r\n          obj.previousPosition.x = obj.position.x + velocity.x * obj.restitution\r\n        }\r\n      } else if (obj.position.x + obj.radius > this.bounds.width) {\r\n        obj.position.x = this.bounds.width - obj.radius\r\n        const velocity = {\r\n          x: obj.position.x - obj.previousPosition.x,\r\n          y: obj.position.y - obj.previousPosition.y\r\n        }\r\n        if (velocity.x > 0) {\r\n          obj.previousPosition.x = obj.position.x + velocity.x * obj.restitution\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update backward compatibility properties\r\n   */\r\n  private updateBackwardCompatibility(): void {\r\n    for (const obj of this.objects) {\r\n      obj.x = obj.position.x\r\n      obj.y = obj.position.y\r\n      obj.vx = obj.velocity.x\r\n      obj.vy = obj.velocity.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update spatial partitioning grid (optimized)\r\n   */\r\n  private updateSpatialGrid(): void {\r\n    // Skip spatial grid for small number of objects\r\n    if (this.objects.length <= 3) return\r\n    \r\n    this.spatialGrid.clear()\r\n    \r\n    for (const obj of this.objects) {\r\n      const cells = this.getObjectCells(obj)\r\n      for (const cellKey of cells) {\r\n        if (!this.spatialGrid.has(cellKey)) {\r\n          this.spatialGrid.set(cellKey, { objects: [] })\r\n        }\r\n        this.spatialGrid.get(cellKey)!.objects.push(obj)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get grid cells that an object occupies\r\n   */\r\n  private getObjectCells(obj: PhysicsObject): string[] {\r\n    const cells: string[] = []\r\n    const radius = obj.radius\r\n    const minX = Math.floor((obj.position.x - radius) / this.gridSize)\r\n    const maxX = Math.floor((obj.position.x + radius) / this.gridSize)\r\n    const minY = Math.floor((obj.position.y - radius) / this.gridSize)\r\n    const maxY = Math.floor((obj.position.y + radius) / this.gridSize)\r\n\r\n    for (let x = minX; x <= maxX; x++) {\r\n      for (let y = minY; y <= maxY; y++) {\r\n        cells.push(`${x},${y}`)\r\n      }\r\n    }\r\n    return cells\r\n  }\r\n\r\n  /**\r\n   * Get objects in nearby cells for collision detection\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private getNearbyObjects(obj: PhysicsObject): PhysicsObject[] {\r\n    const nearby: PhysicsObject[] = []\r\n    const cells = this.getObjectCells(obj)\r\n    \r\n    for (const cellKey of cells) {\r\n      const cell = this.spatialGrid.get(cellKey)\r\n      if (cell) {\r\n        for (const otherObj of cell.objects) {\r\n          if (otherObj.id !== obj.id && !nearby.includes(otherObj)) {\r\n            nearby.push(otherObj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return nearby\r\n  }\r\n\r\n  /**\r\n   * Get closest point on line segment to a point\r\n   */\r\n  private getClosestPointOnLineSegment(point: { x: number; y: number }, lineStart: { x: number; y: number }, lineEnd: { x: number; y: number }): { x: number; y: number } {\r\n    const dx = lineEnd.x - lineStart.x\r\n    const dy = lineEnd.y - lineStart.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return lineStart\r\n    \r\n    const t = Math.max(0, Math.min(1, ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / (length * length)))\r\n    \r\n    return {\r\n      x: lineStart.x + t * dx,\r\n      y: lineStart.y + t * dy\r\n    }\r\n  }\r\n\r\n  // Public API methods\r\n  public getObjects(): PhysicsObject[] {\r\n    return this.objects\r\n  }\r\n\r\n  public setGravity(x: number, y: number): void {\r\n    this.gravity.x = x\r\n    this.gravity.y = y\r\n    Debug.log(`Gravity set to: (${x}, ${y})`)\r\n  }\r\n\r\n  public setAirResistance(resistance: number): void {\r\n    this.airResistance = Math.max(0, Math.min(1, resistance))\r\n    Debug.log(`Air resistance set to: ${this.airResistance}`)\r\n  }\r\n\r\n  public setBounds(width: number, height: number): void {\r\n    this.bounds.width = width\r\n    this.bounds.height = height\r\n    Debug.log(`Physics bounds set to: ${width}x${height}`)\r\n  }\r\n\r\n  public setDebug(enabled: boolean): void {\r\n    this.debug = enabled\r\n  }\r\n\r\n  public getDebug(): boolean {\r\n    return this.debug\r\n  }\r\n\r\n  public getCollisionManifolds(): CollisionManifold[] {\r\n    return this.collisionManifolds\r\n  }\r\n\r\n  public getConstraints(): Constraint[] {\r\n    return this.constraints\r\n  }\r\n\r\n  // Legacy compatibility methods\r\n  public getFriction(): number {\r\n    return 0.98 // Return a default value for compatibility\r\n  }\r\n\r\n  public getBounceEnergy(): number {\r\n    return 0.7 // Return a default value for compatibility\r\n  }\r\n\r\n  public getGravity(): number {\r\n    return this.gravity.y // Return Y gravity for compatibility\r\n  }\r\n\r\n  public setFriction(_friction: number): void {\r\n    Debug.log(`Legacy friction setting ignored - use per-object friction instead`)\r\n  }\r\n\r\n  public setBounceEnergy(_energy: number): void {\r\n    Debug.log(`Legacy bounce energy setting ignored - use per-object restitution instead`)\r\n  }\r\n} ","import { Vector2 } from '../utils/MathUtils'\r\n\r\nexport interface TiltingBarConfig {\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n  maxRotation: number // Maximum rotation angle in radians\r\n  rotationSpeed: number // How fast the bar rotates\r\n  friction: number // Surface friction for ball interactions\r\n}\r\n\r\nexport class TiltingBar {\r\n  public position: Vector2\r\n  public rotation: number = 0\r\n  public targetRotation: number = 0\r\n  public leftSideHeight: number = 590 // Absolute Y position for left side (start at bottom)\r\n  public rightSideHeight: number = 590 // Absolute Y position for right side (start at bottom)\r\n  public minSideHeight: number = 50 // Minimum height (top of screen area)\r\n  public maxSideHeight: number = 590 // Maximum height (bottom of screen)\r\n  public sideSpeed: number = 100 // Speed of side height changes\r\n  public width: number\r\n  public height: number\r\n  public maxRotation: number\r\n  public rotationSpeed: number\r\n  public friction: number\r\n  \r\n  // Visual properties\r\n  public color: string = '#00ffff' // Neon cyan\r\n  public glowColor: string = '#0088ff'\r\n  public thickness: number = 12 // Increased thickness for better collision\r\n\r\n  constructor(config: TiltingBarConfig) {\r\n    this.position = { ...config.position }\r\n    this.width = config.width\r\n    this.height = config.height\r\n    this.maxRotation = config.maxRotation\r\n    this.rotationSpeed = config.rotationSpeed\r\n    this.friction = config.friction\r\n  }\r\n\r\n  /**\r\n   * Set the target rotation angle (will be clamped to maxRotation)\r\n   */\r\n  public setTargetRotation(angle: number): void {\r\n    this.targetRotation = Math.max(-this.maxRotation, Math.min(this.maxRotation, angle))\r\n  }\r\n\r\n  /**\r\n   * Move left side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveLeftSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.leftSideHeight -= input * this.sideSpeed * (1/60) // Move up (negative) or down (positive)\r\n      this.leftSideHeight = Math.max(this.minSideHeight, Math.min(this.maxSideHeight, this.leftSideHeight))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move right side up or down based on input (1 = up, -1 = down, 0 = no movement)\r\n   */\r\n  public moveRightSide(input: number): void {\r\n    if (input !== 0) {\r\n      this.rightSideHeight -= input * this.sideSpeed * (1/60) // Move up (negative) or down (positive)\r\n      this.rightSideHeight = Math.max(this.minSideHeight, Math.min(this.maxSideHeight, this.rightSideHeight))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current tilt as a percentage (-1 to 1)\r\n   */\r\n  public getTiltPercentage(): number {\r\n    return this.rotation / this.maxRotation\r\n  }\r\n\r\n  /**\r\n   * Update the bar's rotation based on current side heights\r\n   */\r\n  public update(_deltaTime: number): void {\r\n    // Calculate rotation based on height difference\r\n    const heightDifference = this.rightSideHeight - this.leftSideHeight\r\n    const maxHeightRange = this.maxSideHeight - this.minSideHeight\r\n    this.rotation = (heightDifference / maxHeightRange) * this.maxRotation\r\n    \r\n    // Also update targetRotation for compatibility\r\n    this.targetRotation = this.rotation\r\n  }\r\n\r\n  /**\r\n   * Get the endpoints of the bar for collision detection\r\n   */\r\n  public getEndpoints(): { start: Vector2; end: Vector2 } {\r\n    const halfWidth = this.width / 2\r\n    \r\n    return {\r\n      start: {\r\n        x: this.position.x - halfWidth,\r\n        y: this.leftSideHeight\r\n      },\r\n      end: {\r\n        x: this.position.x + halfWidth,\r\n        y: this.rightSideHeight\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the normal vector of the bar surface\r\n   */\r\n  public getNormal(): Vector2 {\r\n    const endpoints = this.getEndpoints()\r\n    const dx = endpoints.end.x - endpoints.start.x\r\n    const dy = endpoints.end.y - endpoints.start.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return { x: 0, y: -1 } // Default upward normal\r\n    \r\n    // Normal perpendicular to the bar, pointing upward\r\n    return {\r\n      x: -dy / length,\r\n      y: dx / length\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a point is near the bar (for collision detection)\r\n   */\r\n  public isPointNearBar(point: Vector2, radius: number): boolean {\r\n    const endpoints = this.getEndpoints()\r\n    const distance = this.distanceToLineSegment(point, endpoints.start, endpoints.end)\r\n    const collisionThreshold = radius + this.thickness / 2 + 2 // Add small buffer for better detection\r\n    return distance <= collisionThreshold\r\n  }\r\n\r\n  /**\r\n   * Calculate distance from point to line segment\r\n   */\r\n  private distanceToLineSegment(point: Vector2, start: Vector2, end: Vector2): number {\r\n    const dx = end.x - start.x\r\n    const dy = end.y - start.y\r\n    const length = Math.sqrt(dx * dx + dy * dy)\r\n    \r\n    if (length === 0) return Math.sqrt((point.x - start.x) ** 2 + (point.y - start.y) ** 2)\r\n    \r\n    const t = Math.max(0, Math.min(1, ((point.x - start.x) * dx + (point.y - start.y) * dy) / (length * length)))\r\n    const projection = {\r\n      x: start.x + t * dx,\r\n      y: start.y + t * dy\r\n    }\r\n    \r\n    return Math.sqrt((point.x - projection.x) ** 2 + (point.y - projection.y) ** 2)\r\n  }\r\n\r\n  /**\r\n   * Get collision response for a ball hitting the bar\r\n   */\r\n  public getCollisionResponse(ballPosition: Vector2, ballVelocity: Vector2, ballRadius: number): { velocity: Vector2; position: Vector2 } {\r\n    const endpoints = this.getEndpoints()\r\n    const normal = this.getNormal()\r\n    \r\n    // Calculate penetration depth\r\n    const distanceToBar = this.distanceToLineSegment(ballPosition, endpoints.start, endpoints.end)\r\n    const penetrationDepth = ballRadius + this.thickness / 2 - distanceToBar\r\n    \r\n    // Push ball out of the bar\r\n    const correctedPosition = {\r\n      x: ballPosition.x + normal.x * penetrationDepth,\r\n      y: ballPosition.y + normal.y * penetrationDepth\r\n    }\r\n    \r\n    // Reflect velocity along the normal (only if moving into the bar)\r\n    const dotProduct = ballVelocity.x * normal.x + ballVelocity.y * normal.y\r\n    \r\n    let newVelocity = ballVelocity\r\n    if (dotProduct < 0) { // Ball is moving into the bar\r\n      const reflection = {\r\n        x: ballVelocity.x - 2 * dotProduct * normal.x,\r\n        y: ballVelocity.y - 2 * dotProduct * normal.y\r\n      }\r\n      \r\n      // Apply friction and bounce energy\r\n      const frictionFactor = 1 - this.friction\r\n      const bounceEnergy = 0.8 // Slight energy loss on bounce\r\n      newVelocity = {\r\n        x: reflection.x * frictionFactor * bounceEnergy,\r\n        y: reflection.y * bounceEnergy\r\n      }\r\n    }\r\n    \r\n    return {\r\n      velocity: newVelocity,\r\n      position: correctedPosition\r\n    }\r\n  }\r\n\r\n\r\n} ","export interface InputState {\r\n  keys: { [key: string]: boolean }\r\n  mouse: {\r\n    x: number\r\n    y: number\r\n    isDown: boolean\r\n    button: number\r\n  }\r\n  tiltInput: number // -1 to 1 for bar tilt\r\n}\r\n\r\nexport class InputManager {\r\n  private inputState: InputState = {\r\n    keys: {},\r\n    mouse: {\r\n      x: 0,\r\n      y: 0,\r\n      isDown: false,\r\n      button: -1\r\n    },\r\n    tiltInput: 0\r\n  }\r\n  \r\n  private previousKeys: { [key: string]: boolean } = {}\r\n  private canvas: HTMLCanvasElement | null = null\r\n  private keyBindings = {\r\n    leftSideUp: ['KeyA'],\r\n    leftSideDown: ['KeyZ'],\r\n    rightSideUp: ['ArrowUp'],\r\n    rightSideDown: ['ArrowDown'],\r\n    start: ['Space'],\r\n    reset: ['KeyR'],\r\n    pause: ['KeyP', 'Escape']\r\n  }\r\n\r\n  constructor() {\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * Initialize input manager with canvas reference\r\n   */\r\n  public init(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas\r\n    this.setupCanvasListeners()\r\n  }\r\n\r\n  /**\r\n   * Get current input state\r\n   */\r\n  public getInputState(): InputState {\r\n    return { ...this.inputState }\r\n  }\r\n\r\n  /**\r\n   * Get tilt input value (-1 to 1)\r\n   */\r\n  public getTiltInput(): number {\r\n    return this.inputState.tiltInput\r\n  }\r\n\r\n  /**\r\n   * Get left side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getLeftSideInput(): number {\r\n    let leftSideInput = 0\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1\r\n    }\r\n    return leftSideInput\r\n  }\r\n\r\n  /**\r\n   * Get right side input (-1 to 1, where 1 is up, -1 is down)\r\n   */\r\n  public getRightSideInput(): number {\r\n    let rightSideInput = 0\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1\r\n    }\r\n    return rightSideInput\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action is pressed\r\n   */\r\n  public isActionPressed(action: keyof typeof this.keyBindings): boolean {\r\n    return this.keyBindings[action].some(key => this.inputState.keys[key])\r\n  }\r\n\r\n  /**\r\n   * Check if a specific action was just pressed (not held)\r\n   */\r\n  public isActionJustPressed(action: keyof typeof this.keyBindings): boolean {\r\n    const isPressed = this.keyBindings[action].some(key => \r\n      this.inputState.keys[key] && !this.previousKeys[key]\r\n    )\r\n    \r\n    // Debug logging for start key\r\n    if (action === 'start' && isPressed) {\r\n      console.log('🔑 Start key (SPACE) just pressed!')\r\n    }\r\n    \r\n    return isPressed\r\n  }\r\n\r\n  /**\r\n   * Update input state (called each frame)\r\n   */\r\n  public update(): void {\r\n    // Calculate tilt input based on independent left/right side controls\r\n    let leftSideInput = 0\r\n    let rightSideInput = 0\r\n    \r\n    // Left side controls (A raises, Z lowers)\r\n    if (this.isActionPressed('leftSideUp')) {\r\n      leftSideInput = 1\r\n    }\r\n    if (this.isActionPressed('leftSideDown')) {\r\n      leftSideInput = -1\r\n    }\r\n    \r\n    // Right side controls (Up raises, Down lowers)\r\n    if (this.isActionPressed('rightSideUp')) {\r\n      rightSideInput = 1\r\n    }\r\n    if (this.isActionPressed('rightSideDown')) {\r\n      rightSideInput = -1\r\n    }\r\n    \r\n    // Calculate overall tilt based on difference between sides\r\n    // Positive tilt = right side higher than left side\r\n    const tiltInput = (rightSideInput - leftSideInput) * 0.5\r\n    \r\n    // Add mouse tilt control if mouse is being used\r\n    if (this.canvas && this.inputState.mouse.isDown) {\r\n      const rect = this.canvas.getBoundingClientRect()\r\n      const centerX = rect.width / 2\r\n      const mouseX = this.inputState.mouse.x - rect.left\r\n      const mouseTilt = (mouseX - centerX) / centerX\r\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, mouseTilt))\r\n    } else {\r\n      this.inputState.tiltInput = Math.max(-1, Math.min(1, tiltInput))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call this at the end of each frame to update previous key state\r\n   */\r\n  public endFrame(): void {\r\n    // Store previous key state for just-pressed detection\r\n    this.previousKeys = { ...this.inputState.keys }\r\n  }\r\n\r\n  /**\r\n   * Setup global event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Keyboard events\r\n    document.addEventListener('keydown', this.handleKeyDown.bind(this))\r\n    document.addEventListener('keyup', this.handleKeyUp.bind(this))\r\n    \r\n    // Prevent default behavior for game keys\r\n    document.addEventListener('keydown', (e) => {\r\n      const allKeys = Object.values(this.keyBindings).flat()\r\n      if (allKeys.includes(e.code)) {\r\n        e.preventDefault()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Setup canvas-specific event listeners\r\n   */\r\n  private setupCanvasListeners(): void {\r\n    if (!this.canvas) return\r\n\r\n    // Mouse events\r\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this))\r\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this))\r\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this))\r\n    this.canvas.addEventListener('mouseleave', this.handleMouseLeave.bind(this))\r\n\r\n    // Touch events for mobile support\r\n    this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this))\r\n    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this))\r\n    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Handle keydown events\r\n   */\r\n  private handleKeyDown(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = true\r\n  }\r\n\r\n  /**\r\n   * Handle keyup events\r\n   */\r\n  private handleKeyUp(event: KeyboardEvent): void {\r\n    this.inputState.keys[event.code] = false\r\n  }\r\n\r\n  /**\r\n   * Handle mouse down events\r\n   */\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = true\r\n    this.inputState.mouse.button = event.button\r\n    this.updateMousePosition(event)\r\n  }\r\n\r\n  /**\r\n   * Handle mouse up events\r\n   */\r\n  private handleMouseUp(_event: MouseEvent): void {\r\n    this.inputState.mouse.isDown = false\r\n    this.inputState.mouse.button = -1\r\n  }\r\n\r\n  /**\r\n   * Handle mouse move events\r\n   */\r\n  private handleMouseMove(event: MouseEvent): void {\r\n    this.updateMousePosition(event)\r\n  }\r\n\r\n  /**\r\n   * Handle mouse leave events\r\n   */\r\n  private handleMouseLeave(): void {\r\n    this.inputState.mouse.isDown = false\r\n    this.inputState.mouse.button = -1\r\n  }\r\n\r\n  /**\r\n   * Handle touch start events\r\n   */\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    if (event.touches.length > 0) {\r\n      this.inputState.mouse.isDown = true\r\n      this.updateTouchPosition(event.touches[0])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch end events\r\n   */\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    this.inputState.mouse.isDown = false\r\n  }\r\n\r\n  /**\r\n   * Handle touch move events\r\n   */\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    if (event.touches.length > 0) {\r\n      this.updateTouchPosition(event.touches[0])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from mouse event\r\n   */\r\n  private updateMousePosition(event: MouseEvent): void {\r\n    this.inputState.mouse.x = event.clientX\r\n    this.inputState.mouse.y = event.clientY\r\n  }\r\n\r\n  /**\r\n   * Update mouse position from touch event\r\n   */\r\n  private updateTouchPosition(touch: Touch): void {\r\n    this.inputState.mouse.x = touch.clientX\r\n    this.inputState.mouse.y = touch.clientY\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  public dispose(): void {\r\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this))\r\n    document.removeEventListener('keyup', this.handleKeyUp.bind(this))\r\n    \r\n    if (this.canvas) {\r\n      this.canvas.removeEventListener('mousedown', this.handleMouseDown.bind(this))\r\n      this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this))\r\n      this.canvas.removeEventListener('mousemove', this.handleMouseMove.bind(this))\r\n      this.canvas.removeEventListener('mouseleave', this.handleMouseLeave.bind(this))\r\n      this.canvas.removeEventListener('touchstart', this.handleTouchStart.bind(this))\r\n      this.canvas.removeEventListener('touchend', this.handleTouchEnd.bind(this))\r\n      this.canvas.removeEventListener('touchmove', this.handleTouchMove.bind(this))\r\n    }\r\n  }\r\n} ","// Circuit Breaker - Main Game Class\r\n// Handles game state management and core game loop\r\n\r\nimport { GameState, GameStateType } from './GameState'\r\nimport { GameLoop } from './GameLoop'\r\nimport { Renderer } from '../rendering/Renderer'\r\nimport { PhysicsEngine } from '../physics/PhysicsEngine'\r\nimport { TiltingBar } from './TiltingBar'\r\nimport { InputManager } from '../input/InputManager'\r\n\r\nexport class Game {\r\n  private gameState: GameState\r\n  private gameLoop: GameLoop\r\n  private renderer: Renderer\r\n  private physicsEngine: PhysicsEngine\r\n  private inputManager: InputManager\r\n  private tiltingBar: TiltingBar\r\n  private isRunning: boolean = false\r\n\r\n  constructor() {\r\n    this.gameState = new GameState()\r\n    this.gameLoop = new GameLoop()\r\n    this.renderer = new Renderer()\r\n    this.physicsEngine = new PhysicsEngine()\r\n    this.inputManager = new InputManager()\r\n    this.tiltingBar = new TiltingBar({\r\n      position: { x: 180, y: 590 }, // Center of 360px width screen, near bottom\r\n      width: 360, // Full width of screen\r\n      height: 8,\r\n      maxRotation: Math.PI / 4, // 45 degrees\r\n      rotationSpeed: 3,\r\n      friction: 0.05 // Low friction for smooth rolling\r\n    })\r\n    console.log('🎮 Circuit Breaker - Game initialized')\r\n  }\r\n\r\n  /**\r\n   * Initialize the game and all systems\r\n   */\r\n  public async init(): Promise<void> {\r\n    try {\r\n      console.log('🚀 Initializing Circuit Breaker...')\r\n      \r\n      // Initialize renderer with canvas\r\n      const canvas = document.getElementById('game-canvas') as HTMLCanvasElement\r\n      if (!canvas) {\r\n        throw new Error('Canvas element not found')\r\n      }\r\n      this.renderer.init(canvas)\r\n      \r\n      // Initialize physics engine with robust settings\r\n      this.physicsEngine.setGravity(0, 400) // Gravity in Y direction\r\n      this.physicsEngine.setAirResistance(0.999) // Minimal air resistance\r\n      this.physicsEngine.setBounds(360, 640) // Match canvas size\r\n      this.physicsEngine.setTiltingBar(this.tiltingBar)\r\n      \r\n      // Initialize input manager\r\n      this.inputManager.init(canvas)\r\n      \r\n      // Create main game ball starting off the left side of playfield\r\n      const ballRadius = 12\r\n      const ballStartX = -50 // Off the left side (hidden)\r\n      const ballStartY = 300 // Middle height (will be repositioned when started)\r\n      \r\n      // Create main game ball using the new robust physics system\r\n      const ball = this.physicsEngine.createObject({\r\n        id: 'game-ball',\r\n        x: ballStartX,\r\n        y: ballStartY,\r\n        radius: ballRadius,\r\n        mass: 1,\r\n        restitution: 0.8, // Good bounce\r\n        friction: 0.2, // Low friction for rolling\r\n        isStatic: false\r\n      })\r\n      \r\n      this.physicsEngine.addObject(ball)\r\n\r\n      // Disable physics debugging for performance\r\n      this.physicsEngine.setDebug(false)\r\n      \r\n      // TODO: Initialize remaining systems\r\n      // - Input manager\r\n      // - Audio system\r\n      \r\n      this.isRunning = true\r\n      console.log('✅ Circuit Breaker initialized successfully')\r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize Circuit Breaker:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the game loop\r\n   */\r\n  public start(): void {\r\n    if (!this.isRunning) {\r\n      console.warn('⚠️ Game not initialized. Call init() first.')\r\n      return\r\n    }\r\n\r\n    console.log('▶️ Starting Circuit Breaker...')\r\n    this.gameState.setState(GameStateType.PLAYING)\r\n    this.gameLoop.start(this.gameState, this.renderer, this.physicsEngine, this)\r\n  }\r\n\r\n  /**\r\n   * Update game logic (called by GameLoop)\r\n   */\r\n  public update(deltaTime: number): void {\r\n    // Update input\r\n    this.inputManager.update()\r\n    \r\n    // Check for start key press to place ball on bar\r\n    if (this.inputManager.isActionJustPressed('start')) {\r\n      console.log('🎯 SPACE pressed - placing ball on bar')\r\n      this.placeBallOnBar()\r\n    }\r\n    \r\n    // Update tilting bar based on independent side controls (absolute movement)\r\n    const leftSideInput = this.inputManager.getLeftSideInput()\r\n    const rightSideInput = this.inputManager.getRightSideInput()\r\n    \r\n    this.tiltingBar.moveLeftSide(leftSideInput)\r\n    this.tiltingBar.moveRightSide(rightSideInput)\r\n    this.tiltingBar.update(deltaTime / 1000) // Convert to seconds\r\n    \r\n    // End frame - update previous input state for next frame\r\n    this.inputManager.endFrame()\r\n  }\r\n\r\n  /**\r\n   * Place the ball at right edge, 10 pixels above the bar's top edge with zero velocity\r\n   */\r\n  private placeBallOnBar(): void {\r\n    const ball = this.physicsEngine.getObjects().find(obj => obj.id === 'game-ball')\r\n    if (ball) {\r\n      const ballRadius = ball.radius\r\n      // Position ball at right edge with 5px gap from playfield edge\r\n      const ballX = 360 - ballRadius - 5\r\n      \r\n      // Get the precise bar positioning using the bar's own thickness property\r\n      const barRightSideY = this.tiltingBar.rightSideHeight // 590 (center line of bar)\r\n      const barThickness = this.tiltingBar.thickness // Use actual thickness property\r\n      const barTopSurface = barRightSideY - barThickness / 2 // Top collision surface\r\n      \r\n      // Position ball so its bottom edge is exactly 10 pixels above the bar's top surface\r\n      // Ball center must be at: barTopSurface - 10 - ballRadius\r\n      const ballY = barTopSurface - 10 - ballRadius\r\n      \r\n             console.log(`🏀 Precise ball placement:`)\r\n       console.log(`   Ball radius: ${ballRadius}`)\r\n       console.log(`   Bar right side Y: ${barRightSideY}`)\r\n       console.log(`   Bar thickness: ${barThickness}`)\r\n       console.log(`   Bar top surface: ${barTopSurface}`)\r\n       console.log(`   Ball center Y: ${ballY}`)\r\n       console.log(`   Ball bottom Y: ${ballY + ballRadius} (should be ${barTopSurface - 10})`)\r\n       console.log(`   Gap between ball and bar: ${(ballY + ballRadius) - barTopSurface} pixels`)\r\n      \r\n      // Set ball position\r\n      ball.position.x = ballX\r\n      ball.position.y = ballY\r\n      \r\n      // Set previous position to current position for ZERO velocity\r\n      ball.previousPosition.x = ball.position.x\r\n      ball.previousPosition.y = ball.position.y\r\n      \r\n      // Ensure velocity is zero\r\n      ball.velocity.x = 0\r\n      ball.velocity.y = 0\r\n      \r\n      // Update backward compatibility properties\r\n      ball.x = ball.position.x\r\n      ball.y = ball.position.y\r\n      ball.vx = 0\r\n      ball.vy = 0\r\n      \r\n      console.log(`✅ Ball placed at (${ball.position.x}, ${ball.position.y})`)\r\n    } else {\r\n      console.error('❌ Ball not found in physics engine!')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render additional game elements (called by GameLoop)\r\n   */\r\n  public renderGameplay(): void {\r\n    // Render tilting bar\r\n    this.renderer.drawTiltingBar(this.tiltingBar)\r\n    \r\n    // Render input instructions\r\n    const ctx = this.renderer.getContext()\r\n    if (ctx) {\r\n      ctx.fillStyle = '#00ffff'\r\n      ctx.font = '10px monospace'\r\n      ctx.textAlign = 'center'\r\n      ctx.fillText('SPACE: Start | Left: A(up)/Z(down) | Right: ↑(up)/↓(down)', 180, 580)\r\n      ctx.fillText('Or click and drag mouse to control', 180, 595)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pause the game\r\n   */\r\n  public pause(): void {\r\n    console.log('⏸️ Pausing Circuit Breaker...')\r\n    this.gameLoop.pause()\r\n  }\r\n\r\n  /**\r\n   * Resume the game\r\n   */\r\n  public resume(): void {\r\n    console.log('▶️ Resuming Circuit Breaker...')\r\n    this.gameLoop.resume()\r\n  }\r\n\r\n  /**\r\n   * Stop the game\r\n   */\r\n  public stop(): void {\r\n    console.log('⏹️ Stopping Circuit Breaker...')\r\n    this.gameLoop.stop()\r\n    this.isRunning = false\r\n  }\r\n\r\n  /**\r\n   * Get current game state\r\n   */\r\n  public getGameState(): GameState {\r\n    return this.gameState\r\n  }\r\n\r\n  /**\r\n   * Check if game is running\r\n   */\r\n  public isGameRunning(): boolean {\r\n    return this.isRunning && this.gameLoop.isGameLoopRunning()\r\n  }\r\n} ","// Circuit Breaker - Main Entry Point\r\n// A neon cyberpunk arcade game where players guide data packets through circuit boards\r\n\r\nimport './style.css'\r\nimport { Game } from './core/Game'\r\nimport { Renderer } from './rendering/Renderer'\r\n\r\n// Global game instance\r\nlet game: Game | null = null\r\nlet renderer: Renderer | null = null\r\n\r\n/**\r\n * Initialize the game when DOM is ready\r\n */\r\nasync function initGame(): Promise<void> {\r\n  try {\r\n    console.log('🚀 Circuit Breaker - Loading...')\r\n\r\n    // Create canvas element\r\n    const gameContainer = document.getElementById('game-container')\r\n    if (!gameContainer) {\r\n      throw new Error('Game container not found')\r\n    }\r\n\r\n    // Clear loading message and create canvas\r\n    gameContainer.innerHTML = ''\r\n    const canvas = document.createElement('canvas')\r\n    canvas.id = 'game-canvas'\r\n    canvas.width = 360  // 9:16 aspect ratio (mobile portrait)\r\n    canvas.height = 640\r\n    gameContainer.appendChild(canvas)\r\n\r\n    // Initialize renderer\r\n    renderer = new Renderer()\r\n    renderer.init(canvas)\r\n\r\n    // Create game instance\r\n    game = new Game()\r\n\r\n    // Initialize game systems\r\n    await game.init()\r\n\r\n    // Start the game\r\n    game.start()\r\n\r\n    console.log('✅ Circuit Breaker loaded successfully')\r\n  } catch (error) {\r\n    console.error('❌ Failed to load Circuit Breaker:', error)\r\n    showErrorMessage('Failed to load game. Please refresh the page.')\r\n  }\r\n}\r\n\r\n/**\r\n * Show error message to user\r\n */\r\nfunction showErrorMessage(message: string): void {\r\n  const gameContainer = document.getElementById('game-container')\r\n  if (gameContainer) {\r\n    gameContainer.innerHTML = `\r\n      <div style=\"text-align: center; color: #ff0066;\">\r\n        <h1>Circuit Breaker</h1>\r\n        <p>Error: ${message}</p>\r\n        <p>Please refresh the page to try again.</p>\r\n      </div>\r\n    `\r\n  }\r\n}\r\n\r\n/**\r\n * Handle window resize\r\n */\r\nfunction handleResize(): void {\r\n  // TODO: Handle canvas resize and UI adjustments\r\n  console.log('📱 Window resized')\r\n}\r\n\r\n/**\r\n * Handle page visibility change\r\n */\r\nfunction handleVisibilityChange(): void {\r\n  if (document.hidden) {\r\n    console.log('👁️ Page hidden - pausing game')\r\n    game?.pause()\r\n  } else {\r\n    console.log('👁️ Page visible - resuming game')\r\n    game?.resume()\r\n  }\r\n}\r\n\r\n/**\r\n * Handle before unload\r\n */\r\nfunction handleBeforeUnload(): void {\r\n  console.log('👋 Page unloading - stopping game')\r\n  game?.stop()\r\n}\r\n\r\n// Initialize when DOM is ready\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initGame)\r\n} else {\r\n  initGame()\r\n}\r\n\r\n// Add event listeners\r\nwindow.addEventListener('resize', handleResize)\r\ndocument.addEventListener('visibilitychange', handleVisibilityChange)\r\nwindow.addEventListener('beforeunload', handleBeforeUnload)\r\n\r\n// Export for debugging\r\nexport { game } "],"names":["GameStateType","GameState","__publicField","newState","previousState","__spreadValues","updates","state","GameLoop","gameState","renderer","physicsEngine","game","currentTime","deltaTime","_gameState","ctx","obj","pos","radius","manifolds","manifold","constraints","constraint","objects","dynamicObjects","staticObjects","collisionCount","Debug","enabled","message","args","logMessage","name","fn","start","result","end","condition","Renderer","canvas","bar","endpoints","leftHeight","rightHeight","tiltPercentage","width","height","PhysicsEngine","config","mass","_a","_b","id","frameTime","dt","velX","velY","objA","objB","dx","dy","distance","percent","offsetX","offsetY","_constraint","i","j","otherObj","maxDistance","minDistance","penetration","normal","correction","relativeVelocity","velocityAlongNormal","impulseScalar","impulse","separationX","separationY","restitution","closestPointOnCenterLine","distanceToCenterLine","__pow","barSurfaceDistance","collisionDistance","barVec","barLength","barTangent","barNormal","barSurfacePoint","velocity","velocityAlongTangent","friction","reflectedVelocity","_barNormal","currentTangentVelocity","gravityAlongSlope","rollingFriction","rollingResistance","slopeAcceleration","resistanceForce","frictionForce","newTangentVelocity","newVelocity","ballId","ball","closestPoint","barThickness","cells","cellKey","minX","maxX","minY","maxY","x","y","nearby","cell","point","lineStart","lineEnd","length","t","resistance","_friction","_energy","TiltingBar","angle","input","_deltaTime","heightDifference","maxHeightRange","halfWidth","collisionThreshold","projection","ballPosition","ballVelocity","ballRadius","distanceToBar","penetrationDepth","correctedPosition","dotProduct","reflection","frictionFactor","bounceEnergy","InputManager","leftSideInput","rightSideInput","action","key","isPressed","tiltInput","rect","centerX","mouseTilt","e","event","_event","touch","Game","__async","ballStartX","ballStartY","error","ballX","barRightSideY","barTopSurface","ballY","initGame","gameContainer","showErrorMessage","handleResize","handleVisibilityChange","handleBeforeUnload"],"mappings":"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"}