var V=Object.defineProperty;var z=Object.getOwnPropertySymbols;var q=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable;var b=Math.pow,F=(h,t,e)=>t in h?V(h,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):h[t]=e,M=(h,t)=>{for(var e in t||(t={}))q.call(t,e)&&F(h,e,t[e]);if(z)for(var e of z(t))X.call(t,e)&&F(h,e,t[e]);return h};var r=(h,t,e)=>(F(h,typeof t!="symbol"?t+"":t,e),e);var S=(h,t,e)=>new Promise((i,s)=>{var o=a=>{try{l(e.next(a))}catch(c){s(c)}},n=a=>{try{l(e.throw(a))}catch(c){s(c)}},l=a=>a.done?i(a.value):Promise.resolve(a.value).then(o,n);l((e=e.apply(h,t)).next())});(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const n of o.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();var y=(h=>(h.MENU="menu",h.PLAYING="playing",h.PAUSED="paused",h.CONFIRM_MENU="confirm_menu",h.LEVEL_COMPLETE="level_complete",h.GAME_OVER="game_over",h.LOADING="loading",h))(y||{});class J{constructor(){r(this,"currentState","menu");r(this,"stateData",{currentLevel:1,score:0,lives:3,isPaused:!1,isGameOver:!1,debugMode:!1});console.log("📊 GameState initialized")}getCurrentState(){return this.currentState}setState(t){const e=this.currentState;this.currentState=t,console.log(`🔄 Game state changed: ${e} → ${t}`)}getStateData(){return M({},this.stateData)}updateStateData(t){this.stateData=M(M({},this.stateData),t)}isState(t){return this.currentState===t}isPlaying(){return this.currentState==="playing"}isPaused(){return this.currentState==="paused"}isGameOver(){return this.currentState==="game_over"}isConfirmingMenu(){return this.currentState==="confirm_menu"}isDebugMode(){return this.stateData.debugMode}toggleDebugMode(){this.stateData.debugMode=!this.stateData.debugMode,console.log(`🐛 Debug mode ${this.stateData.debugMode?"enabled":"disabled"}`)}setDebugMode(t){this.stateData.debugMode=t,console.log(`🐛 Debug mode ${t?"enabled":"disabled"}`)}reset(){this.currentState="menu",this.stateData={currentLevel:1,score:0,lives:3,isPaused:!1,isGameOver:!1,debugMode:!1},console.log("🔄 Game state reset")}}const w=class w{constructor(){r(this,"fontsLoaded",!1);r(this,"fonts",{primary:'Interceptor, "Courier New", Monaco, Consolas, monospace',display:'Cyberpunks, Interceptor, "Courier New", monospace',mono:'Interceptor, "Courier New", Monaco, Consolas, monospace'});this.loadFonts()}static getInstance(){return w.instance||(w.instance=new w),w.instance}loadFonts(){return S(this,null,function*(){try{if("fonts"in document){const t=[];try{const e=new FontFace("Cyberpunks",'url("./assets/fonts/Cyberpunks.otf")'),i=new FontFace("Cyberpunks",'url("./assets/fonts/Cyberpunks Italic.otf")',{style:"italic"});t.push(e.load(),i.load())}catch(e){console.log("⚠️ Cyberpunks font creation failed:",e)}try{const e=new FontFace("Interceptor",'url("./assets/fonts/Interceptor.otf")'),i=new FontFace("Interceptor",'url("./assets/fonts/Interceptor Italic.otf")',{style:"italic"}),s=new FontFace("Interceptor",'url("./assets/fonts/Interceptor Bold.otf")',{weight:"bold"}),o=new FontFace("Interceptor",'url("./assets/fonts/Interceptor Bold Italic.otf")',{weight:"bold",style:"italic"});t.push(e.load(),i.load(),s.load(),o.load())}catch(e){console.log("⚠️ Interceptor font creation failed:",e)}if(t.length>0){const e=yield Promise.allSettled(t);let i=0;e.forEach((s,o)=>{if(s.status==="fulfilled")try{document.fonts.add(s.value),i++}catch(n){console.log(`⚠️ Failed to add font ${o} to document:`,n)}else console.log(`⚠️ Font ${o} failed to load:`,s.reason)}),i>0?(this.fontsLoaded=!0,console.log(`🎨 Loaded ${i}/${t.length} custom fonts successfully`)):(this.fontsLoaded=!1,console.log("⚠️ No custom fonts loaded, using fallbacks"))}else this.fontsLoaded=!1,console.log("⚠️ No fonts could be created, using fallbacks")}else this.fontsLoaded=!1,console.log("⚠️ Font Loading API not available, using fallbacks")}catch(t){console.log("⚠️ Font loading completely failed, using fallbacks:",t),this.fontsLoaded=!1}})}getFont(t,e,i="normal"){const s=this.fonts[t];return`${i} ${e}px ${s}`}setFont(t,e,i,s="normal"){t.font=this.getFont(e,i,s)}areFontsLoaded(){return this.fontsLoaded}preloadFonts(){return S(this,null,function*(){this.fontsLoaded||(yield this.loadFonts())})}getFontTypes(){return Object.keys(this.fonts)}isFontAvailable(t){return"fonts"in document?document.fonts.check(`12px ${t}`):!1}};r(w,"instance");let H=w;const x=H.getInstance();class Z{constructor(){r(this,"animationId",null);r(this,"lastTime",0);r(this,"accumulator",0);r(this,"timestep",1e3/60);r(this,"isRunning",!1);r(this,"isPaused",!1);r(this,"renderer",null);r(this,"physicsEngine",null);r(this,"game",null);console.log("🔄 GameLoop initialized")}start(t,e,i,s){if(this.isRunning){console.warn("⚠️ Game loop is already running");return}this.renderer=e||null,this.physicsEngine=i||null,this.game=s||null,this.isRunning=!0,this.isPaused=!1,this.lastTime=performance.now(),this.accumulator=0,console.log("▶️ Game loop started"),this.gameLoop(t)}gameLoop(t){if(!this.isRunning)return;const e=performance.now(),i=e-this.lastTime;for(this.lastTime=e,this.accumulator+=i;this.accumulator>=this.timestep;)this.isPaused||this.update(t,this.timestep),this.accumulator-=this.timestep;this.render(t),this.animationId=requestAnimationFrame(()=>this.gameLoop(t))}update(t,e){this.game&&this.game.update&&this.game.update(e),this.physicsEngine&&this.physicsEngine.update(e)}render(t){this.renderer&&(this.renderer.clear(),t.isPlaying()?this.renderGameplay(t):t.isState(y.MENU)?this.renderMenu(t):t.isState(y.PAUSED)?this.renderPaused():t.isState(y.CONFIRM_MENU)?this.renderConfirmDialog(t):t.isState(y.GAME_OVER)&&this.renderGameOver(t))}renderGameplay(t){if(!this.renderer)return;const e=this.renderer.getContext();if(e){if(this.renderer.drawBackground(),this.physicsEngine){for(const i of this.physicsEngine.getObjects()){if(i.id==="game-ball"||i.id.includes("ball"))continue;e.beginPath();const s=i.position||{x:i.x||0,y:i.y||0},o=i.radius||10;e.arc(s.x,s.y,o,0,Math.PI*2),i.isStatic?(e.fillStyle="#ff0066",e.shadowColor="#ff0066"):(e.fillStyle="#00ffff",e.shadowColor="#00ffff"),e.shadowBlur=16,e.fill(),e.shadowBlur=0,e.closePath(),t.isDebugMode()&&this.physicsEngine.getDebug&&this.physicsEngine.getDebug()&&(!i.isStatic&&i.velocity&&(e.beginPath(),e.moveTo(s.x,s.y),e.lineTo(s.x+i.velocity.x*3,s.y+i.velocity.y*3),e.strokeStyle="#ffff00",e.lineWidth=1,e.stroke(),e.closePath()),e.fillStyle="#ffffff",e.font="8px Courier New",e.textAlign="center",e.fillText(i.id,s.x,s.y-o-5))}if(t.isDebugMode()&&this.physicsEngine.getDebug&&this.physicsEngine.getDebug()){if(this.physicsEngine.getCollisionManifolds){const i=this.physicsEngine.getCollisionManifolds();for(const s of i)e.beginPath(),e.arc(s.contactPoint.x,s.contactPoint.y,2,0,Math.PI*2),e.fillStyle="#ff0000",e.fill(),e.closePath()}if(this.physicsEngine.getConstraints){const i=this.physicsEngine.getConstraints();for(const s of i)s.type==="distance"&&s.objectB&&(e.beginPath(),e.moveTo(s.objectA.position.x,s.objectA.position.y),e.lineTo(s.objectB.position.x,s.objectB.position.y),e.strokeStyle="#00ff00",e.lineWidth=1,e.setLineDash([3,3]),e.stroke(),e.setLineDash([]),e.closePath())}}}if(t.isDebugMode()&&(e.fillStyle="#00ffff",e.font="20px Courier New",e.textAlign="center",e.fillText("Circuit Breaker",180,40),e.font="12px Courier New",e.fillText("Robust Physics System Active",180,60)),this.game&&this.game.renderGameplay&&this.game.renderGameplay(),this.physicsEngine){for(const i of this.physicsEngine.getObjects())if(i.id==="game-ball"||i.id.includes("ball")){if(this.renderer){const s=this.game&&this.game.getHoleAnimationState?this.game.getHoleAnimationState():null;this.renderer.drawChromeBall(i,s)}if(t.isDebugMode()&&this.physicsEngine.getDebug&&this.physicsEngine.getDebug()){const s=i.position||{x:i.x||0,y:i.y||0},o=i.radius||10;!i.isStatic&&i.velocity&&(e.beginPath(),e.moveTo(s.x,s.y),e.lineTo(s.x+i.velocity.x*3,s.y+i.velocity.y*3),e.strokeStyle="#ffff00",e.lineWidth=1,e.stroke(),e.closePath()),e.fillStyle="#ffffff",e.font="8px Courier New",e.textAlign="center",e.fillText(i.id,s.x,s.y-o-5)}}}if(t.isDebugMode()&&this.physicsEngine){const i=this.physicsEngine.getObjects(),s=i.filter(n=>!n.isStatic).length,o=i.filter(n=>n.isStatic).length;if(e.font="10px Courier New",e.textAlign="left",e.fillStyle="#00ffff",e.fillText(`Objects: ${s} dynamic, ${o} static`,10,610),e.fillText(`Gravity: ${this.physicsEngine.getGravity()}`,10,625),this.physicsEngine.getCollisionManifolds){const n=this.physicsEngine.getCollisionManifolds().length;e.fillText(`Collisions: ${n}`,200,610)}e.fillText("Physics: Optimized Verlet (1 substep)",10,595)}}}renderMenu(t){if(!this.renderer)return;const e=this.renderer.getContext();if(!e)return;this.renderer.drawBackground(),e.strokeStyle="#003366",e.lineWidth=1,e.globalAlpha=.3;for(let l=0;l<=360;l+=20)e.beginPath(),e.moveTo(l,0),e.lineTo(l,640),e.stroke();for(let l=0;l<=640;l+=20)e.beginPath(),e.moveTo(0,l),e.lineTo(360,l),e.stroke();e.globalAlpha=1,e.save(),e.shadowColor="#00f0ff",e.shadowBlur=20,e.fillStyle="#b600f9",x.setFont(e,"display",72,"bold"),e.textAlign="center",e.fillText("CIRCUIT",180,120),e.fillText("BREAKER",180,180),e.restore(),e.fillStyle="#b600f9",x.setFont(e,"primary",16),e.textAlign="center",e.fillText("NEON CYBERPUNK PINBALL",180,280),e.fillStyle="#ffffff",x.setFont(e,"primary",12),e.fillText("Navigate the ball through cyber holes",180,320),e.fillText("to reach all goals and break the circuit",180,340);const i=Date.now(),s=.5+.5*Math.sin(i/500);e.save(),e.globalAlpha=s,e.shadowColor="#00ff99",e.shadowBlur=10,e.fillStyle="#00ff99",x.setFont(e,"primary",14,"bold"),e.fillText("CLICK OR PRESS SPACE TO START",180,420),e.restore(),e.fillStyle="#888888",x.setFont(e,"primary",10),e.fillText("CONTROLS:",180,480),e.fillText("A/Z - Left Side Up/Down",180,500),e.fillText("↑/↓ - Right Side Up/Down",180,520),e.fillText("SPACE - Start/Place Ball",180,540),e.fillText("D - Toggle Debug Mode",180,560);const o=t.isDebugMode()?"ON":"OFF",n=t.isDebugMode()?"#00ff99":"#b600f9";e.fillStyle=n,x.setFont(e,"primary",12),e.fillText(`DEBUG MODE: ${o}`,180,460),e.fillStyle="#444444",x.setFont(e,"primary",8),e.fillText("Circuit Breaker v0.3.0",180,590)}renderPaused(){if(!this.renderer)return;const t=this.renderer.getContext();t&&(t.fillStyle="rgba(0, 0, 0, 0.7)",t.fillRect(0,0,360,640),t.fillStyle="#00f0ff",t.font="20px Courier New",t.textAlign="center",t.fillText("PAUSED",180,320))}renderConfirmDialog(t){if(!this.renderer)return;const e=this.renderer.getContext();if(!e)return;this.renderGameplay(t),e.fillStyle="rgba(0, 0, 0, 0.8)",e.fillRect(0,0,360,640);const i=280,s=160,o=(360-i)/2,n=(640-s)/2;e.fillStyle="#1a1a1a",e.fillRect(o,n,i,s),e.strokeStyle="#b600f9",e.lineWidth=3,e.shadowColor="#b600f9",e.shadowBlur=10,e.strokeRect(o,n,i,s),e.shadowBlur=0,e.fillStyle="#b600f9",x.setFont(e,"primary",18,"bold"),e.textAlign="center",e.fillText("RETURN TO MENU?",180,n+40),e.fillStyle="#ffffff",x.setFont(e,"primary",12),e.fillText("Your progress will be lost.",180,n+70),e.fillText("Are you sure?",180,n+90);const l=n+120;e.fillStyle="#00f0ff",e.shadowColor="#00f0ff",e.shadowBlur=8,x.setFont(e,"primary",14,"bold"),e.fillText("[Y] YES",130,l),e.fillStyle="#00ff99",e.shadowColor="#00ff99",e.shadowBlur=8,e.fillText("[N] NO",230,l),e.shadowBlur=0,e.fillStyle="#888888",x.setFont(e,"primary",10),e.fillText("Press Y to confirm, N or ESC to cancel",180,n+145)}renderGameOver(t){if(!this.renderer)return;const e=this.renderer.getContext();if(!e)return;this.renderer.drawBackground(),e.strokeStyle="#330000",e.lineWidth=1,e.globalAlpha=.3;for(let n=0;n<=360;n+=30)e.beginPath(),e.moveTo(n,0),e.lineTo(n,640),e.stroke();for(let n=0;n<=640;n+=30)e.beginPath(),e.moveTo(0,n),e.lineTo(360,n),e.stroke();e.globalAlpha=1,e.save(),e.shadowColor="#b600f9",e.shadowBlur=25,e.fillStyle="#b600f9",x.setFont(e,"display",28,"bold"),e.textAlign="center",e.fillText("GAME OVER",180,200),e.restore(),e.fillStyle="#ff6666",x.setFont(e,"primary",14),e.textAlign="center",e.fillText("CIRCUIT BREAKER MALFUNCTION",180,230);const i=t.getStateData();e.fillStyle="#ffffff",x.setFont(e,"primary",16),e.fillText(`FINAL SCORE: ${i.score}`,180,280),e.fillText(`LEVEL REACHED: ${i.currentLevel}`,180,310);const s=Date.now(),o=.5+.5*Math.sin(s/400);e.save(),e.globalAlpha=o,e.shadowColor="#00ff99",e.shadowBlur=10,e.fillStyle="#00ff99",x.setFont(e,"primary",12,"bold"),e.fillText("CLICK OR PRESS SPACE TO RETURN TO MENU",180,400),e.restore(),e.fillStyle="#666666",x.setFont(e,"primary",10),e.fillText("SYSTEM: Preparing for circuit restart...",180,480)}pause(){this.isPaused=!0,console.log("⏸️ Game loop paused")}resume(){this.isPaused=!1,console.log("▶️ Game loop resumed")}stop(){this.isRunning=!1,this.animationId!==null&&(cancelAnimationFrame(this.animationId),this.animationId=null),console.log("⏹️ Game loop stopped")}isGameLoopRunning(){return this.isRunning}isGameLoopPaused(){return this.isPaused}getFPS(){return 1e3/this.timestep}}class f{static setEnabled(t){this.isEnabled=t}static log(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] ${t}`;console.log(s,...e),this.addToLogs(s)}static warn(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] WARNING: ${t}`;console.warn(s,...e),this.addToLogs(s)}static error(t,...e){if(!this.isEnabled)return;const s=`[${new Date().toISOString()}] ERROR: ${t}`;console.error(s,...e),this.addToLogs(s)}static addToLogs(t){this.logs.push(t),this.logs.length>this.maxLogs&&this.logs.shift()}static getLogs(){return[...this.logs]}static clearLogs(){this.logs=[]}static measurePerformance(t,e){if(!this.isEnabled)return e();const i=performance.now(),s=e(),o=performance.now();return this.log(`Performance [${t}]: ${(o-i).toFixed(2)}ms`),s}static createTimer(t){const e=performance.now();return()=>{const i=performance.now();this.log(`Timer [${t}]: ${(i-e).toFixed(2)}ms`)}}static assert(t,e){if(this.isEnabled&&!t)throw this.error(`Assertion failed: ${e}`),new Error(`Assertion failed: ${e}`)}static getMemoryInfo(){return this.isEnabled?{logsCount:this.logs.length,timestamp:new Date().toISOString()}:{}}static exportDebugInfo(){return{enabled:this.isEnabled,logs:this.getLogs(),memory:this.getMemoryInfo()}}}r(f,"isEnabled",!0),r(f,"logs",[]),r(f,"maxLogs",100);const L=class L{constructor(){r(this,"atlasImage",null);r(this,"atlasData",null);r(this,"isLoaded",!1);r(this,"offscreenCanvases",new Map)}static getInstance(){return L.instance||(L.instance=new L),L.instance}load(){return S(this,null,function*(){var t;try{const e=yield fetch("./assets/sprites/atlas_01.json");if(!e.ok)throw new Error(`Failed to load atlas JSON: ${e.status}`);this.atlasData=yield e.json(),this.atlasImage=new Image,this.atlasImage.src="./assets/sprites/atlas_01.png",yield new Promise((i,s)=>{this.atlasImage.onload=()=>i(),this.atlasImage.onerror=s}),this.isLoaded=!0,f.log("🎨 Sprite atlas loaded successfully with",Object.keys(((t=this.atlasData)==null?void 0:t.frames)||{}).length,"sprites")}catch(e){f.log("❌ Failed to load sprite atlas:",e),this.isLoaded=!1}})}getFrame(t){return this.atlasData&&this.atlasData.frames[t]||null}drawSprite(t,e,i,s,o=1){if(!this.isLoaded||!this.atlasImage||!this.atlasData)return!1;const n=this.getFrame(e);return n?(t.drawImage(this.atlasImage,n.x,n.y,n.w,n.h,i,s,n.w*o,n.h*o),!0):(f.log(`⚠️ Sprite not found: ${e}`),!1)}getSpriteCanvas(t,e=1){const i=`${t}_${e}`;if(this.offscreenCanvases.has(i))return this.offscreenCanvases.get(i);if(!this.isLoaded||!this.atlasImage||!this.atlasData)return null;const s=this.getFrame(t);if(!s)return null;const o=document.createElement("canvas");o.width=s.w*e,o.height=s.h*e;const n=o.getContext("2d");return n?(n.drawImage(this.atlasImage,s.x,s.y,s.w,s.h,0,0,s.w*e,s.h*e),this.offscreenCanvases.set(i,o),o):null}getSpriteNames(){return this.atlasData?Object.keys(this.atlasData.frames):[]}isAtlasLoaded(){return this.isLoaded}getAtlasDimensions(){return this.atlasData?{width:this.atlasData.meta.size.w,height:this.atlasData.meta.size.h}:null}clearCache(){this.offscreenCanvases.clear()}};r(L,"instance");let N=L;const D=N.getInstance();class W{constructor(){r(this,"canvas",null);r(this,"ctx",null);r(this,"width",800);r(this,"height",600);r(this,"backgroundSprite",null);r(this,"spritesLoaded",!1);f.log("🎨 Renderer initialized"),this.loadSprites()}loadSprites(){return S(this,null,function*(){try{this.backgroundSprite=new Image,this.backgroundSprite.src="./assets/sprites/playfield_background_02.png";const t=D.load(),e=[new Promise((o,n)=>{this.backgroundSprite.onload=()=>o("background"),this.backgroundSprite.onerror=l=>n({sprite:"background",error:l})}),t.then(()=>"atlas").catch(o=>Promise.reject({sprite:"atlas",error:o}))],i=yield Promise.allSettled(e);let s=0;i.forEach((o,n)=>{if(o.status==="fulfilled")s++,f.log(`✅ ${o.value} loaded successfully`);else{const{sprite:l,error:a}=o.reason;f.log(`❌ Failed to load ${l}:`,a)}}),this.spritesLoaded=s>0,s===2?f.log("🎨 All sprites and atlas loaded successfully"):s===1?f.log("⚠️ Some sprites loaded, game will use fallbacks where needed"):f.log("❌ No sprites loaded, game will use fallbacks")}catch(t){f.log("❌ Sprite loading system failed:",t),this.spritesLoaded=!1}})}init(t){if(this.canvas=t,this.ctx=t.getContext("2d"),!this.ctx)throw new Error("Failed to get 2D context from canvas");this.width=t.width,this.height=t.height,f.log(`Renderer initialized with canvas: ${this.width}x${this.height}`)}clear(){this.ctx&&this.ctx.clearRect(0,0,this.width,this.height)}drawBackground(){this.ctx&&(this.backgroundSprite&&this.spritesLoaded?this.ctx.drawImage(this.backgroundSprite,0,0,360,640):(this.ctx.fillStyle="#1a1a1a",this.ctx.fillRect(0,0,360,640)))}render(){this.ctx}drawTiltingBar(t){if(!this.ctx)return;const e=t.getEndpoints();this.ctx.save(),this.ctx.shadowColor=t.glowColor,this.ctx.shadowBlur=20,this.ctx.lineWidth=t.thickness+4,this.ctx.strokeStyle=t.glowColor,this.ctx.globalAlpha=.3,this.ctx.beginPath(),this.ctx.moveTo(e.start.x,e.start.y),this.ctx.lineTo(e.end.x,e.end.y),this.ctx.stroke(),this.ctx.shadowBlur=0,this.ctx.globalAlpha=1,this.ctx.lineWidth=t.thickness,this.ctx.strokeStyle=t.color,this.ctx.beginPath(),this.ctx.moveTo(e.start.x,e.start.y),this.ctx.lineTo(e.end.x,e.end.y),this.ctx.stroke(),this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.restore()}drawObstacle(t){if(!this.ctx)return;this.ctx.save();const e=t.position.x+t.size.x/2,i=t.position.y+t.size.y/2;switch(t.type){case"electrical_hazard":this.ctx.shadowColor="#b600f9",this.ctx.shadowBlur=t.isActive?15:5,this.ctx.fillStyle=t.isActive?"#b600f9":"#660066",this.ctx.strokeStyle="#d466ff",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y),t.isActive&&this.drawElectricalSparks(e,i,t.size.x),this.ctx.fillStyle="#00ff99",this.ctx.font="12px monospace",this.ctx.textAlign="center",this.ctx.fillText("⚡",e,i+4);break;case"barrier":this.ctx.shadowColor="#00f0ff",this.ctx.shadowBlur=10,this.ctx.fillStyle="#006677",this.ctx.strokeStyle="#00f0ff",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y);break;case"hole":this.ctx.shadowColor="#b600f9",this.ctx.shadowBlur=8,this.ctx.fillStyle="#220000",this.ctx.strokeStyle="#b600f9",this.ctx.lineWidth=2,this.ctx.fillRect(t.position.x,t.position.y,t.size.x,t.size.y),this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y);break;default:this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2,this.ctx.strokeRect(t.position.x,t.position.y,t.size.x,t.size.y);break}this.ctx.restore()}drawElectricalSparks(t,e,i){if(this.ctx){this.ctx.save(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=1,this.ctx.globalAlpha=.8;for(let s=0;s<5;s++){const o=Math.random()*Math.PI*2,n=Math.random()*i*.5,l=t+Math.cos(o)*5,a=e+Math.sin(o)*5,c=l+Math.cos(o)*n,u=a+Math.sin(o)*n;this.ctx.beginPath(),this.ctx.moveTo(l,a),this.ctx.lineTo(c,u),this.ctx.stroke()}this.ctx.restore()}}drawTargetPort(t){if(!this.ctx)return;this.ctx.save();const e=t.position.x,i=t.position.y;this.ctx.shadowColor=t.color,this.ctx.shadowBlur=20,this.ctx.fillStyle=t.color,this.ctx.globalAlpha=.3,this.ctx.beginPath(),this.ctx.arc(e,i,t.radius+10,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1,this.ctx.shadowBlur=0,this.ctx.fillStyle=t.isCompleted?"#333333":t.color,this.ctx.beginPath(),this.ctx.arc(e,i,t.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle=t.isCompleted?"#666666":t.color,this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.arc(e,i,t.radius,0,Math.PI*2),this.ctx.stroke(),this.ctx.fillStyle="#ffffff",this.ctx.font="16px monospace",this.ctx.textAlign="center",this.ctx.fillText(t.isCompleted?"✓":"○",e,i+6),this.ctx.restore()}drawHole(t,e=!1){if(!this.ctx)return;this.ctx.save();const i=t.position.x,s=t.position.y,o=t.isGoal,n=o?"#ff6600":"#00ff99",l=o?"#441100":"#004400",a=o?"#220000":"#002200";this.ctx.strokeStyle=n,this.ctx.lineWidth=3,this.ctx.globalAlpha=.5,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius+5,0,Math.PI*2),this.ctx.stroke(),this.ctx.globalAlpha=1,e?(this.ctx.shadowColor=n,this.ctx.shadowBlur=15,this.ctx.fillStyle=a,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius-2,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle=a,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius/2,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle=n,this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius-2,0,Math.PI*2),this.ctx.stroke(),this.ctx.fillStyle=n,this.ctx.font="12px monospace",this.ctx.textAlign="center",this.ctx.fillText("✓",i,s+4)):(this.ctx.shadowColor=n,this.ctx.shadowBlur=o?15:10,this.ctx.fillStyle=n,this.ctx.globalAlpha=o?.8:.6,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius-2,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1,this.ctx.fillStyle=l,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius/2,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle=n,this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(i,s,t.radius-2,0,Math.PI*2),this.ctx.stroke(),this.ctx.fillStyle="#ffffff",this.ctx.font="10px monospace",this.ctx.textAlign="center",this.ctx.fillText(o?"🎯":"●",i,s+3)),this.ctx.restore()}drawDangerZone(t){if(!this.ctx)return;this.ctx.save();const e=t.position.x+t.width/2,i=t.position.y+t.height/2;this.ctx.shadowColor="#b600f9",this.ctx.shadowBlur=20,this.ctx.fillStyle="#220000",this.ctx.globalAlpha=.7,this.ctx.fillRect(t.position.x,t.position.y,t.width,t.height),this.ctx.globalAlpha=1,this.ctx.strokeStyle="#b600f9",this.ctx.lineWidth=3,this.ctx.strokeRect(t.position.x,t.position.y,t.width,t.height),this.ctx.fillStyle="#000000",this.ctx.font="20px monospace",this.ctx.textAlign="center",this.ctx.fillText("⚠",e,i+8),this.ctx.restore()}drawChromeBall(t,e){if(!this.ctx)return;this.ctx.save();const i=t.position.x,s=t.position.y,o=t.radius,n=(e==null?void 0:e.scale)||1,l=(e==null?void 0:e.opacity)||1;if(this.ctx.globalAlpha=l,this.spritesLoaded&&D.isAtlasLoaded()){const a=o*2*n;this.ctx.fillStyle="rgba(0, 0, 0, 0.3)",this.ctx.beginPath(),this.ctx.arc(i+o*n*.1,s+o*n*.1,o*n,0,Math.PI*2),this.ctx.fill();const c="ball_normal";D.drawSprite(this.ctx,c,i-a/2,s-a/2,a/16)}else{const a=o*n,c=this.ctx.createRadialGradient(i-a*.3,s-a*.3,0,i,s,a);c.addColorStop(0,"#ffffff"),c.addColorStop(.1,"#e6e6e6"),c.addColorStop(.3,"#cccccc"),c.addColorStop(.6,"#999999"),c.addColorStop(.8,"#666666"),c.addColorStop(1,"#333333"),this.ctx.fillStyle="rgba(0, 0, 0, 0.3)",this.ctx.beginPath(),this.ctx.arc(i+a*.1,s+a*.1,a,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle=c,this.ctx.beginPath(),this.ctx.arc(i,s,a,0,Math.PI*2),this.ctx.fill();const u=this.ctx.createRadialGradient(i-a*.4,s-a*.4,0,i-a*.2,s-a*.2,a*.6);u.addColorStop(0,"rgba(255, 255, 255, 0.9)"),u.addColorStop(.3,"rgba(255, 255, 255, 0.3)"),u.addColorStop(1,"rgba(255, 255, 255, 0)"),this.ctx.fillStyle=u,this.ctx.beginPath(),this.ctx.arc(i-a*.2,s-a*.2,a*.6,0,Math.PI*2),this.ctx.fill();const d=this.ctx.createRadialGradient(i-a*.3,s-a*.3,0,i-a*.3,s-a*.3,a*.4);d.addColorStop(0,"rgba(255, 255, 255, 1)"),d.addColorStop(.5,"rgba(255, 255, 255, 0.8)"),d.addColorStop(1,"rgba(255, 255, 255, 0)"),this.ctx.fillStyle=d,this.ctx.beginPath(),this.ctx.arc(i-a*.3,s-a*.3,a*.4,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle="rgba(255, 255, 255, 0.9)",this.ctx.beginPath(),this.ctx.arc(i-a*.4,s-a*.4,a*.15,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle="rgba(255, 255, 255, 1)",this.ctx.beginPath(),this.ctx.arc(i-a*.35,s-a*.35,a*.08,0,Math.PI*2),this.ctx.fill();const g=this.ctx.createRadialGradient(i+a*.3,s+a*.2,0,i+a*.3,s+a*.2,a*.5);g.addColorStop(0,"rgba(0, 255, 255, 0.2)"),g.addColorStop(.3,"rgba(255, 0, 102, 0.1)"),g.addColorStop(1,"rgba(0, 0, 0, 0)"),this.ctx.fillStyle=g,this.ctx.beginPath(),this.ctx.arc(i+a*.3,s+a*.2,a*.5,0,Math.PI*2),this.ctx.fill()}this.ctx.restore()}drawAtlasSprite(t,e,i,s=1,o=!0){if(!this.ctx||!D.isAtlasLoaded())return!1;const n=D.getFrame(t);if(!n)return!1;const l=o?e-n.w*s/2:e,a=o?i-n.h*s/2:i;return D.drawSprite(this.ctx,t,l,a,s)}drawFlipper(t,e){if(!this.ctx)return;const i=e?"flipper_left_down":"flipper_right_down";this.drawAtlasSprite(i,t.position.x,t.position.y,2)}drawBumper(t,e=!1){if(!this.ctx)return;const i=e?"round_bumper_active":"round_bumper_idle";this.drawAtlasSprite(i,t.position.x,t.position.y,1.5)}drawSpinner(t,e=1){if(!this.ctx)return;const s=`spinner_${Math.max(1,Math.min(4,e))}`;this.drawAtlasSprite(s,t.position.x,t.position.y,2)}getContext(){return this.ctx}getDimensions(){return{width:this.width,height:this.height}}resize(t,e){this.canvas&&(this.width=t,this.height=e,this.canvas.width=t,this.canvas.height=e,f.log(`Renderer resized to: ${t}x${e}`))}}class Q{constructor(){r(this,"gravity",{x:0,y:400});r(this,"airResistance",.999);r(this,"objects",[]);r(this,"constraints",[]);r(this,"spatialGrid",new Map);r(this,"gridSize",60);r(this,"tiltingBar",null);r(this,"bounds",{width:360,height:640});r(this,"deltaTime",1/60);r(this,"debug",!1);r(this,"collisionManifolds",[]);r(this,"audioCallback",null);r(this,"audioTimeouts",new Map);r(this,"AUDIO_COOLDOWN_MS",150);f.log("⚡ Advanced PhysicsEngine initialized with Verlet integration")}setTiltingBar(t){this.tiltingBar=t}setAudioCallback(t){this.audioCallback=t}playAudioWithCooldown(t,e,i){if(!this.audioCallback)return;const s=Date.now(),o=`${i}_${e}`,n=this.audioTimeouts.get(o)||0;s-n>=this.AUDIO_COOLDOWN_MS&&(this.audioCallback(t,e),this.audioTimeouts.set(o,s))}createObject(t){const e=t.mass||1;return{id:t.id,position:{x:t.x,y:t.y},previousPosition:{x:t.x,y:t.y},acceleration:{x:0,y:0},velocity:{x:0,y:0},radius:t.radius,mass:e,inverseMass:t.isStatic?0:1/e,restitution:t.restitution||.7,friction:t.friction||.3,isStatic:t.isStatic||!1,constraints:[],x:t.x,y:t.y,vx:0,vy:0}}addObject(t){var e,i;t.previousPosition||(t.previousPosition={x:((e=t.position)==null?void 0:e.x)||t.x||0,y:((i=t.position)==null?void 0:i.y)||t.y||0}),t.acceleration||(t.acceleration={x:0,y:0}),t.velocity||(t.velocity={x:0,y:0}),t.inverseMass||(t.inverseMass=t.isStatic?0:1/(t.mass||1)),t.constraints||(t.constraints=[]),this.objects.push(t),this.updateSpatialGrid(),f.log(`Added physics object: ${t.id}`)}removeObject(t){this.objects=this.objects.filter(e=>e.id!==t),this.updateSpatialGrid(),f.log(`Removed physics object: ${t}`)}addConstraint(t){this.constraints.push(t),f.log(`Added constraint: ${t.type}`)}update(t){const e=Math.min(t,.03333333333333333);this.simulateStep(e),this.updateBackwardCompatibility()}simulateStep(t){this.collisionManifolds=[];for(const e of this.objects)e.isRollingOnBar=!1;this.objects.length>0&&this.updateSpatialGrid(),this.integratePositions(t),this.solveConstraints(),this.detectAndResolveCollisions(),this.handleTiltingBarCollisions(),this.handleBoundaryCollisions(),this.updateVelocities(t)}integratePositions(t){for(const e of this.objects){if(e.isStatic)continue;const i=e.position.x-e.previousPosition.x,s=e.position.y-e.previousPosition.y;e.previousPosition.x=e.position.x,e.previousPosition.y=e.position.y,e.position.x+=i*this.airResistance+this.gravity.x*t*t,e.position.y+=s*this.airResistance+this.gravity.y*t*t}}updateVelocities(t){for(const e of this.objects)e.isStatic||(e.velocity.x=(e.position.x-e.previousPosition.x)/t,e.velocity.y=(e.position.y-e.previousPosition.y)/t)}solveConstraints(){for(const t of this.constraints)this.solveConstraint(t)}solveConstraint(t){switch(t.type){case"distance":this.solveDistanceConstraint(t);break;case"position":this.solvePositionConstraint(t);break;case"angle":this.solveAngleConstraint(t);break}}solveDistanceConstraint(t){if(!t.objectB||!t.targetDistance)return;const e=t.objectA,i=t.objectB,s=i.position.x-e.position.x,o=i.position.y-e.position.y,n=Math.sqrt(s*s+o*o);if(n===0)return;const a=(t.targetDistance-n)/n/2,c=s*a*t.stiffness,u=o*a*t.stiffness;e.isStatic||(e.position.x-=c*e.inverseMass,e.position.y-=u*e.inverseMass),i.isStatic||(i.position.x+=c*i.inverseMass,i.position.y+=u*i.inverseMass)}solvePositionConstraint(t){if(!t.targetPosition)return;const e=t.objectA;if(e.isStatic)return;const i=t.targetPosition.x-e.position.x,s=t.targetPosition.y-e.position.y;e.position.x+=i*t.stiffness,e.position.y+=s*t.stiffness}solveAngleConstraint(t){}detectAndResolveCollisions(){if(!(this.objects.length<2))for(let t=0;t<this.objects.length;t++){const e=this.objects[t];if(!e.isStatic)for(let i=t+1;i<this.objects.length;i++){const s=this.objects[i],o=s.position.x-e.position.x,n=s.position.y-e.position.y,l=e.radius+s.radius+5;if(o*o+n*n<l*l){const a=this.detectCollision(e,s);a&&(this.collisionManifolds.push(a),this.resolveCollisionSimple(a))}}}}detectCollision(t,e){const i=e.position.x-t.position.x,s=e.position.y-t.position.y,o=Math.sqrt(i*i+s*s),n=t.radius+e.radius;if(o<n){const l=n-o,a=o>0?{x:i/o,y:s/o}:{x:1,y:0};return{objectA:t,objectB:e,normal:a,penetration:l,contactPoint:{x:t.position.x+a.x*t.radius,y:t.position.y+a.y*t.radius}}}return null}resolveCollision(t){const e=t.objectA,i=t.objectB,s=t.penetration/(e.inverseMass+i.inverseMass)*.8;e.position.x-=t.normal.x*s*e.inverseMass,e.position.y-=t.normal.y*s*e.inverseMass,i.position.x+=t.normal.x*s*i.inverseMass,i.position.y+=t.normal.y*s*i.inverseMass;const o={x:i.velocity.x-e.velocity.x,y:i.velocity.y-e.velocity.y},n=o.x*t.normal.x+o.y*t.normal.y;if(n>0)return;const a=-(1+Math.min(e.restitution,i.restitution))*n/(e.inverseMass+i.inverseMass),c={x:a*t.normal.x,y:a*t.normal.y};e.isStatic||(e.previousPosition.x-=c.x*e.inverseMass,e.previousPosition.y-=c.y*e.inverseMass),i.isStatic||(i.previousPosition.x+=c.x*i.inverseMass,i.previousPosition.y+=c.y*i.inverseMass)}resolveCollisionSimple(t){const e=t.objectA,i=t.objectB,s=t.normal.x*t.penetration*.5,o=t.normal.y*t.penetration*.5;e.isStatic||(e.position.x-=s,e.position.y-=o),i.isStatic||(i.position.x+=s,i.position.y+=o);const n={x:i.velocity.x-e.velocity.x,y:i.velocity.y-e.velocity.y},l=n.x*t.normal.x+n.y*t.normal.y;if(l>0)return;const a=Math.min(e.restitution,i.restitution)*.8,c=l*a;e.isStatic||(e.previousPosition.x+=t.normal.x*c*.5,e.previousPosition.y+=t.normal.y*c*.5),i.isStatic||(i.previousPosition.x-=t.normal.x*c*.5,i.previousPosition.y-=t.normal.y*c*.5)}handleTiltingBarCollisions(){if(this.tiltingBar)for(const t of this.objects){if(t.isStatic)continue;const e=this.tiltingBar.getEndpoints(),i=this.getClosestPointOnLineSegment(t.position,e.start,e.end),s=Math.sqrt(b(t.position.x-i.x,2)+b(t.position.y-i.y,2)),n=(this.tiltingBar.thickness||12)/2,l=t.radius+n;if(s<l){const a={x:e.end.x-e.start.x,y:e.end.y-e.start.y},c=Math.sqrt(a.x*a.x+a.y*a.y),u={x:a.x/c,y:a.y/c},d={x:-a.y/c,y:a.x/c};d.y>0&&(d.x=-d.x,d.y=-d.y);const g={x:i.x+d.x*n,y:i.y+d.y*n};t.position.x=g.x+d.x*t.radius,t.position.y=g.y+d.y*t.radius;const p={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y},R=p.x*d.x+p.y*d.y,T=p.x*u.x+p.y*u.y;if(R<-.5){const G=t.restitution*.8,O=this.tiltingBar.friction||.3,m={x:p.x-2*R*d.x,y:p.y-2*R*d.y};m.x*=G*(1-O),m.y*=G,t.previousPosition.x=t.position.x-m.x,t.previousPosition.y=t.position.y-m.y;const P=Math.sqrt(p.x*p.x+p.y*p.y);this.playAudioWithCooldown(P,"bounce",t.id)}else this.applyRollingPhysics(t,u,d,T,this.deltaTime)}}}applyRollingPhysics(t,e,i,s,o){const n=this.gravity.x*e.x+this.gravity.y*e.y,l=this.tiltingBar.friction||.05,a=.01;let c=n;if(Math.abs(s)>.5){const g=-Math.sign(s)*a*Math.abs(this.gravity.y);c+=g}if(Math.abs(s)>.5){const g=-Math.sign(s)*l*Math.abs(this.gravity.y);c+=g}const u=s+c*o,d={x:u*e.x,y:u*e.y};t.previousPosition.x=t.position.x-d.x,t.previousPosition.y=t.position.y-d.y,t.velocity.x=d.x,t.velocity.y=d.y,t.isRollingOnBar=!0}isBallOnBar(t){const e=this.objects.find(a=>a.id===t);if(!e||!this.tiltingBar)return!1;const i=this.tiltingBar.getEndpoints(),s=this.getClosestPointOnLineSegment(e.position,i.start,i.end),o=Math.sqrt(b(e.position.x-s.x,2)+b(e.position.y-s.y,2)),n=this.tiltingBar.thickness||12,l=e.radius+n/2;return o<=l+2}handleBoundaryCollisions(){for(const t of this.objects)if(!t.isStatic){if(t.position.y+t.radius>this.bounds.height){t.position.y=this.bounds.height-t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};e.y>0&&(t.previousPosition.y=t.position.y+e.y*t.restitution,t.previousPosition.x=t.position.x-e.x*.8)}if(t.position.x-t.radius<0){t.position.x=t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};e.x<0&&(t.previousPosition.x=t.position.x+e.x*t.restitution)}if(t.position.x+t.radius>this.bounds.width){t.position.x=this.bounds.width-t.radius;const e={x:t.position.x-t.previousPosition.x,y:t.position.y-t.previousPosition.y};e.x>0&&(t.previousPosition.x=t.position.x+e.x*t.restitution)}}}updateBackwardCompatibility(){for(const t of this.objects)t.x=t.position.x,t.y=t.position.y,t.vx=t.velocity.x,t.vy=t.velocity.y}updateSpatialGrid(){if(!(this.objects.length<=3)){this.spatialGrid.clear();for(const t of this.objects){const e=this.getObjectCells(t);for(const i of e)this.spatialGrid.has(i)||this.spatialGrid.set(i,{objects:[]}),this.spatialGrid.get(i).objects.push(t)}}}getObjectCells(t){const e=[],i=t.radius,s=Math.floor((t.position.x-i)/this.gridSize),o=Math.floor((t.position.x+i)/this.gridSize),n=Math.floor((t.position.y-i)/this.gridSize),l=Math.floor((t.position.y+i)/this.gridSize);for(let a=s;a<=o;a++)for(let c=n;c<=l;c++)e.push(`${a},${c}`);return e}getNearbyObjects(t){const e=[],i=this.getObjectCells(t);for(const s of i){const o=this.spatialGrid.get(s);if(o)for(const n of o.objects)n.id!==t.id&&!e.includes(n)&&e.push(n)}return e}getClosestPointOnLineSegment(t,e,i){const s=i.x-e.x,o=i.y-e.y,n=Math.sqrt(s*s+o*o);if(n===0)return e;const l=Math.max(0,Math.min(1,((t.x-e.x)*s+(t.y-e.y)*o)/(n*n)));return{x:e.x+l*s,y:e.y+l*o}}getObjects(){return this.objects}setGravity(t,e){this.gravity.x=t,this.gravity.y=e,f.log(`Gravity set to: (${t}, ${e})`)}setAirResistance(t){this.airResistance=Math.max(0,Math.min(1,t)),f.log(`Air resistance set to: ${this.airResistance}`)}setBounds(t,e){this.bounds.width=t,this.bounds.height=e,f.log(`Physics bounds set to: ${t}x${e}`)}setDebug(t){this.debug=t}getDebug(){return this.debug}getCollisionManifolds(){return this.collisionManifolds}getConstraints(){return this.constraints}getFriction(){return .98}getBounceEnergy(){return .7}getGravity(){return this.gravity.y}setFriction(t){f.log("Legacy friction setting ignored - use per-object friction instead")}setBounceEnergy(t){f.log("Legacy bounce energy setting ignored - use per-object restitution instead")}}class tt{constructor(t){r(this,"position");r(this,"rotation",0);r(this,"targetRotation",0);r(this,"leftSideHeight",590);r(this,"rightSideHeight",590);r(this,"minSideHeight",50);r(this,"maxSideHeight",590);r(this,"sideSpeed",100);r(this,"width");r(this,"height");r(this,"maxRotation");r(this,"rotationSpeed");r(this,"friction");r(this,"color","#00f0ff");r(this,"glowColor","#b600f9");r(this,"thickness",12);this.position=M({},t.position),this.width=t.width,this.height=t.height,this.maxRotation=t.maxRotation,this.rotationSpeed=t.rotationSpeed,this.friction=t.friction}setTargetRotation(t){this.targetRotation=Math.max(-this.maxRotation,Math.min(this.maxRotation,t))}moveLeftSide(t){t!==0&&(this.leftSideHeight-=t*this.sideSpeed*(1/60),this.leftSideHeight=Math.max(this.minSideHeight,Math.min(this.maxSideHeight,this.leftSideHeight)))}moveRightSide(t){t!==0&&(this.rightSideHeight-=t*this.sideSpeed*(1/60),this.rightSideHeight=Math.max(this.minSideHeight,Math.min(this.maxSideHeight,this.rightSideHeight)))}getTiltPercentage(){return this.rotation/this.maxRotation}update(t){const e=this.rightSideHeight-this.leftSideHeight,i=this.maxSideHeight-this.minSideHeight;this.rotation=e/i*this.maxRotation,this.targetRotation=this.rotation}getEndpoints(){const t=this.width/2;return{start:{x:this.position.x-t,y:this.leftSideHeight},end:{x:this.position.x+t,y:this.rightSideHeight}}}getNormal(){const t=this.getEndpoints(),e=t.end.x-t.start.x,i=t.end.y-t.start.y,s=Math.sqrt(e*e+i*i);return s===0?{x:0,y:-1}:{x:-i/s,y:e/s}}isPointNearBar(t,e){const i=this.getEndpoints(),s=this.distanceToLineSegment(t,i.start,i.end),o=e+this.thickness/2+2;return s<=o}distanceToLineSegment(t,e,i){const s=i.x-e.x,o=i.y-e.y,n=Math.sqrt(s*s+o*o);if(n===0)return Math.sqrt(b(t.x-e.x,2)+b(t.y-e.y,2));const l=Math.max(0,Math.min(1,((t.x-e.x)*s+(t.y-e.y)*o)/(n*n))),a={x:e.x+l*s,y:e.y+l*o};return Math.sqrt(b(t.x-a.x,2)+b(t.y-a.y,2))}getCollisionResponse(t,e,i){const s=this.getEndpoints(),o=this.getNormal(),n=this.distanceToLineSegment(t,s.start,s.end),l=i+this.thickness/2-n,a={x:t.x+o.x*l,y:t.y+o.y*l},c=e.x*o.x+e.y*o.y;let u=e;if(c<0){const d={x:e.x-2*c*o.x,y:e.y-2*c*o.y},g=1-this.friction,p=.8;u={x:d.x*g*p,y:d.y*p}}return{velocity:u,position:a}}reset(){this.leftSideHeight=this.maxSideHeight,this.rightSideHeight=this.maxSideHeight,this.rotation=0,this.targetRotation=0,console.log("🔄 Tilting bar reset to starting position")}}class et{constructor(){r(this,"inputState",{keys:{},mouse:{x:0,y:0,isDown:!1,button:-1},tiltInput:0});r(this,"previousKeys",{});r(this,"canvas",null);r(this,"keyBindings",{leftSideUp:["KeyA"],leftSideDown:["KeyZ"],rightSideUp:["ArrowUp"],rightSideDown:["ArrowDown"],start:["Space"],reset:["KeyR"],pause:["KeyP","Escape"]});r(this,"previousMouseState",!1);this.setupEventListeners()}init(t){this.canvas=t,this.setupCanvasListeners()}getInputState(){return M({},this.inputState)}getTiltInput(){return this.inputState.tiltInput}getLeftSideInput(){let t=0;return this.isActionPressed("leftSideUp")&&(t=1),this.isActionPressed("leftSideDown")&&(t=-1),t}getRightSideInput(){let t=0;return this.isActionPressed("rightSideUp")&&(t=1),this.isActionPressed("rightSideDown")&&(t=-1),t}isActionPressed(t){return this.keyBindings[t].some(e=>this.inputState.keys[e])}isActionJustPressed(t){const e=this.keyBindings[t].some(i=>this.inputState.keys[i]&&!this.previousKeys[i]);return t==="start"&&e&&console.log("🔑 Start key (SPACE) just pressed!"),e}isKeyJustPressed(t){return this.inputState.keys[t]&&!this.previousKeys[t]}isMouseJustPressed(){return this.inputState.mouse.isDown&&!this.previousMouseState}update(){let t=0,e=0;this.isActionPressed("leftSideUp")&&(t=1),this.isActionPressed("leftSideDown")&&(t=-1),this.isActionPressed("rightSideUp")&&(e=1),this.isActionPressed("rightSideDown")&&(e=-1);const i=(e-t)*.5;if(this.canvas&&this.inputState.mouse.isDown){const s=this.canvas.getBoundingClientRect(),o=s.width/2,l=(this.inputState.mouse.x-s.left-o)/o;this.inputState.tiltInput=Math.max(-1,Math.min(1,l))}else this.inputState.tiltInput=Math.max(-1,Math.min(1,i))}endFrame(){this.previousKeys=M({},this.inputState.keys),this.previousMouseState=this.inputState.mouse.isDown}setupEventListeners(){document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this)),document.addEventListener("keydown",t=>{Object.values(this.keyBindings).flat().includes(t.code)&&t.preventDefault()})}setupCanvasListeners(){this.canvas&&(this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("mouseleave",this.handleMouseLeave.bind(this)),this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)))}handleKeyDown(t){this.inputState.keys[t.code]=!0}handleKeyUp(t){this.inputState.keys[t.code]=!1}handleMouseDown(t){this.inputState.mouse.isDown=!0,this.inputState.mouse.button=t.button,this.updateMousePosition(t)}handleMouseUp(t){this.inputState.mouse.isDown=!1,this.inputState.mouse.button=-1}handleMouseMove(t){this.updateMousePosition(t)}handleMouseLeave(){this.inputState.mouse.isDown=!1,this.inputState.mouse.button=-1}handleTouchStart(t){t.preventDefault(),t.touches.length>0&&(this.inputState.mouse.isDown=!0,this.updateTouchPosition(t.touches[0]))}handleTouchEnd(t){t.preventDefault(),this.inputState.mouse.isDown=!1}handleTouchMove(t){t.preventDefault(),t.touches.length>0&&this.updateTouchPosition(t.touches[0])}updateMousePosition(t){this.inputState.mouse.x=t.clientX,this.inputState.mouse.y=t.clientY}updateTouchPosition(t){this.inputState.mouse.x=t.clientX,this.inputState.mouse.y=t.clientY}dispose(){document.removeEventListener("keydown",this.handleKeyDown.bind(this)),document.removeEventListener("keyup",this.handleKeyUp.bind(this)),this.canvas&&(this.canvas.removeEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.removeEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.removeEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.removeEventListener("mouseleave",this.handleMouseLeave.bind(this)),this.canvas.removeEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.removeEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.removeEventListener("touchmove",this.handleTouchMove.bind(this)))}}class it{constructor(t){r(this,"levelData");r(this,"isCompleted",!1);r(this,"startTime",0);r(this,"elapsedTime",0);r(this,"completedGoals",new Set);this.levelData=t,console.log(`📋 Level ${t.id} loaded: ${t.name} (${t.goalHoles.length} goals)`)}start(){this.startTime=Date.now(),this.elapsedTime=0,this.isCompleted=!1,console.log(`🏁 Level ${this.levelData.id} started`)}update(t){this.elapsedTime+=t,this.levelData.holes.forEach(e=>{e.isGoal,e.isActive=!0})}checkHoleCollision(t,e){for(const i of this.levelData.holes){if(!i.isActive||i.isGoal&&this.completedGoals.has(i.id))continue;const s=t.x-i.position.x,o=t.y-i.position.y;if(Math.sqrt(s*s+o*o)<=i.radius)return console.log(`🕳️ Ball fell into hole: ${i.id}`),i}return null}checkGoalReached(t,e){for(const i of this.levelData.goalHoles){if(this.completedGoals.has(i.id))continue;const s=t.x-i.position.x,o=t.y-i.position.y;if(Math.sqrt(s*s+o*o)<=i.radius)return console.log(`🎯 Ball reached goal hole: ${i.id}`),this.completedGoals.add(i.id),!0}return!1}checkBallFallOff(t,e){return t.y>e.y+50}checkLevelComplete(){return!this.isCompleted&&this.completedGoals.size>=this.levelData.requiredGoals?(this.markComplete(),!0):this.isCompleted}getCompletedGoals(){return this.completedGoals.size}getRequiredGoals(){return this.levelData.requiredGoals}areAllGoalsCompleted(){return this.completedGoals.size>=this.levelData.requiredGoals}isGoalCompleted(t){return this.completedGoals.has(t)}markComplete(){this.isCompleted||(this.isCompleted=!0,console.log(`🏆 Level ${this.levelData.id} completed!`))}calculateScore(){const e=Math.max(0,(6e4-this.elapsedTime)/100);return Math.floor((1e3+e)*this.levelData.bonusMultiplier)}getProgress(){return this.isCompleted?1:0}getLevelData(){return this.levelData}reset(){this.isCompleted=!1,this.startTime=0,this.elapsedTime=0,this.completedGoals.clear(),this.levelData.holes.forEach(t=>{t.isActive=!0}),console.log(`🔄 Level ${this.levelData.id} reset`)}}class st{constructor(){r(this,"levels",new Map);r(this,"currentLevel",null);r(this,"unlockedLevels",new Set([1]));console.log("📚 LevelManager initialized"),this.loadLevels()}generateHoles(t){const e=[],d=[],g=t+1;for(let m=0;m<g;m++){let P=0,A=!1;for(;!A&&P<100;){const I=50+Math.random()*260,E=50+Math.random()*100;A=!0;for(const k of d){const C=I-k.position.x,B=E-k.position.y;if(Math.sqrt(C*C+B*B)<14*3+8){A=!1;break}}A&&d.push({id:`goal-${t}-${m}`,position:{x:I,y:E},radius:14,isGoal:!0,isActive:!0}),P++}}e.push(...d);const p=10,T=(580-(50+100))/p,G=.05+(t-1)*.01,O=.3+(t-1)*.08;for(let m=0;m<p;m++){const P=580-(m+1)*T,A=G+m/p*O,I=Math.floor(A*12);for(let E=0;E<I;E++){let k=0,C=!1;for(;!C&&k<50;){const B=14+Math.random()*332,$=P+Math.random()*T;C=!0;for(const _ of e){const U=B-_.position.x,j=$-_.position.y;if(Math.sqrt(U*U+j*j)<14*2+8){C=!1;break}}C&&e.push({id:`hole-${t}-${m}-${E}`,position:{x:B,y:$},radius:14,isGoal:!1,isActive:!0}),k++}}}return console.log(`🕳️ Generated ${e.length} holes for level ${t} (sparse at bottom, dense at top)`),{holes:e,goalHoles:d}}loadLevels(){for(let t=1;t<=5;t++){const{holes:e,goalHoles:i}=this.generateHoles(t),s={id:t,name:`Circuit Level ${t}`,description:`Navigate through the holes to reach the goal circuit. Difficulty: ${t}/5`,holes:e,goalHoles:i,ballStartPosition:{x:343,y:584},difficulty:t,bonusMultiplier:1+(t-1)*.2,requiredGoals:i.length};this.levels.set(t,s)}console.log(`📚 Loaded ${this.levels.size} levels`)}loadLevel(t){const e=this.levels.get(t);return e?this.isLevelUnlocked(t)?(this.currentLevel=new it(e),this.currentLevel):(console.warn(`🔒 Level ${t} is locked`),null):(console.warn(`⚠️ Level ${t} not found`),null)}isLevelUnlocked(t){return this.unlockedLevels.has(t)}unlockLevel(t){this.unlockedLevels.has(t)||(this.unlockedLevels.add(t),console.log(`🔓 Level ${t} unlocked`))}getCurrentLevel(){return this.currentLevel}getAvailableLevels(){return Array.from(this.levels.keys())}getUnlockedLevels(){return Array.from(this.unlockedLevels)}getLevelData(t){return this.levels.get(t)||null}}class ot{constructor(){r(this,"audioContext",null);r(this,"masterGain",null);r(this,"sfxGain",null);r(this,"musicGain",null);r(this,"config",{masterVolume:.7,sfxVolume:.8,musicVolume:.4,enabled:!0});r(this,"soundEffects",new Map);r(this,"loadedSounds",new Map);r(this,"currentMusic",null);r(this,"isInitialized",!1);console.log("🔊 AudioManager initialized")}init(){return S(this,null,function*(){if(!this.isInitialized)try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterGain=this.audioContext.createGain(),this.sfxGain=this.audioContext.createGain(),this.musicGain=this.audioContext.createGain(),this.sfxGain.connect(this.masterGain),this.musicGain.connect(this.masterGain),this.masterGain.connect(this.audioContext.destination),this.masterGain.gain.value=this.config.masterVolume,this.sfxGain.gain.value=this.config.sfxVolume,this.musicGain.gain.value=this.config.musicVolume,yield this.createProceduralSounds(),this.isInitialized=!0,console.log("✅ Audio system initialized")}catch(t){console.error("❌ Failed to initialize audio system:",t),this.config.enabled=!1}})}createProceduralSounds(){return S(this,null,function*(){if(!this.audioContext)return;const t=this.createBounceSound();this.soundEffects.set("bounce",{id:"bounce",buffer:t,volume:.6,loop:!1,pitch:1});const e=this.createRollingSound();this.soundEffects.set("roll",{id:"roll",buffer:e,volume:.3,loop:!0,pitch:1});const i=this.createElectricalZap();this.soundEffects.set("zap",{id:"zap",buffer:i,volume:.7,loop:!1,pitch:1});const s=this.createTargetSound();this.soundEffects.set("target",{id:"target",buffer:s,volume:.8,loop:!1,pitch:1});const o=this.createLevelCompleteSound();this.soundEffects.set("level_complete",{id:"level_complete",buffer:o,volume:.9,loop:!1,pitch:1});const n=this.createUIClickSound();this.soundEffects.set("ui_click",{id:"ui_click",buffer:n,volume:.5,loop:!1,pitch:1}),console.log(`🎵 Created ${this.soundEffects.size} procedural sound effects`)})}createBounceSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.2,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const l=n/t,a=Math.exp(-l*8),c=Math.sin(2*Math.PI*800*l)*.5,u=Math.sin(2*Math.PI*1600*l)*.3,d=Math.sin(2*Math.PI*2400*l)*.2,g=(Math.random()-.5)*.1;o[n]=(c+u+d+g)*a}return s}createRollingSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const l=n/t,a=Math.sin(2*Math.PI*60*l)*.3,c=Math.sin(2*Math.PI*200*l)*.1,u=(Math.random()-.5)*.2;o[n]=a+c+u}return s}createElectricalZap(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.3,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const l=n/t,a=Math.exp(-l*6),c=Math.sin(2*Math.PI*1200*l)*.4,u=Math.sin(2*Math.PI*3e3*l)*.3,d=(Math.random()-.5)*.5;o[n]=(c+u+d)*a}return s}createTargetSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.5,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const l=n/t,a=Math.exp(-l*4),c=Math.sin(2*Math.PI*523*l)*.5,u=Math.sin(2*Math.PI*659*l)*.3,d=Math.sin(2*Math.PI*784*l)*.2;o[n]=(c+u+d)*a}return s}createLevelCompleteSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0),n=[523,659,784,1047],l=i/n.length;for(let a=0;a<i;a++){const c=Math.floor(a/l),u=a%l/t,d=Math.exp(-u*2),g=n[c]||n[n.length-1],p=Math.sin(2*Math.PI*g*u)*d*.5;o[a]=p}return s}createUIClickSound(){if(!this.audioContext)return null;const t=this.audioContext.sampleRate,i=t*.1,s=this.audioContext.createBuffer(1,i,t),o=s.getChannelData(0);for(let n=0;n<i;n++){const l=n/t,a=Math.exp(-l*20),c=Math.sin(2*Math.PI*1e3*l)*a*.3;o[n]=c}return s}playSound(t,e=1,i=1){if(!this.config.enabled||!this.audioContext||!this.isInitialized)return;const s=this.soundEffects.get(t);if(!s||!s.buffer){console.warn(`🔇 Sound not found: ${t}`);return}try{const o=this.audioContext.createBufferSource(),n=this.audioContext.createGain();o.buffer=s.buffer,o.loop=s.loop,o.playbackRate.value=i,n.gain.value=s.volume*e,o.connect(n),n.connect(this.sfxGain),o.start(),s.loop||o.addEventListener("ended",()=>{o.disconnect(),n.disconnect()})}catch(o){console.error(`❌ Error playing sound ${t}:`,o)}}playBounceSound(t){const e=Math.min(t/500,1),i=.3+e*.7,s=.8+e*.4;this.playSound("bounce",i,s)}playRollingSound(){this.playSound("roll",.5)}stopAllSounds(){if(this.audioContext)try{this.currentMusic&&(this.currentMusic.stop(),this.currentMusic=null),console.log("🔇 All sounds stopped")}catch(t){console.error("❌ Error stopping sounds:",t)}}setMasterVolume(t){this.config.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&(this.masterGain.gain.value=this.config.masterVolume)}setSFXVolume(t){this.config.sfxVolume=Math.max(0,Math.min(1,t)),this.sfxGain&&(this.sfxGain.gain.value=this.config.sfxVolume)}setMusicVolume(t){this.config.musicVolume=Math.max(0,Math.min(1,t)),this.musicGain&&(this.musicGain.gain.value=this.config.musicVolume)}setEnabled(t){this.config.enabled=t,t||this.stopAllSounds()}getConfig(){return M({},this.config)}resumeContext(){return S(this,null,function*(){this.audioContext&&this.audioContext.state==="suspended"&&(yield this.audioContext.resume(),console.log("🔊 Audio context resumed"))})}isAvailable(){return this.isInitialized&&this.config.enabled}}class nt{constructor(){r(this,"gameState");r(this,"gameLoop");r(this,"renderer");r(this,"physicsEngine");r(this,"inputManager");r(this,"tiltingBar");r(this,"levelManager");r(this,"audioManager");r(this,"currentLevel",null);r(this,"isRunning",!1);r(this,"levelCompletionHandled",!1);r(this,"isAnimatingHoleFall",!1);r(this,"holeAnimationState",null);this.gameState=new J,this.gameLoop=new Z,this.renderer=new W,this.physicsEngine=new Q,this.inputManager=new et,this.levelManager=new st,this.audioManager=new ot,this.tiltingBar=new tt({position:{x:180,y:590},width:360,height:8,maxRotation:Math.PI/4,rotationSpeed:3,friction:.05}),console.log("🎮 Circuit Breaker - Game initialized")}init(){return S(this,null,function*(){try{console.log("🎮 Initializing Circuit Breaker...");const t=document.getElementById("game-canvas");if(!t)throw new Error("Canvas element not found");this.renderer.init(t),yield x.preloadFonts(),this.physicsEngine.setGravity(0,520),this.physicsEngine.setAirResistance(.999),this.physicsEngine.setBounds(360,640),this.physicsEngine.setTiltingBar(this.tiltingBar),this.physicsEngine.setAudioCallback((n,l)=>{this.gameState.isPlaying()&&l==="bounce"&&this.audioManager.playBounceSound(n)}),this.inputManager.init(t),yield this.audioManager.init();const e=14,i=-50,s=300,o=this.physicsEngine.createObject({id:"game-ball",x:i,y:s,radius:e,mass:6,restitution:.65,friction:.18,isStatic:!1});this.physicsEngine.addObject(o),this.physicsEngine.setDebug(this.gameState.isDebugMode()),this.currentLevel=this.levelManager.loadLevel(1),this.currentLevel&&(this.currentLevel.start(),this.levelCompletionHandled=!1,console.log("🎯 Level 1 loaded and started")),this.isRunning=!0,console.log("✅ Circuit Breaker initialized successfully")}catch(t){throw console.error("❌ Failed to initialize Circuit Breaker:",t),t}})}start(){if(!this.isRunning){console.warn("⚠️ Game not initialized. Call init() first.");return}console.log("▶️ Starting Circuit Breaker..."),this.gameState.setState(y.MENU),this.gameLoop.start(this.gameState,this.renderer,this.physicsEngine,this)}update(t){if(this.inputManager.update(),this.gameState.isState(y.MENU)&&((this.inputManager.isActionJustPressed("start")||this.inputManager.isMouseJustPressed())&&(console.log("🎮 Starting new game..."),this.startNewGame(),this.audioManager.resumeContext(),this.audioManager.playSound("ui_click")),this.inputManager.isKeyJustPressed("KeyD")&&(this.gameState.toggleDebugMode(),this.physicsEngine.setDebug(this.gameState.isDebugMode()),this.audioManager.playSound("ui_click"))),this.gameState.isState(y.GAME_OVER)&&(this.inputManager.isActionJustPressed("start")||this.inputManager.isMouseJustPressed())&&(console.log("🏠 Returning to menu..."),this.gameState.reset(),this.audioManager.playSound("ui_click")),this.gameState.isConfirmingMenu()&&(this.inputManager.isKeyJustPressed("KeyY")||this.inputManager.isKeyJustPressed("Enter")?(console.log("✅ Confirmed - returning to menu"),this.gameState.reset(),this.audioManager.playSound("ui_click")):(this.inputManager.isKeyJustPressed("KeyN")||this.inputManager.isKeyJustPressed("Escape"))&&(console.log("❌ Cancelled - returning to game"),this.gameState.setState(y.PLAYING),this.audioManager.playSound("ui_click"))),this.gameState.isPlaying()){if(this.inputManager.isActionJustPressed("pause")){console.log("⏸️ Escape pressed - showing confirmation dialog"),this.gameState.setState(y.CONFIRM_MENU),this.audioManager.playSound("ui_click");return}this.isAnimatingHoleFall&&this.updateHoleAnimation(t),this.inputManager.isActionJustPressed("start")&&(console.log("🎯 SPACE pressed - placing ball on bar"),this.placeBallOnBar(),this.audioManager.resumeContext(),this.audioManager.playSound("ui_click"));const e=this.inputManager.getLeftSideInput(),i=this.inputManager.getRightSideInput();this.tiltingBar.moveLeftSide(e),this.tiltingBar.moveRightSide(i),this.tiltingBar.update(t/1e3),this.currentLevel&&(this.currentLevel.update(t),this.isAnimatingHoleFall||(this.checkCollisions(),this.checkWinLoseConditions()))}this.inputManager.endFrame()}placeBallOnBar(){const t=this.physicsEngine.getObjects().find(e=>e.id==="game-ball");if(t){const e=t.radius,i=360-e-5,s=this.tiltingBar.rightSideHeight,o=this.tiltingBar.thickness,n=s-o/2,l=n-10-e;console.log("🏀 Precise ball placement:"),console.log(`   Ball radius: ${e}`),console.log(`   Bar right side Y: ${s}`),console.log(`   Bar thickness: ${o}`),console.log(`   Bar top surface: ${n}`),console.log(`   Ball center Y: ${l}`),console.log(`   Ball bottom Y: ${l+e} (should be ${n-10})`),console.log(`   Gap between ball and bar: ${l+e-n} pixels`),t.position.x=i,t.position.y=l,t.previousPosition.x=t.position.x,t.previousPosition.y=t.position.y,t.velocity.x=0,t.velocity.y=0,t.x=t.position.x,t.y=t.position.y,t.vx=0,t.vy=0,console.log(`✅ Ball placed at (${t.position.x}, ${t.position.y})`)}else console.error("❌ Ball not found in physics engine!")}renderGameplay(){if(this.renderer.drawTiltingBar(this.tiltingBar),this.currentLevel){const t=this.currentLevel.getLevelData();t.holes.forEach(i=>{const s=i.isGoal&&this.currentLevel?this.currentLevel.isGoalCompleted(i.id):!1;this.renderer.drawHole(i,s)});const e=this.renderer.getContext();if(e&&(e.fillStyle="#00f0ff",x.setFont(e,"primary",12),e.textAlign="left",e.fillText(`Level: ${t.id} - ${t.name}`,10,20),e.fillText(`Score: ${this.gameState.getStateData().score}`,10,35),e.fillText(`Lives: ${this.gameState.getStateData().lives}`,10,50),this.gameState.isDebugMode())){e.fillText(`Progress: ${Math.round(this.currentLevel.getProgress()*100)}%`,10,65);const i=this.currentLevel.getCompletedGoals(),s=this.currentLevel.getRequiredGoals();e.fillText(`Goals: ${i}/${s} completed`,10,80),i<s?e.fillText("Goal: Navigate to the glowing goal holes",10,95):e.fillText("Goal: All goals completed! Level complete!",10,95)}}if(this.gameState.isDebugMode()){const t=this.renderer.getContext();t&&(t.fillStyle="#00f0ff",x.setFont(t,"primary",10),t.textAlign="center",t.fillText("SPACE: Start | Left: A(up)/Z(down) | Right: ↑(up)/↓(down)",180,580),t.fillText("Navigate upward to the goal holes - avoid falling into other holes!",180,595))}}getHoleAnimationState(){return this.holeAnimationState?{scale:this.holeAnimationState.scale,opacity:this.holeAnimationState.opacity}:null}getIsAnimatingHoleFall(){return this.isAnimatingHoleFall}checkCollisions(){if(!this.currentLevel)return;const t=this.physicsEngine.getObjects().find(o=>o.id==="game-ball");if(!t)return;const e={x:t.position.x,y:t.position.y},i=t.radius;if(this.currentLevel.checkGoalReached(e,i)){this.handleGoalReached();return}const s=this.currentLevel.checkHoleCollision(e,i);s&&!s.isGoal&&this.handleHoleCollision(s),this.currentLevel.checkBallFallOff(e,{x:360,y:640})&&this.handleBallFallOff()}checkWinLoseConditions(){this.currentLevel&&this.currentLevel.checkLevelComplete()&&!this.levelCompletionHandled&&(this.levelCompletionHandled=!0,this.handleLevelComplete())}handleGoalReached(){if(!this.currentLevel)return;console.log("🎯 Goal reached!"),this.audioManager.playSound("target");const t=this.gameState.getStateData().score;this.gameState.updateStateData({score:t+500}),console.log("💰 Goal bonus: 500 points");const e=this.currentLevel.getCompletedGoals(),i=this.currentLevel.getRequiredGoals();console.log(`🎯 Goals completed: ${e}/${i}`),this.currentLevel.areAllGoalsCompleted()?console.log("🎉 All goals completed! Level complete!"):(console.log(`🔄 Continue playing! ${i-e} goal(s) remaining`),this.tiltingBar.reset(),this.placeBallOnBar())}handleHoleCollision(t){console.log(`🕳️ Ball fell into hole: ${t.id}`),this.audioManager.playSound("zap"),this.startHoleAnimation("game-ball",t.position)}handleBallFallOff(){console.log("💀 Ball fell off screen!");const t=this.gameState.getStateData().lives;t>1?(this.gameState.updateStateData({lives:t-1}),console.log(`💔 Lives remaining: ${t-1}`),this.tiltingBar.reset(),this.placeBallOnBar()):this.handleGameOver()}handleLevelComplete(){if(!this.currentLevel)return;console.log("🏆 Level completed!"),this.audioManager.playSound("level_complete");const t=this.currentLevel.calculateScore(),e=this.gameState.getStateData().score;this.gameState.updateStateData({score:e+t}),console.log(`🎉 Level bonus: ${t}`);const i=this.currentLevel.getLevelData().id+1;this.levelManager.unlockLevel(i),this.levelManager.getLevelData(i)?this.loadNextLevel(i):this.handleGameComplete()}handleTimeUp(){console.log("⏰ Time up!"),this.handleBallFallOff()}loadNextLevel(t){console.log(`🔄 Loading level ${t}...`),this.currentLevel=this.levelManager.loadLevel(t),this.currentLevel&&(this.currentLevel.start(),this.gameState.updateStateData({currentLevel:t}),this.levelCompletionHandled=!1,this.tiltingBar.reset(),this.placeBallOnBar(),console.log(`🎯 Level ${t} loaded and started`))}handleGameOver(){console.log("💀 Game Over!"),this.gameState.setState(y.GAME_OVER),this.audioManager.playSound("game_over"),setTimeout(()=>{this.gameState.isState(y.GAME_OVER)&&(console.log("🏠 Auto-returning to menu..."),this.gameState.reset())},5e3)}handleGameComplete(){console.log("🎊 Game completed! All levels finished!"),setTimeout(()=>{console.log("🏠 Returning to main menu..."),this.gameState.reset()},2e3)}pause(){console.log("⏸️ Pausing Circuit Breaker..."),this.gameLoop.pause()}resume(){console.log("▶️ Resuming Circuit Breaker..."),this.gameLoop.resume()}stop(){console.log("⏹️ Stopping Circuit Breaker..."),this.gameLoop.stop(),this.isRunning=!1}getGameState(){return this.gameState}isGameRunning(){return this.isRunning&&this.gameLoop.isGameLoopRunning()}startNewGame(){console.log("🎮 Starting new game..."),this.gameState.setState(y.PLAYING),this.gameState.updateStateData({currentLevel:1,score:0,lives:3}),this.currentLevel=this.levelManager.loadLevel(1),this.currentLevel&&(this.currentLevel.start(),this.levelCompletionHandled=!1,console.log("🎯 Level 1 loaded and started")),this.tiltingBar.reset(),this.placeBallOnBar(),console.log("🚀 New game started successfully!")}updateHoleAnimation(t){if(!this.holeAnimationState)return;const e=Date.now()-this.holeAnimationState.startTime,i=Math.min(e/this.holeAnimationState.duration,1),s=1-Math.pow(1-i,3);this.holeAnimationState.scale=1-s*.9,this.holeAnimationState.opacity=1-s*.7;const o=this.physicsEngine.getObjects().find(n=>{var l;return n.id===((l=this.holeAnimationState)==null?void 0:l.ballId)});if(o){const n=this.holeAnimationState.startPosition,l=this.holeAnimationState.holePosition;if(i<.3){const a=i/.3;o.position.x=n.x+(l.x-n.x)*a,o.position.y=n.y+(l.y-n.y)*a}else{const a=(i-.3)/.7;o.position.x=l.x,o.position.y=l.y+a*200}o.previousPosition.x=o.position.x,o.previousPosition.y=o.position.y,o.velocity.x=0,o.velocity.y=0}i>=1&&this.completeHoleAnimation()}startHoleAnimation(t,e){const i=this.physicsEngine.getObjects().find(s=>s.id===t);i&&(console.log(`🎬 Starting hole animation for ball: ${t}`),this.isAnimatingHoleFall=!0,this.holeAnimationState={ballId:t,holePosition:e,startTime:Date.now(),duration:500,startPosition:{x:i.position.x,y:i.position.y},scale:1,opacity:1})}completeHoleAnimation(){console.log("🎬 Hole animation complete"),this.isAnimatingHoleFall=!1,this.holeAnimationState=null,this.handleBallFallOff()}}let v=null,Y=null;function K(){return S(this,null,function*(){try{console.log("🚀 Circuit Breaker - Loading...");const h=document.getElementById("game-container");if(!h)throw new Error("Game container not found");h.innerHTML="";const t=document.createElement("canvas");t.id="game-canvas",t.width=360,t.height=640,h.appendChild(t),Y=new W,Y.init(t),v=new nt,yield v.init(),v.start(),console.log("✅ Circuit Breaker loaded successfully")}catch(h){console.error("❌ Failed to load Circuit Breaker:",h),at("Failed to load game. Please refresh the page.")}})}function at(h){const t=document.getElementById("game-container");t&&(t.innerHTML=`
      <div style="text-align: center; color: #b600f9;">
        <h1>Circuit Breaker</h1>
        <p>Error: ${h}</p>
        <p>Please refresh the page to try again.</p>
      </div>
    `)}function lt(){console.log("📱 Window resized")}function rt(){document.hidden?(console.log("👁️ Page hidden - pausing game"),v==null||v.pause()):(console.log("👁️ Page visible - resuming game"),v==null||v.resume())}function ct(){console.log("👋 Page unloading - stopping game"),v==null||v.stop()}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",K):K();window.addEventListener("resize",lt);document.addEventListener("visibilitychange",rt);window.addEventListener("beforeunload",ct);
//# sourceMappingURL=index-d0cd8e79.js.map
